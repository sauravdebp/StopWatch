<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Pdf.WP</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Pdf.Barcode.PdfBarcode">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCodabarBarcode.
            PdfCodabarBarcode codaBarcode = new PdfCodabarBarcode();
            //Sets the barcode text.
            codaBarcode.Text = "0123";
            //Draws a barcode on the new Page.
            codaBarcode.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("PdfBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCodabarBarcode.
            Dim codaBarcode As PdfCodabarBarcode = New PdfCodabarBarcode()
            'Sets the barcode text.
            codaBarcode.Text = "0123"
            'Draws a barcode on the new Page.
            codaBarcode.Draw(page, new PointF(25, 500))
            'Save document to disk.
            document.Save("PdfBarcode.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcode.m_bounds">
            <summary>
            Indicates the region of the barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcode.m_backColor">
            <summary>
            Indicates the backColor of the barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcode.m_barColor">
            <summary>
            Indicates the barcolor of the barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcode.m_textColor">
            <summary>
            Indicates the textcolor of the barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcode.m_narrowBarWidth">
            <summary>
            Indicates the narrow bar width.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcode.m_wideBarWidth">
            <summary>
            Indicates the wide bar width.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcode.m_location">
            <summary>
            Indicates the location on where to draw the barcode in the PDF Document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcode.m_text">
            <summary>
            Indicates the data string which is to be encoded.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcode.m_quietZones">
            <summary>
            Indicates the free area around the barcode label.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcode.m_width">
            <summary>
            Indicates the actual width of the barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcode.m_height">
            <summary>
            Indicates the actual height of the barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcode.m_barHeight">
            <summary>
            Indicates the bar height of the barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcode.m_extendedText">
            <summary>
            Indicates the extended text;
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfBarcode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfBarcode"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCodabarBarcode.
            PdfCodabarBarcode codaBarcode = new PdfCodabarBarcode();
            //Sets the barcode text.
            codaBarcode.Text = "0123";
            //Draws a barcode on the new Page.
            codaBarcode.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("PdfBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCodabarBarcode.
            Dim codaBarcode As PdfCodabarBarcode = New PdfCodabarBarcode()
            'Sets the barcode text.
            codaBarcode.Text = "0123"
            'Draws a barcode on the new Page.
            codaBarcode.Draw(page, new PointF(25, 500))
            'Save document to disk.
            document.Save("PdfBarcode.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfBarcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfBarcode"/> class.
            </summary>
            <param name="text">Set the barcode text.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCodabarBarcode.
            PdfCodabarBarcode codaBarcode = new PdfCodabarBarcode("0123");
            //Draws a barcode on the new Page.
            codaBarcode.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("PdfBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCodabarBarcode.
            Dim codaBarcode As PdfCodabarBarcode = New PdfCodabarBarcode("0123")
            'Draws a barcode on the new Page.
            codaBarcode.Draw(page, new PointF(25, 500))
            'Save document to disk.
            document.Save("PdfBarcode.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfBarcode.Validate(System.String)">
            <summary>
            Internal method which validates whether the given text is acceptable by the current barcode
            specification or not.
            </summary>
            <param name="data">The Text.</param>
            <returns>True if Valid, Otherwise False</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfBarcode.GetSize">
            <summary>
            Internal method which calculates the size of the barcode which is going to rendered.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfBarcode.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcode.BackColor">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Sets the barcode back color.
            code93.BackColor = new PdfColor(Color.Green);
            //Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("PdfBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Sets the barcode back color.
            code93.BackColor = new PdfColor(Color.Green)
            'Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save document to disk.
            document.Save("PdfBarcode.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcode.BarColor">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Sets the barcode color.
            code93.BarColor = new PdfColor(Color.Green);
            //Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("PdfBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Sets the barcode color.
            code93.BarColor = new PdfColor(Color.Green)
            'Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save document to disk.
            document.Save("PdfBarcode.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcode.TextColor">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Sets the barcode text color.
            code93.TextColor = new PdfColor(Color.Green);
            //Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("PdfBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Sets the barcode text color.
            code93.TextColor = new PdfColor(Color.Green)
            'Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the document to disk.
            document.Save("PdfBarcode.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcode.NarrowBarWidth">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Sets the barcode narrow width.
            code93.NarrowBarWidth =1f;
            //Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("PdfBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Sets the barcode narrow width.
            code93.NarrowBarWidth = 1f
            'Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save document to disk.
            document.Save("PdfBarcode.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcode.Text">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode();
            //Sets the barcode text.
            code93.Text ="CODE93";
            //Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("PdfBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode()
            'Sets the barcode back color.
            code93.Text ="CODE93"
            'Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save document to disk.
            document.Save("PdfBarcode.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcode.Location">
            <summary>
            Gets or sets the location to render barcode in the PDF Document.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Sets the barcode location.
            code93.Location = new PointF(50, 50);
            //Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("PdfBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code93 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Sets the barcode location.
            code93.Location = new PointF(50, 50)
            'Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save document to disk.
            document.Save("PdfBarcode.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcode.QuietZone">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones();
            quietZones.All = 0f;
            //Sets the barcode quiet zone.
            code93QuietZone = quietZones;
            //Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("PdfBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones()
            quietZones.All = 0f
            'Sets the barcode quiet zone.
            code93QuietZone = quietZones
            'Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save document to disk.
            document.Save("PdfBarcode.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcode.BarHeight">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Sets the barcode height.
            code93.BarHeight = 50f;
            //Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("PdfBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Sets the barcode height.
            code93.BarHeight = 50f
            'Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save document to disk.
            document.Save("PdfBarcode.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcode.Size">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Sets the barcode size
            SizeF size=code93.Size;
            //Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("PdfBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Get the barcode size.
            SizeF size=code93.Size
            'Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save document to disk.
            document.Save("PdfBarcode.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcode.Bounds">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Sets the barcode bounds.
            RectangleF bounds=code39.Bounds;
            //Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("PdfBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Get the barcode bounds.
            RectangleF bounds=code39.Bounds
            'Draws a barcode on the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save document to disk.
            document.Save("PdfBarcode.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcode.ExtendedText">
            <summary>
            Gets or sets the barcode text.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.BarcodeException">
            <summary>
            Represents the general barcode exception class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.BarcodeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.BarcodeException"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.BarcodeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.BarcodeException"/> class.
            </summary>
            <param name="message">User defined error message.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.BarcodeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.BarcodeException"/> class.
            </summary>
            <param name="message">User defined error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.BarcodeSymbolTable">
            <summary>
            Represets the Utility class for storing barcode symbols.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.BarcodeSymbolTable.m_symbol">
            <summary>
            Indicates the symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.BarcodeSymbolTable.m_checkDigit">
            <summary>
            Indicates the check character.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.BarcodeSymbolTable.m_bars">
            <summary>
            Indicates the Data.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.BarcodeSymbolTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.BarcodeSymbolTable"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.BarcodeSymbolTable.#ctor(System.Char,System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.BarcodeSymbolTable"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="checkDigit">The check digit.</param>
            <param name="bars">The bars.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.BarcodeSymbolTable.Symbol">
            <summary>
            Gets or sets the Symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.BarcodeSymbolTable.CheckDigit">
            <summary>
            Gets or sets the check digit.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.BarcodeSymbolTable.Bars">
            <summary>
            Gets or sets the bar information.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfBarcodeQuietZones">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones();
            quietZones.All = 0f;
            //Set the barcode quiet zone.
            code93.QuietZone = quietZones;
            //Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("code93.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones()
            quietZones.All = 0f;
            'Set the barcode quiet zone.
            code93.QuietZone = quietZones
            'Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the document.
            document.Save("code93.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcodeQuietZones.DEF_MARGIN">
            <summary>
            Internal variable to store margin.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcodeQuietZones.m_right">
            <summary>
            Internal variable to store right margin.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcodeQuietZones.m_top">
            <summary>
            Internal variable to store top margin.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcodeQuietZones.m_left">
            <summary>
            Internal variable to store left margin.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcodeQuietZones.m_bottom">
            <summary>
            Internal variable to store bottom margin.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcodeQuietZones.Right">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones();
            quietZones.Right = 0f;
            //Set the barcode quiet zone.
            code93.QuietZone = quietZones;
            //Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("code93.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones()
            quietZones.Right = 0f;
            'Set the barcode quiet zone.
            code93.QuietZone = quietZones
            'Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the document.
            document.Save("code93.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcodeQuietZones.Top">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones();
            quietZones.Top = 0f;
            //Set the barcode quiet zone.
            code93.QuietZone = quietZones;
            //Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("code93.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones()
            quietZones.Top = 0f;
            'Set the barcode quiet zone.
            code93.QuietZone = quietZones
            'Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the document.
            document.Save("code93.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcodeQuietZones.Left">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones();
            quietZones.Left = 0f;
            //Set the barcode quiet zone.
            code93.QuietZone = quietZones;
            //Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("code93.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones()
            quietZones.Left = 0f;
            'Set the barcode quiet zone.
            code93.QuietZone = quietZones
            'Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the document.
            document.Save("code93.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcodeQuietZones.Bottom">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones();
            quietZones.Bottom = 0f;
            //Set the barcode quiet zone.
            code93.QuietZone = quietZones;
            //Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("code93.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones()
            quietZones.Bottom = 0f;
            'Set the barcode quiet zone.
            code93.QuietZone = quietZones
            'Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the document.
            document.Save("code93.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcodeQuietZones.All">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones();
            quietZones.All = 0f;
            //Set the barcode quiet zone.
            code93.QuietZone = quietZones;
            //Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("code93.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones()
            quietZones.All = 0f;
            'Set the barcode quiet zone.
            code93.QuietZone = quietZones
            'Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the document.
            document.Save("code93.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBarcodeQuietZones.IsAll">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones();
            quietZones.All = 0f;
            //Set the barcode quiet zone.
            code93.QuietZone = quietZones;
            bool isAll=code93.QuietZone.IsAll;
            //Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("code93.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Creates a new PdfBarcodeQuietZones.
            PdfBarcodeQuietZones quietZones = new PdfBarcodeQuietZones()
            quietZones.All = 0f
            code39.QuietZone=quietZones
            Dim isAll As bool = code39.QuietZone.IsAll
            'Set the barcode quiet zone.
            code93.QuietZone = quietZones
            'Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the document.
            document.Save("code93.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfBidimensionalBarcode">
            <summary>
            Base class for all two dimensional barcodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBidimensionalBarcode.m_text">
            <summary>
            Holds data of barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBidimensionalBarcode.m_quietZone">
            <summary>
            Holds the quietzone.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBidimensionalBarcode.m_xDimension">
            <summary>
            Holds the dimension of the barcode.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfBidimensionalBarcode.#ctor">
            <summary>
            Initializes two dimensional barcode.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfBidimensionalBarcode.GetData">
            <summary>
            Returns the data as byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBidimensionalBarcode.Text">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBidimensionalBarcode.QuietZone">
            <summary>
            Gets or sets Quietzone for the barcode.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfBidimensionalBarcode.XDimension">
            <summary>
            Gets or sets the dimension for the barcode.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfCodabarBarcode">
             <example>
             <code lang="C#">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = document.Pages.Add();
             //Create font and font style.
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
             //Creates a new PdfCodabarBarcode.
             PdfCodabarBarcode codaBarcode = new PdfCodabarBarcode();
             //Set the font to codabarcode.
             codaBarcode.Font = font;
             //Set the barcode text.
             codaBarcode.Text = "0123";
             //Draw a barcode in the new Page.
             codaBarcode.Draw(page, new PointF(25, 500));
             //Save the document to disk.
             document.Save("CodaBarcode.pdf");
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As PdfDocument = New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = document.Pages.Add()
             'Create font and font style.
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
             'Creates a new PdfCodabarBarcode.
             Dim codaBarcode As PdfCodabarBarcode = New PdfCodabarBarcode()
             'Set the font..
             codaBarcode.Font = font
             'Set the barcode text.
             codaBarcode.Text = "0123"
             'Draw a barcode in the new Page.
             codaBarcode.Draw(page, new PointF(25, 500))
             'Save the  document to disk.
             document.Save("CodaBarcode.pdf")
             </code>
             </example>
            <remarks> This symbology allows the encoding of strings of up to 16 digits, 10 numeric digits (0 through 9) and 
             6 special non alpha characters ("+", "-", "$", "/", ":", "."). 
             </remarks>
             <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode11Barcode"/> Class
             <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode32Barcode"/> Class
             <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128ABarcode"/> Class
             <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128BBarcode"/> Class
             <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128CBarcode"/> Class
             <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39Barcode"/> Class
             <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode"/> Class
             <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93Barcode"/> Class
             <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode">
            <summary>
            Represents the Base class for all the Single dimensional barcodes
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.isCheckDigitAdded">
            <summary>
            Indicates whether the Checkdigit is already added to the barcode text or not.
            Used with the barcodes which involves multiple checksum calculations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.continuous">
            <summary>
            To check whether Barcode is Continuous  Barcode or discrete 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.check">
            <summary>
            Automatically adds the check digit to the barcode when true. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.m_barcodeSymbols">
            <summary>
            Indicates barcode pattern.  <see cref="!:PdfBarcodePattern"/>
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.m_textDisplayLocation">
            <summary>
            Indicates the barcode text display location. <seealso cref="P:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.TextDisplayLocation"/>
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.m_font">
            <summary>
            Indicates the font used to draw the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.m_startSymbol">
            <summary>
            Indicates the start symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.m_stopSymbol">
            <summary>
            Indicates the stop symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.m_validatorExpression">
            <summary>
            Indicates the validation expression which is used to validate the input text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.m_codeValidator">
            <summary>
            Indicates the validation expression.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.m_showCheckDigit">
            <summary>
            Indicates whether to show check digit or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.m_enableCheckDigit">
            <summary>
            Indicates whether to enable / disable the check digits.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.m_intercharacterGap">
            <summary>
            Indicates the intercharcter gap between bars.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.m_barcodeToTextGapHeight">
            <summary>
            Indicates the gap between barcode and the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.m_textAlignment">
            <summary>
            Indicates the text alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.m_encodeStartStopSymbols">
            <summary>
            Indicates whether to encode start and stop symbols or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.#ctor">
            <summary>
            Initializes the new instance of <see cref="T:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.Draw(Syncfusion.Pdf.PdfPageBase,System.Drawing.PointF)">
            <summary>
            Draws the barcode on the <see cref="T:Syncfusion.Pdf.PdfPage"/> at the specified location.
            </summary>
            <param name="page">The pdf page.</param>
            <param name="location">The barcode location.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode11Barcode.
            PdfCode11Barcode code11 = new PdfCode11Barcode();
            //Set the font to code11.
            code11.Font = font;
            //Set the barcode text.
            code11.Text = "012345678";
            //Draw a barcode in the new Page.
            code11.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code11.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode11Barcode.
            Dim code11 As PdfCode11Barcode = New PdfCode11Barcode()
            'Set the font to code11.
            code11.Font = font
            'Set the barcode text.
            code11.Text = "012345678"
            'Draw a barcode in the new Page.
            code11.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code11.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.Validate(System.String)">
            <summary>
            Internal method used to validate the given barcode text.
            </summary>
            <param name="data">The Text.</param>
            <returns>True if valid, Otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.GetSize">
            <summary>
            Returns the size of the barcode.
            </summary>
            <returns>The Size.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.BarcodeWidth">
            <summary>
            Returns the Width of the barcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.CalculateCheckDigit">
            <summary>
            Calculates the check digit based on the barcode specification.
            </summary>
            <returns>Char array containing Check digits</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.GetCharWidth(System.Char)">
            <summary>
            Returns the Character width.
            </summary>
            <param name="c"></param>
            <returns>The width.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.GetTextToEncode">
            <summary>
            Returns the Actual text to encode.
            </summary>
            <returns>The Actual Text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.PaintRectangle(Syncfusion.Pdf.PdfPageBase,System.Drawing.RectangleF)">
            <summary>
            Internal method used to paint bars on the page.
            </summary>
            <param name="page">The Page.</param>
            <param name="barRect">The Rectangle.</param>
            <returns>Returns the right margin.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.GetWidth">
            <summary>
            Returns the width of the barcode.
            </summary>
            <returns>The Width.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.GetHeight">
            <summary>
            Returns the height of the barcode.
            </summary>
            <returns>The Height.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.Font">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Set the barcode font.
            code93.Font = font;
            //Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code93.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code93 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Set the barcode font.
            code93.Font = font
            'Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("code93.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.TextDisplayLocation">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Set the barcode text display location.
            code93.TextDisplayLocation = TextLocation.Bottom;
            //Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code93.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code93 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Set the barcode text display location.
            code93.TextDisplayLocation =  TextLocation.Bottom
            'Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("code93.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.ShowCheckDigit">
            <remarks>The Default value is false.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.EnableCheckDigit">
            <remarks>The Default value is True.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.BarcodeToTextGapHeight">
            <seealso cref="T:Syncfusion.Pdf.Barcode.TextLocation"/>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.TextAlignment">
            <remarks>Default value is Center.</remarks>
            <seealso cref="T:Syncfusion.Pdf.Barcode.TextLocation"/>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.EncodeStartStopSymbols">
            <value>
            <c>true</c> if [encode start stop symbols]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.BarcodeSymbols">
            <summary>
            Gets or sets the barcode symbols.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.StartSymbol">
            <summary>
            Gets or sets the start symbol for the current barcode specification.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.StopSymbol">
            <summary>
            Gets or sets the stop symbol for the current barcode specification.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.ValidatorExpression">
            <summary>
            Gets or sets the validation expression to validate the given text.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode.IntercharacterGap">
            <summary>
            Gets or sets the IntercharacterGap. 
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCodabarBarcode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCodabarBarcode"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCodabarBarcode.
            PdfCodabarBarcode codaBarcode = new PdfCodabarBarcode();
            //Set the font to codabarcode.
            codaBarcode.Font = font;
            //Set the barcode text.
            codaBarcode.Text = "0123";
            //Draw a barcode in the new Page.
            codaBarcode.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("CodaBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCodabarBarcode.
            Dim codaBarcode As PdfCodabarBarcode = New PdfCodabarBarcode()
            'Set the font..
            codaBarcode.Font = font
            'Set the barcode text.
            codaBarcode.Text = "0123"
            'Draw a barcode in the new Page.
            codaBarcode.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("CodaBarcode.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCodabarBarcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCodabarBarcode"/> class.
            </summary>
            <param name="text">The Barcode Text.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCodabarBarcode.
            PdfCodabarBarcode codaBarcode = new PdfCodabarBarcode("0123");
            //Set the font to codabarcode.
            codaBarcode.Font = font;
            //Draw a barcode in the new Page.
            codaBarcode.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("CodaBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCodabarBarcode.
            Dim codaBarcode As PdfCodabarBarcode = New PdfCodabarBarcode("0123")
            'Set the font..
            codaBarcode.Font = font
            'Draw a barcode in the new Page.
            codaBarcode.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("CodaBarcode.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfCode11Barcode">
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create pdfFont and pdfFont style.
            PdfFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode11Barcode.
            PdfCode11Barcode code11 = new PdfCode11Barcode();
            //Set the pdffont to code11 barcode.
            code11.Font = pdfFont;
            //Set the barcode text.
            code11.Text = "012345678";
            //Draw a barcode in the new Page.
            code11.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code11.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create pdfFont and pdfFont style.
            Dim pdfFont As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode11Barcode.
            Dim code11 As PdfCode11Barcode = New PdfCode11Barcode()
            'Set the pdffont to code11 barcode.
            code11.Font = pdfFont;
            'Set the barcode text.
            code11.Text = "012345678"
            'Draw a barcode in the new Page.
            code11.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code11.pdf")
            </code>
            </example>
            <remarks> Only the following symbols are allowed in a Code 11 barcode: 0 1 2 3 4 5 6 7 8 9 -</remarks>
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCodabarBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode32Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128ABarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128BBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128CBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode11Barcode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode11Barcode"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create pdfFont and pdfFont style.
            PdfFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode11Barcode.
            PdfCode11Barcode code11 = new PdfCode11Barcode();
            //Set the pdffont to code11 barcode.
            code11.Font = pdfFont;
            //Set the barcode text.
            code11.Text = "012345678";
            //Draw a barcode in the new Page.
            code11.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code11.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create pdfFont and pdfFont style.
            Dim pdfFont As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode11Barcode.
            Dim code11 As PdfCode11Barcode = New PdfCode11Barcode()
            'Set the pdffont to code11 barcode.
            code11.Font = pdfFont;
            'Set the barcode text.
            code11.Text = "012345678"
            'Draw a barcode in the new Page.
            code11.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code11.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode11Barcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode11Barcode"/> class.
            </summary>
            <param name="text">The Barcode Text.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create pdfFont and pdfFont style.
            PdfFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode11Barcode.
            PdfCode11Barcode code11 = new PdfCode11Barcode("012345678");
            //Set the pdffont to code11 barcode.
            code11.Font = pdfFont;
            //Draw a barcode in the new Page.
            code11.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code11.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create pdfFont and pdfFont style.
            Dim pdfFont As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode11Barcode.
            Dim code11 As PdfCode11Barcode = New PdfCode11Barcode("012345678")
            'Set the pdffont to code11 barcode.
            code11.Font = pdfFont
            'Draw a barcode in the new Page.
            code11.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code11.pdf")
            </code>
            </example>
            <param name="text">The Barcode Text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode11Barcode.CalculateCheckDigit">
            <summary>
            Calculates the check digit for this barcode specification.
            </summary>
            <returns>The Check digits.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode11Barcode.Initialize">
            <summary>
            Initializes the internal barcode symbol table
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode11Barcode.GetSymbol(System.Int32)">
            <summary>
            Gets the symbol.
            </summary>
            <param name="checkValue">The check value.</param>
            <returns> Symbol</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode11Barcode.GetSymbolRow(System.Int32)">
            <summary>
            Gets the symbol row.
            </summary>
            <param name="checkValue">The check value.</param>
            <returns>barcode symbol table</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfCode128ABarcode">
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode128ABarcode.
            PdfCode128ABarcode code128A = new PdfCode128ABarcode();
            //Set the font to code128A.
            code128A.Font = font;
            //Set the barcode text.
            code128A.Text = "CODE128A";
            //Draw a barcode in the new Page.
            code128A.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code128A.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode128ABarcode.
            Dim code32 As PdfCode128ABarcode = New PdfCode128ABarcode()
            'Set the font to code128A.
            code128A.Font = font
            'Set the barcode text.
            code128A.Text = "Code128A"
            'Draw a barcode in the new Page.
            code128A.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code128A.pdf")
            </code>
            </example>
            <remarks> Only the following symbols are allowed in a Code 128 A barcode: NUL (\x00) SOH (\x01) STX (\x02) ETX (\x03) EOT (\x04) ENQ (\x05) ACK (\x06) BEL (\x07) BS (\x08) HT (\x09) LF (\x0A) VT (\x0B) FF (\x0C) CR (\x0D) SO (\x0E) SI (\x0F) DLE (\x10) DC1 (\x11) DC2 (\x12) DC3 (\x13) DC4 (\x14) NAK (\x15) SYN (\x16) ETB (\x17) CAN (\x18) EM (\x19) SUB (\x1A) ESC (\x1B) FS (\x1C) GS (\x1D) RS (\x1E) US (\x1F) SPACE !  # $ % ' * + , - . 0 1 2 3 4 5 6 7 8 9 : ; ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ]^ _ FNC1 (\xF0) FNC2 (\xF1) FNC3 (\xF2) FNC4  </remarks>
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCodabarBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode32Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode11Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128BBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128CBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128ABarcode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode128ABarcode"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode128ABarcode.
            PdfCode128ABarcode code128A = new PdfCode128ABarcode();
            //Set the font to code128A.
            code128A.Font = font;
            //Set the barcode text.
            code128A.Text = "CODE128A";
            //Draw a barcode in the new Page.
            code128A.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code128A.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode128ABarcode.
            Dim code32 As PdfCode128ABarcode = New PdfCode128ABarcode()
            'Set the font to code128A.
            code128A.Font = font
            'Set the barcode text.
            code128A.Text = "Code128A"
            'Draw a barcode in the new Page.
            code128A.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code128A.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128ABarcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode128ABarcode"/> class.
            </summary>
            <param name="text">The Barcode Text.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode128ABarcode.
            PdfCode128ABarcode code128A = new PdfCode128ABarcode("Code128A");
            //Set the font to code128A.
            code128A.Font = font;
            //Draw a barcode in the new Page.
            code128A.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code128A.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode128ABarcode.
            Dim code32 As PdfCode128ABarcode = New PdfCode128ABarcode("Code128A")
            'Set the font to code128A.
            code128A.Font = font
            'Draw a barcode in the new Page.
            code128A.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code128A.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128ABarcode.CalculateCheckDigit">
            <summary>
            Calculates the check digit for this barcode specification.
            </summary>
            <returns>The Check digits.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128ABarcode.Validate(System.String)">
            <summary>
            Internal method used to validate the given barcode text.
            </summary>
            <param name="data">The Text.</param>
            <returns>True if valid, Otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128ABarcode.Initialize">
            <summary>
            Initializes the internal barcode symbol table
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128ABarcode.GetSymbol(System.Int32)">
            <summary>
            Gets the symbol.
            </summary>
            <param name="checkValue">The check value.</param>
            <returns>symbol</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfCode128BBarcode">
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode128BBarcode.
            PdfCode128BBarcode code128B = new PdfCode128BBarcode();
            //Set the font to code128B.
            code128B.Font = font;
            //Set the barcode text.
            code128B.Text = "CODE128B";
            //Draw a barcode in the new Page.
            code128B.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code128B.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode128BBarcode.
            Dim code32 As PdfCode128BBarcode = New PdfCode128BBarcode()
            'Set the font to code128B.
            code128B.Font = font;
            'Set the barcode text.
            code128B.Text = "Code128B"
            'Draw a barcode in the new Page.
            code128B.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code128B.pdf")
            </code>
            </example>
            <remarks> Only the following symbols are allowed in a Code 128 B barcode:SPACE ! " # $ % ' ( ) * + , - . / 0 12 3 4 5 6 7 8 9 : ; ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ]^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~ DEL (\x7F) FNC1 (\xF0) FNC2 (\xF1) FNC3 (\xF2) FNC4 (\xF3) SHIFT (\xF4). </remarks>
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCodabarBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode32Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode11Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128ABarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128CBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128BBarcode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode128BBarcode"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode128BBarcode.
            PdfCode128BBarcode code128B = new PdfCode128BBarcode();
            //Set the font to code128B.
            code128B.Font = font;
            //Set the barcode text.
            code128B.Text = "CODE128B";
            //Draw a barcode in the new Page.
            code128B.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code128B.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode128BBarcode.
            Dim code32 As PdfCode128BBarcode = New PdfCode128BBarcode()
            'Set the font to code128B.
            code128B.Font = font;
            'Set the barcode text.
            code128B.Text = "Code128B"
            'Draw a barcode in the new Page.
            code128B.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code128B.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128BBarcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode128BBarcode"/> class.
            </summary>
            <param name="text">The Barcode text.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode128BBarcode.
            PdfCode128BBarcode code128B = new PdfCode128BBarcode("Code128B");
            //Set the font to code128B.
            code128B.Font = font;
            //Draw a barcode in the new Page.
            code128B.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code128B.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode128BBarcode.
            Dim code32 As PdfCode128BBarcode = New PdfCode128BBarcode("Code128B")
            'Set the font to code128B.
            code128B.Font = font;
            'Draw a barcode in the new Page.
            code128B.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code128B.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128BBarcode.CalculateCheckDigit">
            <summary>
            Calculates the check digit for this barcode specification.
            </summary>
            <returns>The Check digits.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128BBarcode.Initialize">
            <summary>
            Initializes the internal barcode symbol table
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128BBarcode.GetSymbol(System.Int32)">
            <summary>
            Gets the symbol.
            </summary>
            <param name="checkValue">The check value.</param>
            <returns>symbol</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfCode128CBarcode">
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode128CBarcode.
            PdfCode128CBarcode code128C = new PdfCode128CBarcode();
            //Set the font to code128C.
            code128C.Font = font;
            //Set the barcode text.
            code128C.Text = "Code128C";
            //Draw a barcode in the new Page.
            code128C.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code128C.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode128CBarcode.
            Dim code128C As PdfCode128CBarcode = New PdfCode128CBarcode()
            'Set the font to code128C.
            code128C.Font = font
            'Set the barcode text.
            code128C.Text = "Code128C"
            'Draw a barcode in the new Page.
            code128C.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code128C.pdf")
            </code>
            </example>
            <remarks>Only the following symbols are allowed in a Code 128C barcode: 0 1 2 3 4 5 6 7 8 9 FNC1 (\xF0). Code 128 C encodes only numeric symbols at double density, each pair of digits is encoded using a single symbol.</remarks>
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCodabarBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode32Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode11Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128ABarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128BBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128CBarcode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode128CBarcode"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode128CBarcode.
            PdfCode128CBarcode code128C = new PdfCode128CBarcode();
            //Set the font to code128C.
            code128C.Font = font;
            //Set the barcode text.
            code128C.Text = "Code128C";
            //Draw a barcode in the new Page.
            code128C.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code128C.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode128CBarcode.
            Dim code128C As PdfCode128CBarcode = New PdfCode128CBarcode()
            'Set the font to code128C.
            code128C.Font = font
            'Set the barcode text.
            code128C.Text = "Code128C"
            'Draw a barcode in the new Page.
            code128C.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code128C.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128CBarcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode128CBarcode"/> class.
            </summary>
            <param name="text">The Barcode text.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode128CBarcode.
            PdfCode128CBarcode code128C = new PdfCode128CBarcode("Code128C");
            //Set the font to code128C.
            code128C.Font = font;
            //Draw a barcode in the new Page.
            code128C.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code128C.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode128CBarcode.
            Dim code128C As PdfCode128CBarcode = New PdfCode128CBarcode("Code128C")
            'Set the font to code128C.
            code128C.Font = font
            'Draw a barcode in the new Page.
            code128C.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code128C.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128CBarcode.CalculateCheckDigit">
            <summary>
            Calculates the check digit for this barcode specification.
            </summary>
            <returns>The Check digits.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128CBarcode.Validate(System.String)">
            <summary>
            Internal method used to validate the given barcode text.
            </summary>
            <param name="data">The Text.</param>
            <returns>True if valid, Otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128CBarcode.GetTextToEncode">
            <summary>
            Returns the Actual text to encode.
            </summary>
            <returns>The Actual Text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128CBarcode.GetDataToEncode(System.String)">
            <summary>
            Gets the data to encode.
            </summary>
            <param name="originalData">The original data.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128CBarcode.Initialize">
            <summary>
            Initializes the internal barcode symbol table
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode128CBarcode.GetSymbol(System.Int32)">
            <summary>
            Internal method used for reading a symbol from barcode symbol table.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfCode32Barcode">
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode32Barcode.
            PdfCode32Barcode code32 = new PdfCode32Barcode();
            //Set the font to code32.
            code32.Font = font;
            //Set the barcode text.
            code32.Text = "01234567";
            //Draw a barcode in the new Page.
            code32.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code32.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode32Barcode.
            Dim code32 As PdfCode32Barcode = New PdfCode32Barcode()
            'Set the font to code32.
            code32.Font = font
            'Set the barcode text.
            code32.Text = "01234567"
            'Draw a barcode in the new Page.
            code32.Draw(page, new PointF(25, 500))
            'Save the document to disk.
            document.Save("Code32.pdf")
            </code>
            </example>
            <remarks> Only the following symbols are allowed in a Code 32 barcode: 1 2 3 4 5 6 7 8 9 0. The barcode length is 9 digits (8 user defined digits + 1 check digit).
            Code 32 barcodes are also known as Italian Pharmacode barcodes. 
            </remarks>
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCodabarBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode11Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128ABarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128BBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128CBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfCode39Barcode">
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode39Barcode.
            PdfCode39Barcode code39 = new PdfCode39Barcode();
            //Set the font to code39.
            code32.Font = font;
            //Set the barcode text.
            code39.Text = "CODE39";
            //Draw a barcode in the new Page.
            code39.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code39.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode39Barcode.
            Dim code39 As PdfCode39Barcode = New PdfCode39Barcode()
            'Set the font to code39.
            code39.Font = font
            'Set the barcode text.
            code39.Text = "CODE39"
            'Draw a barcode in the new Page.
            code39.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code39.pdf")
            </code>
            </example> 
            <remarks> Only the following symbols are allowed in a Code 39 barcode:Only the following symbols are allowed in a Code 39 barcode: 1 2 3 4 5 6 7 8 9 0 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z - . $ / + % SPACE
            All alphabetic characters are uppercase. If lowercase characters are required, then a Code 39 Extended barcode must be used.
            </remarks>
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCodabarBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode11Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128ABarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128BBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128CBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode32Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode39Barcode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode39Barcode"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode39Barcode.
            PdfCode39Barcode code39 = new PdfCode39Barcode();
            //Set the font to code39.
            code32.Font = font;
            //Set the barcode text.
            code39.Text = "CODE39";
            //Draw a barcode in the new Page.
            code39.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code39.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode39Barcode.
            Dim code39 As PdfCode39Barcode = New PdfCode39Barcode()
            'Set the font to code39.
            code39.Font = font
            'Set the barcode text.
            code39.Text = "CODE39"
            'Draw a barcode in the new Page.
            code39.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code39.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode39Barcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode39Barcode"/> class.
            </summary>
            <param name="text">The Barcode text.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode39Barcode.
            PdfCode39Barcode code39 = new PdfCode39Barcode("CODE39");
            //Set the font to code39.
            code32.Font = font;
            //Draw a barcode in the new Page.
            code39.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code39.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode39Barcode.
            Dim code39 As PdfCode39Barcode = New PdfCode39Barcode("CODE39")
            'Set the font to code39.
            code39.Font = font
            'Draw a barcode in the new Page.
            code39.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code39.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode39Barcode.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode39Barcode.CalculateCheckDigit">
            <summary>
            Internal method to calculate the check-digit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode39Barcode.GetSymbol(System.Int32)">
            <summary>
            Internal method which retrieves the specified symbol from the symbol table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfCode32Barcode.checkSumSymbols">
            <summary>
            Local variable to store the Checksum character value.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode32Barcode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode32Barcode"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode32Barcode.
            PdfCode32Barcode code32 = new PdfCode32Barcode();
            //Set the font to code32.
            code32.Font = font;
            //Set the barcode text.
            code32.Text = "01234567";
            //Draw a barcode in the new Page.
            code32.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code32.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode32Barcode.
            Dim code32 As PdfCode32Barcode = New PdfCode32Barcode()
            'Set the font to code32.
            code32.Font = font
            'Set the barcode text.
            code32.Text = "01234567"
            'Draw a barcode in the new Page.
            code32.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code32.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode32Barcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode32Barcode"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode32Barcode.
            PdfCode32Barcode code32 = new PdfCode32Barcode("01234567");
            //Set the font to code32.
            code32.Font = font;
            //Draw a barcode in the new Page.
            code32.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code32.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode32Barcode.
            Dim code32 As PdfCode32Barcode = New PdfCode32Barcode("01234567")
            'Set the font to code32.
            code32.Font = font
            'Draw a barcode in the new Page.
            code32.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code32.pdf")
            </code>
            </example>
            <param name="text">The Barcode Text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode32Barcode.CalculateCheckDigit">
            <summary>
            Calculates the check digit for this barcode specification.
            </summary>
            <returns>The Check digits.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode32Barcode.GetBarcodeSymbols">
            <summary>
            Gets the barcode symbols.
            </summary>
            <returns>Encoded data</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode32Barcode.GetDataToEncode(System.String)">
            <summary>
            To get the Actual Encoded Text from from original Text..
            </summary>
            <param name="originalData">The original data.</param>
            <returns>original Data</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode32Barcode.GetTextToEncode">
            <summary>
            Returns the Actual text to encode.
            </summary>
            <returns>The Actual Text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode32Barcode.Initialize">
            <summary>
            Initializes the internal barcode symbol table
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode">
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode39ExtendedBarcode.
            PdfCode39ExtendedBarcode code39Ext = new PdfCode39ExtendedBarcode();
            //Set the font to code39Ext.
            code39Ext.Font = font;
            //Set the barcode text.
            code39Ext.Text = "Code39Ext";
            //Draw a barcode in the new Page.
            code39Ext.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code39Ext.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode39ExtendedBarcode.
            Dim code39Ext As PdfCode39ExtendedBarcode = New PdfCode39ExtendedBarcode()
            'Set the font to code39Ext.
            code39Ext.Font = font
            'Set the barcode text.
            code39Ext.Text = "Code39Ext"
            'Draw a barcode in the new Page.
            code39Ext.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code39Ext.pdf")
            </code>
            </example> 
            <remarks> All 128 ASCII characters can be encoded in an extended Code 39 barcode</remarks>
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCodabarBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode11Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128ABarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128BBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128CBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode32Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode39ExtendedBarcode.
            PdfCode39ExtendedBarcode code39Ext = new PdfCode39ExtendedBarcode();
            //Set the font to code39Ext.
            code39Ext.Font = font;
            //Set the barcode text.
            code39Ext.Text = "Code39Ext";
            //Draw a barcode in the new Page.
            code39Ext.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code39Ext.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode39ExtendedBarcode.
            Dim code39Ext As PdfCode39ExtendedBarcode = New PdfCode39ExtendedBarcode()
            'Set the font to code39Ext.
            code39Ext.Font = font
            'Set the barcode text.
            code39Ext.Text = "Code39Ext"
            'Draw a barcode in the new Page.
            code39Ext.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code39Ext.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode"/> class.
            </summary>
            <param name="text">The Barcode text.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode39ExtendedBarcode.
            PdfCode39ExtendedBarcode code39Ext = new PdfCode39ExtendedBarcode("Code39Ext");
            //Set the font to code39Ext.
            code39Ext.Font = font;
            //Draw a barcode in the new Page.
            code39Ext.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code39Ext.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode39ExtendedBarcode.
            Dim code39Ext As PdfCode39ExtendedBarcode = New PdfCode39ExtendedBarcode("Code39Ext")
            'Set the font to code39Ext.
            code39Ext.Font = font
            'Draw a barcode in the new Page.
            code39Ext.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code39Ext.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode.CalculateCheckDigit">
            <summary>
            Internal method to calculate the check-digit
            </summary>
            <returns>check digit</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode.GetSymbol(System.Int32)">
            <summary>
            Internal method which retrieves the specified symbol from the symbol table.
            </summary>
            <param name="checkValue"></param>
            <returns>symbol</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode.GetExtendedText">
            <summary>
            Gets the extended text.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfCode93Barcode">
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode();
            //Set the font to code93.
            code93.Font = font;
            //Set the barcode text.
            code93.Text = "CODE93";
            //Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code93.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode()
            'Set the font to code93.
            code93.Font = font
            'Set the barcode text.
            code93.Text = "CODE93"
            'Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("code93.pdf")
            </code>
            </example> 
            <remarks> Only the following symbols are allowed in a Code 93 barcode: 1 2 3 4 5 6 7 8 9 0 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z - . $ / + % SPACE
            All alphabetic characters are uppercase. If lowercase characters are required, then a Code 93 Extended barcode must be used.
            </remarks>
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCodabarBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode11Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128ABarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128BBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128CBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode32Barcode"/> Class
            <seealso cref="!:PdfCodPdfCode39Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode93Barcode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode93Barcode"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode();
            //Set the font to code93.
            code93.Font = font;
            //Set the barcode text.
            code93.Text = "CODE93";
            //Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code93.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode()
            'Set the font to code93.
            code93.Font = font
            'Set the barcode text.
            code93.Text = "CODE93"
            'Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("code93.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode93Barcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode93Barcode"/> class.
            </summary>
            <param name="text">The Barcode text.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode("CODE93");
            //Set the font to code93.
            code93.Font = font;
            //Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code93.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode("CODE93")
            'Set the font to code93.
            code93.Font = font
            'Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("code93.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode93Barcode.Initialize">
            <summary>
            Initializes the internal barcode symbol table
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode93Barcode.CalculateCheckDigit">
            <summary>
            Calculates the check digit for this barcode specification.
            </summary>
            <returns>The Check digits.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode93Barcode.GetCheckSumSymbols">
            <summary>
            Internal method to calculate the check-digit
            </summary>
            <returns>symbols</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode">
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode93ExtendedBarcode.
            PdfCode93ExtendedBarcode code93 = new PdfCode93ExtendedBarcode();
            //Set the font to code93Ext.
            code93Ext.Font = font;
            //Set the barcode text.
            code93Ext.Text = "CODE39Ext";
            //Draw a barcode in the new Page.
            code93Ext.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code93Ext.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode93ExtendedBarcode.
            Dim code93Ext As PdfCode93ExtendedBarcode = New PdfCode93ExtendedBarcode()
            'Set the font to code93Ext.
            code93Ext.Font = font 
            'Set the barcode text.
            code93Ext.Text = "CODE39Ext"
            'Draw a barcode in the new Page.
            code93Ext.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code93Ext.pdf")
            </code>
            </example> 
            <remarks> All 128 ASCII characters can be encoded in an extended Code 93 barcode. </remarks>
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCodabarBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode11Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128ABarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128BBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode128CBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode32Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39Barcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode39ExtendedBarcode"/> Class
            <seealso cref="T:Syncfusion.Pdf.Barcode.PdfCode93Barcode"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode93ExtendedBarcode.
            PdfCode93ExtendedBarcode code93 = new PdfCode93ExtendedBarcode();
            //Set the font to code93Ext.
            code93Ext.Font = font;
            //Set the barcode text.
            code93Ext.Text = "CODE39Ext";
            //Draw a barcode in the new Page.
            code93Ext.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code93Ext.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode93ExtendedBarcode.
            Dim code93Ext As PdfCode93ExtendedBarcode = New PdfCode93ExtendedBarcode()
            'Set the font to code93Ext.
            code93Ext.Font = font 
            'Set the barcode text.
            code93Ext.Text = "CODE39Ext"
            'Draw a barcode in the new Page.
            code93Ext.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code93Ext.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode"/> class.
            </summary>
            <param name="text">The Barcode text.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfCode93ExtendedBarcode.
            PdfCode93ExtendedBarcode code93 = new PdfCode93ExtendedBarcode("Code93Ext");
            //Set the font to code93Ext.
            code93Ext.Font = font;
            //Draw a barcode in the new Page.
            code93Ext.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("Code93Ext.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Creates a new PdfCode93ExtendedBarcode.
            Dim code93Ext As PdfCode93ExtendedBarcode = New PdfCode93ExtendedBarcode("Code93Ext")
            'Set the font to code93Ext.
            code93Ext.Font = font 
            'Draw a barcode in the new Page.
            code93Ext.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("Code93Ext.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode.CalculateCheckDigit">
            <summary>
            Calculates the check digit for this barcode specification.
            </summary>
            <returns>The Check digits.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode.GetCheckSumSymbols">
            <summary>
            To get the Checksum value
            </summary>
            <returns>checksum symbols</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode.Initialize">
            <summary>
            Initializes the internal barcode symbol table
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode.GetSymbol(System.Int32)">
            <summary>
            Gets the symbol.
            </summary>
            <param name="checkValue">The check value.</param>
            <returns>symbol</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfCode93ExtendedBarcode.GetExtendedText">
            <summary>
            To get the Extended Text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.m_dataMatrixEncoding">
            <summary>
            Holds the encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.m_size">
            <summary>
            Holds the data matrix size.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.m_dataMatrixArray">
            <summary>
            Holds the final array.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.m_symbolAttributes">
            <summary>
            Array containing all possible datamatrix symbol attributes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.m_symbolAttribute">
            <summary>
            Holds the suitable symbol attribute based on input text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.m_log">
            <summary>
            Holds log array.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.m_aLog">
            <summary>
            Holds ALog array.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.m_rsPolynomial">
            <summary>
            Internal variable for RS polynomial.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.#ctor">
            <summary>
            Initializes PdfDataMatrixBarcode class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.#ctor(System.String)">
            <summary>
            Initializes PdfDataMatrixBarcode class.
            </summary>
            <param name="text">Data to be converted as barcode.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.Initialize">
            <summary>
            Initializes properties and calculation array for DataMatrix barcode.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.CreateLogArrays">
            <summary>
            Create log and alog arrays.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.CreateRSPolynomial(System.Int32)">
            <summary>
            Creates factors for polynomial based on the data.
            </summary>
            <param name="size">Number of correction codewords required.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.CreateMatrix(System.Int32[])">
            <summary>
            Create matrix.
            </summary>
            <param name="codeword">Input data matrix.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.BuildDataMatrix">
            <summary>
            Builds data matrix.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.PrepareCodeword(System.Byte[])">
            <summary>
            Prepares data codeword by encoding and appending error correction codes.
            </summary>
            <param name="dataCodeword">Data in bytes.</param>
            <returns>Final codeword ready for generating matrix.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.DataMatrixBaseEncoder(System.Byte[])">
            <summary>
            Encodes the data using Base256 encoder.
            </summary>
            <param name="dataCodeword">Data to be encoded.</param>
            <returns>Encoded data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.ComputeBase256Codeword(System.Int32,System.Int32)">
            <summary>
            Compute codeword using 255 state algorithm.
            </summary>
            <param name="val">Codeword to compute.</param>
            <param name="index">Index of the codeword.</param>
            <returns>Encoded codeword.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.DataMatrixASCIINumericEncoder(System.Byte[])">
            <summary>
            Encodes the data using Numeric encoder.
            </summary>
            <param name="dataCodeword">Data to be encoded.</param>
            <returns>Encoded data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.DataMatrixASCIIEncoder(System.Byte[])">
            <summary>
            Encodes the data using ASCII encoder.
            </summary>
            <param name="dataCodeword">Data to be encoded.</param>
            <returns>Encoded data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.ComputeErrorCorrection(System.Byte[]@)">
            <summary>
            Compute error correction codewords.
            </summary>
            <param name="codeword">Data codewords.</param>
            <returns>Correction codeword array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.PadCodewords(System.Int32,System.Byte[],System.Byte[]@)">
            <summary>
            Data codeword is padded to match the chosen symbol attribute.
            </summary>
            <param name="dataCWLength">Length of data codeword.</param>
            <param name="temp">Codeword without padding.</param>
            <param name="codeword">Codeword with padding.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.Mult(System.Int32,System.Int32)">
            <summary>
            Special field multiplication.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.PrepareDataCodeword(System.Byte[])">
            <summary>
            Choose suitable encoding.
            </summary>
            <param name="dataCodeword">Data codeword.</param>
            <returns>Encoded codeword.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.AddQuiteZone(System.Byte[0:,0:])">
            <summary>
            Adds quietzone on all sides of the data matrix.
            </summary>
            <param name="tempArray2">Input data matrix.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.Draw(Syncfusion.Pdf.PdfPageBase,System.Drawing.PointF)">
            <summary>
            Draws datamatrix in the PdfPage.
            </summary>
            <param name="page">PdfPage.</param>
            <param name="location">Location to draw barcode.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.ActualRows">
            <summary>
            Returns the actual number of rows (including quietzones).
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode.ActualColumns">
            <summary>
            Returns the actual number of columns (including quietzones).
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfDataMatrixSymbolAttribute">
            <summary>
            Symbol attribute structure for the DataMatrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcode.m_version">
            <summary>
            Holds the Version Information.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcode.m_noOfModules">
            <summary>
            Holds the Number of Modules.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcode.m_moduleValue">
            <summary>
            Holds the data of Function Pattern.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcode.m_dataAllocationValues">
            <summary>
            Holds the Data in the Encoding Region.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcode.m_inputMode">
            <summary>
            Holds the Input Mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcode.m_errorCorrectionLevel">
            <summary>
            Holds the Error correction level.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcode.dataBits">
            <summary>
            Holds the Data Bit value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcode.blocks">
            <summary>
            Holds the Number of Blocks.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcode.m_IsUserMentionedMode">
            <summary>
            Check if User Mentioned Mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcode.m_IsUserMentionedVersion">
            <summary>
            Check if User Mentioned Version.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcode.m_IsUserMentionedErrorCorrectionLevel">
            <summary>
            Check if User Mentioned Error Correction Level.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcode.m_IsEci">
            <summary>
            Check if ECI.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcode.m_EciAssignmentNumber">
            <summary>
            Holds the ECI Assignment Number.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcode.m_qrBarcodeValues">
            <summary>
            Variable to hold the QR Barcode Values.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.Draw(Syncfusion.Pdf.PdfPageBase,System.Drawing.PointF)">
            <summary>
            Draws the barcode on the <see cref="T:Syncfusion.Pdf.PdfPage"/> at the specified location.
            </summary>
            <param name="page">The pdf page.</param>
            <param name="location">The barcode location.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfQRBarcode.
            PdfQRBarcode qrCode = new PdfQRBarcode();
            //Set the barcode text.
            qrCode.Text = "012345678";
            //Draw a barcode in the new Page.
            qrCode.Draw(page, new PointF(25, 500));
            //Save the  document to disk.
            document.Save("QRBarcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfQRBarcode.
            Dim qrCode As PdfQRBarcode = New PdfQRBarcode()
            'Set the barcode text.
            qrCode.Text = "012345678"
            'Draw a barcode in the new Page.
            qrCode.Draw(page, new PointF(25, 500))
            'Save the  document to disk.
            document.Save("QRBarcode.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.GenerateValues">
            <summary>
            Generates the values of the QR Barcode
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.AddQuietZone">
            <summary>
            Adds quietzone to the QR Barcode.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.DrawPDP(System.Int32,System.Int32)">
            <summary>
            Draw the PDP in the given location
            </summary>
            <param name="x">The x co-ordinate.</param>
            <param name="y">The y co-ordinate.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.DrawTimingPattern">
            <summary>
            Draw the Timing Pattern
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.DrawAlignmentPattern(System.Int32,System.Int32)">
            <summary>
            Draw the Alignment Pattern in the given location
            </summary>
            <param name="x">The x co-ordinate.</param>
            <param name="y">The y co-ordinate.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.EncodeData">
            <summary>
            Encode the Input Data
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.DataAllocationAndMasking(System.Boolean[])">
            <summary>
            Allocates the Encoded Data and then Mask
            </summary>
            <param name="Data">Encoded Data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.DrawFormatInformation">
            <summary>
            Draw the Format Information
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.Initialize">
            <summary>
            Initializes the Version, Error correction level, Input Mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.SplitCodeWord(System.String[0:,0:],System.Int32,System.Int32)">
            <summary>
            Splits the Code words
            </summary>
            <param name="ds">The Encoded value Blocks.</param>
            <param name="noOfBlocks">Index of Block Number.</param>
            <param name="count">Length of the Block.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.CreateBlocks(System.Collections.Generic.List{System.Boolean},System.Int32)">
            <summary>
            Creates the Blocks
            </summary>
            <param name="encodeData">The Encoded value.</param>
            <param name="noOfBlocks">Number of Blocks.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.IntToBoolArray(System.Int32,System.Int32)">
            <summary>
            Converts Integer value to Boolean
            </summary>
            <param name="number">The Integer value.</param>
            <param name="noOfBits">Number of Bits.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.StringToBoolArray(System.String,System.Int32)">
            <summary>
            Converts string value to Boolean
            </summary>
            <param name="numberInString">The String value.</param>
            <param name="noOfBits">Number of Bits.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.GetAlignmentPatternCoOrdinates">
            <summary>
            Gets the Allignment pattern coordinates of the current version.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcode.AllocateFormatAndVersionInformation">
            <summary>
            Allocates Format and Version Information
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfQRBarcode.Version">
            <summary>
            Gets or sets the QR Barcode Version.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfQRBarcode.ErrorCorrectionLevel">
            <summary>
            Gets or sets the Error correction level.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfQRBarcode.InputMode">
            <summary>
            Gets or sets the Mode of the input text.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.ModuleValue">
            <summary>
            Struct to hold the value of each dots in Barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.ModuleValue.IsBlack">
            <summary>
            Specifies if the Dot is black.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.ModuleValue.IsFilled">
            <summary>
            Specifies if the Dot is already filled.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.ModuleValue.IsPDP">
            <summary>
            Specifies if the Dot is PDP.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.m_version">
            <summary>
            Holds the Version Information.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.m_errorCorrectionLevel">
            <summary>
            Holds the Error Correction Level.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.m_numberOfDataCodeWord">
            <summary>
            Holds the Number of Data code word.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.m_numberOfErrorCorrectingCodeWords">
            <summary>
            Holds the Number of Error correcting code words.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.m_numberOfErrorCorrectionBlocks">
            <summary>
            Holds the Number of Error correction Blocks.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.m_end">
            <summary>
            Holds the End value of the version.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.m_dataCapacity">
            <summary>
            Holds the Data copacity of the version.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.m_formatInformation">
            <summary>
            Holds the Format Information.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.m_versionInformation">
            <summary>
            Holds the Version Information.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.numberOfErrorCorrectingCodeWords">
            <summary>
            Holds all the values of Error correcting code words.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.EndValues">
            <summary>
            Holds all the end values.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.DataCapacityValues">
            <summary>
            Holds all the Data capacity values.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.NumericDataCapacityLow">
            <summary>
            Holds all  the Numeric Data capacity of the Error correction level Low.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.NumericDataCapacityMedium">
            <summary>
            Holds all  the Numeric Data capacity of the Error correction level Medium.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.NumericDataCapacityQuartile">
            <summary>
            Holds all  the Numeric Data capacity of the Error correction level Quartile.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.NumericDataCapacityHigh">
            <summary>
            Holds all  the Numeric Data capacity of the Error correction level High.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.AlphanumericDataCapacityLow">
            <summary>
            Holds all  the Alphaumeric Data capacity of the Error correction level Low.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.AlphanumericDataCapacityMedium">
            <summary>
            Holds all  the Alphaumeric Data capacity of the Error correction level Medium.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.AlphanumericDataCapacityQuartile">
            <summary>
            Holds all  the Alphaumeric Data capacity of the Error correction level Quartile.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.AlphanumericDataCapacityHigh">
            <summary>
            Holds all  the Alphaumeric Data capacity of the Error correction level High.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.BinaryDataCapacityLow">
            <summary>
            Holds all  the Binary Data capacity of the Error correction level Low.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.BinaryDataCapacityMedium">
            <summary>
            Holds all  the Binary Data capacity of the Error correction level Medium.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.BinaryDataCapacityQuartile">
            <summary>
            Holds all  the Binary Data capacity of the Error correction level Quartile.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.BinaryDataCapacityHigh">
            <summary>
            Holds all  the Binary Data capacity of the Error correction level High.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.#ctor(Syncfusion.Pdf.Barcode.QRCodeVersion,Syncfusion.Pdf.Barcode.PdfErrorCorrectionLevel)">
            <summary>
            Initializes the Values.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.GetAlphanumericvalues(System.Char)">
            <summary>
            Gets the Alphanumeric values.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.GetNumberOfDataCodeWord">
            <summary>
            Gets number of Data code words.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.GetNumberOfErrorCorrectingCodeWords">
            <summary>
            Get number of Error correction code words.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.GetNumberOfErrorCorrectionBlocks">
            <summary>
            Gets number of Error correction Blocks.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.GetEnd">
            <summary>
            Gets the End of the version.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.GetDataCapacity">
            <summary>
            Gets Data capacity.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.GetFormatInformation">
            <summary>
            Gets Format Information.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.GetVersionInformation">
            <summary>
            Gets Version Information.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.GetNumberInEci(System.Char)">
            <summary>
            Gets equivalent Number of the Character.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.GetNumericDataCapacity(Syncfusion.Pdf.Barcode.QRCodeVersion,Syncfusion.Pdf.Barcode.PdfErrorCorrectionLevel)">
            <summary>
            Gets Numeric Data capacity.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.GetAlphanumericDataCapacity(Syncfusion.Pdf.Barcode.QRCodeVersion,Syncfusion.Pdf.Barcode.PdfErrorCorrectionLevel)">
            <summary>
            Gets Alphanumeric data capacity.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.NumberOfDataCodeWord">
            <summary>
            Get or Private set the Number of Data code words.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.NumberOfErrorCorrectingCodeWords">
            <summary>
            Get or Private set the Number of Error correction code words.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.NumberOfErrorCorrectionBlocks">
            <summary>
            Get or Private set the Number of Error correction Blocks.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.End">
            <summary>
            Get or Private set the End value of the Current Version.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.DataCapacity">
            <summary>
            Get or Private set the Data capacity.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.FormatInformation">
            <summary>
            Get or Private set the Format Information.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfQRBarcodeValues.VersionInformation">
            <summary>
            Get or Private set the Version Information.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.m_length">
            <summary>
            Holds the Length
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.eccw">
            <summary>
            Holds the Error Correction Code Word
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.databits">
            <summary>
            Holds the DataBits
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.m_dataCodeWord">
            <summary>
            Holds the Data Code word
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.gx">
            <summary>
            Holds G(x)
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.alpha">
            <summary>
            Holds all the values of Alpha
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.decimalValue">
            <summary>
            Holds the Decimal value
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.m_qrBarcodeValues">
            <summary>
            Holds the values of QR Barcode
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.#ctor(Syncfusion.Pdf.Barcode.QRCodeVersion,Syncfusion.Pdf.Barcode.PdfErrorCorrectionLevel)">
            <summary>
            Initializes Error correction code word
            </summary>
            <param name="version">Version.</param>
            <param name="correctionLevel">Error correction level.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.GetERCW">
            <summary>
            Gets the Error correction code word
            <returns>Error correction code word.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.ToDecimal(System.String[])">
            <summary>
            Convert to Decimal
            </summary>
            <param name="inString">Binary values.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.ToBinary(System.Int32[])">
            <summary>
            Convert decimal to Binary value
            <returns>Binary Representation.</returns>
            </summary>
            <param name="decimalRepresentation"> Decimal Representation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.Divide">
            <summary>
            Polynomial division
            <returns>Polynomial coefficient.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.FindElement(System.Int32,System.Int32[])">
            <summary>
            Find the element in the alpha
            <returns>Index of the element.</returns>
            </summary>
            <param name="element">Element.</param>
            <param name="alpha">Alpha.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.GetElement(System.Int32[],System.Int32[])">
            <summary>
            Gets g(x) of the element
            <returns>g(x)</returns>
            </summary>
            <param name="element">Element.</param>
            <param name="alpha">Alpha.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.DC">
            <summary>
            Sets and Gets the Data code word
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.DataBits">
            <summary>
            Sets and Gets the DataBits
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfErrorCorrectionCodewords.ECCW">
            <summary>
            Sets and Gets the Error Correction Code Words
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.TextLocation">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode();
            //Set the barcode text location.
            code93.TextDisplayLocation = TextLocation.Bottom;
            //Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("Barcode.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode()
            'Set the barcode text location.
            code93.TextDisplayLocation = TextLocation.Bottom
            'Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the document.
            document.Save("Barcode.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.TextLocation.None">
            <summary>
            Displays, no text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.TextLocation.Top">
            <summary>
            Displays text, above the barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.TextLocation.Bottom">
            <summary>
             Displays text, at the bottom of the barcode.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfBarcodeTextAlignment">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PdfCode93Barcode.
            PdfCode93Barcode code93 = new PdfCode93Barcode();
            //Set the barcode text alignment
            code93.TextAlignment = PdfBarcodeTextAlignment.Center;
            //Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500));
            //Save document to disk.
            document.Save("Barcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfCode93Barcode.
            Dim code39 As PdfCode93Barcode = New PdfCode93Barcode()
            'Set the barcode text alignment
            code93.TextAlignment = PdfBarcodeTextAlignment.Center
            'Draw a barcode in the new Page.
            code93.Draw(page, new PointF(25, 500))
            'Save the document.
            document.Save("Barcode.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcodeTextAlignment.Left">
            <summary>
            Displays the readable text on the left side of the barcode. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcodeTextAlignment.Center">
            <summary>
            Displays the readable text at the center of the barcode. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfBarcodeTextAlignment.Right">
            <summary>
             Displays the readable text on the right side of the barcode. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixEncoding.Auto">
            <summary>
            Encoding is choosen based on the data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixEncoding.ASCII">
            <summary>
            Encoding is done by ASCII encoder.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixEncoding.ASCIINumeric">
            <summary>
            Encoding is done by Numeric encoder.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixEncoding.Base256">
            <summary>
            Encoding is done by Base256 encode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Auto">
            <summary>
            Size is choosen based on the data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size10x10">
            <summary>
            Square matrix with 10 rows and 10 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size12x12">
            <summary>
            Square matrix with 12 rows and 12 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size14x14">
            <summary>
            Square matrix with 14 rows and 14 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size16x16">
            <summary>
            Square matrix with 16 rows and 16 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size18x18">
            <summary>
            Square matrix with 18 rows and 18 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size20x20">
            <summary>
            Square matrix with 20 rows and 20 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size22x22">
            <summary>
            Square matrix with 22 rows and 22 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size24x24">
            <summary>
            Square matrix with 24 rows and 24 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size26x26">
            <summary>
            Square matrix with 26 rows and 26 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size32x32">
            <summary>
            Square matrix with 32 rows and 32 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size36x36">
            <summary>
            Square matrix with 36 rows and 36 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size40x40">
            <summary>
            Square matrix with 40 rows and 40 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size44x44">
            <summary>
            Square matrix with 44 rows and 44 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size48x48">
            <summary>
            Square matrix with 48 rows and 48 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size52x52">
            <summary>
            Square matrix with 52 rows and 52 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size64x64">
            <summary>
            Square matrix with 64 rows and 64 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size72x72">
            <summary>
            Square matrix with 72 rows and 72 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size80x80">
            <summary>
            Square matrix with 80 rows and 80 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size88x88">
            <summary>
            Square matrix with 88 rows and 88 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size96x96">
            <summary>
            Square matrix with 96 rows and 96 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size104x104">
            <summary>
            Square matrix with 104 rows and 104 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size120x120">
            <summary>
            Square matrix with 120 rows and 120 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size132x132">
            <summary>
            Square matrix with 132 rows and 132 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size144x144">
            <summary>
            Square matrix with 144 rows and 144 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size8x18">
            <summary>
            Rectangular matrix with 8 rows and 18 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size8x32">
            <summary>
            Rectangular matrix with 8 rows and 32 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size12x26">
            <summary>
            Rectangular matrix with 12 rows and 26 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size12x36">
            <summary>
            Rectangular matrix with 12 rows and 36 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size16x36">
            <summary>
            Rectangular matrix with 16 rows and 36 columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatrixSize.Size16x48">
            <summary>
            Rectangular matrix with 16 rows and 48 columns.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.QRCodeVersion">
            <summary>
            Specifies the Barcode Version.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfErrorCorrectionLevel">
            <summary>
            Specifies the Barcode Error correction level.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfErrorCorrectionLevel.Low">
            <summary>
            The Recovery capacity is 7%(approx.) 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfErrorCorrectionLevel.Medium">
            <summary>
            The Recovery capacity is 15%(approx.) 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfErrorCorrectionLevel.Quartile">
            <summary>
            The Recovery capacity is 25%(approx.) 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfErrorCorrectionLevel.High">
            <summary>
            The Recovery capacity is 30%(approx.) 
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.InputMode">
            <summary>
            Specifies the Barcode Input Mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.InputMode.NumericMode">
            <summary>
            The Input only contains the Numeric Values(0,1,2,3,4,5,6,7,8,9). 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.InputMode.AlphaNumericMode">
            <summary>
            The Input may contain Numeric Values, Alphabets(Upper case only), SPACE, $, %, *, +, -, ., /, :
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.InputMode.BinaryMode">
            <summary>
            The Input may contain all the ASCII values
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfAnnotationException">
            <summary>
            Exception of this type is raised when annotation object is used incorrectly.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfDocumentException">
            <summary>
            Base PDF document exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfException">
            <summary>
            General exception class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfException.#ctor">
            <property name="flag" value="Finished" />
            <summary>
            Initializes object by default error message.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfException.#ctor(System.String)">
            <property name="flag" value="Finished" />
            <summary>
            Initializes object by specified error message.
            </summary>
            <param name="message">User defined error message.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes object by specified error message and inner
            exception object.
            </summary>
            <param name="message">User defined error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentException.ErrorMessage">
            <property name="flag" value="Finished" />
            <summary>
            Default exception message.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentException.#ctor">
            <property name="flag" value="Finished" />
            <summary>
            Initializes object by default error message.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentException.#ctor(System.Exception)">
            <summary>
            Initializes object by default error message and inner
            exception object.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentException.#ctor(System.String)">
            <property name="flag" value="Finished" />
            <summary>
            Initializes object by specified error message.
            </summary>
            <param name="message">User defined error message.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes object by specified error message and inner
            exception object.
            </summary>
            <param name="message">User defined error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAnnotationException.ErrorMessage">
            <summary>
            Default exception message.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAnnotationException.#ctor">
            <summary>
            Initializes object with default error message.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAnnotationException.#ctor(System.Exception)">
            <summary>
            Initializes object with default error message and inner
            exception object.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAnnotationException.#ctor(System.String)">
            <summary>
            Initializes object by specified error message.
            </summary>
            <param name="message">User defined error message.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAnnotationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes object with specified error message and inner
            exception object.
            </summary>
            <param name="message">User defined error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAction">
            <summary>
            Represents base class for all action types.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.IPdfWrapper"/> Interface
        </member>
        <member name="T:Syncfusion.Pdf.IPdfWrapper">
            <summary>
            Defines the basic interace of the various Wrapper..
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IPdfWrapper.Element">
            <summary>
            Gets the element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAction.m_action">
            <summary>
            Next action to perform.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAction.m_dictionary">
            <summary>
            Internal variable to store dictionary;
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfAction"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAction.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAction.Next">
            <summary>
            Gets or sets the next action to be performed after the action represented by this instance.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
             //Creates a new sound action
            PdfSoundAction soundAction = new PdfSoundAction(@"..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav");
            soundAction.Sound.Bits = 16;
            soundAction.Sound.Channels = PdfSoundChannels.Stereo;
            soundAction.Sound.Encoding = PdfSoundEncoding.Signed;
            soundAction.Volume = 0.9f;
            soundAction.Mix = true;
            //Create a new PdfUriAction
            PdfUriAction uriAction = new PdfUriAction("http://www.google.com");
            //Set the next action to the soundAction.
            soundAction.Next = uriAction;
            //Save document to disk.
            document.Save("ActionDestination.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new sound annotation
            Dim soundAction As PdfSoundAction = New PdfSoundAction("..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav")
            soundAction.Sound.Bits = 16
            soundAction.Sound.Channels = PdfSoundChannels.Stereo
            soundAction.Sound.Encoding = PdfSoundEncoding.Signed
            soundAction.Volume = 0.9F
            soundAction.Mix = True
            'Create a new PdfUriAction.
            Dim uriAction As PdfUriAction  = New PdfUriAction("http://www.google.com")
            'Set the next action to the soundAction.
            soundAction.Next = uriAction
            'Save document to disk.
            document.Save("ActionDestination.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAction.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAction.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfActionCollection">
            <summary>
            Represents collection of actions.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class.
        </member>
        <member name="T:Syncfusion.Pdf.PdfCollection">
            <summary>
            Base collection of the pdf objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCollection.m_list">
            <summary>
            List of the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCollection.CopyTo(Syncfusion.Pdf.IPdfWrapper[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>Returns an enumerator that iterates through a collection.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCollection.Count">
            <summary>
            Gets number of the elements in the collection.
            </summary>
            <value>The total number of elements in the collection.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCollection.List">
            <summary>
            Gets internal list of the collection.
            </summary>      
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfActionCollection.m_actions">
            <summary>
            Array of actions.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionCollection.Add(Syncfusion.Pdf.Interactive.PdfAction)">
            <summary>
            Adds the specified action.
            </summary>
            <param name="action">The action.</param>
            <returns>action</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionCollection.Insert(System.Int32,Syncfusion.Pdf.Interactive.PdfAction)">
            <summary>
            Inserts the action at the specified position.
            </summary>
            <param name="index">The index.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionCollection.IndexOf(Syncfusion.Pdf.Interactive.PdfAction)">
            <summary>
            Gets the index of the action.
            </summary>
            <param name="action">The action.</param>
            <returns>action</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionCollection.Contains(Syncfusion.Pdf.Interactive.PdfAction)">
            <summary>
            Determines whether the action is contained within collection.
            </summary>
            <param name="action">The action.</param>
            <returns>
            Value, indicating the presents of the action in collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionCollection.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionCollection.Remove(Syncfusion.Pdf.Interactive.PdfAction)">
            <summary>
            Removes the specified action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the action at the specified position.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfActionCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionCollection.DoAdd(Syncfusion.Pdf.Interactive.PdfAction)">
            <summary>
            Adds the action.
            </summary>
            <param name="action">The action.</param>
            <returns>Index of the inserted action.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionCollection.DoInsert(System.Int32,Syncfusion.Pdf.Interactive.PdfAction)">
            <summary>
            Inserts the action.
            </summary>
            <param name="index">The index.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionCollection.DoClear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionCollection.DoRemove(Syncfusion.Pdf.Interactive.PdfAction)">
            <summary>
            Removes the action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionCollection.DoRemoveAt(System.Int32)">
            <summary>
            Removes the action at the specified position.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfActionCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Interactive.PdfAction"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfFormAction">
            <summary>
            Represents the form action base class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Create a new PdfButtonField.
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            //Sets the bounds
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            //Set the submitButton Font.
            submitButton.Font = font;
            //Set the submit button text
            submitButton.Text = "Apply";
            //Set the submit button backcolor
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Create a new PdfFormAction.
            PdfFormAction formAction = new PdfFormAction();
            form.Include = true;
            //Set the submit button action.
            submitButton.Actions.GotFocus = formAction;
            //Add the submit button to the new documnet.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("FormAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Create a new PdfButtonField.
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            'Sets the bounds
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            'Set the submitButton Font.
            submitButton.Font = font
            'Set the submit button text
            submitButton.Text = "Apply"
            'Set the submit button backcolor
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Create a new PdfFormAction.
            Dim formAction As PdfFormAction  = New PdfFormAction()
            'Set the Include option in formAction
            form.Include = true;
            'Set the submit button action.
            submitButton.Actions.GotFocus = formAction
            'Add the submit button to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("FormAction.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfAction"/>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfFormAction.m_include">
            <summary>
            Internal variable to store value indicating whether to include
            or exclude fields for resetting process.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfFormAction.m_fields">
            <summary>
            Internal variable to store fields affected by the action.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFormAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfFormAction"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Create a new PdfButtonField.
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            //Sets the bounds
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            //Set the submitButton Font.
            submitButton.Font = font;
            //Set the submit button text
            submitButton.Text = "Apply";
            //Set the submit button backcolor
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Create a new PdfFormAction.
            PdfFormAction formAction = new PdfFormAction();
            form.Include = true;
            //Set the submit button action.
            submitButton.Actions.GotFocus = formAction;
            //Add the submit button to the new documnet.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("FormAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Create a new PdfButtonField.
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            'Sets the bounds
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            'Set the submitButton Font.
            submitButton.Font = font
            'Set the submit button text
            submitButton.Text = "Apply"
            'Set the submit button backcolor
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Create a new PdfFormAction.
            Dim formAction As PdfFormAction  = New PdfFormAction()
            'Set the Include option in formAction
            form.Include = true;
            'Set the submit button action.
            submitButton.Actions.GotFocus = formAction
            'Add the submit button to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("FormAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFormAction.Include">
            <summary>
            Gets or sets a value indicating whether fields contained in <see cref="P:Syncfusion.Pdf.Interactive.PdfFormAction.Fields"/> 
            collection will be included for resetting or submitting.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField.
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            //Set the submitButton Bounds.
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            //Create a new PdfFormAction
            PdfFormAction formAction = new PdfFormAction();
            form.Include = true;
            //Set the actiont to the submitButton
            submitButton.Actions.GotFocus = formAction;
            //Add the submit button to the new documnet.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("FormAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField.
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            'Set the submitButton bounds.
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            'Create a new PdfFormAction
            Dim formAction As PdfFormAction  = New PdfFormAction()
            form.Include = true;
            'Set the submit button action.
            submitButton.Actions.GotFocus = formAction
            'Add the submit button to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("FormAction.pdf")
            </code>
            </example>
            <remarks>
            If Include property is true, only the fields in this collection will be reset or submitted.
            If Include property is false, the fields in this collection are not reset or submitted 
            and only the remaining form fields are reset or submitted.
            If the collection is null or empty, then all the form fields are reset 
            and the Include property is ignored.
            </remarks>
            <value><c>true</c> if include; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFormAction.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>The fields.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField.
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            //Set the submitButton Bounds.
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            //Create a new PdfFormAction.
            PdfFormAction formAction = new PdfFormAction();
            //Gets the FieldCollection from formAction
            PdfFieldCollection fields=formAction.Fileds;
            //Set actions to submit button 
            submitButton.Actions.GotFocus = formAction;
            //Add the submit button to the new document.
            document.Form.Fields.Add(submitButton);
            //Add the submit button to the new documnet.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("FormAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            'Set the boudns to submitButton
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create the new PdfFormAction
            Dim formAction As PdfFormAction  = New PdfFormAction()
            'Gets the FieldCollection from formAction
            Dim fields As PdfFieldCollection = formAction.Fileds;
            'Set actions to submit button 
            submitButton.Actions.GotFocus = formAction
            'Add the submit button to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("FormAction.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfGoToAction">
            <summary>
            Represents an action which goes to a destination in the current document.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Font = font;
            submitButton.Text = "Goto";
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Creates a new page and adds it as the last page of the document
            PdfPage pdfPages=document.Pages.Add();
            //Create a new PdfGoToAction
            PdfGoToAction gotoAction = new PdfGoToAction(pdfPages);
            //Add the gotoAction
            gotoAction.Actions.GotFocus = gotoAction;
            //Add the submit button to a new document.
            document.Form.Fields.Add(gotoAction);
            //Save document to disk.
            document.Save("GoToAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Font = font
            submitButton.Text = "Goto"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Creates a new page and adds it as the last page of the document
            Dim page As pdfpage = document.Pages.Add()
            'Create a new PdfGoToAction
            PdfGoToAction gotoAction = new PdfGoToAction(pdfpage)
            'Add the gotoAction to submitButton
            gotoAction.Actions.GotFocus = gotoAction
            'Add the submit button to the new document
            document.Form.Fields.Add(gotoAction)
            'Save document to disk.
            document.Save("GoToAction.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfAction"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfGoToAction.m_destination">
            <summary>
            Internal variable to store action's destination.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfGoToAction.#ctor(Syncfusion.Pdf.Interactive.PdfDestination)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfGoToAction"/> class.
            </summary>
            <param name="destination">The destination to jump to.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Font = font;
            submitButton.Text = "Goto";
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Creates a new page and adds it as the last page of the document
            PdfPage pdfPages=document.Pages.Add();
            //Create a new PdfDestination
            PdfDestination destination = new PdfDestination(pdfPages);
            //Set the PdfDestinationMode
            destination.Mode = PdfDestinationMode.FitToPage;
            //Create a new PdfGoToAction
            PdfGoToAction gotoAction = new PdfGoToAction(destination);
            //Set the gotoAction to submitButton
            submitButton.Actions.GotFocus = gotoAction;
            //Add the submitButton to the new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("GoToAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Create a new PdfButtonField.
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Font = font
            submitButton.Text = "Goto"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Creates a new page and adds it as the last page of the document
            Dim page As pdfpage = document.Pages.Add()
            'Create a new PdfDestination.
            Dim destination As PdfDestination  = New PdfDestination(pdfpage)
            'Set the PdfDestinationMode.
            destination.Mode = PdfDestinationMode.FitToPage
            'Create a new PdfGoToAction
            PdfGoToAction gotoAction = new PdfGoToAction(destination)
            'Set the action  to submit button
            submitButton.Actions.GotFocus = resetAction
            'Add the submitButton to a new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("GoToAction.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfGoToAction.#ctor(Syncfusion.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfGoToAction"/> class.
            </summary>
            <param name="page">The page to jump to.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Font = font;
            submitButton.Text = "Goto";
            submitButton.BackColor = new PdfColor(181, 191, 203);
            PdfGoToAction gotoAction = new PdfGoToAction(page);
            Set the gotoAction to submitButton.
            submitButton.Actions.GotFocus = gotoAction;
            //Add the submitButton to the new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("GoToAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Create a new PdfButtonField.
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Font = font
            submitButton.Text = "Goto"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Creates a new page and adds it as the last page of the document
            Dim page As pdfpage = document.Pages.Add()
            'Create a new PdfGoToAction
            PdfGoToAction gotoAction = new PdfGoToAction(pdfpage)
            'Set the action to submit button
            submitButton.Actions.GotFocus = resetAction
            'Add the submit button to the new document
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("GoToAction.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfGoToAction.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfGoToAction.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfGoToAction.Destination">
            <summary>
            Gets or sets the destination.
            </summary>
            <value>The destination.</value>
            <example>
            <code lang = "C#">
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            //Creates a new page and adds it as the last page of the document
            PdfPage pdfPages=document.Pages.Add();
            //Create a new PdfDestination
            PdfDestination destination = new PdfDestination(pdfPages);
            //Set the PdfDestinationMode
            destination.Mode = PdfDestinationMode.FitToPage;
            //Create a new PdfGoToAction
            PdfGoToAction gotoAction = new PdfGoToAction(pdfPages);
            //Set the Destination to gotoAction
            gotoAction.Destination=destination;
            //Set the action to the goto action
            submitButton.Actions.GotFocus = gotoAction;
            //Add the submit button to a new document.
            document.Form.Fields.Add(submitButton);
            </code>
            <code lang="VB">
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            'Creates a new page and adds it as the last page of the document
            Dim page As pdfpage = document.Pages.Add()
            'Create a new PdfDestination.
            Dim destination As PdfDestination  = New PdfDestination(pdfpage)
            'Set the PdfDestinationMode
            destination.Mode = PdfDestinationMode.FitToPage
            'Creat a new PdfGoToAction
            PdfGoToAction gotoAction = new PdfGoToAction(pdfpage)
            gotoAction.Destination=destination
            'Set the action to the goto action
            submitButton.Actions.GotFocus = resetAction
            'Add the submit button to the new document
            document.Form.Fields.Add(submitButton)
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfJavaScriptAction">
            <summary>
            Represents an action which performs java script action in pdf document.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Create a new PdfButtonFieldd
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Font = font;
            submitButton.Text = "Apply";
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Create a new PdfJavaScriptAction
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            //Set the javaAction to submit button
            submitButton.Actions.GotFocus = javaAction;
            //Add the  submit button to the new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("JavaScriptAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Font = font
            submitButton.Text = "Apply"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Create a new PdfJavaScriptAction.
            Dim javaAction As PdfJavaScriptAction  = New PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")")
            'Set the javaAction to  submit button
            submitButton.Actions.GotFocus = javaAction
            'Add the submit button to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("JavaScriptAction.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfJavaScriptAction.m_javaScript">
            <summary>
            Internal variable to store java script code.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfJavaScriptAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfJavaScriptAction"/> class.
            </summary>
            <param name="javaScript">The java script code.</param>
            <value>A string value representing valid javascript code to be executed.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Create a new PdfJavaScriptAction
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            set the java action to submit button
            submitButton.Actions.GotFocus = javaAction;
            //Add the  submit button to the new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("JavaScriptAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Create a new PdfJavaScriptAction
            Dim javaAction As PdfJavaScriptAction  = New PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")")
            'Set the javaAction to submitButton.
            submitButton.Actions.GotFocus = javaAction
            'Add the  submit button to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("JavaScriptAction.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfJavaScriptAction.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfJavaScriptAction.JavaScript">
             <summary>
            Gets or sets the javascript code to be executed when this action is executed. 
             </summary>
             <value>A string value representing valid javascript code to be executed. </value>
             <example>
             <code lang = "C#">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             //Creates a new page and adds it as the last page of the document
             PdfPage page = document.Pages.Add();
             //Create a new PdfButtonField
             PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
             submitButton.Bounds = new RectangleF(25, 160, 100, 20);
             submitButton.Text = "Apply";
             submitButton.BackColor = new PdfColor(181, 191, 203);
             //Create a new PdfJavaScriptAction
             PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
             //Set the javaAction to submitButton
             submitButton.Actions.GotFocus = javaAction;
             ''Get the JavaScript form javaAction
             string javaScript=javaAction.JavaScript;
             //Add the  submit button to the new document.
             document.Form.Fields.Add(submitButton);
             //Save document to disk.
             document.Save("JavaScriptAction.pdf");
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As PdfDocument = New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = document.Pages.Add()
             'Create new PdfButtonField
             Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
             submitButton.Bounds = New RectangleF(25, 160, 100, 20)
             submitButton.Text = "Apply"
             submitButton.BackColor = new PdfColor(181, 191, 203)
             'Create a new PdfJavaScriptAction
             Dim javaAction As PdfJavaScriptAction  = New PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")")
             'Set the javaAction to submit button
             submitButton.Actions.GotFocus = javaAction
             'Get the JavaScript from java action
             Dim javaScript As string = javaAction.JavaScript;
             'Add the  submit button to the new document.
             document.Form.Fields.Add(submitButton)
             'Save document to disk.
             document.Save("JavaScriptAction.pdf")
             </code>
             </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLaunchAction">
            <summary>
            Represents an action which launches an application or opens or prints a document.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Font = font;
            submitButton.Text = "Launch";
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.GotFocus = launchAction;
            Add the submitButton to the new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Font = font
            submitButton.Text = "Launch"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to submit button
            submitButton.Actions.GotFocus = launchAction
            'Add the submitButton to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLaunchAction.m_fileSpecification">
            <summary>
            Internal variable to store file specification.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLaunchAction.#ctor(System.String)">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.GotFocus = launchAction;
            Add the submitButton to the new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            Add the submitButton to the new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to submit button
            submitButton.Actions.GotFocus = launchAction
            'Add the submitButton to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLaunchAction.#ctor(System.String,Syncfusion.Pdf.Interactive.PdfFilePathType)">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new PdfButtonField
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a the PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt",PdfFilePathType.Absolute);
            //Set the launchAction to the submitButton
            submitButton.Actions.GotFocus = launchAction;
            </code>
            <code lang="VB">
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt",PdfFilePathType.Absolute)
            'Set the launch action to submit button
            submitButton.Actions.GotFocus = launchAction
            'Add the submitButton to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLaunchAction.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a Launch Action from loaded page
            </summary>
            <param name="fileName"></param>
            <param name="loaded"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLaunchAction.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLaunchAction.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLaunchAction.FileName">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt",PdfFilePathType.Absolute);
            //Get the filename form launchAction
            string fileName=launchAction.FileName;
            /Set the launch action to submit button
            submitButton.Actions.GotFocus = launchAction;
            Add the submitButton to the new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt",PdfFilePathType.Absolute)
            'Get the filename form launchAction
            Dim fileName As string =launchAction.FileName
            'Set the launch action to submit button
            submitButton.Actions.GotFocus = launchAction
            'Add the submitButton to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfNamedAction">
            <summary>
            Represents an action which perfoms the named action.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new page and adds it as the last page of the document
            page = document.Pages.Add();
            //Creates a new page and adds it as the last page of the document
            page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Font = font;
            submitButton.Text = "First Page";
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Create a new PdfNamedAction
            PdfNamedAction namedAction = new PdfNamedAction(PdfActionDestination.FirstPage);
            //Set the named action to submit button
            submitButton.Actions.GotFocus = namedAction;
            //Add the submitButton to the new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("NamedAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new page and adds it as the last page of the document
            page = document.Pages.Add()
            'Creates a new page and adds it as the last page of the document
            page = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Font = font
            submitButton.Text = "First Page"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Create a new PdfNamedAction
            Dim namedAction As PdfNamedAction  = new PdfNamedAction(PdfActionDestination.FirstPage)
            'Set the named action to submit button
            submitButton.Actions.GotFocus = namedAction
            'Add the gotoAction to the document
            document.Form.Fields.Add(gotoAction)
            'Save document to disk.
            document.Save("NamedAction.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfNamedAction.m_destination">
            <summary>
            Internal variable to store destination.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfNamedAction.#ctor(Syncfusion.Pdf.Interactive.PdfActionDestination)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfNamedAction"/> class.
            </summary>
            <param name="destination">The <see cref="T:Syncfusion.Pdf.Interactive.PdfActionDestination"/> object representing destination of an action.</param>
            <example>
            <code lang="C#">
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "First Page";
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Create a new PdfNamedAction.
            PdfNamedAction namedAction = new PdfNamedAction(PdfActionDestination.FirstPage);
            //Set the PdfActionDestination
            namedAction.Destination=PdfActionDestination.PrevPage;
            //Set the named action to submit button
            submitButton.Actions.GotFocus = namedAction;
            //Add the submit button to a new document
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("NamedAction.pdf");
            </code>
            <code lang="VB">
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "First Page"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Crea a new PdfNamedAction
            Dim namedAction As PdfNamedAction  = new PdfNamedAction(PdfActionDestination.FirstPage)
            'Set the PdfActionDestination
            namedAction.Destination=PdfActionDestination.PrevPage
            'Set the named action to submit button
            submitButton.Actions.GotFocus = namedAction
            Add the submitButton to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("NamedAction.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfNamedAction.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfNamedAction.Destination">
            <summary>
            Gets or sets the destination.
            </summary>
            <value>The <see cref="T:Syncfusion.Pdf.Interactive.PdfActionDestination"/> object representing destination of an action.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "First Page";
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Create a new PdfNamedAction.
            PdfNamedAction namedAction = new PdfNamedAction(PdfActionDestination.FirstPage);
            //Set the PdfActionDestination
            namedAction.Destination=PdfActionDestination.PrevPage;
            //Set the named action to submit button
            submitButton.Actions.GotFocus = namedAction;
            //Add the submit button to a new document
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("NamedAction.pdf");
            </code>
            <code lang="VB">
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "First Page"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Crea a new PdfNamedAction
            Dim namedAction As PdfNamedAction  = new PdfNamedAction(PdfActionDestination.FirstPage)
            'Set the PdfActionDestination
            namedAction.Destination=PdfActionDestination.PrevPage
            'Set the named action to submit button
            submitButton.Actions.GotFocus = namedAction
            Add the submitButton to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("NamedAction.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAnnotationActions">
            <summary>
            Represents additional actions of the annotations.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creata a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.MouseLeave = launchAction;
            Add the submit button to a new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to  submit button
            submitButton.Actions.MouseLeave = launchAction
            'Add the submit button to document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationActions.m_mouseEnter">
            <summary>
            Internal variable to store enter action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationActions.m_mouseLeave">
            <summary>
            Internal variable to store leave action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationActions.m_mouseDown">
            <summary>
            Internal variable to store mouse down action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationActions.m_mouseUp">
            <summary>
            Internal variable to store mouse up action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationActions.m_gotFocus">
            <summary>
            Internal variable to store get focus action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationActions.m_lostFocus">
            <summary>
            Internal variable to store lost focus action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationActions.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationActions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfAnnotationActions"/> class.
            </summary>
            <example>
            <code lang="C#">
            PdfAnnotationActions annotationActions = new PdfAnnotationActions();
            //Create a new PdfJavaScriptAction
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            annotationActions.MouseEnter = javaAction;
            </code>
            <code lang="VB">
            Dim annotationActions As PdfAnnotationActions  = New PdfAnnotationActions()
            'Create a new PdfJavaScriptAction.
            Dim javaAction As PdfJavaScriptAction  = New PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")")
            annotationActions.MouseEnter = javaAction
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationActions.MouseEnter">
            <summary>
            Gets or sets the action to be performed when the cursor enters the annotation�s 
            active area.
            </summary>
            <value>The mouse enter action.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creata a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.MouseEnter = launchAction;
            Add the submit button to a new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to  submit button
            submitButton.Actions.MouseEnter = launchAction
            'Add the submit button to document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationActions.MouseLeave">
            <summary>
            Gets or sets the action to be performed when the cursor exits the annotation�s 
            active area.
            </summary>
            <value>The mouse leave action.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creata a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.MouseLeave = launchAction;
            Add the submit button to a new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to  submit button
            submitButton.Actions.MouseLeave = launchAction
            'Add the submit button to document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationActions.MouseDown">
            <summary>
            Gets or sets the action to be performed when the mouse button is pressed inside the 
            annotation�s active area.
            </summary>
            <value>The mouse down action.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creata a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.MouseDown = launchAction;
            Add the submit button to a new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to  submit button
            submitButton.Actions.MouseDown = launchAction
            'Add the submit button to document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationActions.MouseUp">
            <summary>
            Gets or sets the action to be performed when the mouse button is released 
            inside the annotation�s active area..
            </summary>
            <value>The mouse up action.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creata a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.MouseUp = launchAction;
            Add the submit button to a new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to  submit button
            submitButton.Actions.MouseUp = launchAction
            'Add the submit button to document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationActions.GotFocus">
            <summary>
            Gets or sets the action to be performed when the annotation receives the 
            input focus.
            </summary>
            <value>The got focus action.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creata a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.GotFocus = launchAction;
            Add the submit button to a new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to  submit button
            submitButton.Actions.GotFocus = launchAction
            'Add the submit button to document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationActions.LostFocus">
            <summary>
            Gets or sets the action to be performed when the annotation loses the 
            input focus.
            </summary>
            <value>The lost focus action.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creata a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.LostFocus = launchAction;
            Add the submit button to a new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to  submit button
            submitButton.Actions.LostFocus = launchAction
            'Add the submit button to document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationActions.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfDocumentActions">
            <summary>
            Represents an action for the document.
            </summary>
            <example>
            <code lang="C#">
             //Create a new PDF document
             PdfDocument document = new PdfDocument();
             //Create and add new launch Action to the document
             PdfLaunchAction action = new PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte);
             document.Actions.AfterOpen = action;
             //Save document to disk
             document.Save("DocumentAction.pdf");
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As PdfDocument = New PdfDocument()
             'Create and add new launch Action to the document.
             Dim action As PdfLaunchAction = New PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte)
             document.Actions.AfterOpen = action
             'Save document to disk
             document.Save("DocumentAction.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDocumentActions.m_dictionary">
            <summary>
            Internal variable to store dictionary wrapper.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDocumentActions.m_afterOpen">
            <summary>
            Internal variable to store action to be performed after the document is opened.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDocumentActions.m_beforeClose">
            <summary>
            Internal variable to store action to be perforemed before document closes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDocumentActions.m_beforeSave">
            <summary>
            Internal variable to store action to be performed before the document saves.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDocumentActions.m_afterSave">
            <summary>
            Internal variable to store action to be performed after the document saves.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDocumentActions.m_beforePrint">
            <summary>
            Internal variable to store action to be performed before the document prints.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDocumentActions.m_afterPrint">
            <summary>
            Internal variable to store action to be performed after the document prints.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDocumentActions.m_catalog">
            <summary>
            Internal variable to store catalog.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfDocumentActions.#ctor(Syncfusion.Pdf.PdfCatalog)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfDocumentActions"/> class.
            </summary>
            <param name="catalog">The catalog.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDocumentActions.AfterOpen">
            <summary>
            Gets or sets the action to execute when the document is opened. 
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfAction"/> specifying the action to be executed when documents opens in the viewer. </value>
            <example>
            <code lang="C#">
             //Create a new PDF document
             PdfDocument document = new PdfDocument();
             //Create and add new launch Action to the document
             PdfLaunchAction action = new PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte);
             document.Actions.AfterOpen = action;
             //Save document to disk
             document.Save("DocumentAction.pdf");
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As PdfDocument = New PdfDocument()
             'Create and add new launch Action to the document.
             Dim action As PdfLaunchAction = New PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte)
             document.Actions.AfterOpen = action
             'Save document to disk
             document.Save("DocumentAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDocumentActions.BeforeClose">
            <summary>
            Gets or sets the action to be performed before the document is closed.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfAction"/> object specifying the action to be executed before the document is closed. </value>
            <example>
            <code lang="C#">
             //Create a new PDF document
             PdfDocument document = new PdfDocument();
             //Create and add new launch Action to the document
             PdfLaunchAction action = new PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte);
             document.Actions.BeforeClose = action;
             //Save document to disk
             document.Save("DocumentAction.pdf");
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As PdfDocument = New PdfDocument()
             'Create and add new launch Action to the document.
             Dim action As PdfLaunchAction = New PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte)
             document.Actions.BeforeClose = action
             'Save document to disk
             document.Save("DocumentAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDocumentActions.BeforeSave">
            <summary>
            Gets or sets the java script action to be performed before the document is saved.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfJavaScriptAction"/> object specifying the action to be executed before the document is saved. </value>
            <example>
            <code lang="C#">
             //Create a new PDF document
             PdfDocument document = new PdfDocument();
             //Create and add new launch Action to the document
             PdfLaunchAction action = new PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte);
             document.Actions.BeforeSave = action;
             //Save document to disk
             document.Save("DocumentAction.pdf");
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As PdfDocument = New PdfDocument()
             'Create and add new launch Action to the document.
             Dim action As PdfLaunchAction = New PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte)
             document.Actions.BeforeSave = action
             'Save document to disk
             document.Save("DocumentAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDocumentActions.AfterSave">
            <summary>
            Gets or sets the jave script action to be performed after the document is saved.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfJavaScriptAction"/> object specifying the action to be executed after the document is saved.</value>
            <example>
            <code lang="C#">
             //Create a new PDF document
             PdfDocument document = new PdfDocument();
             //Create and add new launch Action to the document
             PdfLaunchAction action = new PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte);
             document.Actions.AfterSave = action;
             //Save document to disk
             document.Save("DocumentAction.pdf");
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As PdfDocument = New PdfDocument()
             'Create and add new launch Action to the document.
             Dim action As PdfLaunchAction = New PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte)
             document.Actions.AfterSave = action
             'Save document to disk
             document.Save("DocumentAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDocumentActions.BeforePrint">
            <summary>
            Gets or sets the action to be performed before the document is printed.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfJavaScriptAction"/> object specifying the action to be executed before the document is printed. </value>
            <example>
            <code lang="C#">
             //Create a new PDF document
             PdfDocument document = new PdfDocument();
             //Create and add new launch Action to the document
             PdfLaunchAction action = new PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte);
             document.Actions.BeforePrint = action;
             //Save document to disk
             document.Save("DocumentAction.pdf");
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As PdfDocument = New PdfDocument()
             'Create and add new launch Action to the document.
             Dim action As PdfLaunchAction = New PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte)
             document.Actions.BeforePrint = action
             'Save document to disk
             document.Save("DocumentAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDocumentActions.AfterPrint">
            <summary>
            Gets or sets the action to be performed after the document is printed.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfJavaScriptAction"/> object specifying the action to be executed after the document is printed. .</value>
            <example>
            <code lang="C#">
             //Create a new PDF document
             PdfDocument document = new PdfDocument();
             //Create and add new launch Action to the document
             PdfLaunchAction action = new PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte);
             document.Actions.AfterPrint = action;
             //Save document to disk
             document.Save("DocumentAction.pdf");
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As PdfDocument = New PdfDocument()
             'Create and add new launch Action to the document.
             Dim action As PdfLaunchAction = New PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte)
             document.Actions.AfterPrint = action
             'Save document to disk
             document.Save("DocumentAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDocumentActions.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Interactive.PdfFieldActions" -->
        <member name="F:Syncfusion.Pdf.Interactive.PdfFieldActions.m_annotationActions">
            <summary>
            Interanal variable to store annotation's actions.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfFieldActions.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfFieldActions.m_keyPressed">
            <summary>
            Internal variable to store key pressed action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfFieldActions.m_format">
            <summary>
            Internal variable to store format action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfFieldActions.m_validate">
            <summary>
            Internal variable to store validate action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfFieldActions.m_calculate">
            <summary>
            Internal variable to store calculate action.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldActions.#ctor(Syncfusion.Pdf.Interactive.PdfAnnotationActions)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfFieldActions"/> class.
            </summary>
            <param name="annotationActrions">The annotation actions.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFieldActions.KeyPressed">
            <summary>
            Gets or sets the JavaScript action to be performed when the user types a keystroke 
            into a text field or combo box or modifies the selection in a scrollable list box. 
            This action can check the keystroke for validity and reject or modify it.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfJavaScriptAction"/> object specifying the action to be executed when the user types a keystroke.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Create a new PdfJavaScriptAction
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            //Set the javaAction to submitButton
            submitButton.Actions.KeyPressed = javaAction;
            //Add the  submit button to the new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("JavaScriptAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Create a new PdfJavaScriptAction
            Dim javaAction As PdfJavaScriptAction  = New PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")")
            'Set the javaAction to submit button
            submitButton.Actions.KeyPressed = javaAction
            'Add the  submit button to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("JavaScriptAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFieldActions.Format">
            <summary>
            Gets or sets the JavaScript action to be performed before the field is formatted 
            to display its current value. This action can modify the field�s value before formatting.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfJavaScriptAction"/> object specifying the action to be executed for formating the field value.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Create a new PdfJavaScriptAction
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            //Set the javaAction to submitButton
            submitButton.Actions.Format = javaAction;
            //Add the  submit button to the new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("JavaScriptAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Create a new PdfJavaScriptAction
            Dim javaAction As PdfJavaScriptAction  = New PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")")
            'Set the javaAction to submit button
            submitButton.Actions.Format = javaAction
            'Add the  submit button to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("JavaScriptAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFieldActions.Validate">
            <summary>
            Gets or sets the JavaScript action to be performed when the field�s value is changed. 
            This action can check the new value for validity.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfJavaScriptAction"/> object specifying the action to be executed for validating the field value.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Create a new PdfJavaScriptAction
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            //Set the javaAction to submitButton
            submitButton.Actions.Validate = javaAction;
            //Add the  submit button to the new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("JavaScriptAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Create a new PdfJavaScriptAction
            Dim javaAction As PdfJavaScriptAction  = New PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")")
            'Set the javaAction to submit button
            submitButton.Actions.Validate = javaAction
            'Add the  submit button to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("JavaScriptAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFieldActions.Calculate">
            <summary>
            Gets or sets the JavaScript action to be performed to recalculate the value 
            of this field when that of another field changes.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfJavaScriptAction"/> object specifying the action to be executed for calculating the field value.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Create a new PdfJavaScriptAction
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            //Set the javaAction to submitButton
            submitButton.Actions.Calculate = javaAction;
            //Add the  submit button to the new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("JavaScriptAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Create a new PdfJavaScriptAction
            Dim javaAction As PdfJavaScriptAction  = New PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")")
            'Set the javaAction to submit button
            submitButton.Actions.Calculate = javaAction
            'Add the  submit button to the new document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("JavaScriptAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFieldActions.MouseEnter">
            <summary>
            Gets or sets the action to be performed when the cursor enters the fields�s 
            area.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfAction"/> descendant specifying the action to be executed when the mouse enters the field's area.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creata a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.MouseEnter = launchAction;
            Add the submit button to a new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to  submit button
            submitButton.Actions.MouseEnter = launchAction
            'Add the submit button to document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFieldActions.MouseLeave">
            <summary>
            Gets or sets the action to be performed when the cursor exits the fields�s 
            area.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfAction"/> descendant specifying the action to be executed when the mouse leaves the field's area.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creata a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.MouseLeave = launchAction;
            Add the submit button to a new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to  submit button
            submitButton.Actions.MouseLeave = launchAction
            'Add the submit button to document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFieldActions.MouseUp">
            <summary>
            Gets or sets the action to be performed when the mouse button is released 
            inside the field�s area.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfAction"/> descendant specifying the action to be executed when the mouse button is released inside the field's area.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creata a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.MouseUp = launchAction;
            Add the submit button to a new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to  submit button
            submitButton.Actions.MouseUp = launchAction
            'Add the submit button to document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFieldActions.MouseDown">
            <summary>
            Gets or sets the action to be performed when the mouse button is pressed inside the 
            field�s area.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfAction"/> descendant specifying the action to be executed when the mouse button is pressed inside the field's area.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creata a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.MouseDown = launchAction;
            Add the submit button to a new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to  submit button
            submitButton.Actions.MouseDown = launchAction
            'Add the submit button to document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>       
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFieldActions.GotFocus">
            <summary>
            Gets or sets the action to be performed when the field receives the 
            input focus.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfAction"/> descendant specifying the action to be executed when the field receives the input focus.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creata a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.GotFocus = launchAction;
            Add the submit button to a new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to  submit button
            submitButton.Actions.GotFocus = launchAction
            'Add the submit button to document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFieldActions.LostFocus">
            <summary>
            Gets or sets the action to be performed when the field loses the 
            input focus.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfAction"/> descendant specifying the action to be executed when the field losts the input focus.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creata a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt");
            //Set the launch action to submit button
            submitButton.Actions.LostFocus = launchAction;
            Add the submit button to a new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt")
            'Set the launch action to  submit button
            submitButton.Actions.LostFocus = launchAction
            'Add the submit button to document.
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("LaunchAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFieldActions.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfResetAction">
            <summary>
            Represents Pdf form's reset action.
            </summary>
            <remarks>This action allows a user to reset the form fields to their default values. </remarks>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a PdfButtonField 
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfResetAction
            PdfResetAction resetAction = new PdfResetAction();
            //Set the resetAction to submitButton
            submitButton.Actions.GotFocus = resetAction;
            //Add the submit button to a document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("ResetAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfResetAction
            PdfResetAction resetAction = new PdfResetAction()
            'Set the resetAction to submitButton
            submitButton.Actions.GotFocus = resetAction
            'Add the submitButton to document
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("ResetAction.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfResetAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfResetAction"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a PdfButtonField 
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfResetAction
            PdfResetAction resetAction = new PdfResetAction();
            //Set the resetAction to submitButton
            submitButton.Actions.GotFocus = resetAction;
            //Add the submit button to a document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("ResetAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfResetAction
            PdfResetAction resetAction = new PdfResetAction()
            'Set the resetAction to submitButton
            submitButton.Actions.GotFocus = resetAction
            'Add the submitButton to document
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("ResetAction.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfResetAction.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfResetAction.Include">
            <summary>
            Gets or sets a value indicating whether fields contained in Fields
            collection will be included for resetting.
            </summary>
            <value><c>true</c> if include; otherwise, <c>false</c>.</value>
            <remarks>
            If Include property is true, only the fields in this collection will be reset.
            If Include property is false, the fields in this collection are not reset
            and only the remaining form fields are reset.
            If the collection is null or empty, then all the form fields are reset
            and the Include property is ignored.
            </remarks>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Reset";
            //Create a new resetAction
            PdfResetAction resetAction = new PdfResetAction();
            resetAction.Include=true;
            submitButton.Actions.GotFocus = resetAction;
            //Add the submit button to a document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("ResetAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Reset"
            'Create a new resetAction
            PdfResetAction resetAction = new PdfResetAction()
            resetAction.Include=True
            submitButton.Actions.GotFocus = resetAction
            'Add the submitButton to document
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("ResetAction.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfSoundAction">
            <summary>
            Represents the sound action.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create sound action
            PdfSoundAction soundAction = new PdfSoundAction(@"..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav");
            soundAction.Sound.Bits = 16;
            soundAction.Sound.Channels = PdfSoundChannels.Stereo;
            soundAction.Sound.Encoding = PdfSoundEncoding.Signed;
            soundAction.Volume = 0.9f;
            soundAction.Synchronous = true;
            soundAction.Mix = true;
            //Set the sound action to submit button
            submitButton.Actions.GotFocus = soundAction;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SoundAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Font = font
            submitButton.Text = "Apply"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            //Create a new sound annotation
            Dim soundAction As PdfSoundAction = New PdfSoundAction("..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav")
            soundAction.Sound.Bits = 16
            soundAction.Sound.Channels = PdfSoundChannels.Stereo
            soundAction.Sound.Encoding = PdfSoundEncoding.Signed
            soundAction.Volume = 0.9F
            soundAction.Synchronous = True
            soundAction.Mix = True
            submitButton.Actions.GotFocus = soundAction
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SoundAction.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundAction.m_volume">
            <summary>
            Internal variable to store the volume at which to play the sound.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundAction.m_sound">
            <summary>
            Internal variable to store sound.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundAction.m_synchronous">
            <summary>
            Internal variable to store value whether to play sound synchronously or asynchronously.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundAction.m_repeat">
            <summary>
            Internal variable to store value whether to repeat playing.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundAction.m_mix">
            <summary>
            Internal variable to store value whether to mix this sound with any other sound already playing.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSoundAction.#ctor(System.String)">
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
             //Create sound action
            PdfSoundAction soundAction = new PdfSoundAction(@"..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav");
            soundAction.Sound.Bits = 16;
            soundAction.Sound.Channels = PdfSoundChannels.Stereo;
            soundAction.Sound.Encoding = PdfSoundEncoding.Signed;
            soundAction.Volume = 0.9f;
            soundAction.Synchronous = true;
            soundAction.Mix = true;
            //Set the sound action to submit button
            submitButton.Actions.GotFocus = soundAction;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SoundAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Font = font
            submitButton.Text = "Apply"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            //Create a new sound annotation
            Dim soundAction As PdfSoundAction = New PdfSoundAction("..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav")
            soundAction.Sound.Bits = 16
            soundAction.Sound.Channels = PdfSoundChannels.Stereo
            soundAction.Sound.Encoding = PdfSoundEncoding.Signed
            soundAction.Volume = 0.9F
            soundAction.Synchronous = True
            soundAction.Mix = True
            submitButton.Actions.GotFocus = soundAction
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SoundAction.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSoundAction.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSoundAction.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSoundAction.Volume">
            <summary>
            Gets or sets the volume at which to play the sound, in the range -1.0 to 1.0.
            </summary>
            <value>The volume of the sound.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
             //Create sound action
            PdfSoundAction soundAction = new PdfSoundAction(@"..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav");
            soundAction.Volume = 0.9f;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SoundAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Font = font
            submitButton.Text = "Apply"
            submitButton.BackColor = new PdfColor(181, 191, 203)
             'Create sound action
            Dim soundAction As PdfSoundAction = New PdfSoundAction("..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav")
            soundAction.Volume = 0.9F
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SoundAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSoundAction.FileName">
            <value>The name of the sound file.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
             //Create sound action
            PdfSoundAction soundAction = new PdfSoundAction(@"..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav");
            //Get the fileName form soundAction
            string fileName=soundAction.FileName;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SoundAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Font = font
            submitButton.Text = "Apply"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            //Create a new sound annotation
            Dim soundAction As PdfSoundAction = New PdfSoundAction("..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav")
            //Get the fileName form soundAction
            Dim fileName Aas string =soundAction.FileName;
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SoundAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSoundAction.Sound">
            <summary>
            Gets or sets the sound.
            </summary>
            <value><see cref="T:Syncfusion.Pdf.Interactive.PdfSound"/> represents the sound.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
             //Create sound action
            PdfSoundAction soundAction = new PdfSoundAction(@"..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav");
            soundAction.Sound.Bits = 16;
            soundAction.Sound.Channels = PdfSoundChannels.Stereo;
            soundAction.Sound.Encoding = PdfSoundEncoding.Signed;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SoundAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Font = font
            submitButton.Text = "Apply"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            //Create a new sound annotation
            Dim soundAction As PdfSoundAction = New PdfSoundAction("..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav")
            soundAction.Sound.Bits = 16
            soundAction.Sound.Channels = PdfSoundChannels.Stereo
            soundAction.Sound.Encoding = PdfSoundEncoding.Signed
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SoundAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSoundAction.Synchronous">
            <summary>
            Gets or sets a value whether to play the sound synchronously or asynchronously.
            If this flag is true, the viewer application retains control, allowing no further 
            user interaction other than canceling the sound, until the sound has been 
            completely played. Default value: false.
            </summary>
            <value><c>true</c> if synchronous; otherwise, <c>false</c>.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
             //Create sound action
            PdfSoundAction soundAction = new PdfSoundAction(@"..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav");
            soundAction.Synchronous = true;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SoundAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Font = font
            submitButton.Text = "Apply"
            submitButton.BackColor = new PdfColor(181, 191, 203)
             'Create sound action
            Dim soundAction As PdfSoundAction = New PdfSoundAction("..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav")
            soundAction.Synchronous = True
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SoundAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSoundAction.Repeat">
            <summary>
            Gets or sets a value indicating whether to repeat the sound indefinitely. 
            If this entry is present, the <see cref="P:Syncfusion.Pdf.Interactive.PdfSoundAction.Synchronous"/> property is ignored. Default value: false.
            </summary>
            <value><c>true</c> if repeat; otherwise, <c>false</c>.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
             //Create sound action
            PdfSoundAction soundAction = new PdfSoundAction(@"..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav");
            soundAction.Repeat = true;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SoundAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Font = font
            submitButton.Text = "Apply"
            submitButton.BackColor = new PdfColor(181, 191, 203)
             'Create sound action
            Dim soundAction As PdfSoundAction = New PdfSoundAction("..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav")
            soundAction.Repeat = True
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SoundAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSoundAction.Mix">
            <summary>
            Gets or sets a value indicating whether to mix this sound with any other 
            sound already playing. If this flag is false, any previously playing sound is 
            stopped before starting this sound; this can be used to stop a repeating 
            sound. Default value: false.
            </summary>
            <value><c>true</c> if mix; otherwise, <c>false</c>.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
             //Create sound action
            PdfSoundAction soundAction = new PdfSoundAction(@"..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav");
            soundAction.Mix = true;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SoundAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Font = font
            submitButton.Text = "Apply"
            submitButton.BackColor = new PdfColor(181, 191, 203)
            Dim soundAction As PdfSoundAction = New PdfSoundAction("..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav")
            soundAction.Mix = True
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SoundAction.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfSubmitAction">
            <summary>
            Represents Pdf form's submit action.
            </summary>
            <remarks>This type of action allows a user to go to a resource on the Internet, tipically a hypertext link. </remarks>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfSubmitAction
            PdfSubmitAction submitAction = new PdfSubmitAction("http://stevex.net/dump.php");
            submitAction.DataFormat = SubmitDataFormat.Html;
            submitButton.Actions.GotFocus = submitAction;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SubmitAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfSubmitAction
            Dim submitAction As PdfSubmitAction = new PdfSubmitAction("http://stevex.net/dump.php")
            submitAction.DataFormat = SubmitDataFormat.Html;
            submitButton.Actions.GotFocus = submitAction
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SubmitAction.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitAction.m_fileName">
            <summary>
            Internal variable to store file name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitAction.m_flags">
            <summary>
            Internal variable to store submit flags.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitAction.m_httpMethod">
            <summary>
            Internal variable to store Http method.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitAction.m_canonicalDateTimeFormat">
            <summary>
            Internal variable to store value whether to submit dates in canonical format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitAction.m_submitCoordinates">
            <summary>
            Internal variable to store value whether to submit mouse pointer coordinates.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitAction.m_includeNoValueFields">
            <summary>
            Internal variable to store value whether to submit fields without values.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitAction.m_includeIncrementalUpdates">
            <summary>
            Internal variable to store value whether to submit incremental updates.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitAction.m_includeAnnotations">
            <summary>
            Internal variable to store value indicating whether to submit annotations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitAction.m_excludeNonUserAnnotations">
            <summary>
            Internal variable to store value indicating whether to exclude non-user annotations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitAction.m_embedForm">
            <summary>
            Internal variable to store value indicating whether to embed form.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitAction.m_dataFormat">
            <summary>
            Internal variable to store submit data format.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSubmitAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfSubmitAction"/> class.
            </summary>
            <param name="url">The URL.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfSubmitAction
            PdfSubmitAction submitAction = new PdfSubmitAction("http://stevex.net/dump.php");
            submitAction.DataFormat = SubmitDataFormat.Html;
            submitButton.Actions.GotFocus = submitAction;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SubmitAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfSubmitAction
            Dim submitAction As PdfSubmitAction = new PdfSubmitAction("http://stevex.net/dump.php")
            submitAction.DataFormat = SubmitDataFormat.Html;
            submitButton.Actions.GotFocus = submitAction
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SubmitAction.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSubmitAction.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSubmitAction.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Interactive.PdfSubmitAction.Url" -->
        <member name="P:Syncfusion.Pdf.Interactive.PdfSubmitAction.HttpMethod">
            <summary>
            Gets or sets the HTTP method.
            </summary>
            <value>The HTTP method.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfSubmitAction
            PdfSubmitAction submitAction = new PdfSubmitAction("http://stevex.net/dump.php");
            'Sets the HttpMethod to submit action
            submitAction.HttpMethod=HttpMethod.Post;
            submitButton.Actions.GotFocus = submitAction;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SubmitAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfSubmitAction
            Dim submitAction As PdfSubmitAction = new PdfSubmitAction("http://stevex.net/dump.php")
            'Sets the HttpMethod to submit action
            submitAction.HttpMethod=HttpMethod.Post
            submitButton.Actions.GotFocus = submitAction
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SubmitAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSubmitAction.CanonicalDateTimeFormat">
            <summary>
            If set, any submitted field values representing dates are converted to the 
            standard format. The interpretation of a form field as a date is not specified 
            explicitly in the field itself but only in the JavaScript code that processes it.
            </summary>
            <value>
            <c>true</c> if use canonical date time format when submit data; otherwise, <c>false</c>.
            </value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfSubmitAction
            PdfSubmitAction submitAction = new PdfSubmitAction("http://stevex.net/dump.php");
            'Sets the CanonicalDateTimeFormat to submit action
            submitAction.CanonicalDateTimeFormat=true;
            submitButton.Actions.GotFocus = submitAction;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SubmitAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfSubmitAction
            Dim submitAction As PdfSubmitAction = new PdfSubmitAction("http://stevex.net/dump.php")
            'Sets the CanonicalDateTimeFormat to submit action
            submitAction.CanonicalDateTimeFormat=True
            submitButton.Actions.GotFocus = submitAction
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SubmitAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSubmitAction.SubmitCoordinates">
            <summary>
            Gets or sets a value indicating whether to submit mouse pointer coordinates. If set, 
            the coordinates of the mouse click that caused the submit-form action are transmitted 
            as part of the form data. The coordinate values are relative to the upper-left corner 
            of the field�s widget annotation rectangle.
            </summary>
            <value><c>true</c> if submit coordinates; otherwise, <c>false</c>.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfSubmitAction
            PdfSubmitAction submitAction = new PdfSubmitAction("http://stevex.net/dump.php");
            'Sets the SubmitCoordinates to submit action
            submitAction.SubmitCoordinates=true;
            submitButton.Actions.GotFocus = submit action;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SubmitAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfSubmitAction
            Dim submitAction As PdfSubmitAction = new PdfSubmitAction("http://stevex.net/dump.php")
            'Sets the SubmitCoordinates to submit action
            submitAction.SubmitCoordinates=True
            submitButton.Actions.GotFocus = submit action;
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SubmitAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSubmitAction.IncludeNoValueFields">
            <summary>
            Gets or sets a value indicating whether to submit fields without value.
            If set, all fields designated by the Fields collection and the <see cref="P:Syncfusion.Pdf.Interactive.PdfSubmitAction.Include"/>
            flag are submitted, regardless of whether they have a value. For fields without a 
            value, only the field name is transmitted.
            </summary>
            <value>
            <c>true</c> if submit fields without value or the empty ones; otherwise, <c>false</c>.
            </value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfSubmitAction
            PdfSubmitAction submitAction = new PdfSubmitAction("http://stevex.net/dump.php");
            'Sets the IncludeNoValueFields to submit action
            submitAction.IncludeNoValueFields=true;
            submitButton.Actions.GotFocus = submitAction;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SubmitAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfSubmitAction
            Dim submitAction As PdfSubmitAction = new PdfSubmitAction("http://stevex.net/dump.php")
            'Sets the IncludeNoValueFields to submit action
            submitAction.IncludeNoValueFields=true
            submitButton.Actions.GotFocus = submitAction
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SubmitAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSubmitAction.IncludeIncrementalUpdates">
            <summary>
            Gets or sets a value indicating whether to submit form's incremental updates.
            Meaningful only when the form is being submitted in Forms Data Format.
            If set, the submitted FDF file includes the contents of all incremental 
            updates to the underlying PDF document. If clear, the incremental updates are 
            not included.
            </summary>
            <value>
            <c>true</c> if incremental updates should be submitted; otherwise, <c>false</c>.
            </value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfSubmitAction
            PdfSubmitAction submitAction = new PdfSubmitAction("http://stevex.net/dump.php");
            'Sets the IncludeIncrementalUpdates to submit action
            submitAction.IncludeIncrementalUpdates=true;
            submitButton.Actions.GotFocus = submitAction;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SubmitAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfSubmitAction
            Dim submitAction As PdfSubmitAction = new PdfSubmitAction("http://stevex.net/dump.php")
            'Sets the IncludeIncrementalUpdates to submit action
            submitAction.IncludeIncrementalUpdates=True
            submitButton.Actions.GotFocus = submitAction
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SubmitAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSubmitAction.IncludeAnnotations">
            <summary>
            Gets or sets a value indicating whether to submit annotations.
            Meaningful only when the form is being submitted in Forms Data Format.
            If set, the submitted FDF file includes all markup annotations in the 
            underlying PDF document. If clear, markup annotations are not included.
            </summary>
            <value><c>true</c> if annotations should be submitted; otherwise, <c>false</c>.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfSubmitAction
            PdfSubmitAction submitAction = new PdfSubmitAction("http://stevex.net/dump.php");
            'Sets the IncludeAnnotations to submit action
            submitAction.IncludeAnnotations=true;
            submitButton.Actions.GotFocus = submitAction;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SubmitAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfSubmitAction
            Dim submitAction As PdfSubmitAction = new PdfSubmitAction("http://stevex.net/dump.php")
            'Sets the IncludeAnnotations to submit action
            submitAction.IncludeAnnotations=True
            submitButton.Actions.GotFocus = submitAction
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SubmitAction.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSubmitAction.ExcludeNonUserAnnotations">
            <summary>
            Gets or sets a value indicating whether to exclude non user annotations form submit 
            data stream. Meaningful only when the form is being submitted in Forms Data Format 
            and the <see cref="P:Syncfusion.Pdf.Interactive.PdfSubmitAction.IncludeAnnotations"/> property is set to true.
            </summary>
            <value>
            <c>true</c> if non user annotations should be excluded; otherwise, <c>false</c>.
            </value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfSubmitAction
            PdfSubmitAction submitAction = new PdfSubmitAction("http://stevex.net/dump.php");
            'Sets the ExcludeNonUserAnnotations to submit action
            submitAction.ExcludeNonUserAnnotations=true;
            submitButton.Actions.GotFocus = submitAction;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SubmitAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfSubmitAction
            Dim submitAction As PdfSubmitAction = new PdfSubmitAction("http://stevex.net/dump.php")
            'Sets the ExcludeNonUserAnnotations to submit action
            submitAction.ExcludeNonUserAnnotations=True
            submitButton.Actions.GotFocus = submitAction
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SubmitAction.pdf")
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Interactive.PdfSubmitAction.EmbedForm" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Interactive.PdfSubmitAction.DataFormat" -->
        <member name="P:Syncfusion.Pdf.Interactive.PdfSubmitAction.Include">
            <summary>
            Gets or sets a value indicating whether fields contained in Fields
            collection will be included for submitting.
            </summary>
            <value><c>true</c> if include; otherwise, <c>false</c>.</value>
            <remarks>
            If Include property is true, only the fields in this collection will be submitted.
            If Include property is false, the fields in this collection are not submitted
            and only the remaining form fields are submitted.
            If the collection is null or empty, then all the form fields are reset
            and the Include property is ignored.
            If the field has Export property set to false it will be not included for 
            submitting in any case.
            </remarks>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfSubmitAction
            PdfSubmitAction submitAction = new PdfSubmitAction("http://stevex.net/dump.php");
            //Sets the Include option to submit action
            submitAction.Include=true;
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("SubmitAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfSubmitAction
            Dim submitAction As PdfSubmitAction = new PdfSubmitAction("http://stevex.net/dump.php")
            'Sets the Include option to submit action
            submitAction.Include=True
            document.Form.Fields.Add(submitButton)
            'Save document to disk.
            document.Save("SubmitAction.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfUriAction">
            <summary>
            Represents an action which resolves unique resource identifier.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfUriAction
            PdfUriAction uriAction = new PdfUriAction("http://www.google.com");
            submitButton.Actions.GotFocus = uriAction;
            document.Form.Fields.Add(submitButton);
            //Save the document to disk.
            document.Save("UriAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfUriAction
            Dim uriAction As PdfUriAction  = New PdfUriAction("http://www.google.com");
            submitButton.Actions.GotFocus = javaAction
            document.Form.Fields.Add(submitButton)
            'Save the document to disk.
            document.Save("UriAction.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfUriAction.m_uri">
            <summary>
            Internal variable to store unique resource identifier.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfUriAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfUriAction"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfUriAction
            PdfUriAction uriAction = new PdfUriAction();
            submitButton.Actions.GotFocus = uriAction;
            document.Form.Fields.Add(submitButton);
            //Save the document to disk.
            document.Save("UriAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfUriAction
            Dim uriAction As PdfUriAction  = New PdfUriAction()
            document.Form.Fields.Add(submitButton)
            'Save the document to disk.
            document.Save("UriAction.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfUriAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfUriAction"/> class.
            </summary>
            <param name="uri">The unique resource identifier.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfUriAction
            PdfUriAction uriAction = new PdfUriAction("http://www.google.com");
            submitButton.Actions.GotFocus = uriAction;
            document.Form.Fields.Add(submitButton);
            //Save the document to disk.
            document.Save("UriAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfUriAction
            Dim uriAction As PdfUriAction  = New PdfUriAction("http://www.google.com")
            document.Form.Fields.Add(submitButton)
            'Save the document to disk.
            document.Save("UriAction.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfUriAction.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfUriAction.Uri">
            <summary>
            Gets or sets the unique resource identifier.
            </summary>
            <value>The unique resource identifier.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Creates a new PdfButtonField
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            submitButton.Text = "Apply";
            //Create a new PdfUriAction
            PdfUriAction uriAction = new PdfUriAction();
            uriAction.Uri="http://www.google.com";
            submitButton.Actions.GotFocus = uriAction;
            document.Form.Fields.Add(submitButton);
            //Save the document to disk.
            document.Save("UriAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            submitButton.Text = "Apply"
            'Create a new PdfUriAction
            Dim uriAction As PdfUriAction  = New PdfUriAction()
            uriAction.Uri="http://www.google.com";
            submitButton.Actions.GotFocus = javaAction
            document.Form.Fields.Add(submitButton)
            'Save the document to disk.
            document.Save("UriAction.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfFilePathType">
            <summary>
            Specifies the file path type.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new PdfButtonField.
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            //Set the bounds to submitButton.
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            //Set the submit button text.
            submitButton.Text = "Launch";
            //Create a new PdfLaunchAction and set the PdfFilePathType.
            PdfLaunchAction launchAction = new PdfLaunchAction(@"..\..\Data\Sample.txt",PdfFilePathType.Absolute);
            //Set the actions to submit button.
            submitButton.Actions.GotFocus = launchAction;
            //Save document to disk.
            document.Save("ActionDestination.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new PdfButtonField.
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            'Set the bounds to submit button.
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            'Set the submit button text.
            submitButton.Text = "Launch"
            'Create a new PdfLaunchAction and set the PdfFilePathType.
            Dim launchAction As PdfLaunchAction  = new PdfLaunchAction(@"..\..\Data\Sample.txt",PdfFilePathType.Absolute)
            'Set the actions to submit button.
            submitButton.Actions.GotFocus = launchAction
            'Save document to disk.
            document.Save("ActionDestination.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfFilePathType.Relative">
            <summary>
            Specifies the file location with out including the domain name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfFilePathType.Absolute">
            <summary>
            Specifies the location, including the domain name.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfActionDestination">
            <summary>
            Specifies the available named actions supported by the viewer. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new page and adds it as the last page of the document
            page = document.Pages.Add();
            //Creates a new page and adds it as the last page of the document
            page = document.Pages.Add();
            //Creates a new page and adds it as the last page of the document
            page = document.Pages.Add();
            //Creates a new page and adds it as the last page of the document
            page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Create a new PdfButtonField.
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            //Set the bounds to submitButton.
            submitButton.Bounds = new RectangleF(25, 160, 100, 20);
            //Set the font to submitButton.
            submitButton.Font = font;
            //Sets the submit button text.
            submitButton.Text = "First Page";
            //Set the back color to submit button.
            submitButton.BackColor = new PdfColor(181, 191, 203);
            //Create a new PdfNamedAction.
            PdfNamedAction namedAction = new PdfNamedAction(PdfActionDestination.FirstPage);
            //Set the named action destination.
            namedAction.Destination=PdfActionDestination.PrevPage;
            //Set the Actions  to namedAction.
            submitButton.Actions.GotFocus = namedAction;
            //Add the submitButton to the new document.
            document.Form.Fields.Add(submitButton);
            //Save document to disk.
            document.Save("ActionDestination.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new page and adds it as the last page of the document
            page = document.Pages.Add()
            'Creates a new page and adds it as the last page of the document
            page = document.Pages.Add()
            'Creates a new page and adds it as the last page of the document
            page = document.Pages.Add()
            'Create font and font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Create a new PdfButtonField
            Dim submitButton As PdfButtonField  = New PdfButtonField(page, "submitButton")
            'Set the bounds to submit button.
            submitButton.Bounds = New RectangleF(25, 160, 100, 20)
            'Set the font to submitButton.
            submitButton.Font = font
            'Sets the submit button text.
            submitButton.Text = "First Page"
            'Set the back color to submit button.
            submitButton.BackColor = new PdfColor(181, 191, 203)
            'Create a new PdfNamedAction
            Dim namedAction As PdfNamedAction  = new PdfNamedAction(PdfActionDestination.FirstPage)
            'Set the named action.
            namedAction.Destination=PdfActionDestination.PrevPage
            'Set the Actions  to namedAction.
            submitButton.Actions.GotFocus = namedAction
            'Add the submitButton to the new document.
            document.Form.Fields.Add(gotoAction)
            'Save document to disk.
            document.Save("ActionDestination.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfActionDestination.FirstPage">
            <summary>
            Navigate to first page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfActionDestination.LastPage">
            <summary>
            Navigate to last page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfActionDestination.NextPage">
            <summary>
            Navigate to next page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfActionDestination.PrevPage">
            <summary>
            Navigate to previous page.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfSubmitFormFlags">
            <summary>
            Specifies the available data formats for submitting the form data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitFormFlags.IncludeExclude">
            <summary>
            If clear, the Fields array specifies which fields to
            include in the submission. (All descendants of the specified fields in
            the field hierarchy are submitted as well.)
            If set, the Fields array tells which fields to exclude. All fields in the
            document�s interactive form are submitted except those listed in the
            Fields array and those whose NoExport flag.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitFormFlags.IncludeNoValueFields">
            <summary>
            If set, all fields designated by the Fields array and the Include/
            Exclude flag are submitted, regardless of whether they have a value. 
            For fields without a value, only the
            field name is transmitted.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitFormFlags.ExportFormat">
            <summary>
            Meaningful only if the SubmitPDF and XFDF flags are clear. If set,
            field names and values are submitted in HTML Form format. If
            clear, they are submitted in Forms Data Format
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitFormFlags.GetMethod">
            <summary>
            If set, field names and values are submitted using an HTTP GET
            request. If clear, they are submitted using a POST request. This flag
            is meaningful only when the ExportFormat flag is set; if ExportFormat
            is clear, this flag must also be clear.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitFormFlags.SubmitCoordinates">
            <summary>
            If set, the coordinates of the mouse click that caused the submitform
            action are transmitted as part of the form data. The coordinate
            values are relative to the upper-left corner of the field�s widget annotation
            rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitFormFlags.Xfdf">
            <summary>
            Meaningful only if the SubmitPDF flags are clear. If set,
            field names and values are submitted as XML Forms Data Format .
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitFormFlags.IncludeAppendSaves">
            <summary>
            Meaningful only when the form is being submitted in
            Forms Data Format (that is, when both the XFDF and ExportFormat
            flags are clear). If set, the submitted FDF file includes the contents
            of all incremental updates to the underlying PDF document,
            as contained in the Differences entry in the FDF dictionary.
            If clear, the incremental updates are not included.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitFormFlags.IncludeAnnotations">
            <summary>
            Meaningful only when the form is being submitted in
            Forms Data Format (that is, when both the XFDF and ExportFormat
            flags are clear). If set, the submitted FDF file includes all markup
            annotations in the underlying PDF document.
            If clear, markup annotations are not included.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitFormFlags.SubmitPdf">
            <summary>
            If set, the document is submitted as PDF, using the
            MIME content type application/pdf (described in Internet RFC
            2045, Multipurpose Internet Mail Extensions (MIME), Part One:
            Format of Internet Message Bodies; see the Bibliography). If set, all
            other flags are ignored except GetMethod.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitFormFlags.CanonicalFormat">
            <summary>
            If set, any submitted field values representing dates are
            converted to the standard format described.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitFormFlags.ExclNonUserAnnots">
            <summary>
            Meaningful only when the form is being submitted in
            Forms Data Format (that is, when both the XFDF and
            ExportFormat flags are clear) and the IncludeAnnotations flag is
            set. If set, it includes only those markup annotations whose T entry
            matches the name of the current user, as determined
            by the remote server to which the form is being submitted.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitFormFlags.ExclFKey">
            <summary>
            Meaningful only when the form is being submitted in
            Forms Data Format (that is, when both the XFDF and ExportFormat
            flags are clear). If set, the submitted FDF excludes the F entry.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSubmitFormFlags.EmbedForm">
            <summary>
            Meaningful only when the form is being submitted in
            Forms Data Format (that is, when both the XFDF and ExportFormat
            flags are clear). If set, the F entry of the submitted FDF is a file
            specification containing an embedded file stream representing the
            PDF file from which the FDF is being submitted.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DActivation">
            <summary>
            Represents the activation states for the 3D annotation. 
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DActivation.
            Pdf3DActivation activation = new Pdf3DActivation();
            activation.ActivationMode = Pdf3DActivationMode.ExplicitActivation;
            activation.ShowToolbar = false;
            annotation.Activation = activation;
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DActivation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DActivation.
            Dim activation As Pdf3DActivation = New Pdf3DActivation()
            activation.ActivationMode = Pdf3DActivationMode.PageVisible
            activation.ShowToolbar = True
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DActivation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DActivation.m_activationMode">
            <summary>
            Internal variable to store the activation mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DActivation.m_activationState">
            <summary>
            Internal variable to store the activation state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DActivation.m_deactivationMode">
            <summary>
            Internal variable to store the deactivation mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DActivation.m_deactivationState">
            <summary>
            Internal variable to store the deactivation state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DActivation.m_showToolbar">
            <summary>
            Internal variable reprsents whether to show toolbar or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DActivation.m_showUI">
            <summary>
            Internal variable reprsents whether to show UI or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DActivation.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DActivation.#ctor">
            <summary>
            Initializes the new instance of <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DActivation"/> class.
            </summary>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DActivation
            Pdf3DActivation activation = new Pdf3DActivation();
            activation.ActivationMode = Pdf3DActivationMode.ExplicitActivation;
            activation.ShowToolbar = false;
            annotation.Activation = activation;
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DActivation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DActivation
            Dim activation As Pdf3DActivation = New Pdf3DActivation()
            activation.ActivationMode = Pdf3DActivationMode.PageVisible
            activation.ShowToolbar = True
            'Draws a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DActivation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DActivation.Initialize">
            <summary>
            Initializes the instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DActivation.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DActivation.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DActivation.ActivationMode">
            <summary>
            Gets or sets the activation mode for the annotation.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DActivation.
            Pdf3DActivation activation = new Pdf3DActivation();
            activation.ActivationMode = Pdf3DActivationMode.PageOpen;
            annotation.Activation = activation;
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DActivation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            //Create a new Pdf3DActivation.
            Dim activation As Pdf3DActivation = New Pdf3DActivation()
            activation.ActivationMode = Pdf3DActivationMode.PageOpen
            activation.ShowToolbar = True
            annotation.Activation = activation
            'Draw a annotation into the new page
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DActivation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DActivation.DeactivationMode">
            <summary>
            Gets or sets the deactivation mode for the annotation.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DActivation.
            Pdf3DActivation activation = new Pdf3DActivation();
            //Sets the DeactivationState.
            activation.DeactivationState = Pdf3DDeactivationState.Live;
            activation.ShowToolbar = false;
            annotation.Activation = activation;
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DActivation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DActivation
            Dim activation As Pdf3DActivation = New Pdf3DActivation()
            activation.DeactivationState = Pdf3DDeactivationState.Live
            annotation.Activation = activation
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DActivation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DActivation.ActivationState">
            <summary>
            Gets or sets the activation state for the annotation.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DActivation.
            Pdf3DActivation activation = new Pdf3DActivation();
            aannotation.ActivationState = Pdf3DActivationState.Instantiated;
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DActivation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DActivation
            Dim activation As Pdf3DActivation = New Pdf3DActivation()
            annotation.ActivationState = Pdf3DActivationState.Instantiated
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DActivation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DActivation.DeactivationState">
            <summary>
            Gets or sets the deactivation state for the annotation.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DActivation
            Pdf3DActivation activation = new Pdf3DActivation();
            activation.DeactivationState = Pdf3DDeactivationState.Live;
            activation.ShowToolbar = false;
            annotation.Activation = activation;
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DActivation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DActivation
            Dim activation As Pdf3DActivation = New Pdf3DActivation()
            activation.DeactivationState = Pdf3DDeactivationState.Live
            annotation.Activation = activation
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DActivation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DActivation.ShowToolbar">
            <summary>
            Gets or sets a value indicating whether the toolbar should be displayed when the annotation is activated or not. 
            </summary>
            <value>If true, a toolbar should be displayed by default when the annotation is activated and given focus. If false, a toolbar should not be displayed by default. </value>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DActivation
            Pdf3DActivation activation = new Pdf3DActivation();
            activation.ShowToolbar = false;
            annotation.Activation = activation;
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DActivation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DActivation
            Dim activation As Pdf3DActivation = New Pdf3DActivation()
            activation.ShowToolbar = True
            annotation.Activation = activation
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DActivation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DActivation.ShowUI">
            <summary>
            Gets or sets a value indicating whether the UI for managing the 3D artwork should be displayed when the annotation is activated. 
            </summary>
            <value>If true, the user interface should be made visible when the annotation is activated. If false, the user interface should not be made visible by default.</value>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DActivation
            Pdf3DActivation activation = new Pdf3DActivation();
            activation.ShowUI = false;
            annotation.Activation = activation;
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DActivation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DActivation
            Dim activation As Pdf3DActivation = New Pdf3DActivation()
            activation.ShowUI = True
            annotation.Activation = activation
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DActivation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DActivation.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DActivation.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DAnimation">
            <summary>
            Represents the lighting to apply for the 3D artwork.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new Pdf3DAnimation
            Pdf3DAnimation animation = new Pdf3DAnimation(PDF3DAnimationType.Linear);
            animation.Type = PDF3DAnimationType.Linear;
            </code>
            <code lang="VB">
            'Create a new Pdf3DAnimation
            Dim animation As Pdf3DAnimation  = New Pdf3DAnimation(PDF3DAnimationType.Linear)
            animation.Type = PDF3DAnimationType.Linear;
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DAnimation"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new Pdf3DAnimation
            Pdf3DAnimation animation = new Pdf3DAnimation();
            animation.Type = PDF3DAnimationType.Linear;
            </code>
            <code lang="VB">
            'Create a new Pdf3DAnimation
            Dim animation As Pdf3DAnimation  = New Pdf3DAnimation()
            animation.Type = PDF3DAnimationType.Linear
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DAnimation.#ctor(Syncfusion.Pdf.Interactive.PDF3DAnimationType)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DAnimation"/> class.
            </summary>
            <param name="type">PDF 3D Animation Type.</param>
            <example>
            <code lang="C#">
            //Create a new Pdf3DAnimation
            Pdf3DAnimation animation = new Pdf3DAnimation(PDF3DAnimationType.Linear);
            animation.Type = PDF3DAnimationType.Linear;
            </code>
            <code lang="VB">
            'Create a new Pdf3DAnimation
            Dim animation As Pdf3DAnimation  = New Pdf3DAnimation(PDF3DAnimationType.Linear)
            animation.Type = PDF3DAnimationType.Linear
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DAnimation.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DAnimation.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DAnimation.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DAnimation.Type">
            <summary>
            Gets or sets the type of the animation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new Pdf3DAnimation
            Pdf3DAnimation animation = new Pdf3DAnimation(PDF3DAnimationType.Linear);
            animation.Type = PDF3DAnimationType.Linear;
            </code>
            <code lang="VB">
            'Create a new Pdf3DAnimation
            Dim animation As Pdf3DAnimation  = New Pdf3DAnimation(PDF3DAnimationType.Linear)
            animation.Type = PDF3DAnimationType.Linear
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DAnimation.PlayCount">
            <summary>
            Gets or sets the play count. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new Pdf3DAnimation
            Pdf3DAnimation animation = new Pdf3DAnimation(PDF3DAnimationType.Linear);
            animation.PlayCount =10;
            </code>
            <code lang="VB">
            'Create a new Pdf3DAnimation
            Dim animation As Pdf3DAnimation  = New Pdf3DAnimation(PDF3DAnimationType.Linear)
            animation.PlayCount =10
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DAnimation.TimeMultiplier">
            <summary>
            Gets or sets the rendering opacity.
            <remarks>A positive number specifying the time multiplier to be used when running the animation. A value greater than one shortens the time it takes to play the animation, or effectively speeds up the animation.</remarks>
            </summary>
            <example>
            <code lang = "C#">
            //Create a new Pdf3DAnimation
            Pdf3DAnimation animation = new Pdf3DAnimation(PDF3DAnimationType.Linear);
            animation.Type = 10f;
            </code>
            <code lang="VB">
            'Create a new Pdf3DAnimation
            Dim animation As Pdf3DAnimation  = New Pdf3DAnimation(PDF3DAnimationType.Linear)
            animation.Type = 10f
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DAnimation.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DAnimation.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DBackground">
            <summary>
            Represents the background appearance for 3D artwork. 
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            PdfColor color = new PdfColor(Color.Silver);
            //Creates a new Pdf3DBackground
            Pdf3DBackground background = new Pdf3DBackground();
            background.ApplyToEntireAnnotation = true;
            background.Color = color;
            Pdf3DView view = new Pdf3DView();
            view.Background = background;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the document to disk.
            document.Save("Pdf3DBackground.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim color As PdfColor = New PdfColor(Color.Silver)
            'Creates a new Pdf3DBackground
            Dim background As Pdf3DBackground = New Pdf3DBackground()
            background.ApplyToEntireAnnotation = True
            background.Color = color
            Dim view As Pdf3DView = New Pdf3DView()
            view.Background = background;
            annotation.Views.Add(defaultView)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the document to disk.
            document.Save("Pdf3DBackground.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DBackground.MaxColourChannelValue">
            <summary>
            Max value of color channel.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DBackground.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DBackground.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DBackground"/> class.
            </summary>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            PdfColor color = new PdfColor(Color.Silver);
            //Creates a new Pdf3DBackground
            Pdf3DBackground background = new Pdf3DBackground();
            background.ApplyToEntireAnnotation = true;
            background.Color = color;
            Pdf3DView view = new Pdf3DView();
            view.Background = background;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the document to disk.
            document.Save("Pdf3DBackground.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim color As PdfColor = New PdfColor(Color.Silver)
            'Creates a new Pdf3DBackground
            Dim background As Pdf3DBackground = New Pdf3DBackground()
            background.ApplyToEntireAnnotation = True
            background.Color = color
            Dim view As Pdf3DView = New Pdf3DView()
            view.Background = background;
            annotation.Views.Add(defaultView)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the document to disk.
            document.Save("Pdf3DBackground.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DBackground.#ctor(Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DBackground"/> class.        
            </summary>
            <param name="color">The <see cref="T:Syncfusion.Pdf.Graphics.PdfColor"/> object specifying the background color for the 3D artwork.</param>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            PdfColor color = new PdfColor(Color.Silver);
            //Create a new Pdf3DBackground.
            Pdf3DBackground background = new Pdf3DBackground(color);
            background.ApplyToEntireAnnotation = true;
            Pdf3DView view = new Pdf3DView();
            view.Background = background;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the document to disk.
            document.Save("Pdf3DBackground.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim color As PdfColor = New PdfColor(Color.Silver)
            'Create a new Pdf3DBackground.
            Dim background As Pdf3DBackground = New Pdf3DBackground(color)
            background.ApplyToEntireAnnotation = True
            Dim  view As Pdf3DView = New Pdf3DView()
            view.Background = background;
            annotation.Views.Add(defaultView)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the document to disk.
            document.Save("Pdf3DBackground.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DBackground.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DBackground.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DBackground.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DBackground.Color">
            <summary>
            Gets or sets the background color.
            </summary>
            <value>The <see cref="T:Syncfusion.Pdf.Graphics.PdfColor"/> object specifying the background color for the 3D artwork. </value>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            PdfColor color = new PdfColor(Color.Silver);
            //Create a new Pdf3DBackground.
            Pdf3DBackground background = new Pdf3DBackground();
            background.Color = color;
            Pdf3DView view = new Pdf3DView();
            view.Background = background;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the document to disk.
            document.Save("Pdf3DBackground.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim color As PdfColor = New PdfColor(Color.Silver)
            'Create a new Pdf3DBackground.
            Dim background As Pdf3DBackground = New Pdf3DBackground()
            background.Color = color
            Dim  view As Pdf3DView = New Pdf3DView()
            view.Background = background;
            annotation.Views.Add(defaultView)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the document to disk.
            document.Save("Pdf3DBackground.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DBackground.ApplyToEntireAnnotation">
            <summary>
            Gets or sets a value indicating how the background is applied. 
            </summary>
            <value>True if the background is applied to entire annotation, false if the background is applied to annotation's 3D view box only.</value>      
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            PdfColor color = new PdfColor(Color.Silver);
            //Create a new Pdf3DBackground.
            Pdf3DBackground background = new Pdf3DBackground();
            background.ApplyToEntireAnnotation = true;
            Pdf3DView view = new Pdf3DView();
            view.Background = background;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the document to disk.
            document.Save("Pdf3DBackground.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim color As PdfColor = New PdfColor(Color.Silver)
            'Create a new Pdf3DBackground
            Dim background As Pdf3DBackground = New Pdf3DBackground()
            background.ApplyToEntireAnnotation = True
            Dim  view As Pdf3DView = New Pdf3DView()
            view.Background = background;
            annotation.Views.Add(defaultView)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation);
            'Save the document to disk.
            document.Save("Pdf3DBackground.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DBackground.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DBackground.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DBase">
            <summary>
            Represents the base class for 3D annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DBase.m_stream">
            <summary>
            Internal variable to store stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DBase.#ctor(System.String)">
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DBase.Stream_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Stream control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DBase.Save">
            <summary>
            Saves an instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DBase.Stream">
            <summary>
            Gets or sets the stream.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DBase.FileName">
            <value>The name of the file.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DBase.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DCrossSection">
            <summary>
            Represents the clipping portion of the 3D artwork for the purpose of showing artwork cross sections.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DCrossSection.
            Pdf3DCrossSection crossSection = new Pdf3DCrossSection();
            crossSection.Color = new PdfColor(Color.Blue);
            crossSection.IntersectionIsVisible = true;
            crossSection.IntersectionColor = new PdfColor(Color.Red);
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.CrossSections.Add(crossSection);
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DCrossSection.
            Dim crossSection As Pdf3DCrossSection  = New Pdf3DCrossSection()
            crossSection.Color = New PdfColor(Color.Blue)
            crossSection.IntersectionIsVisible = True
            crossSection.IntersectionColor = New PdfColor(Color.Red)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.CrossSections.Add(crossSection)
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DCrossSection.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DCrossSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DCrossSection"/> class.
            </summary>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DCrossSection.
            Pdf3DCrossSection crossSection = new Pdf3DCrossSection();
            crossSection.Color = new PdfColor(Color.Blue);
            crossSection.IntersectionIsVisible = true;
            crossSection.IntersectionColor = new PdfColor(Color.Red);
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.CrossSections.Add(crossSection);
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DCrossSection
            Dim crossSection As Pdf3DCrossSection  = New Pdf3DCrossSection()
            crossSection.Color = New PdfColor(Color.Blue)
            crossSection.IntersectionIsVisible = True
            crossSection.IntersectionColor = New PdfColor(Color.Red)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.CrossSections.Add(crossSection)
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DCrossSection.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DCrossSection.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DCrossSection.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DCrossSection.Center">
            <summary>
            Gets or sets the center of the cutting plane. 
            <remarks>A three element array specifying the center of rotation on the cutting plane in world space coordinates.</remarks>
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DCrossSection.
            Pdf3DCrossSection crossSection = new Pdf3DCrossSection();
            crossSection.Center = new float[] {40,40,40};
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.CrossSections.Add(crossSection);
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DCrossSection.
            Dim crossSection As Pdf3DCrossSection  = New Pdf3DCrossSection()
            crossSection.Center = New Single() {60,60,60}
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.CrossSections.Add(crossSection)
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DCrossSection.Color">
            <summary>
            Gets or sets the cutting plane color. 
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DCrossSection.
            Pdf3DCrossSection crossSection = new Pdf3DCrossSection();
            crossSection.Color = new PdfColor(Color.Blue);
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.CrossSections.Add(crossSection);
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DCrossSection.
            Dim crossSection As Pdf3DCrossSection  = New Pdf3DCrossSection()
            crossSection.Color = New PdfColor(Color.Blue)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.CrossSections.Add(crossSection)
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DCrossSection.IntersectionColor">
            <summary>
            Gets or sets the intersection color.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DCrossSection.
            Pdf3DCrossSection crossSection = new Pdf3DCrossSection();
            crossSection.IntersectionColor = new PdfColor(Color.Red);
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.CrossSections.Add(crossSection);
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DCrossSection.
            Dim crossSection As Pdf3DCrossSection  = New Pdf3DCrossSection()
            crossSection.IntersectionColor = New PdfColor(Color.Red)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.CrossSections.Add(crossSection)
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DCrossSection.IntersectionIsVisible">
            <summary>
            Gets or sets a value indicating whether the intersection of cutting plane with 3D artwork is visible.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DCrossSection.
            Pdf3DCrossSection crossSection = new Pdf3DCrossSection();
            crossSection.IntersectionIsVisible = true;
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.CrossSections.Add(crossSection);
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DCrossSection.
            Dim crossSection As Pdf3DCrossSection  = New Pdf3DCrossSection()
            crossSection.IntersectionIsVisible = True
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.CrossSections.Add(crossSection)
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DCrossSection.Opacity">
             <summary>
             Gets or sets the cutting plane opacity. 
             <remarks>The opacity is given in percents, 100 is full opacity, 0 is no opacity.</remarks>
             </summary>
             <example>
             <code lang = "C#">
             PdfDocument document = new PdfDocument();
             //Creates a new page and adds it as the last page of the document.
             PdfPage page = document.Pages.Add();
             //Create a new Pdf3DAnnotation.
             Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
             //Creates a new Pdf3DCrossSection.
             Pdf3DCrossSection crossSection = new Pdf3DCrossSection();
            crossSection.Opacity =100;
             //Create a new Pdf3DView
             Pdf3DView view = new Pdf3DView();
             view.CrossSections.Add(crossSection);
             annotation.Views.Add(view);
             page.Annoatations.Add(annotation);
             //Save the  document to disk.
             document.Save("Pdf3DCrossSection.pdf");
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As PdfDocument = New PdfDocument()
             'Creates a new page and adds it as the last page of the document.
             Dim page As PdfPage = document.Pages.Add()
             'Create a new Pdf3DAnnotation.
             Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
             'Creates a new Pdf3DCrossSection.
             Dim crossSection As Pdf3DCrossSection  = New Pdf3DCrossSection()
             crossSection.Opacity =100
             'Create a new Pdf3DView
             Dim  view As Pdf3DView = New Pdf3DView()
             view.CrossSections.Add(crossSection)
             annotation.Views.Add(view)
             'Save the  document to disk.
             document.Save("Pdf3DCrossSection.pdf")
             </code>
             </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DCrossSection.Orientation">
            <summary>
            Gets or sets the orientation of the cutting plane. 
            <value>A three-element array specifying the orientation of the cutting plane in world space, where each value represents the orientation in relation to the X, Y, and Z axes, respectively. </value>
            <remarks>If the array has more than 3 elements, only the first 3 will be considered. Exactly one of the values must be null, indicating an initial state of the cutting plane that is perpendicular to the corresponding axis and clipping all geometry on the positive side of that axis. The other two values must be numbers indicating the rotation of the plane, in degrees, around their corresponding axes. The order in which these rotations are applied should match the order in which the values appear in the array. </remarks>
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DCrossSection.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DCrossSection.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DCrossSectionCollection">
            <summary>
            Represents the collection of <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DCrossSection"/> objects. 
            </summary>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            //Creates a new Pdf3DCrossSectionCollection.
            Pdf3DCrossSectionCollection crossSectionCollection=view.CrossSections;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DCrossSectionCollection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            'Creates a new Pdf3DCrossSectionCollection.
            Dim crossSectionCollection As Pdf3DCrossSectionCollection=view.CrossSections
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("3DCrossSectionCollection.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DCrossSectionCollection.Add(Syncfusion.Pdf.Interactive.Pdf3DCrossSection)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DCrossSection.
            Pdf3DCrossSection crossSection = new Pdf3DCrossSection();
            crossSection.Color = new PdfColor(Color.Blue);
            crossSection.IntersectionIsVisible = true;
            crossSection.IntersectionColor = new PdfColor(Color.Red);
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.CrossSections.Add(crossSection);
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DCrossSection.
            Dim crossSection As Pdf3DCrossSection  = New Pdf3DCrossSection()
            crossSection.Color = New PdfColor(Color.Blue)
            crossSection.IntersectionIsVisible = True
            crossSection.IntersectionColor = New PdfColor(Color.Red)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.CrossSections.Add(crossSection)
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DCrossSectionCollection.Contains(Syncfusion.Pdf.Interactive.Pdf3DCrossSection)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
            if it contains the specified value, set to <c>true</c>.
            </returns>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DCrossSection.
            Pdf3DCrossSection crossSection = new Pdf3DCrossSection();
            crossSection.Color = new PdfColor(Color.Blue);
            crossSection.IntersectionIsVisible = true;
            crossSection.IntersectionColor = new PdfColor(Color.Red);
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            bool isExist= view.CrossSections.Contains(crossSection);
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DCrossSection.
            Dim crossSection As Pdf3DCrossSection  = New Pdf3DCrossSection()
            crossSection.Color = New PdfColor(Color.Blue)
            crossSection.IntersectionIsVisible = True
            crossSection.IntersectionColor = New PdfColor(Color.Red)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            Dim Boolean As isExist= view.CrossSections.Contains(crossSection)
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DCrossSectionCollection.IndexOf(Syncfusion.Pdf.Interactive.Pdf3DCrossSection)">
            <summary>
            Indexes the of.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DCrossSection.
            Pdf3DCrossSection crossSection = new Pdf3DCrossSection();
            crossSection.Color = new PdfColor(Color.Blue);
            crossSection.IntersectionIsVisible = true;
            crossSection.IntersectionColor = new PdfColor(Color.Red);
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.CrossSections.Add(crossSection);
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DCrossSection.
            Dim crossSection As Pdf3DCrossSection  = New Pdf3DCrossSection()
            crossSection.Color = New PdfColor(Color.Blue)
            crossSection.IntersectionIsVisible = True
            crossSection.IntersectionColor = New PdfColor(Color.Red)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.CrossSections.Add(crossSection)
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DCrossSectionCollection.Insert(System.Int32,Syncfusion.Pdf.Interactive.Pdf3DCrossSection)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DCrossSection.
            Pdf3DCrossSection crossSection = new Pdf3DCrossSection();
            crossSection.Color = new PdfColor(Color.Blue);
            crossSection.IntersectionIsVisible = true;
            crossSection.IntersectionColor = new PdfColor(Color.Red);
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.CrossSections.Insert(0,crossSection);
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DCrossSection.
            Dim crossSection As Pdf3DCrossSection  = New Pdf3DCrossSection()
            crossSection.Color = New PdfColor(Color.Blue)
            crossSection.IntersectionIsVisible = True
            crossSection.IntersectionColor = New PdfColor(Color.Red)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.CrossSections.Insert(0,crossSection)
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DCrossSectionCollection.Remove(Syncfusion.Pdf.Interactive.Pdf3DCrossSection)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DCrossSection.
            Pdf3DCrossSection crossSection = new Pdf3DCrossSection();
            crossSection.Color = new PdfColor(Color.Blue);
            crossSection.IntersectionIsVisible = true;
            crossSection.IntersectionColor = new PdfColor(Color.Red);
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.CrossSections.Add(crossSection);
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            page.Annoatations.Remove(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DCrossSection.
            Dim crossSection As Pdf3DCrossSection  = New Pdf3DCrossSection()
            crossSection.Color = New PdfColor(Color.Blue)
            crossSection.IntersectionIsVisible = True
            crossSection.IntersectionColor = New PdfColor(Color.Red)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.CrossSections.Add(crossSection)
            view.CrossSections.Remove(crossSection)
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DCrossSectionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DCrossSection"/> at the specified index.
            </summary>        
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DCrossSection.
            Pdf3DCrossSection crossSection = new Pdf3DCrossSection();
            crossSection.Color = new PdfColor(Color.Blue);
            crossSection.IntersectionIsVisible = true;
            crossSection.IntersectionColor = new PdfColor(Color.Red);
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.CrossSections.Add(crossSection);
            Pdf3DCrossSection crosssection =view.CrossSections[0];
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DCrossSection.
            Dim crossSection As Pdf3DCrossSection  = New Pdf3DCrossSection()
            crossSection.Color = New PdfColor(Color.Blue)
            crossSection.IntersectionIsVisible = True
            crossSection.IntersectionColor = New PdfColor(Color.Red)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.CrossSections.Add(crossSection)
            Dim crosssection As Pdf3DCrossSection=view.CrossSections[0]
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("Pdf3DCrossSection.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DLighting">
            <summary>
            Represents the lighting scheme for the 3D artwork.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annot = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DLighting.
            Pdf3DLighting lighting = new Pdf3DLighting();
            lighting.Style = Pdf3DLightingStyle.CAD;
            //Create a new Pdf3DView.
            Pdf3DView view = new Pdf3DView();
            view.LightingScheme = lighting;
            annot.Views.Add(view);
            page.Annoatations.Add(annot);
            //Save document to disk.
            document.Save("Pdf3DLighting.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annot As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DLighting.
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.Headlamp
            'Create a new Pdf3DView.
            Dim  view As Pdf3DView = New Pdf3DView()
            view.LightingScheme = lighting;
            annot.Views.Add(defaultView)
            'Draw a annot into the new page.
            page.Annoatations.Add(annot)
            'Save document to disk.
            document.Save("Pdf3DLighting.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DLighting.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DLighting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DLighting"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annot = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            Pdf3DLighting lighting = new Pdf3DLighting();
            lighting.Style = Pdf3DLightingStyle.CAD;
            Pdf3DView view = new Pdf3DView();
            view.LightingScheme = lighting;
            annot.Views.Add(view);
            page.Annoatations.Add(annot);
            //Save document to disk.
            document.Save("Pdf3DLighting.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annot As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DLighting.
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.Headlamp
            Dim  view As Pdf3DView = New Pdf3DView()
            view.LightingScheme = lighting
            annot.Views.Add(defaultView)
            'Draw a annot into the new page.
            page.Annoatations.Add(annot)
            'Save document to disk.
            document.Save("Pdf3DLighting.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DLighting.#ctor(Syncfusion.Pdf.Interactive.Pdf3DLightingStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DLighting"/> class.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DLightingStyle"/> object specifies the style of the 3D artwork.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annot = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DLighting.
            Pdf3DLighting lighting = new Pdf3DLighting(Pdf3DLightingStyle.None);
            lighting.Style = Pdf3DLightingStyle.CAD;
            Pdf3DView view = new Pdf3DView();
            view.LightingScheme = lighting;
            annot.Views.Add(view);
            page.Annoatations.Add(annot);
            //Save document to disk.
            document.Save("Pdf3DLighting.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annot As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DLighting.
            Dim lighting As Pdf3DLighting = New Pdf3DLighting(Pdf3DLightingStyle.None)
            lighting.Style = Pdf3DLightingStyle.Headlamp
            Dim  view As Pdf3DView = New Pdf3DView()
            view.LightingScheme = lighting
            annot.Views.Add(defaultView)
            'Draw a annot into the new page.
            page.Annoatations.Add(annot)
            'Save document to disk.
            document.Save("Pdf3DLighting.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DLighting.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DLighting.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DLighting.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DLighting.Style">
            <summary>
            Gets or sets the Lighting style of the 3D artwork.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annot = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DLighting.
            Pdf3DLighting lighting = new Pdf3DLighting();
            lighting.Style = Pdf3DLightingStyle.CAD;
            Pdf3DView view = new Pdf3DView();
            view.LightingScheme = lighting;
            annot.Views.Add(view);
            page.Annoatations.Add(annot);
            //Save document to disk.
            document.Save("Pdf3DLighting.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annot As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DLighting.
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.Headlamp
            Dim  view As Pdf3DView = New Pdf3DView()
            view.LightingScheme = lighting
            annot.Views.Add(defaultView)
            'Draw a annot into the new page.
            page.Annoatations.Add(annot)
            'Save document to disk.
            document.Save("Pdf3DLighting.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DLighting.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DLighting.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DNode">
            <summary>
            Represents the particular areas of 3D artwork and the opacity and visibility with which individual nodes are displayed.  
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            'Create a new Pdf3DView
            Pdf3DView  view   = new Pdf3DView();
            //Create a new Pdf3DNode.
            Pdf3DNode node = new Pdf3DNode();
            node.Visible = true;
            view.Nodes.Add(node);
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pd3DNode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.Headlamp
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            'Create a new Pdf3DNode.
            Dim node As Pdf3DNode  = New Pdf3DNode()
            node.Visible = true
            view.Nodes.Add(node)
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pd3DNode.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DNode.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DNode"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            'Create a new Pdf3DView
            Pdf3DView  view   = new Pdf3DView();
            //Create a new Pdf3DNode.
            Pdf3DNode node = new Pdf3DNode();
            node.Visible = true;
            view.Nodes.Add(node);
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pd3DNode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.Headlamp
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            'Create a new Pdf3DNode.
            Dim node As Pdf3DNode  = New Pdf3DNode()
            node.Visible = true
            view.Nodes.Add(node)
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pd3DNode.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DNode.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DNode.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DNode.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DNode.Visible">
            <summary>
            Gets or sets a value indicating whether the node is visible or not. 
            </summary>
            <value>True if the node is visible. </value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            'Create a new Pdf3DView
            Pdf3DView  view   = new Pdf3DView();
            //Create a new Pdf3DNode.
            Pdf3DNode node = new Pdf3DNode();
            node.Visible = true;
            view.Nodes.Add(node);
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pd3DNode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.Headlamp
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            'Create a new Pdf3DNode.
            Dim node As Pdf3DNode  = New Pdf3DNode()
            node.Visible = true
            view.Nodes.Add(node)
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pd3DNode.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DNode.Name">
            <summary>
            Gets or sets the node name. 
            </summary>
            <value>The name of the 3D node.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            'Create a new Pdf3DView
            Pdf3DView  view   = new Pdf3DView();
            //Create a new Pdf3DNode.
            Pdf3DNode node = new Pdf3DNode();
            node.Name ="NearView;
            view.Nodes.Add(node);
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pd3DNode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.Headlamp
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            'Create a new Pdf3DNode.
            Dim node As Pdf3DNode  = New Pdf3DNode()
            node.Name ="NearView"
            view.Nodes.Add(node)
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pd3DNode.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DNode.Opacity">
            <summary>
            Gets or sets the cutting plane opacity. 
            </summary>
            <value>A number indicating the opacity of the cutting plane using a standard additive blend mode. </value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            'Create a new Pdf3DView
            Pdf3DView  view   = new Pdf3DView();
            //Create a new Pdf3DNode.
            Pdf3DNode node = new Pdf3DNode();
            node.Opacity =1000f;
            view.Nodes.Add(node);
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pd3DNode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.Headlamp
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            'Create a new Pdf3DNode.
            Dim node As Pdf3DNode  = New Pdf3DNode()
            node.Opacity =1000f
            view.Nodes.Add(node)
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pd3DNode.pdf")
            </code>
            </example>
            <remarks>The opacity is given in percents, 100 is full opacity, 0 is no opacity.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DNode.Matrix">
            <summary>
            Gets or sets the 3D transformation matrix. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            'Create a new Pdf3DView
            Pdf3DView  view   = new Pdf3DView();
            //Create a new Pdf3DNode.
            Pdf3DNode node = new Pdf3DNode();
            node.Matrix = new float[] { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            view.Nodes.Add(node);
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pd3DNode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.Headlamp
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            'Create a new Pdf3DNode.
            Dim node As Pdf3DNode  = New Pdf3DNode()
            node.Matrix =New Single() {-0.382684F, 0.92388F, -0.0000000766026F, 0.18024F, 0.0746579F, 0.980785F, 0.906127F, 0.37533F, -0.19509F, -100, -112.432F, 45.6829F}
            view.Nodes.Add(node)
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pd3DNode.pdf")
            </code>
            </example>
            <value>A 12-element 3D transformation matrix that specifies the position and orientation of this node, relative to its parent, in world coordinates. </value>
            <remarks>If the array has more than 12 elements, only the first 12 will be considered.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DNode.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DNode.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DNodeCollection">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DNode"/> objects. 
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            'Create a new Pdf3DView
            Pdf3DView  view   = new Pdf3DView();
            //Create a new Pdf3DNode.
            Pdf3DNode node = new Pdf3DNode();
            node.Visible = true;
            view.Nodes.Add(node);
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pd3DNode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.Headlamp
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            'Create a new Pdf3DNode.
            Dim node As Pdf3DNode  = New Pdf3DNode()
            node.Visible = true
            view.Nodes.Add(node)
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pd3DNode.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DNodeCollection.Add(Syncfusion.Pdf.Interactive.Pdf3DNode)">
            <summary>
            Adds the specified value.
            <param name="value">The value.</param>
            </summary>
            <returns></returns>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            'Create a new Pdf3DView
            Pdf3DView  view   = new Pdf3DView();
            //Create a new Pdf3DNode.
            Pdf3DNode node = new Pdf3DNode();
            node.Visible = true;
            view.Nodes.Add(node);
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pd3DNode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.Headlamp
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            'Create a new Pdf3DNode.
            Dim node As Pdf3DNode  = New Pdf3DNode()
            node.Visible = true
            view.Nodes.Add(node)
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pd3DNode.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DNodeCollection.Contains(Syncfusion.Pdf.Interactive.Pdf3DNode)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang = "C#">
            //Create a new Pdf3DNode.
            Pdf3DNode node = new Pdf3DNode();
            node.Visible = true;
            node.Near="Near View";
            node.Opacity=100;
            node.Matrix = new float[] { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            Pdf3DNodeCollection nodecollection = new Pdf3DNodeCollection();
            nodecollection.Add(node);
            bool exist=nodecollection.Contains(node);
            </code>
            <code lang="VB">
            'Create a new Pdf3DNode.
            Dim node As Pdf3DNode  = New Pdf3DNode()
            node.Visible = true
            node.Near="Near View"
            node.Opacity=100
            node.Matrix =New Single() {-0.382684F, 0.92388F, -0.0000000766026F, 0.18024F, 0.0746579F, 0.980785F, 0.906127F, 0.37533F, -0.19509F, -100, -112.432F, 45.6829F}
            Dim nodecollection Pdf3DNodeCollection  = New Pdf3DNodeCollection();
            nodecollection.Add(node);
            bool exist=nodecollection.Contains(node)
            </code>
            </example> 
            <returns>
            if it contains the specified value, set to <c>true</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DNodeCollection.IndexOf(Syncfusion.Pdf.Interactive.Pdf3DNode)">
            <summary>
            Indexes the of.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <example>
            <code lang = "C#">
            //Create a new Pdf3DNode.
            Pdf3DNode node = new Pdf3DNode();
            node.Visible = true;
            node.Near="Near View";
            node.Opacity=100;
            node.Matrix = new float[] { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            Pdf3DNodeCollection nodecollection = new Pdf3DNodeCollection();
            nodecollection.Add(node);
            int index=nodecollection.IndexOf(node);
            </code>
            <code lang="VB">
            'Create a new Pdf3DNode.
            Dim node As Pdf3DNode  = New Pdf3DNode()
            node.Visible = true
            node.Near="Near View"
            node.Opacity=100
            node.Matrix =New Single() {-0.382684F, 0.92388F, -0.0000000766026F, 0.18024F, 0.0746579F, 0.980785F, 0.906127F, 0.37533F, -0.19509F, -100, -112.432F, 45.6829F}
            Dim nodecollection Pdf3DNodeCollection  = New Pdf3DNodeCollection()
            nodecollection.Add(node)
            Dim index As index=nodecollection.IndexOf(node)
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DNodeCollection.Insert(System.Int32,Syncfusion.Pdf.Interactive.Pdf3DNode)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <example>
            <code lang = "C#">
            //Create a new Pdf3DNode.
            Pdf3DNode node = new Pdf3DNode();
            node.Visible = true;
            node.Near="Near View";
            node.Opacity=100;
            node.Matrix = new float[] { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            Pdf3DNodeCollection nodecollection = new Pdf3DNodeCollection()
            nodecollection.Insert(0,node)
            </code>
            <code lang="VB">
            'Create a new Pdf3DNode.
            Dim node As Pdf3DNode  = New Pdf3DNode()
            node.Visible = true
            node.Near="Near View"
            node.Opacity=100
            node.Matrix =New Single() {-0.382684F, 0.92388F, -0.0000000766026F, 0.18024F, 0.0746579F, 0.980785F, 0.906127F, 0.37533F, -0.19509F, -100, -112.432F, 45.6829F}
            Dim nodecollection Pdf3DNodeCollection  = New Pdf3DNodeCollection()
            nodecollection.Insert(0,node)
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DNodeCollection.Remove(Syncfusion.Pdf.Interactive.Pdf3DNode)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang = "C#">
            //Create a new Pdf3DNode.
            Pdf3DNode node = new Pdf3DNode();
            node.Visible = true;
            node.Near="Near View";
            node.Opacity=100;
            node.Matrix = new float[] { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            Pdf3DNodeCollection nodecollection = new Pdf3DNodeCollection()
            nodecollection.Remove(node)
            </code>
            <code lang="VB">
            'Create a new Pdf3DNode.
            Dim node As Pdf3DNode  = New Pdf3DNode()
            node.Visible = true
            node.Near="Near View"
            node.Opacity=100
            node.Matrix =New Single() {-0.382684F, 0.92388F, -0.0000000766026F, 0.18024F, 0.0746579F, 0.980785F, 0.906127F, 0.37533F, -0.19509F, -100, -112.432F, 45.6829F}
            Dim nodecollection Pdf3DNodeCollection  = New Pdf3DNodeCollection()
            nodecollection.Remove(node)
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DNodeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DNode"/> at the specified index.
            </summary>
            <example>
            <code lang="C#">
            //Create a new Pdf3DNode.
            Pdf3DNode node = new Pdf3DNode();
            node.Visible = true;
            node.Near="Near View";
            node.Opacity=100;
            node.Matrix = new float[] { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            Pdf3DNodeCollection nodecollection = new Pdf3DNodeCollection();
            nodecollection[0]=node;
            </code>
            <code lang="VB">
            'Create a new Pdf3DNode.
            Dim node As Pdf3DNode  = New Pdf3DNode()
            node.Visible = true
            node.Near="Near View"
            node.Opacity=100
            node.Matrix =New Single() {-0.382684F, 0.92388F, -0.0000000766026F, 0.18024F, 0.0746579F, 0.980785F, 0.906127F, 0.37533F, -0.19509F, -100, -112.432F, 45.6829F}
            Dim nodecollection Pdf3DNodeCollection  = New Pdf3DNodeCollection()
            nodecollection[0]=node
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DProjection">
            <summary>
             Represents the mapping of 3D camera co-ordinates onto the target coordinate system of the annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DProjection.
            Pdf3DProjection projection = new Pdf3DProjection();
            projection.ProjectionType = Pdf3DProjectionType.Perspective;
            projection.FieldOfView = 10;
            projection.ClipStyle = Pdf3DProjectionClipStyle.ExplicitNearFar;
            projection.NearClipDistance = 10;
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.Projection = projection;
            annotation.Views.Add(view);
            //Adds the annotation in a new page.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DProjection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DProjection
            Dim projection As Pdf3DProjection = New Pdf3DProjection(Pdf3DProjectionType.Perspective)
            projection1.FieldOfView = 50
            projection1.ClipStyle = Pdf3DProjectionClipStyle.ExplicitNearFar
            projection1.NearClipDistance = 10
            'Create a new Pdf3DView.
            Dim view As Pdf3DView = New Pdf3DView()
            view.Projection = projection
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DProjection.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjection.m_Type">
            <summary>
            Internal variable to store type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjection.m_ClipStyle">
            <summary>
            Internal variable to store Clip Style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjection.m_OrthoScalemode">
            <summary>
            Internal variable to store Ortho Scale mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjection.m_farClipDistance">
            <summary>
            Internal variable to store far Clip Distance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjection.m_fieldOfView">
            <summary>
            Internal variable to store field Of View.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjection.m_nearClipDistance">
            <summary>
            Internal variable to store near Clip Distance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjection.m_scaling">
            <summary>
            Internal variable to store scaling.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjection.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DProjection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DProjection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DProjection.#ctor(Syncfusion.Pdf.Interactive.Pdf3DProjectionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DProjection"/> class.
            </summary>
            <param name="type">The Pdf3D Projection Type.</param>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DProjection
            Pdf3DProjection projection = new Pdf3DProjection();
            projection.ProjectionType = Pdf3DProjectionType.Perspective;
            projection.FieldOfView = 10;
            projection.ClipStyle = Pdf3DProjectionClipStyle.ExplicitNearFar;
            projection.NearClipDistance = 10;
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.Projection = projection;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the document to disk.
            document.Save("Pdf3DProjection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DProjection
            Dim projection As Pdf3DProjection = New Pdf3DProjection(Pdf3DProjectionType.Perspective)
            projection1.FieldOfView = 50
            projection1.ClipStyle = Pdf3DProjectionClipStyle.ExplicitNearFar
            projection1.NearClipDistance = 10
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.Projection = projection
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DProjection.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DProjection.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DProjection.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DProjection.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DProjection.ProjectionType">
            <summary>
            Gets or sets the type of the projection.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DProjection
            Pdf3DProjection projection = new Pdf3DProjection();
            projection.ProjectionType = Pdf3DProjectionType.Perspective;
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.Projection = projection;
            //Adds the annotation in a new page.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DProjection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DProjection
            Dim projection As Pdf3DProjection = New Pdf3DProjection(Pdf3DProjectionType.Perspective)
            projection.ProjectionType = Pdf3DProjectionType.Perspective
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.Projection = projection
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DProjection.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DProjection.ClipStyle">
            <summary>
            Gets or sets the projection ClipStyle.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DProjection
            Pdf3DProjection projection = new Pdf3DProjection();
            projection.ClipStyle = Pdf3DProjectionClipStyle.ExplicitNearFar;
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.Projection = projection;
            //Adds the annotation in a new page.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DProjection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DProjection
            Dim projection As Pdf3DProjection = New Pdf3DProjection(Pdf3DProjectionType.Perspective)
            projection.ClipStyle = Pdf3DProjectionClipStyle.ExplicitNearFar
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.Projection = projection
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DProjection.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DProjection.OrthoScaleMode">
            <summary>
             Gets or sets the scale mode for ortho graphic projections.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DProjection
            Pdf3DProjection projection = new Pdf3DProjection();
            projection.OrthoScaleMode = Pdf3DProjectionOrthoScaleMode.Width;
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.Projection = projection;
            //Adds the annotation in a new page.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DProjection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DProjection
            Dim projection As Pdf3DProjection = New Pdf3DProjection(Pdf3DProjectionType.Perspective)
            projection.OrthoScaleMode = Pdf3DProjectionOrthoScaleMode.Width
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.Projection = projection
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DProjection.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DProjection.FarClipDistance">
            <summary>
            Gets or sets the far clipping distance.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DProjection
            Pdf3DProjection projection = new Pdf3DProjection();
            projection.FarClipDistance = 10;
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.Projection = projection;
            //Adds the annotation in a new page.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DProjection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DProjection
            Dim projection As Pdf3DProjection = New Pdf3DProjection(Pdf3DProjectionType.Perspective)
            projection1.FarClipDistance = 50
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.Projection = projection
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DProjection.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DProjection.FieldOfView">
            <summary>
            Gets or sets the field of view.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DProjection
            Pdf3DProjection projection = new Pdf3DProjection();
            projection.FieldOfView = 10;
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.Projection = projection;
            //Adds the annotation in a new page.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DProjection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DProjection
            Dim projection As Pdf3DProjection = New Pdf3DProjection(Pdf3DProjectionType.Perspective)
            projection.FieldOfView = 10
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.Projection = projection
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DProjection.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DProjection.NearClipDistance">
            <summary>
            Gets or sets the near clipping distance.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DProjection
            Pdf3DProjection projection = new Pdf3DProjection();
            projection.NearClipDistance = 10;
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.Projection = projection;
            //Adds the annotation in a new page.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DProjection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DProjection
            Dim projection As Pdf3DProjection = New Pdf3DProjection(Pdf3DProjectionType.Perspective)
            projection.NearClipDistance = 10
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.Projection = projection
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DProjection.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DProjection.Scaling">
            <summary>
            Gets or sets the projection scaling.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DProjection
            Pdf3DProjection projection = new Pdf3DProjection();
            projection.Scaling = 10;
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.Projection = projection;
            //Adds the annotation in a new page.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DProjection.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DProjection
            Dim projection As Pdf3DProjection = New Pdf3DProjection(Pdf3DProjectionType.Perspective)
            projection.Scaling = 10
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.Projection = projection
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DProjection.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DProjection.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DProjection.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DRendermode">
            <summary>
            Represents the rendering mode of the 3D artwork. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DRendermode.
            Pdf3DRendermode renderMode = new Pdf3DRendermode();
            renderMode.Style = Pdf3DRenderStyle.Solid;
            renderMode.AuxilaryColor = new PdfColor(Color.Green);
            renderMode.FaceColor = new PdfColor(Color.Black);
            //Creates a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.RenderMode=renderMode;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("PDF3DRendermode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DRendermode
            Dim renderMode As Pdf3DRendermode  = New Pdf3DRendermode()
            renderMode.Style = Pdf3DRenderStyle.Solid
            renderMode.AuxilaryColor = New PdfColor(Color.Green)
            renderMode.FaceColor = New PdfColor(Color.Black)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.RenderMode=renderMode
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("PDF3DRendermode.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRendermode.m_style">
            <summary>
            Internal variable to store style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRendermode.m_faceColor">
            <summary>
            Internal variable to store face Color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRendermode.m_auxilaryColor">
            <summary>
            Internal variable to store auxilary Color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRendermode.m_opacity">
            <summary>
            Internal variable to store opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRendermode.m_creaseValue">
            <summary>
            Internal variable to store crease Value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRendermode.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DRendermode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DRendermode"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DRendermode.#ctor(Syncfusion.Pdf.Interactive.Pdf3DRenderStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DRendermode"/> class.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle"/> object specifies the rendering style of the 3D artwork.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3D Annotation.
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DRendermode
             Pdf3DRendermode renderMode = new Pdf3DRendermode(Pdf3DRenderStyle.Sloid);
            renderMode.Style = Pdf3DRenderStyle.Solid;
            renderMode.AuxilaryColor = new PdfColor(Color.Green);
            renderMode.FaceColor = new PdfColor(Color.Black);
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.RenderMode=renderMode;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("PDF3DRendermode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3D Annotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DRendermode
            Dim renderMode As Pdf3DRendermode  = New Pdf3DRendermode(Pdf3DRenderStyle.Sloid)
            renderMode.Style = Pdf3DRenderStyle.Solid
            renderMode.AuxilaryColor = New PdfColor(Color.Green)
            renderMode.FaceColor = New PdfColor(Color.Black)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.RenderMode=renderMode;
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("PDF3DRendermode.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DRendermode.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DRendermode.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DRendermode.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DRendermode.Style">
            <summary>
            Gets or sets the type of the projection.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DRendermode
            Pdf3DRendermode renderMode = new Pdf3DRendermode();
            renderMode.Style = Pdf3DRenderStyle.Solid;
            //Creates a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.RenderMode=renderMode;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("PDF3DRendermode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DRendermode
            Dim renderMode As Pdf3DRendermode  = New Pdf3DRendermode()
            renderMode.Style = Pdf3DRenderStyle.Solid
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.RenderMode=renderMode
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("PDF3DRendermode.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DRendermode.AuxilaryColor">
            <summary>
            Gets or sets the Auxiliary color.
            </summary> 
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DRendermode.
            Pdf3DRendermode renderMode = new Pdf3DRendermode();
            renderMode.AuxilaryColor = new PdfColor(Color.Green);
            //Creates a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.RenderMode=renderMode;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("PDF3DRendermode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DRendermode
            Dim renderMode As Pdf3DRendermode  = New Pdf3DRendermode()
            renderMode.AuxilaryColor = New PdfColor(Color.Green)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.RenderMode=renderMode
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("PDF3DRendermode.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DRendermode.FaceColor">
            <summary>
            Gets or sets the Face color.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DRendermode.
            Pdf3DRendermode renderMode = new Pdf3DRendermode();
            renderMode.FaceColor = new PdfColor(Color.Black);
            //Creates a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.RenderMode=renderMode;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("PDF3DRendermode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DRendermode
            Dim renderMode As Pdf3DRendermode  = New Pdf3DRendermode()
            renderMode.FaceColor = New PdfColor(Color.Black)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.RenderMode=renderMode
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("PDF3DRendermode.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DRendermode.CreaseValue">
            <summary>
            Gets or sets the crease value. 
            <remarks>The crease value is specified in degrees, from 0 to 360.</remarks>
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DRendermode.
            Pdf3DRendermode renderMode = new Pdf3DRendermode();
            renderMode.CreaseValue =10f;
            //Creates a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.RenderMode=renderMode;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("PDF3DRendermode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DRendermode
            Dim renderMode As Pdf3DRendermode  = New Pdf3DRendermode()
            renderMode.CreaseValue =10f
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.RenderMode=renderMode
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("PDF3DRendermode.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DRendermode.Opacity">
            <summary>
            Gets or sets the rendering opacity. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DRendermode.
            Pdf3DRendermode renderMode = new Pdf3DRendermode();
            renderMode.Opacity = 100f;
            //Creates a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.RenderMode=renderMode;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("PDF3DRendermode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DRendermode
            Dim renderMode As Pdf3DRendermode  = New Pdf3DRendermode()
            renderMode.Opacity = 100f
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.RenderMode=renderMode
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("PDF3DRendermode.pdf")
            </code>
            </example> 
            <remarks>The opacity is given in percents, 100 is full opacity, 0 is no opacity.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DRendermode.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DRendermode.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DView">
            <summary>
            Represents a attributes to be applied to the virtual camera associated with a 3D annotation. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DRendermode
            Pdf3DRendermode rendermode = new Pdf3DRendermode();
            rendermode.Style = Pdf3DRenderStyle.Solid;
            rendermode.AuxilaryColor = new PdfColor(Color.Green);
            rendermode.FaceColor = new PdfColor(Color.Black);
            PdfColor color = new PdfColor(Color.Silver);
            //Create a new Pdf3DBackground
            Pdf3DBackground background = new Pdf3DBackground();
            background.ApplyToEntireAnnotation = true;
            background.Color = color;
            //Creates a new Pdf3DLighting
            Pdf3DLighting lighting = new Pdf3DLighting();
            lighting.Style = Pdf3DLightingStyle.CAD;
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.Background = background;
            view.LightingScheme = lighting;
            view.RenderMode=rendermode;
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DView.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DRendermode
            Dim rendermode AsPdf3DRendermode  = New Pdf3DRendermode()
            rendermode.Style = Pdf3DRenderStyle.Solid
            rendermode.AuxilaryColor = New PdfColor(Color.Green)
            rendermode.FaceColor = New PdfColor(Color.Black)
            Dim color As PdfColor = New PdfColor(Color.Silver)
            'Creates a new Pdf3DBackground
            Dim background As Pdf3DBackground = New Pdf3DBackground()
            background.ApplyToEntireAnnotation = true
            background.Color = color
            'Creates a new Pdf3DLighting
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.Headlamp
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.RenderMode=rendermode
            view.Background = background
            view.LightingScheme = lighting
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("3DView.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DView.m_3dBackground">
            <summary>
            Internal variable to store 3d Background.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DView.m_3dCrossSectionCollection">
            <summary>
            Internal variable to store 3d Cross Section Collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DView.m_centretoWorldMatrix">
            <summary>
            Internal variable to store centre to World Matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DView.m_3dLighting">
            <summary>
            Internal variable to store 3d Lighting.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DView.m_3dNodeCollection">
            <summary>
            Internal variable to store 3d Node Collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DView.m_3dProjection">
            <summary>
            Internal variable to store 3d Projection.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DView.m_3dRendermode">
            <summary>
            Internal variable to store 3d Render mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DView.m_resetNodesState">
            <summary>
            Internal variable to store reset Nodes State.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DView.m_centreOfOrbit">
            <summary>
            Internal variable to store centre of orbit.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DView.m_externalName">
            <summary>
            Internal variable to store external name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DView.m_internalName">
            <summary>
            Internal variable to store internal name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DView.m_viewNodeName">
            <summary>
            Internal variable to store view node name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DView.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DView"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DView.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DView.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DView.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DView.Background">
            <summary>
            Gets or sets the background for this view.  
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DBackground
            Pdf3DBackground background = new Pdf3DBackground();
            background.ApplyToEntireAnnotation = true;
            background.Color = color;
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.Background = background;
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DView.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DBackground
            Dim background As Pdf3DBackground = New Pdf3DBackground()
            background.ApplyToEntireAnnotation = true
            background.Color = color
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.Background = background
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("3DView.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DView.CameraToWorldMatrix">
            <summary>
            Gets or sets the 3D transformation matrix. 
            </summary>
            <value>A 12-element 3D transformation matrix that specifies a position and orientation of the camera in world coordinates. </value>
            <remarks>If the array has more than 12 elements, only the first 12 will be considered.</remarks>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DBackground
            Pdf3DBackground background = new Pdf3DBackground();
            background.ApplyToEntireAnnotation = true;
            background.Color = color;
            float[] matrix = new float[] { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -300.669f, -112.432f, 45.6829f };
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.CameraToWorldMatrix = matrix;
            view.Background = background;
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DView.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DBackground
            Dim background As Pdf3DBackground = New Pdf3DBackground()
            background.ApplyToEntireAnnotation = true
            background.Color = color
            Dim matrix As Single() = New Single() {-1.382684F, 0.92388F, -0.0000000766026F, 2.18024F, 0.0746579F, 0.980785F, 0.906127F, 0.37533F, -0.19509F, -162.669F, -112.432F, 45.6829F}
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.CameraToWorldMatrix = matrix
            view.Background = background
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("3DView.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DView.CenterOfOrbit">
            <summary>
            Gets or sets the center of orbit for 3D artwork. 
            </summary>
            <value>A non-negative number indicating a distance in the camera coordinate system along the z axis to the center of orbit for this view. </value>
            <remarks>If this value is negative, the viewer application must determine the center of orbit.</remarks>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.CenterOfOrbit = 10f;
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DView.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.CenterOfOrbit = 10f
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("3DView.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DView.CrossSections">
            <summary>
            Gets the list of cross sections for this view. 
            <value>A list of PDF3DCrossSection objects available for this view.</value>
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            Pdf3DCrossSectionCollection crossSectionCollection=view.CrossSections;
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DView.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            Dim crossSectionCollection As Pdf3DCrossSectionCollection=view.CrossSections
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("3DView.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DView.ExternalName">
            <summary>
            Gets or sets the view's external name.
            </summary>
            <value>The external name of the view, suitable for presentation in a user interface.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.ExternalName="Near View";
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DView.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.ExternalName="Near View"
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("3DView.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DView.InternalName">
            <summary>
            Gets or sets the view's internal name.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.InternalName=Guid.NewGuid().ToString("N");
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DView.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.InternalName=Guid.NewGuid().ToString("N")
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("3DView.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DView.LightingScheme">
            <summary>
            Gets or sets the Creates a new page and adds it as the last page of the document scheme for this view. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            Pdf3DLighting lighting = new Pdf3DLighting();
            lighting.Style = Pdf3DLightingStyle.CAD;
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.LightingScheme = lighting;
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DView.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.Headlamp
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.LightingScheme = lighting
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("3DView.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DView.Nodes">
            <summary>
            Gets the list of 3D nodes for this view. 
            </summary>
            <value>A list of PDF3DNode objects available for this view.</value>        
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            'Create a new Pdf3DView
            Pdf3DView  view   = new Pdf3DView();
            Pdf3DNodeCollection nodes = view.Nodes;
            //Adds a pdf3d view.
            annotation.Views.Add(view);
            //Adds a annotation.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DView.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.Headlamp
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            Dim nodes As Pdf3DNodeCollection = view.Nodes
            'Adds a pdf3d view
            annotation.Views.Add(view)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("3DView.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DView.Projection">
            <summary>
            Gets or sets the projection for this view. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DProjection
            Pdf3DProjection projection = new Pdf3DProjection();
            projection.ProjectionType = Pdf3DProjectionType.Perspective;
            projection.FieldOfView = 10;
            projection.ClipStyle = Pdf3DProjectionClipStyle.ExplicitNearFar;
            projection.NearClipDistance = 10;
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.Projection = projection;
            //Adds a pdf3d view into the new page.
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DView.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DProjection.
            Dim projection As Pdf3DProjection = New Pdf3DProjection(Pdf3DProjectionType.Perspective)
            projection1.FieldOfView = 50
            projection1.ClipStyle = Pdf3DProjectionClipStyle.ExplicitNearFar
            projection1.NearClipDistance = 10
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.Projection = projection
            'Adds a pdf3d view into the new page.
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("3DView.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DView.RenderMode">
            <summary>
            Gets or sets the rendering mode for this view. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DRendermode
            Pdf3DRendermode rendermode = new Pdf3DRendermode();
            rendermode.Style = Pdf3DRenderStyle.Solid;
            rendermode.AuxilaryColor = new PdfColor(Color.Green);
            rendermode.FaceColor = new PdfColor(Color.Black);
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.RenderMode=rendermode;
            //Adds a pdf3d view into the new page.
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DView.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DRendermode
            Dim rendermode As Pdf3DRendermode  = New Pdf3DRendermode()
            rendermode.Style = Pdf3DRenderStyle.Solid
            rendermode.AuxilaryColor = New PdfColor(Color.Green)
            rendermode.FaceColor = New PdfColor(Color.Black)
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.RenderMode=rendermode
            'Adds a pdf3d view into the new page.
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("3DView.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DView.ResetNodesState">
            <summary>
            Gets or sets a value indicating whether nodes specified in the Nodes collection are returned to their original states (as specified in the 3D artwork) before applying transformation matrices and opacity settings specified in the node dictionaries. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.ResetNodesState=true;
            //Adds a pdf3d view into the new page.
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DView.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.ResetNodesState=True
            'Adds a pdf3d view into the new page.
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("3DView.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DView.ViewNodeName">
            <summary>
            Gets or sets the name of the view node.         
            </summary>
            <remarks>The view node in the content stream defines all the properties for viewing the 3D artwork. If both ViewNodeName and CameraToWorldMatrix are specified, then ViewNodeName takes precedence.</remarks>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            string name=view.ViewNodeName;
            //Adds a pdf3d view into the new page.
            annotation.Views.Add(view);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DView.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            Dim name As String = view.ViewNodeName
            view.RenderMode=rendermode
            'Adds a pdf3d view into the new page.
            annotation.Views.Add(view)
            'Save the  document to disk.
            document.Save("3DView.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DView.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The pdf3d view dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DView.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DViewCollection">
            <summary>
            Represents a collection of Pdf3DView objects. 
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creates a new Pdf3DView
            Pdf3DView defaultView = new Pdf3DView();
            defaultView.ExternalName="Near View";
            defaultView.CameraToWorldMatrix=new float[] { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            defaultView.CenterOfOrbit=131.695f;
            view.LightingScheme = Creates a new page and adds it as the last page of the document
            annotation.Views.Add(defaultView);
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DViews.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf3DView
            Dim defaultView As Pdf3DView  = New Pdf3DView()
            defaultView.ExternalName="Near View"
            defaultView.CameraToWorldMatrix=new Single() { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f }
            defaultView.CenterOfOrbit=131.695f
            annotation.Views.Add(defaultView)
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("3DViews.pdf")
            </code>
            </example> 
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DViewCollection.Add(Syncfusion.Pdf.Interactive.Pdf3DView)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>Pdf3DView</returns>
            <example>
            <code lang = "C#">
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            Dim defaultView As Pdf3DView  = New Pdf3DView();
            defaultView.ExternalName="Near View";
            defaultView.CameraToWorldMatrix=new Single() { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            defaultView.CenterOfOrbit=131.695f;
            annotation.Views.Add(defaultView);
            page.Annoatations.Add(annotation);
            </code>
            <code lang="VB">
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim defaultView As Pdf3DView  = New Pdf3DView()
            defaultView.ExternalName="Near View"
            defaultView.CameraToWorldMatrix=new Single() { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f }
            defaultView.CenterOfOrbit=131.695f
            annotation.Views.Add(defaultView)
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DViewCollection.Contains(Syncfusion.Pdf.Interactive.Pdf3DView)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
            if it contains the specified value, set to <c>true</c>.
            </returns>
            <example>
            <code lang = "C#">
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            Dim defaultView As Pdf3DView  = New Pdf3DView();
            defaultView.ExternalName="Near View";
            defaultView.CameraToWorldMatrix=new Single() { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            defaultView.CenterOfOrbit=131.695f;
            annotation.Views.Add(defaultView);
            bool exist=annotation.Views.Contains(defaultView);
            page.Annoatations.Add(annotation);
            </code>
            <code lang="VB">
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim defaultView As Pdf3DView  = New Pdf3DView()
            defaultView.ExternalName="Near View"
            defaultView.CameraToWorldMatrix=new Single() { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f }
            defaultView.CenterOfOrbit=131.695f
            annotation.Views.Add(defaultView);
            Dim exist As bool =annotation.Views.Contains(defaultView)
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DViewCollection.IndexOf(Syncfusion.Pdf.Interactive.Pdf3DView)">
            <summary>
            Indexes the of the Pdf3DView object.
            </summary>
            <param name="value">The value.</param>
            <returns>Pdf3DView</returns>
            <example>
            <code lang = "C#">
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            Dim defaultView As Pdf3DView  = New Pdf3DView();
            defaultView.ExternalName="Near View";
            defaultView.CameraToWorldMatrix=new Single() { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            defaultView.CenterOfOrbit=131.695f;
            annotation.Views.Add(defaultView);
            int index=annotation.Views.IndexOf(defaultView);
            page.Annoatations.Add(annotation);
            </code>
            <code lang="VB">
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim defaultView As Pdf3DView  = New Pdf3DView()
            defaultView.ExternalName="Near View"
            defaultView.CameraToWorldMatrix=new Single() { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f }
            defaultView.CenterOfOrbit=131.695f
            annotation.Views.Add(defaultView);
            Dim index As int=annotation.Views.IndexOf(defaultView)
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DViewCollection.Insert(System.Int32,Syncfusion.Pdf.Interactive.Pdf3DView)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <example>
            <code lang = "C#">
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            Dim defaultView As Pdf3DView  = New Pdf3DView();
            defaultView.ExternalName="Near View";
            defaultView.CameraToWorldMatrix=new Single() { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            defaultView.CenterOfOrbit=131.695f;
            annotation.Views.Add(defaultView);
            page.Annoatations.Insert(1,annotation);
            </code>
            <code lang="VB">
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim defaultView As Pdf3DView  = New Pdf3DView()
            defaultView.ExternalName="Near View"
            defaultView.CameraToWorldMatrix=new Single() { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f }
            defaultView.CenterOfOrbit=131.695f
            annotation.Views.Insert(1,defaultView);
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DViewCollection.Remove(Syncfusion.Pdf.Interactive.Pdf3DView)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The Pdf3DView object.</param>
            <example>
            <code lang = "C#">
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            Dim defaultView As Pdf3DView  = New Pdf3DView();
            defaultView.ExternalName="Near View";
            defaultView.CameraToWorldMatrix=new Single() { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            defaultView.CenterOfOrbit=131.695f;
            annotation.Views.Add(defaultView);
            annotation.Views.Remove(defaultView);
            page.Annoatations.Add(annotation);
            </code>
            <code lang="VB">
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim defaultView As Pdf3DView  = New Pdf3DView()
            defaultView.ExternalName="Near View"
            defaultView.CameraToWorldMatrix=new Single() { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f }
            defaultView.CenterOfOrbit=131.695f
            annotation.Views.Add(defaultView)
            annotation.Views.Remove(defaultView)
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DViewCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Pdf.Interactive.Pdf3DView"/> at the specified index.
            </summary>
            <value>Pdf3DView</value>
            <example>
            <code lang="C#">
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            Pdf3DView defaultView = CreateView("Near View",new float[] { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f }, 131.695f, background, projection, rendermode, Creates a new page and adds it as the last page of the document);
            annotation.Views.Add(defaultView);
            page.Annoatations.Add(annotation);
            Pdf3DView view=annotation.Views[0] as Pdf3DView;
            </code>
            <code lang="VB">
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Pdf3DView defaultView = CreateView("Near View", new float[] { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f },131.695f, background, projection, rendermode, Creates a new page and adds it as the last page of the document);annotation.Views.Add(defaultView);
            annotation.Views.Add(defaultView)
            Dim view As Pdf3DView =annotation.Views[0]
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DActivationState">
            <summary>
            Specifies an activation state of the 3D annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DActivation
            Pdf3DActivation activation = new Pdf3DActivation();
            annotation.DeactivationState = Pdf3DDeactivationState.Live;
            activation.ShowToolbar = false;
            3DAnnotation.Activation = activation;
            //Adds the annotation to a new page.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DActivation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim 3DAnnotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d"
            'Creates a new Pdf3DActivation
            Dim activation As Pdf3DActivation = New Pdf3DActivation()
            activation.DeactivationState = Pdf3DDeactivationState.Live
            3DAnnotation.Activation = activation
            'Draws a annotation into the new page.
            page.Annoatations.Add(3DAnnotation)
            'Save the  document to disk.
            document.Save("Pdf3DActivation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DActivationState.Instantiated">
            <summary>
            Represents that the state in which the artwork has been read and a run-time instance of 
            the artwork has been created. In this state, it can be rendered but script-driven 
            real-time modifications (that is, animations) are disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DActivationState.Live">
            <summary>
            Represents that the artwork is instantiated, and it is being modified in real time to 
            achieve some animation effect. In the case of keyframe animation, the artwork is 
            live while it is playing and then reverts to an instantiated state when playing 
            completes or is stopped.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DActivationMode">
            <summary>
            Specifies the available modes for activating a 3D annotation. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PdfDocument
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creaate a new Pdf3DActivation
            Pdf3DActivation activation = new Pdf3DActivation();
            //Sets an activate mode.
            activation.ActivationMode = Pdf3DActivationMode.ExplicitActivation;
            annotation.Activation = activation;
            //Add the annotation to the new page.
            page.Annoatations.Add(annotation);
            //Save the document to disk.
            document.Save("Pdf3DActivation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3D Annotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creaate a new Pdf3DActivation
            Dim activation As Pdf3DActivation = New Pdf3DActivation()
            'Sets an activate mode
            activation.ActivationMode = Pdf3DActivationMode.PageVisible
            annotation.Activation = activation
            'Add the annotation to the new page
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DActivation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DActivationMode.PageOpen">
            <summary>
            Represents that the annotation should be activated as soon as the page containing 
            the annotation is opened.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DActivationMode.PageVisible">
            <summary>
            Represents that the annotation should be activated as soon as any part of the page 
            containing the annotation becomes visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DActivationMode.ExplicitActivation">
            <summary>
            Represents that the annotation should remain inactive until explicitly activated 
            by a script or user action.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DDeactivationMode">
            <summary>
            Specifies the available modes for deactivating a 3D annotation. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DActivation
            Pdf3DActivation activation = new Pdf3DActivation();
            //Sets the deactivation mode.
            activation.DeactivationMode = Pdf3DDeactivationMode.PageClose;
            annotation.Activation = activation;
            //Add this annotation to the new page.
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DActivation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3D Annotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DActivation
            Dim activation As Pdf3DActivation = New Pdf3DActivation()
            'Sets the deactivation mode
            activation.DeactivationMode = Pdf3DDeactivationMode.PageClose
            annotation.Activation = activation
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DActivation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DDeactivationMode.PageClose">
            <summary>
            Represents that the annotation should be deactivated as soon as the page is closed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DDeactivationMode.PageInvisible">
            <summary>
            Represents that the annotation should be deactivated as soon as the page containing 
            the annotation becomes invisible.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DDeactivationMode.ExplicitDeactivation">
            <summary>
            Represents that the annotation should remain active until explicitly deactivated by a 
            script or user action.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DDeactivationState">
            <summary>
            Specifies the available states upon deactivating a 3D annotation. 
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3DAnnotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DActivation
            Pdf3DActivation activation = new Pdf3DActivation();
            //Sets the deactivate state.
            activation.DeactivationState = Pdf3DDeactivationState.Live;
            activation.ShowToolbar = false;
            annotation.Activation = activation;
            page.Annoatations.Add(annotation);
            //Save the  document to disk.
            document.Save("Pdf3DActivation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DActivation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DActivation
            Dim activation As Pdf3DActivation = New Pdf3DActivation()
            'Sets the deactivate state
            activation.DeactivationState = Pdf3DDeactivationState.Live
            annotation.Activation = activation
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the  document to disk.
            document.Save("Pdf3DActivation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DDeactivationState.Uninstantiated">
            <summary>
            Represents the initial state of the artwork before it has been used in any way.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DDeactivationState.Instantiated">
            <summary>
            Represents that the state in which the artwork has been read and a run-time instance of 
            the artwork has been created. In this state, it can be rendered but script-driven 
            real-time modifications (that is, animations) are disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DDeactivationState.Live">
            <summary>
            Represents that the artwork is instantiated, and it is being modified in real time to 
            achieve some animation effect. In the case of keyframe animation, the artwork is 
            live while it is playing and then reverts to an instantiated state when playing 
            completes or is stopped.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DLightingStyle">
            <summary>
            Specifies the available styles for applying light to 3D artwork. 
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DLighting
            Pdf3DLighting lighting = new Pdf3DLighting();
            lighting.Style = Pdf3DLightingStyle.CAD;
            //Create a new Pdf3DView.
            Pdf3DView defaultView = new Pdf3DView();
            defaultView.LightingScheme=lighting
            annotation.Views.Add(defaultView);
            annotation.Views.Add(solidwireframeView);
            //Add the pdf Annotation
            page.Annotations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new Pdf3DLighting
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.CAD
            'Create a new Pdf3DView
            Dim defaultView As Pdf3DView  = New Pdf3DView()
            defaultView.LightingScheme=lighting
            'Add this annotation to a new page.
            annotation.Appearance.Normal.Draw(page, New PointF(annotation.Location.X, annotation.Location.Y))
            'Save the  document to disk.
            document.Save("3DAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DLightingStyle.Artwork">
            <summary>
            The Lights as specified in the 3D artwork.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DLightingStyle.None">
            <summary>
            The lighting specified in the 3D artwork is ignored.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DLightingStyle.White">
            <summary>
            Three blue-grey infinite lights.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DLightingStyle.Day">
            <summary>
            Three light-grey infinite lights.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DLightingStyle.Night">
            <summary>
            One yellow, one aqua, and one blue infinite light.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DLightingStyle.Hard">
            <summary>
            Three grey infinite lights.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DLightingStyle.Primary">
            <summary>
            One red, one green, and one blue infinite light.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DLightingStyle.Blue">
            <summary>
            Three blue infinite lights.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DLightingStyle.Red">
            <summary>
            Three red infinite lights.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DLightingStyle.Cube">
            <summary>
            Six grey infinite lights aligned with the major axes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DLightingStyle.CAD">
            <summary>
            Three grey infinite lights and one light attached to the camera.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DLightingStyle.Headlamp">
            <summary>
            Single infinite light attached to the camera.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DProjectionClipStyle">
            <summary>
            Specifies the available clipping style of the 3D annotation.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DLighting
            Pdf3DLighting lighting = new Pdf3DLighting();
            lighting.Style = Pdf3DLightingStyle.CAD;
            Create a new Pdf3DProjection
            Pdf3DProjection projection = new Pdf3DProjection();
            projection.ProjectionType = Pdf3DProjectionType.Perspective;
            projection.FieldOfView = 10;
            projection.ClipStyle = Pdf3DProjectionClipStyle.ExplicitNearFar;
            projection.NearClipDistance = 10;
            //Create a new Pdf3DView.
            Pdf3DView defaultView = new Pdf3DView();
            defaultView.Projection=projection
            annotation.Views.Add(defaultView);
            annotation.Views.Add(solidwireframeView);
            //Add the pdf Annotation
            page.Annotations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3D Annotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.CAD
            Dim projection1 As Pdf3DProjection = New Pdf3DProjection(Pdf3DProjectionType.Perspective)
            projection1.FieldOfView = 50
            projection1.ClipStyle = Pdf3DProjectionClipStyle.AutomaticNearFar
            'Create a new Pdf3DView
            Dim defaultView As Pdf3DView  = New Pdf3DView()
            defaultView.Projection=projection
            'Add this annotation to a new page.
            annotation.Appearance.Normal.Draw(page, New PointF(annotation.Location.X, annotation.Location.Y))
            'Save the  document to disk.
            document.Save("3DAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjectionClipStyle.ExplicitNearFar">
            <summary>
            Represents the Clipping style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjectionClipStyle.AutomaticNearFar">
            <summary>
            Represents the Clipping style.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DProjectionOrthoScaleMode">
            <summary>
            Specifies the available Ortho projection scaling mode of the 3D annotation.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            Pdf3DProjection projection = new Pdf3DProjection();
            projection.OrthoScaleMode = Pdf3DProjectionOrthoScaleMode.Width
            //Create a new Pdf3DView
            Pdf3DView view = new Pdf3DView();
            view.Projection = projection;
            annotation.Views.Add(view);
            //Add the pdf Annotation
            page.Annotations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3D Annotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim projection As Pdf3DProjection = New Pdf3DProjection(Pdf3DProjectionType.Perspective)
            projection.OrthoScaleMode = Pdf3DProjectionOrthoScaleMode.Width
            'Create a new Pdf3DView
            Dim  view As Pdf3DView = New Pdf3DView()
            view.Projection = projection
            annotation.Views.Add(view)
            'Add this annotation to a new page.
            annotation.Appearance.Normal.Draw(page, New PointF(annotation.Location.X, annotation.Location.Y))
            'Save the  document to disk.
            document.Save("3DAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjectionOrthoScaleMode.Width">
            <summary>
            Scale to fit the width of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjectionOrthoScaleMode.Height">
            <summary>
            Scale to fit the height of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjectionOrthoScaleMode.Min">
            <summary>
            Scale to fit the lesser of width or height of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjectionOrthoScaleMode.Max">
            <summary>
            Scale to fit the greater of width or height of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjectionOrthoScaleMode.Absolute">
            <summary>
            No scaling should occur due to binding.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DProjectionType">
            <summary>
            Specifies the available projection type of the 3D annotation.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            Pdf3DLighting lighting = new Pdf3DLighting();
            lighting.Style = Pdf3DLightingStyle.CAD;
            //Create a new Pdf3DProjection.
            Pdf3DProjection projection = new Pdf3DProjection();
            projection.ProjectionType = Pdf3DProjectionType.Perspective;
            projection.FieldOfView = 10;
            projection.ClipStyle = Pdf3DProjectionClipStyle.ExplicitNearFar;
            projection.NearClipDistance = 10;
            Pdf3DView  Pdf3DView  = new Pdf3DView();
            defaultView.Projection=projection
            annotation.Views.Add(defaultView);
            annotation.Views.Add(solidwireframeView);
            //Add the pdf Annotation
            page.Annotations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3D Annotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.CAD
            'Create a new Pdf3DProjection
            Dim projection As Pdf3DProjection = New Pdf3DProjection(Pdf3DProjectionType.Perspective)
            projection.FieldOfView = 50
            projection.ProjectionType = Pdf3DProjectionType.Perspective
            Dim defaultView As Pdf3DView  = New Pdf3DView()
            defaultView.Projection=projection
            'Add this annotation to a new page.
            annotation.Appearance.Normal.Draw(page, New PointF(annotation.Location.X, annotation.Location.Y))
            'Save the  document to disk.
            document.Save("3DAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjectionType.Orthographic">
            <summary>
            Represents Orthographic projection
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DProjectionType.Perspective">
            <summary>
            Represents Perspective projection.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle">
            <summary>
            Specifies the available rendering style of the 3D artwork. 
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new Pdf3DLighting
            Pdf3DLighting lighting = new Pdf3DLighting();
            lighting.Style = Pdf3DLightingStyle.CAD;
            Pdf3DProjection projection = new Pdf3DProjection();
            projection.ProjectionType = Pdf3DProjectionType.Perspective;
            projection.FieldOfView = 10;
            projection.ClipStyle = Pdf3DProjectionClipStyle.ExplicitNearFar;
            projection.NearClipDistance = 10;
            //Create a new Pdf3DRendermode.
            Pdf3DRendermode rendermode = new Pdf3DRendermode();
            rendermode.Style = Pdf3DRenderStyle.Solid;
            //Create a new Pdf3DView
            Pdf3DView  defaultView  = new Pdf3DView()
            defaultView.Projection=projection1;
            annotation.Views.Add(defaultView);
            annotation.Views.Add(solidwireframeView);
            //Adds the pdf Annotation
            page.Annotations.Add(annotation);
            //Save the  document to disk.
            document.Save("3DAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Pdf3D Annotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            Dim lighting As Pdf3DLighting = New Pdf3DLighting()
            lighting.Style = Pdf3DLightingStyle.CAD
            Dim projection1 As Pdf3DProjection = New Pdf3DProjection(Pdf3DProjectionType.Perspective)
            projection1.FieldOfView = 50
            projection1.ClipStyle = Pdf3DProjectionClipStyle.AutomaticNearFar
            'Create a new Pdf3DRendermode
            Dim rendermode As Pdf3DRendermode = New Pdf3DRendermode()
            rendermode.Style = Pdf3DRenderStyle.Solid
            'Create a new Pdf3DView
            Dim defaultView As Pdf3DView = New Pdf3DView()
            defaultView.Projection=projection1
            'Add this annotation to a new page.
            annotation.Appearance.Normal.Draw(page, New PointF(annotation.Location.X, annotation.Location.Y))
            'Save the  document to disk.
            document.Save("3DAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.Solid">
            <summary>
            Displays textured and lit geometric shapes. In the case of artwork 
            that conforms to the Universal 3D File Format specification, these 
            shapes are triangles.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.SolidWireframe">
            <summary>
            Displays textured and lit geometric shapes (triangles) with single 
            color edges on top of them.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.Transparent">
            <summary>
            Displays textured and lit geometric shapes (triangles) with an added 
            level of transparency.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.TransparentWireframe">
            <summary>
            Displays textured and lit geometric shapes (triangles) with an added 
            level of transparency, with single color opaque edges on top of it.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.BoundingBox">
            <summary>
            Displays the bounding box edges of each node, aligned with the axes 
            of the local coordinate space for that node.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.TransparentBoundingBox">
            <summary>
            Displays bounding boxes faces of each node, aligned with the axes of 
            the local coordinate space for that node, with an added level of transparency.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.TransparentBoundingBoxOutline">
            <summary>
            Displays bounding boxes edges and faces of each node, aligned with the axes of 
            the local coordinate space for that node, with an added level of transparency.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.Wireframe">
            <summary>
            Displays only edges in a single color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.ShadedWireframe">
            <summary>
            Displays only edges, though interpolates their color between their two vertices 
            and applies lighting.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.HiddenWireframe">
            <summary>
            Displays edges in a single color, though removes back-facing and obscured edges.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.Vertices">
            <summary>
            Displays only vertices in a single color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.ShadedVertices">
            <summary>
            Displays only vertices, though uses their vertex color and applies lighting.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.Illustration">
            <summary>
            Displays silhouette edges with surfaces, removes obscured lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.SolidOutline">
            <summary>
            Displays silhouette edges with lit and textured surfaces, removes obscured lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DRenderStyle.ShadedIllustration">
            <summary>
            Displays silhouette edges with lit and textured surfaces and an additional emissive 
            term to remove poorly lit areas of the artwork.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PDF3DAnimationType">
            <summary>
            Specifies the available animation style for rendering the 3D artwork. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new Pdf3DAnimation
            Pdf3DAnimation animation = new Pdf3DAnimation(PDF3DAnimationType.Linear);
            animation.Type = PDF3DAnimationType.Linear;
            </code>
            <code lang="VB">
            'Create a new Pdf3DAnimation
            Dim animation As Pdf3DAnimation  = New Pdf3DAnimation(PDF3DAnimationType.Linear)
            animation.Type = PDF3DAnimationType.Linear
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PDF3DAnimationType.None">
            <summary>
            Represents that the Keyframe animations should not be driven directly by 
            the viewer application. This value is used by documents that are intended 
            to drive animations through an alternate means, such as JavaScript.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PDF3DAnimationType.Linear">
            <summary>
            Represents that the Keyframe animations are driven linearly from beginning to end. 
            This animation style results in a repetitive playthrough of the animation, 
            such as in a walking motion.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PDF3DAnimationType.Oscillating">
            <summary>
            Represents that the Keyframe animations should oscillate along their time range. 
            This animation style results in a back-and-forth playing of the animation, 
            such as exploding or collapsing parts.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfActionAnnotation">
            <summary>
            Represents the annotation with associated action.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfActionLinkAnnotation"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfActionLinkAnnotation">
            <summary>
            Represents base class for link annotations with associated action.
            </summary>
            <example>
            <code lang="c#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new file link annotation.
            PdfFileLinkAnnotation fileLinkAnnotation = new PdfFileLinkAnnotation(rectangle,@"..\..\Images\logo.png");
            //Set a action to file link annotation.
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            fileLinkAnnotation.Action=javaAction;
            //Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation);
            //Save the document to disk.
            document.Save("FileLinkAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new file link annotation.
            Dim fileLinkAnnotation As PdfFileLinkAnnotation = New PdfFileLinkAnnotation(fileLinkAnnotationRectangle, "..\..\Images\logo.png")
            'Set a action to file link annotation.
            Dim javaAction As PdfJavaScriptAction = New PdfJavaScriptAction("app.alert(""You are looking at Java script action of PDF "")")
            fileLinkAnnotation.Action=javaAction
            'Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation)
            'Save the  document to disk.
            document.Save("FileLinkAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLinkAnnotation">
            <summary>
            Represents the base class for link annotations.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfDocumentLinkAnnotation"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAnnotation">
            <summary>
            Represents the base class for annotation objects.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfUriAnnotation"/> Class
            <seealso cref="!:SoundAnnotation"/> Class
            <seealso cref="!:RubberStampAnnotation"/> Class
            <seealso cref="!:PopupAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfTextWebLink"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLineAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfFileLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfDocumentLinkAnnotation"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotation.m_color">
            <summary>
            Color of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotation.m_border">
            <summary>
            Border of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotation.m_rectangle">
            <summary>
            Bounds of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotation.m_page">
            <summary>
            Parent page of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotation.m_text">
            <summary>
            Text of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotation.m_annotationFlags">
            <summary>
            NAnootation's style flags.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotation.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation.#ctor">
            <summary>
            Creates the Constructors.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation.#ctor(Syncfusion.Pdf.PdfPageBase,System.String)">
            <summary>
            Creates new annotation object with the specified bounds.
            </summary>
            <param name="page">The page.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Creates new annotation object with the specified bounds.
            </summary>
            <param name="bounds">Bounds of the annotation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfAnnotation"/> class.
            </summary>
            <param name="dictionary">The annotation's dictionary.</param>
            <param name="crossTable">The document cross table.</param>
            <param name="bounds">The annotation's bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation.SetPage(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Sets related page of the annotation.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation.SetLocation(System.Drawing.PointF)">
            <summary>
            Sets the location.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation.ApplyText(System.String)">
            <summary>
            Sets the proper name to the field.
            </summary>
            <param name="text">The annotation's text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation.SetSize(System.Drawing.SizeF)">
            <summary>
            Sets the size.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation.Color">
            <summary>
            Gets or sets the background of the annotation�s icon when closed.
            The title bar of the annotation�s pop-up window.
            The border of a link annotation.
            </summary>
            <value>The color.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle.
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Set the color.
            soundAnnotation.Color = new PdfColor(Color.Red);
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the  document to disk.
            document.Save("SoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a a new rectangle.
            Dim rectangle As RectangleF  = New RectangleF(10, 40, 30, 30);
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Set the color.
            soundAnnotation.Color = New PdfColor(Color.Red)
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the document to disk.
            document.Save("SoundAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation.Border">
            <summary>
            Gets or sets annotation's border.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle.
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Assign the border to sound annotation.
            soundAnnotation.Border = new PdfAnnotationBorder(5);
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the document to disk.
            document.Save("SoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF  = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Assign the border to sound annotation.
            soundAnnotation.Border = New PdfAnnotationBorder(5)
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the  document to disk.
            document.Save("SoundAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation.Bounds">
            <summary>
            Gets or sets annotation's bounds. If this property is not set bounds are calculated automatically
            based on <see cref="P:Syncfusion.Pdf.Interactive.PdfAnnotation.Location">Location</see> property and content of annotation.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle.
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Assign the bounds to sound annotation.
            soundAnnotation.Bounds=new RectangleF(50, 100, 30, 30);
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the  document to disk.
            document.Save("SoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle.
            Dim rectangle As RectangleF  = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Assign the bounds to sound annotation.
            soundAnnotation.Bounds=New RectangleF(50, 100, 30, 30)
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the  document to disk.
            document.Save("SoundAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation.Location">
            <summary>
            Gets or sets location of the annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Assign the location to sound annotation.
            soundAnnotation.Location=new PointF(50, 100);
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the  document to disk.
            document.Save("PdfAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF  = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Assign the location to sound annotation.
            soundAnnotation.Location=New PointF(50, 100)
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the  document to disk.
            document.Save("PdfAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation.Size">
            <summary>
            Gets or sets size of the annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Assign the size to sound annotation.
            soundAnnotation.Size=new SizeF(50, 50);
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the  document to disk.
            document.Save("PdfAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF  = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Assign the size to sound annotation.
            soundAnnotation.Size=New SizeF(50, 50)
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the  document to disk.
            document.Save("PdfAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation.Page">
            <summary>
            Gets a page which this annotation is connected to.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            //Gets the page.
            PdfPage pdfPage=soundAnnotation.page;
            //Save the  document to disk.
            document.Save("PdfAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF  = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Gets the page.
            Dim pdfPage As PdfPage =soundAnnotation.page;
            'Save the  document to disk.
            document.Save("PdfAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation.Text">
            <summary>
            Gets or sets content of the annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Set the text to sound annotation.
            soundAnnotation.Text="Sound Annotation";
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the  document to disk.
            document.Save("PdfAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            Dim rectangle As RectangleF  = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Set the text to sound annotation.
            soundAnnotation.Text="Sound Annotation"
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the  document to disk.
            document.Save("PdfAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation.AnnotationFlags">
            <summary>
            Gets or sets annotation flags.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Set the annotation flags to sound annotation.
            soundAnnotation.AnnotationFlags = PdfAnnotationFlags.Print;
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the  document to disk.
            document.Save("PdfAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle.
            Dim rectangle As RectangleF  = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Set the annotation flags to sound annotation.
            soundAnnotation.AnnotationFlags = PdfAnnotationFlags.Print
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the  document to disk.
            document.Save("PdfAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLinkAnnotation.m_highlightMode">
            <summary>
            Highlight Mode of the annotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLinkAnnotation.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Syncfusion.Pdf.Interactive.PdfLinkAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLinkAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes new instance of <see cref="T:Syncfusion.Pdf.Interactive.PdfLinkAnnotation"/> class.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLinkAnnotation.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLinkAnnotation.GetHighlightMode(Syncfusion.Pdf.Interactive.PdfHighlightMode)">
            <summary>
            Gets Hightlight Mode of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfActionLinkAnnotation.m_action">
            <summary>
            Internal variable to store annotation's action.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionLinkAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfActionLinkAnnotation"/> class.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
            <example>
            <code lang="c#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new file link annotation.
            PdfFileLinkAnnotation fileLinkAnnotation = new PdfFileLinkAnnotation(rectangle);
            //Set a action to file link annotation.
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            fileLinkAnnotation.Action=javaAction;
            //Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation);
            //Save the  document to disk.
            document.Save("FileLinkAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new file link annotation.
            Dim fileLinkAnnotation As PdfFileLinkAnnotation = New PdfFileLinkAnnotation(fileLinkAnnotationRectangle)
            'Set a action to file link annotation.
            Dim javaAction As PdfJavaScriptAction = New PdfJavaScriptAction("app.alert(""You are looking at Java script action of PDF "")")
            fileLinkAnnotation.Action=javaAction
            'Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation)
            'Save the  document to disk.
            document.Save("FileLinkAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionLinkAnnotation.#ctor(System.Drawing.RectangleF,Syncfusion.Pdf.Interactive.PdfAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfActionLinkAnnotation"/> class.
            </summary>
            <param name="rectangle">Bounds specifies the location of the drawn text.</param>
            <param name="action">The <see cref="T:Syncfusion.Pdf.Interactive.PdfAction"/> specifies an action to be executed when the link is activated.</param>
            <example>
            <code lang="c#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            //Create a new file link annotation.
            PdfFileLinkAnnotation fileLinkAnnotation = new PdfFileLinkAnnotation(rectangle,javaAction);
            //Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation);
            //Save the  document to disk.
            document.Save("FileLinkAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            Dim javaAction As PdfJavaScriptAction = New PdfJavaScriptAction("app.alert(""You are looking at Java script action of PDF "")")
            'Create a new file link annotation.
            Dim fileLinkAnnotation As PdfFileLinkAnnotation = New PdfFileLinkAnnotation(fileLinkAnnotationRectangle,javaAction)
            'Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation)
            'Save the  document to disk.
            document.Save("FileLinkAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfActionLinkAnnotation.Action">
            <summary>
            Gets or sets the action for the link annotation.
            </summary>
            <value>The action to be executed when the link is activated.</value>
            <example>
            <code lang="c#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new file link annotation.
            PdfFileLinkAnnotation fileLinkAnnotation = new PdfFileLinkAnnotation(rectangle,@"..\..\Images\logo.png");
            //Set a action to file link annotation.
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            fileLinkAnnotation.Action=javaAction;
            //Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation);
            //Save the  document to disk.
            document.Save("FileLinkAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle.
             Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new file link annotation.
            Dim fileLinkAnnotation As PdfFileLinkAnnotation = New PdfFileLinkAnnotation(fileLinkAnnotationRectangle, "..\..\Images\logo.png")
            'Set a action to file link annotation.
            Dim javaAction As PdfJavaScriptAction = New PdfJavaScriptAction("app.alert(""You are looking at Java script action of PDF "")")
            fileLinkAnnotation.Action=javaAction
            'Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation)
            'Save the  document to disk.
            document.Save("FileLinkAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionAnnotation.#ctor(System.Drawing.RectangleF,Syncfusion.Pdf.Interactive.PdfAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfActionAnnotation"/> class.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
            <param name="action">The Pdf action.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfActionAnnotation.Save">
            <summary>
            Saves annotation object.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAnnotationBorder">
            <summary>
            Represents the appearance of an annotation's border.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation(popupAnnotationRectangle,"Test popup annotation");
            //Set the annotation border to popup annotation.
            popupAnnotation.Border = new PdfAnnotationBorder(4, 0, 0);
            //Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the  document to disk.
            document.Save("AnnotationBorder.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation(popupAnnotationRectangle, "Test popup annotation")
            'Set the annotation border to popup annotation.
            popupAnnotation.Border = New PdfAnnotationBorder(4, 0, 0)
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("AnnotationBorder.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationBorder.m_horizontalRadius">
            <summary>
            Horizontal corner radius.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationBorder.m_verticalRadius">
            <summary>
            Vertical corner radius.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationBorder.m_borderWidth">
            <summary>
            Width of the border.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationBorder.m_array">
            <summary>
            Pdf primitive representing this object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationBorder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfAnnotationBorder"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation(popupAnnotationRectangle,"Test popup annotation");
            //Set the annotation border.
            popupAnnotation.Border = new PdfAnnotationBorder();
            //Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the  document to disk.
            document.Save("AnnotationBorder.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation(popupAnnotationRectangle, "Test popup annotation")
            'Set the annotation border.
            popupAnnotation.Border = new PdfAnnotationBorder()
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the  document to disk.
            document.Save("AnnotationBorder.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationBorder.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfAnnotationBorder"/> class.
            </summary>
            <param name="borderWidth">A float value specifying the width of the annotation's border.</param>
            <example>
            <code lang="C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation(popupAnnotationRectangle,"Test popup annotation");
            //Set the annotation border.
            popupAnnotation.Border = new PdfAnnotationBorder(4);
            //Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the  document to disk.
            document.Save("AnnotationBorder.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation(popupAnnotationRectangle, "Test popup annotation")
            'Set the annotation border.
            popupAnnotation.Border = new PdfAnnotationBorder(4)
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("AnnotationBorder.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationBorder.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfAnnotationBorder"/> class.
            </summary>
            <param name="borderWidth">A float value specifying the width of the annotation's border.</param>
            <param name="horizontalRadius">A float value specifying the horizontal corner radius value.</param>
            <param name="verticalRadius">A float value specifying the vertical corner radius value.</param>
            <example>
            <code lang="C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation(popupAnnotationRectangle,"Test popup annotation");
            //Set the annotation border.
            popupAnnotation.Border = new PdfAnnotationBorder(4,0,0);
            //Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the  document to disk.
            document.Save("AnnotationBorder.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation(popupAnnotationRectangle, "Test popup annotation")
            'Set the annotation border.
            popupAnnotation.Border = new PdfAnnotationBorder(4,0,0)
            'Add popup annotation annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("AnnotationBorder.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationBorder.Initialize(System.Single,System.Single,System.Single)">
            <summary>
            Initializes instance.
            </summary>
            <param name="borderWidth">Width of the border.</param>
            <param name="horizontalRadius">The horizontal radius.</param>
            <param name="verticalRadius">The vertical radius.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationBorder.SetNumber(System.Int32,System.Single)">
            <summary>
            Sets the number.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationBorder.HorizontalRadius">
            <summary>
            Gets or sets a horizontal corner radius.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation(popupAnnotationRectangle,"Test popup annotation");
            //Set the horizontal radius to popup annotation border.
            popupAnnotation.Border.HorizontalRadius = 0;
            //Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the  document to disk.
            document.Save("HorizontalRadius.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation(popupAnnotationRectangle, "Test popup annotation")
            'Set the horizontal radius to popup annotation border.
            popupAnnotation.Border.HorizontalRadius = 0
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the  document to disk.
            document.Save("HorizontalRadius.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationBorder.VerticalRadius">
            <summary>
            Gets or sets a vertical corner radius.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation(popupAnnotationRectangle,"Test popup annotation");
            //Set the vertical radius to popup annotation border.
            popupAnnotation.Border.VerticalRadius = 0;
            //Add popup annotation annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the document to disk.
            document.Save("VerticalRadius.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation(popupAnnotationRectangle, "Test popup annotation")
            'Set the vertical radius to popup annotation border.
            popupAnnotation.Border.VerticalRadius = 0
            'Add popup annotation annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            Save the document to disk.
            document.Save("VerticalRadius.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationBorder.Width">
            <summary>
            Gets or sets the width of annotation's border. 
            </summary>
            <value>A float value specifying the width of the annotation's border. </value>
            <example>
            <code lang = "C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation(popupAnnotationRectangle,"Test popup annotation");
            //Set the width to popup anotation border.
             popupAnnotation.Border.Width = 4;
            //Add popup annotation annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the document to disk.
            document.Save("BorderWidth.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation(popupAnnotationRectangle, "Test popup annotation")
            'Set the width to popup anotation border.
            popupAnnotation.Border.Width = 4
            'Add popup annotation annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("BorderWidth.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationBorder.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets Pdf primitive representing this object.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAnnotationCollection">
            <summary>
            Represents collection of <see cref="T:Syncfusion.Pdf.Interactive.PdfAnnotation"/> objects.
            </summary>
            <example>
            <code lang="C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Sets the pdf sound.
            soundAnnotation.Sound = new PdfSound("@..\..\Data\endsup.wav");
            PdfAnnotationCollection annotationCollection=page.Annotations;
            //Add this annotation to a new page.
            annotationCollection.Add(soundAnnotation);
            //Save the document to disk.
            document.Save("PdfSoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Sets the pdf sound.
            soundAnnotation.Sound = New PdfSound("..\..\Data\endsup.wav")
            Dim annotationCollection As PdfAnnotationCollection =page.Annotations
            annotationCollection.Add(soundAnnotation)
            'Save the document to disk.
            document.Save("PdfSoundAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.AlreadyExistsAnnotationError">
            <summary>
            Error constant message.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.MissingAnnotationException">
            <summary>
            Error constant message.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.m_page">
            <summary>
            Parent page of the collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.m_annotations">
            <summary>
            Array of the annotations.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfAnnotationCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.#ctor(Syncfusion.Pdf.PdfPage)">
            <summary>
            Creates new annotation collection for the specified page.
            </summary>
            <param name="page">Page which collection is created for.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.Add(Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Adds a new annotation to collection. 
            </summary>
            <param name="annotation">The new annotation to be added to collection.</param>
            <returns>Position of the annotation in collection.</returns>
            <example>
            <code lang = "C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle.
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Sets the pdf sound.
            soundAnnotation.Sound = new PdfSound("@..\..\Data\endsup.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection=page.Annotations;
            annotationCollection.Add(soundAnnotation);
            //Save this document to disk.
            document.Save("PdfSoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Sets the pdf sound.
            soundAnnotation.Sound = New PdfSound("..\..\Data\endsup.wav")
            Dim annotationCollection As PdfAnnotationCollection =page.Annotations
            annotationCollection.Add(soundAnnotation)
            'Save the document to disk.
            document.Save("PdfSoundAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.Clear">
            <summary>
            Cleares the collection.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new Pdf Document.
            PdfDocument document=new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Sets the pdf sound.
            soundAnnotation.Sound = new PdfSound("@..\..\Data\endsup.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection=page.Annotations;
            annotationCollection.Add(soundAnnotation);
            //Clear the annotation collection.
            annotationCollection.Clear();
            //Save the  document to disk.
            document.Save("PdfSoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Sets the pdf sound.
            soundAnnotation.Sound = New PdfSound("..\..\Data\endsup.wav")
            Dim annotationCollection As PdfAnnotationCollection =page.Annotations
            annotationCollection.Add(soundAnnotation)
            'Clear the annotation collection.
            annotationCollection.Clear()
            'Save the  document to disk.
            document.Save("PdfSoundAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.Contains(Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Searches the collection for the specified annotation. 
            </summary>
            <param name="annotation">The annotation to search for.</param>
            <returns>True, if annotation is contained in collection. Otherwise - false.</returns>
            <example>
            <code lang = "C#">
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Sets the pdf sound.
            soundAnnotation.Sound = new PdfSound("@..\..\Data\endsup.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection=page.Annotations;
            //Addes the sound annotation to annotation collection.
            annotationCollection.Add(soundAnnotation);
            bool exist = annotationCollection.Contains(soundAnnotation);
            </code>
            <code lang="VB">
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Sets the pdf sound.
            soundAnnotation.Sound = New PdfSound("..\..\Data\endsup.wav")
            Dim annotationCollection As PdfAnnotationCollection =page.Annotations
            'Addes the sound annotation to annotation collection.
            annotationCollection.Add(soundAnnotation)
            Dim exist As bool=annotationCollection.Contains(soundAnnotation)
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.IndexOf(Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Searches the collection for the specified annotation. 
            </summary>
            <param name="annotation">The Annotation to search.</param>
            <returns>Index of the element in the collection, if exists, or -1 if the element does not exist in the collection.</returns>
            <example>
            <code lang = "C#">
            //Create a new Pdf Document.
            PdfDocument document=new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Sets the pdf sound.
            soundAnnotation.Sound = new PdfSound("@..\..\Data\endsup.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection=page.Annotations;
            annotationCollection.Add(soundAnnotation);
            int index =annotationCollection.IndexOf(soundAnnotation);
            //Save the document to disk.
            document.Save("PdfSoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Sets the pdf sound.
            soundAnnotation.Sound = New PdfSound("..\..\Data\endsup.wav")
            Dim annotationCollection As PdfAnnotationCollection =page.Annotations
            annotationCollection.Add(soundAnnotation)
            Dim index As int=annotationCollection.IndexOf(soundAnnotation)
            'Save the document to disk.
            document.Save("PdfSoundAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.Insert(System.Int32,Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Inserts annotation to the collection at the specified index.
            </summary>
            <param name="index">Index where to insert the element.</param>
            <param name="annotation">The annotation to insert in the collection.</param>
            <example>
            <code lang = "C#">
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Sets the pdf sound.
            soundAnnotation.Sound = new PdfSound("@..\..\Data\endsup.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection=page.Annotations;
            annotationCollection.Insert(1,soundAnnotation);
            </code>
            <code lang="VB">
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Sets the pdf sound.
            soundAnnotation.Sound = New PdfSound("..\..\Data\endsup.wav")
            Dim annotationCollection As PdfAnnotationCollection =page.Annotations
            annotationCollection.Insert(1,soundAnnotation)
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified field.
            </summary>
            <param name="index">The index of the element to remove.</param>
            <example>
            <code lang = "C#">
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Sets the pdf sound.
            soundAnnotation.Sound = new PdfSound("@..\..\Data\endsup.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection=page.Annotations;
            annotationCollection.Add(soundAnnotation);
            annotationCollection.RemoveAt(0)
            </code>
            <code lang="VB">
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Sets the pdf sound.
            soundAnnotation.Sound = New PdfSound("..\..\Data\endsup.wav")
            Dim annotationCollection As PdfAnnotationCollection =page.Annotations
            annotationCollection.Add(soundAnnotation)
            annotationCollection.RemoveAt(0)
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.Remove(Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Removes the element from the collection. 
            </summary>
            <param name="field">The element to remove.</param>
            <example>
            <code lang = "C#">
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Sets the pdf sound.
            soundAnnotation.Sound = new PdfSound("@..\..\Data\endsup.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection=page.Annotations;
            annotationCollection.Add(soundAnnotation);
            //Removes a sound annotation.
            annotationCollection.Remove(soundAnnotation);
            </code>
            <code lang="VB">
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Sets the pdf sound.
            soundAnnotation.Sound = New PdfSound("..\..\Data\endsup.wav")
            Dim annotationCollection As PdfAnnotationCollection =page.Annotations
            annotationCollection.Add(soundAnnotation)
            'Removes a sound annotation.
            annotationCollection.Remove(soundAnnotation)
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.AddAnnotation(Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Adds annotation to collection.
            </summary>
            <param name="annotation">Annotation to be added to collection.</param>
            <returns>Position of the annotation in collection.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.InsertAnnotation(System.Int32,Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Inserts annotation to the collection at the specified position.
            </summary>
            <param name="index">Position.</param>
            <param name="annotation">Annotation object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.RemoveAnnotation(Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Removes annotation from collection.
            </summary>
            <param name="annotation">Annotation to be removed.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.RemoveAnnotationAt(System.Int32)">
            <summary>
            Removes item from collection at the specified index.
            </summary>
            <param name="index">Index of element to be removed.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.DoAdd(Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Adds a Annotation to collection.
            </summary>
            <param name="field">The Annotation.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.DoInsert(System.Int32,Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Inserts a annotation into collection.
            </summary>
            <param name="index">The index.</param>
            <param name="field">The annotation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.DoClear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.DoRemoveAt(System.Int32)">
            <summary>
            Removes the annotation at the specified position.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.DoRemove(Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Removes the annotation.
            </summary>
            <param name="annot"></param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Interactive.PdfAnnotation"/> object at the specified position.
            </summary>
            <param name="index">The index value of the annotation in the collection. </param>
            <returns>Annotation object at the specified position.</returns>
            <example>
            <code lang="C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Sets the pdf sound
            soundAnnotation.Sound = new PdfSound("@..\..\Data\endsup.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection=page.Annotations;
            annotationCollection.Add(soundAnnotation);
            PdfAnnotation annotation=annotationCollection[0] as PdfAnnotation;
            //Save the document to disk.
            document.Save("PdfSoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle.
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Sets the pdf sound.
            soundAnnotation.Sound = New PdfSound("..\..\Data\endsup.wav")
            Dim annotationCollection As PdfAnnotationCollection =page.Annotations
            annotationCollection.Add(soundAnnotation)
            Dim annotation As PdfAnnotation = annotationCollection[0]
            'Save the  document to disk.
            document.Save("PdfSoundAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.Annotations">
            <summary>
            Gets the annotations array.
            </summary>
            <value>The annotations.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationCollection.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets Pdf primitive representing this object.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAppearanceState">
            <summary>
            Represents the states of an annotation's appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAppearanceState.m_on">
            <summary>
            Internal variable to store template for active (On) state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAppearanceState.m_off">
            <summary>
            Internal variable to store template for inactive (Off) state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAppearanceState.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAppearanceState.m_onMappingName">
            <summary>
            Internal variable to store dictionary name of checked state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAppearanceState.m_offMappingName">
            <summary>
            Internal variable to store dictionary name of unchecked state.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAppearanceState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfAppearanceState"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAppearanceState.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the m_dictionary control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAppearanceState.On">
            <summary>
            Gets or sets the active state template.
            </summary>
            <value>The <see cref="T:Syncfusion.Pdf.Graphics.PdfTemplate"/> object specifies an active state template.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAppearanceState.Off">
            <summary>
            Gets or sets the inactive state.
            </summary>
            <value>The <see cref="T:Syncfusion.Pdf.Graphics.PdfTemplate"/> object specifies an inactive state template.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAppearanceState.OnMappingName">
            <summary>
            Gets or sets the mapping name of the active state.
            </summary>
            <value>String specifies the mapping name of the active state.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAppearanceState.OffMappingName">
            <summary>
            Gets or sets the mapping name of the inactive state.
            </summary>
            <value>String specifies the mapping name of the inactive state.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAppearanceState.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAppearance">
            <summary>
            Represents the appearance of an annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            annotation.Appearance = new PdfAppearance(annotation);
            annotation.Appearance.Normal.Draw(page, new PointF(annotation.Location.X, annotation.Location.Y));
            page.Annoatations.Add(annotation);
            //Save the document to disk.
            document.Save("PdfAppearance.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new Sound Annotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Pdf 3D Apperance
            annotation.Appearance = New PdfAppearance(annotation)
            annotation.Appearance.Normal.Draw(page, New PointF(annotation.Location.X, annotation.Location.Y))
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the document to disk.
            document.Save("PdfAppearance.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAppearance.m_templateNormal">
            <summary>
            Normal appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAppearance.m_templateMouseHover">
            <summary>
            Mouse hover appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAppearance.m_templatePressed">
            <summary>
            Mouse pressed appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAppearance.m_annotation">
            <summary>
            Internal variable to store annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAppearance.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAppearance.#ctor(Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfAppearance"/> class.
            </summary>
            <param name="annotation">The <see cref="T:Syncfusion.Pdf.Interactive.PdfAnnotation"/> object specifies the annotation.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            annotation.Appearance = new PdfAppearance(annotation);
            annotation.Appearance.Normal.Draw(page, new PointF(annotation.Location.X, annotation.Location.Y));
            page.Annoatations.Add(annotation);
            //Save the document to disk.
            document.Save("3DViews.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            annotation.Appearance = New PdfAppearance(annotation)
            annotation.Appearance.Normal.Draw(page, New PointF(annotation.Location.X, annotation.Location.Y))
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation);
            Save the document to disk.
            document.Save("3DViews.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAppearance.GetNormalTemplate">
            <summary>
            Gets the normal template.
            </summary>
            <returns>Normal appearance template.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAppearance.GetPressedTemplate">
            <summary>
            Gets the pressed template.
            </summary>
            <returns>Pdf Template</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAppearance.Normal">
            <summary>
            Gets or sets <see cref="T:Syncfusion.Pdf.Graphics.PdfTemplate"/> object which applied to annotation in normal state.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            annotation.Appearance = new PdfAppearance(annotation);
            annotation.Appearance.Normal.Draw(page, new PointF(annotation.Location.X, annotation.Location.Y));
            page.Annoatations.Add(annotation);
            //Save the document to disk.
            document.Save("3DViews.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Pdf 3D Apperance
            annotation.Appearance = New PdfAppearance(annotation)
            annotation.Appearance.Normal.Draw(page, New PointF(annotation.Location.X, annotation.Location.Y))
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the document to disk.
            document.Save("3DViews.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAppearance.MouseHover">
            <summary>
            Gets or sets <see cref="T:Syncfusion.Pdf.Graphics.PdfTemplate"/> object which applied to the annotation on hovering the mouse.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            annotation.Appearance = new PdfAppearance(annotation);
            annotation.Appearance.MouseHover.Draw(page, new PointF(annotation.Location.X, annotation.Location.Y));
            page.Annoatations.Add(annotation);
            'Save the document to disk.
            document.Save("3DViews.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Pdf 3D Apperance
            annotation.Appearance = New PdfAppearance(annotation)
            annotation.Appearance.MouseHover.Draw(page, New PointF(annotation.Location.X, annotation.Location.Y))
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the document to disk.
            document.Save("3DViews.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAppearance.Pressed">
            <summary>
            Gets or sets <see cref="T:Syncfusion.Pdf.Graphics.PdfTemplate"/> object which applied to an annotation when mouse button is pressed.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create font, font style and brush
            //Create a new Pdf3D Annotation.
            Pdf3DAnnotation annotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            annotation.Appearance = new PdfAppearance(annotation);
            annotation.Appearance.Pressed.Draw(page, new PointF(annotation.Location.X, annotation.Location.Y));
            page.Annoatations.Add(annotation);
            //Save the document to disk.
            document.Save("3DViews.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new Pdf3DAnnotation.
            Dim annotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new Pdf 3D Apperance
            annotation.Appearance = New PdfAppearance(annotation)
            annotation.Appearance.Pressed.Draw(page, New PointF(annotation.Location.X, annotation.Location.Y))
            'Draw a annotation into the new page.
            page.Annoatations.Add(annotation)
            'Save the document to disk.
            document.Save("3DViews.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAppearance.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfExtendedAppearance">
            <summary>
            Represents extended appearance of the annotation. It has two states such as On state and Off state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfExtendedAppearance.m_normal">
            <summary>
            Internal variable to store normal appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfExtendedAppearance.m_pressed">
            <summary>
            Internal variable to store appearance for pressed state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfExtendedAppearance.m_mouseHover">
            <summary>
            Internal variable to store appearance for state when mouse is hovered.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfExtendedAppearance.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfExtendedAppearance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfExtendedAppearance"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfExtendedAppearance.Normal">
            <summary>
            Gets the normal appearance of the annotation.
            </summary>
            <value>The <see cref="T:Syncfusion.Pdf.Interactive.PdfAppearanceState"/> object specifies the normal appearance of the annotation.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfExtendedAppearance.MouseHover">
            <summary>
            Gets the appearance when mouse is hovered.
            </summary>
            <value>The <see cref="T:Syncfusion.Pdf.Interactive.PdfAppearanceState"/> object specifies the annotation appearance when the mouse is hovered on it.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfExtendedAppearance.Pressed">
            <summary>
            Gets the pressed state annotation.
            </summary>
            <value>The appearance in pressed state.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfExtendedAppearance.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAttachmentAnnotation">
            <summary>
            Represents an attachment annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF attachmentRectangle = new RectangleF(10, 40, 30, 30);
            //Create a new attachment annotation.
            PdfAttachmentAnnotation attachmentAnnotation = new PdfAttachmentAnnotation(attachmentRectangle,@"..\..\Images\business.jpg");
            //Set the attachment icon to attachment annotation.
            attachmentAnnotation.Icon = PdfAttachmentIcon.PushPin;
            //Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation);
            //Save the document to disk.
            document.Save("AttachmentAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim attachmentRectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new attachment annotation
            Dim attachmentAnnotation As PdfAttachmentAnnotation = New PdfAttachmentAnnotation(attachmentRectangle, "..\..\Images\business.jpg")
            'Set the Attachment Iconto attachmentAnnotation.
            attachmentAnnotation.Icon = PdfAttachmentIcon.PushPin
            'Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation)
            'Save the  document to disk.
            document.Save("AttachmentAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfFileAnnotation">
            <summary>
            Represents a base class for file attachment annotation. 
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfSoundAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.Pdf3DAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfAttachmentAnnotation"/> Class 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfFileAnnotation.m_appearance">
            <summary>
            Annotation's appearance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFileAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfFileAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFileAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfFileAnnotation"/> class.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFileAnnotation.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFileAnnotation.FileName">
            <summary>
            Gets or sets file name of the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFileAnnotation.Appearance">
            <summary>
            Gets or sets appearance of the annotation.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new pdf3d annotation.
            Pdf3DAnnotation annot = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a new pdf appreance
            annot.Appearance = new PdfAppearance(annot);
            annot.Appearance.Normal.Graphics.DrawString("Click to activate", font, brush, new PointF(40, 40));
            //Add this annotation to a new page
            annot.Appearance.Normal.Draw(page, new PointF(annot.Location.X, annot.Location.Y));
            //Save the document to disk.
            document.Save("Appearance.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new pdf3d annotation
            Dim annot As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Creates a new pdf3d apperance
            annot.Appearance = New PdfAppearance(annot)
            'Add this annotation to a new page.
            annot.Appearance.Normal.Draw(page, New PointF(annot.Location.X, annot.Location.Y))
            'Save the  document to disk.
            document.Save("Appearance.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAttachmentAnnotation.m_attachmentIcon">
            <summary>
            Icon of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAttachmentAnnotation.m_fileSpecification">
            <summary>
            File specification of the annotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <param name="rectangle">Bounds of the annotation.</param>
            <param name="fileName">A string value specifying the full path to the file to be embedded in the PDF file.</param>
            <example>
            <code lang = "C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new attachment annotation.
            PdfAttachmentAnnotation attachmentAnnotation = new PdfAttachmentAnnotation(attachmentRectangle,@"..\..\Images\business.jpg");
            //Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation);
            //Save the  document to disk.
            document.Save("AttachmentAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new attachment annotation
            Dim attachmentAnnotation As PdfAttachmentAnnotation = New PdfAttachmentAnnotation(attachmentRectangle, "..\..\Images\business.jpg")
            'Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation)
            'Save the  document to disk.
            document.Save("AttachmentAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentAnnotation.#ctor(System.Drawing.RectangleF,System.String,System.Byte[])">
            <param name="rectangle">Bounds of the annotation.</param>
            <param name="fileName">A string value specifying the full path to the file to be embedded in the PDF file.</param>
            <param name="data">A byte array specifying the content of the annotation's embedded file. </param>
            <remarks>If both FileName and FileContent are specified, the FileContent takes precedence. </remarks>
            <example>
            <code lang = "C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new attachment annotation.
            PdfAttachmentAnnotation attachmentAnnotation = new PdfAttachmentAnnotation(attachmentRectangle,@"..\..\Images\business.jpg");
            //Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation);
            //Save the  document to disk.
            document.Save("AttachmentAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new attachment annotation
            Dim attachmentAnnotation As PdfAttachmentAnnotation = New PdfAttachmentAnnotation(attachmentRectangle, "..\..\Images\business.jpg")
            'Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation)
            'Save the  document to disk.
            document.Save("AttachmentAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentAnnotation.#ctor(System.Drawing.RectangleF,System.String,System.IO.Stream)">
            <param name="rectangle">The rectangle.</param>
            <param name="fileName">A string value specifying the full path to the file to be embedded in the PDF file.</param>
            <param name="stream">The stream specifying the content of the annotation's embedded file. </param>
            <remarks>If both FileName and FileContent are specified, the FileContent takes precedence. </remarks>
            <example>
            <code lang = "C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            FileStream stream=new FileStream("..\..\Images\business.jpg",FileMode.Open);
            //Create a new attachment annotation.
            PdfAttachmentAnnotation attachmentAnnotation = new PdfAttachmentAnnotation(attachmentRectangle, "..\..\Images\Sample.jpg",stream);
            //Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation);
            //Save the  document to disk.
            document.Save("AttachmentAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            Dim  stream As FileStream =New FileStream("..\..\Images\business.jpg",FileMode.Open);
            'Create a new attachment annotation
            Dim attachmentAnnotation As PdfAttachmentAnnotation = New PdfAttachmentAnnotation(attachmentRectangle, "..\..\Images\Sample.jpg",stream)
            'Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation)
            'Save the  document to disk.
            document.Save("AttachmentAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentAnnotation.Initialize">
            <summary>
            Initializes object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentAnnotation.Save">
            <summary>
            Saves annotation object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAttachmentAnnotation.Icon">
            <summary>
            Gets or Sets attachment's icon.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfAttachmentIcon"/> enumeration member specifying the icon for the annotation when it is displayed in closed state.</value>
            <example>
            <code lang="C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF attachmentRectangle = new RectangleF(10, 40, 30, 30);
            //Create a new attachment annotation.
            PdfAttachmentAnnotation attachmentAnnotation = new PdfAttachmentAnnotation(attachmentRectangle,@"..\..\Images\business.jpg");
            //Set the attachment icon to attachment annotation.
            attachmentAnnotation.Icon = PdfAttachmentIcon.PushPin;
            //Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation);
            //Save the  document to disk.
            document.Save("AttachmentAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new attachment annotation
            Dim attachmentAnnotation As PdfAttachmentAnnotation = New PdfAttachmentAnnotation(attachmentRectangle, "..\..\Images\business.jpg")
            'Set the attachment icon to attachment annotation.
            attachmentAnnotation.Icon = PdfAttachmentIcon.PushPin
            'Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation)
            'Save the  document to disk.
            document.Save("AttachmentAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAttachmentAnnotation.FileName">
            <value>A string value specifying the full path to the file to be embedded in the PDF file.</value>
            <example>
            <code lang = "C#">
            //Create a new Pdf Document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new attachment annotation.
            PdfAttachmentAnnotation attachmentAnnotation = new PdfAttachmentAnnotation(attachmentRectangle,@"..\..\Images\business.jpg");
            //Gets the file name.
             string fileName = PdfAttachmentIcon.FileName;
            //Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation);
            //Save the  document to disk.
            document.Save("AttachmentAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new attachment annotation
            Dim attachmentAnnotation As PdfAttachmentAnnotation = New PdfAttachmentAnnotation(attachmentRectangle, "..\..\Images\business.jpg")
            'Gets the file name.
            Dim fileName As string = PdfAttachmentIcon.FileName
            'Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation)
            'Save the  document to disk.
            document.Save("AttachmentAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfDocumentLinkAnnotation">
            <summary>
            Represents annotation object with holds link on another location within a document.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF docLinkAnnotationRectangle = new RectangleF(10, 40, 30, 30);
            //Create a new document link annotation.
             PdfDocumentLinkAnnotation documentAnnotation = new PdfDocumentLinkAnnotation(docLinkAnnotationRectangle);
            //Set the annotation flags.
            documentAnnotation.AnnotationFlags = PdfAnnotationFlags.NoRotate;
            //Set the annotation text.
            documentAnnotation.Text = "Document link annotation";
            //Set the annotation's color.
            documentAnnotation.Color = new PdfColor(Color.Navy);
            //Creates a new page and adds it as the last page of the document.
            PdfPage page2 = document.Pages.Add();
            //Set the pdf destination.
            documentAnnotation.Destination = new PdfDestination(page2);
            //Set the documentlink annotation location.
            documentAnnotation.Destination.Location = new Point(10, 0);
            //Set the document annotation zool level
            documentAnnotation.Destination.Zoom = 5;
            //Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation);
            //Save the  document to disk.
            document.Save("DocumentLinkAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim docLinkAnnotationRectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new document link annotation.
            Dim documentAnnotation As PdfDocumentLinkAnnotation = New PdfDocumentLinkAnnotation(docLinkAnnotationRectangle)
            'Set the annotation flags.
            documentAnnotation.AnnotationFlags = PdfAnnotationFlags.NoRotate\
            'Set the annotation text.
            documentAnnotation.Text = "Document link annotation"
            'Set the color.
            documentAnnotation.Color = New PdfColor(Color.Navy)
            'Creates a new page and adds it as the last page of the document.
            Dim page2 As PdfPage = document.Pages.Add()
            'Set the pdf destination.
            documentAnnotation.Destination = New PdfDestination(page2)
            'Set the document annotation destination location.
            documentAnnotation.Destination.Location = New Point(10, 0)
            'Set the document annotation zool level
            documentAnnotation.Destination.Zoom = 5
            'Add this annotation to a new page.
            page.Annotations.Add(documentAnnotation)
            'Save the  document to disk.
            document.Save("DocumentLinkAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDocumentLinkAnnotation.m_destination">
            <summary>
            Destination of the annotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfDocumentLinkAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes new <see cref="T:Syncfusion.Pdf.Interactive.PdfDocumentLinkAnnotation"/> instance.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF docLinkAnnotationRectangle = new RectangleF(10, 40, 30, 30);
            //Create a new document link annotation.
            PdfDocumentLinkAnnotation documentAnnotation = new PdfDocumentLinkAnnotation(docLinkAnnotationRectangle);
            //Set the Document Annotation Text.
            documentAnnotation.Text = "Document link annotation";
            //Creates a new page and adds it as the last page of the document.
            PdfPage page2 = document.Pages.Add();
            //Set the document link annotation destination.
            documentAnnotation.Destination = new PdfDestination(page2);
            //Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation);
            //Save the  document to disk.
            document.Save("DocumentLinkAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim docLinkAnnotationRectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new document link annotation.
            Dim documentAnnotation As PdfDocumentLinkAnnotation = New PdfDocumentLinkAnnotation(docLinkAnnotationRectangle)
            'Set the annotation Text.
            documentAnnotation.Text = "Document link annotation"
            'Creates a new page and adds it as the last page of the document.
            Dim page2 As PdfPage = document.Pages.Add()
            'Set the document link annotation destination.
            documentAnnotation.Destination = New PdfDestination(page2)
            'Add this annotation to a new page.
            page.Annotations.Add(documentAnnotation)
            'Save the document to disk.
            document.Save("DocumentLinkAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfDocumentLinkAnnotation.#ctor(System.Drawing.RectangleF,Syncfusion.Pdf.Interactive.PdfDestination)">
            <summary>
            Initializes new <see cref="T:Syncfusion.Pdf.Interactive.PdfDocumentLinkAnnotation"/> instance.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
            <param name="destination">Destination of the annotation.</param>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Creates a new page and adds it as the last page of the document.
            PdfPage page2 = document.Pages.Add();
            //Create a new pdf destination.
            PdfDestination destination=new new PdfDestination(page2);
            //Create a new document link annotation.
             PdfDocumentLinkAnnotation documentAnnotation = new PdfDocumentLinkAnnotation(docLinkAnnotationRectangle,destination);
            //Set the annotation text.
            documentAnnotation.Text = "Document link annotation";
            //Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation);
            //Save the document to disk.
            document.Save("DocumentLinkAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Creates a new page and adds it as the last page of the document.
            Dim page2 As PdfPage = document.Pages.Add()
            'Create a new pdf destination.
            Dim destination AS PdfDestination =New PdfDestination(page2)
            'Create a new document link annotation.
            Dim documentAnnotation As PdfDocumentLinkAnnotation = New PdfDocumentLinkAnnotation(docLinkAnnotationRectangle,destination)
            'Set the annotation text.
            documentAnnotation.Text = "Document link annotation"
            'Add this annotation to a new page.
            page.Annotations.Add(documentAnnotation)
            'Save the  document to disk.
            document.Save("DocumentLinkAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfDocumentLinkAnnotation.Save">
            <summary>
            Saves annotation object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDocumentLinkAnnotation.Destination">
            <summary>
            Gets or sets the destination of the annotation.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF docLinkAnnotationRectangle = new RectangleF(10, 40, 30, 30);
            //Create a new documentlink annotation.
             PdfDocumentLinkAnnotation documentAnnotation = new PdfDocumentLinkAnnotation(docLinkAnnotationRectangle);
            //Creates a new page and adds it as the last page of the document.
            PdfPage page2 = document.Pages.Add();
            //Set the pdf destination.
            documentAnnotation.Destination = new PdfDestination(page2);
            //Set the pdf destination location.
            documentAnnotation.Destination.Location = new Point(10, 0);
            //Set the document link annotation zool level
            documentAnnotation.Destination.Zoom = 5;
            //Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation);
            //Save the  document to disk.
            document.Save("Destination.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim docLinkAnnotationRectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new document link annotation.
            Dim documentAnnotation As PdfDocumentLinkAnnotation = New PdfDocumentLinkAnnotation(docLinkAnnotationRectangle)
            'Creates a new page and adds it as the last page of the document.
            Dim page2 As PdfPage = document.Pages.Add()
            'Set the pdf destination.
            documentAnnotation.Destination = New PdfDestination(page2)
            'Set the document link annotation destination location.
            documentAnnotation.Destination.Location = New Point(10, 0)
            'Set the document link annotation zool level
            documentAnnotation.Destination.Zoom = 5
            'Add this annotation to a new page.
            page.Annotations.Add(documentAnnotation)
            'Save the  document to disk.
            document.Save("Destination.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfFileLinkAnnotation">
            <summary>
            Represents the annotation link to external file.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new pdf file link annotation.
            PdfFileLinkAnnotation fileLinkAnnotation = new PdfFileLinkAnnotation(rectangle,@"..\..\Images\logo.png");
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the document to disk.
            document.Save("FileLinkAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new pdf file link annotation.
            Dim fileLinkAnnotation As PdfFileLinkAnnotation = New PdfFileLinkAnnotation(rectangle, "..\..\Images\logo.png")
            'Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation)
            'Save the document to disk.
            document.Save("FileLinkAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfFileLinkAnnotation.m_action">
            <summary>
            Internal variable to store file launch action.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFileLinkAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <param name="rectangle">Bounds of the annotation.</param>
            <param name="fileName">A string value specifying the full path to the file to be embedded.</param>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new pdf file link annotation.
            PdfFileLinkAnnotation fileLinkAnnotation = new PdfFileLinkAnnotation(rectangle,@"..\..\Images\logo.png");
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the document to disk.
            document.Save("FileLinkAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new pdf file link annotation.
            Dim fileLinkAnnotation As PdfFileLinkAnnotation = New PdfFileLinkAnnotation(rectangle, "..\..\Images\logo.png")
            'Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation)
            'Save the document to disk.
            document.Save("FileLinkAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFileLinkAnnotation.Save">
            <summary>
            Saves annotation object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFileLinkAnnotation.FileName">
            <value>A string value specifying the full path to the file to be embedded.</value>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new pdf file link annotation.
            PdfFileLinkAnnotation fileLinkAnnotation = new PdfFileLinkAnnotation(rectangle,@"..\..\Images\logo.png");
            //Gets the file name.
            string fileName=fileLinkAnnotation.FileName;
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the document to disk.
            document.Save("FileLinkAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new pdf file link annotation.
            Dim fileLinkAnnotation As PdfFileLinkAnnotation = New PdfFileLinkAnnotation(rectangle, "..\..\Images\logo.png")
            'Gets the file name.
            Dim fileName As String=fileLinkAnnotation.FileName
            'Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation)
            'Save the document to disk.
            document.Save("FileLinkAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFileLinkAnnotation.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action to be executed when the annotation is activated.</value>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new pdf file link annotation.
            PdfFileLinkAnnotation fileLinkAnnotation = new PdfFileLinkAnnotation(rectangle,@"..\..\Images\logo.png");
            //Set a action to filelink annotation.
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            fileLinkAnnotation.Action=javaAction;
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the document to disk.
            document.Save("FileLinkAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new pdf file link annotation.
            Dim fileLinkAnnotation As PdfFileLinkAnnotation = New PdfFileLinkAnnotation(rectangle, "..\..\Images\logo.png")
            'Set a action to fileLinkAnnotation.
            Dim javaAction As PdfJavaScriptAction = New PdfJavaScriptAction("app.alert(""You are looking at Java script action of PDF "")")
            fileLinkAnnotation.Action=javaAction
            'Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation)
            'Save the document to disk.
            document.Save("FileLinkAnnotation.pdf")
            </code>
            </example> 
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Interactive.PdfInkAnnotation" -->
        <member name="F:Syncfusion.Pdf.Interactive.PdfInkAnnotation.m_inkList">
            <summary>
            Indicate the path of the ink annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfInkAnnotation.m_dashArray">
            <summary>
            Internal variable to store Border Dash.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfInkAnnotation.m_borderWidth">
            <summary>
            border width
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfInkAnnotation.m_borderDic">
            <summary>
            Indicate the border Dictionary
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfInkAnnotation.m_borderStyle">
            <summary>
            Indicat the border style
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfInkAnnotation.#ctor(System.Drawing.RectangleF,System.Collections.Generic.List{System.Single})">
            <summary>
            Create the instance of the class
            </summary>
            <param name="rectangle"></param>
            <param name="linePoints"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfInkAnnotation.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfInkAnnotation.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfInkAnnotation.InkList">
            <summary>
            Get or sets back the InkList value
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfInkAnnotation.BorderWidth">
            <summary>
            Get or sets back the border width
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfInkAnnotation.BorderStyle">
            <summary>
            get or sets the border style
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfInkAnnotation.DashArray">
            <summary>
            Get or sets the DashArry value
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLineAnnotation">
            <summary>
            Represents a line annotation. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(points, "Line Annoation");
            //Create pdf line border
            LineBorder lineBorder = new LineBorder();
            lineBorder.BorderStyle = PdfBorderStyle.Solid;
            lineBorder.BorderWidth = 1;
            lineAnnotation.lineBorder = lineBorder;
            lineAnnotation.LineIntent = PdfLineIntent.LineDimension;
            //Assign the line ending style
            lineAnnotation.BeginLineStyle = PdfLineEndingStyle.Butt;
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Diamond;
            lineAnnotation.AnnotationFlags = PdfAnnotationFlags.Default;
            //Assign the line color
            lineAnnotation.InnerLineColor = new PdfColor(Color.Green);
            lineAnnotation.BackColor = new PdfColor(Color.Green);
            //Assign the leader line
            lineAnnotation.LeaderLineExt = 0;
            lineAnnotation.LeaderLine = 0;
            //Assign the Line caption type
            lineAnnotation.LineCaption = true;
            lineAnnotation.CaptionType = PdfLineCaptionType.Inline;
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation);
            //Save the document to disk.
            document.Save("LineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            //Create a new line annotation.
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Create pdf line border
            Dim lineBorder As LineBorder = New LineBorder()
            lineBorder.BorderStyle = PdfBorderStyle.Solid
            'lineBorder.DashArray = 1;
            lineBorder.BorderWidth = 1
            lineAnnotation.lineBorder = lineBorder
            'Sets the line indent.
            lineAnnotation.LineIntent = PdfLineIntent.LineDimension
            'Assign the line ending style
            lineAnnotation.BeginLineStyle = PdfLineEndingStyle.Butt
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Diamond
            lineAnnotation.AnnotationFlags = PdfAnnotationFlags.Default
            'Assign the line color
            lineAnnotation.InnerLineColor = New PdfColor(Color.Green)
            lineAnnotation.BackColor = New PdfColor(Color.Green)
            'Assign the leader line
            lineAnnotation.LeaderLineExt = 0
            lineAnnotation.LeaderLine = 0
            'Assign the Line caption type
            lineAnnotation.LineCaption = True
            'Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation)
            'Save the document to disk.
            document.Save("LineAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineAnnotation.m_beginLine">
            <summary>
            Indicates PdfLine Begin style 
            </summary>     
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineAnnotation.m_endLine">
            <summary>
            Indicates PdfLine End style 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineAnnotation.m_lineBorder">
            <summary>
            To Specify the Line Border
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineAnnotation.m_linePoints">
            <summary>
            An array of four numbers specifying the starting and ending coordinates
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineAnnotation.m_lineStyle">
            <summary>
            An array of two names specifying the line ending styles
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineAnnotation.m_innerLineColor">
            <summary>
            To specifying the Inner Line color color with which to fill the annotation’s line endings
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineAnnotation.m_backgroundColor">
            <summary>
            To specifying the Background Color
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineAnnotation.m_leaderLineExt">
            <summary>
            To specifying the Leader Line Extension size
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineAnnotation.m_leaderLine">
            <summary>
            To specifying the Leader Line size
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineAnnotation.m_lineCaption">
            <summary>
            To specifying the caption in the appearance of the line,
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineAnnotation.m_lineIntent">
            <summary>
            To specifying the intent of the line annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineAnnotation.m_captionType">
            <summary>
            To specifying Caption Type
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLineAnnotation.#ctor(System.Int32[])">
            <summary>
            Initializes new instance of <see cref="T:Syncfusion.Pdf.Interactive.PdfLineAnnotation"/> class.
            </summary>
            <param name="linePoints">The line points.</param>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(points);
            //Create pdf line border
            LineBorder lineBorder = new LineBorder();
            lineBorder.BorderStyle = PdfBorderStyle.Solid;
            lineBorder.BorderWidth = 1;
            lineAnnotation.lineBorder = lineBorder;
            lineAnnotation.LineIntent = PdfLineIntent.LineDimension;
            //Assign the line ending style
            lineAnnotation.BeginLineStyle = PdfLineEndingStyle.Butt;
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Diamond;
            lineAnnotation.AnnotationFlags = PdfAnnotationFlags.Default;
            //Assign the line color
            lineAnnotation.InnerLineColor = new PdfColor(Color.Green);
            lineAnnotation.BackColor = new PdfColor(Color.Green);
            //Assign the leader line
            lineAnnotation.LeaderLineExt = 0;
            lineAnnotation.LeaderLine = 0;
            //Assign the line caption
            lineAnnotation.LineCaption = true;
            lineAnnotation.CaptionType = PdfLineCaptionType.Inline;
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation);
            //Save the document to disk.
            document.Save("LineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            'Create a new line annotation.
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(points)
            'Create pdf line border
            Dim lineBorder As LineBorder = New LineBorder()
            lineBorder.BorderStyle = PdfBorderStyle.Solid
            'lineBorder.DashArray = 1;
            lineBorder.BorderWidth = 1
            lineAnnotation.lineBorder = lineBorder
            lineAnnotation.LineIntent = PdfLineIntent.LineDimension
            'Assign the line ending style
            lineAnnotation.BeginLineStyle = PdfLineEndingStyle.Butt
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Diamond
            lineAnnotation.AnnotationFlags = PdfAnnotationFlags.Default
            'Assign the line color
            lineAnnotation.InnerLineColor = New PdfColor(Color.Green)
            lineAnnotation.BackColor = New PdfColor(Color.Green)
            'Assign the leader line
            lineAnnotation.LeaderLineExt = 0
            lineAnnotation.LeaderLine = 0
            'Assign the line caption type.
            lineAnnotation.LineCaption = True
            lineAnnotation.CaptionType = PdfLineCaptionType.Inline
            'Set the PopupIcon to popupAnnotation.
             lineAnnotation.EndLineStyle = PdfLineEndingStyle.Diamond
            'Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation)
            'Save the document to disk.
            document.Save("LineAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLineAnnotation.#ctor(System.Int32[],System.String)">
            <summary>
            Initializes new instance of <see cref="T:Syncfusion.Pdf.Interactive.PdfLineAnnotation"/> class.
            </summary>
            <param name="linePoints">The line points.</param>
            <param name="text">The line caption text.</param>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(points, "Line Annoation");
            //Create pdf line border
            LineBorder lineBorder = new LineBorder();
            lineBorder.BorderStyle = PdfBorderStyle.Solid;
            lineBorder.BorderWidth = 1;
            lineAnnotation.lineBorder = lineBorder;
            lineAnnotation.LineIntent = PdfLineIntent.LineDimension;
            //Assign the line ending style
            lineAnnotation.BeginLineStyle = PdfLineEndingStyle.Butt;
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Diamond;
            lineAnnotation.AnnotationFlags = PdfAnnotationFlags.Default;
            //Assign the line color
            lineAnnotation.InnerLineColor = new PdfColor(Color.Green);
            lineAnnotation.BackColor = new PdfColor(Color.Green);
            //Assign the leader line
            lineAnnotation.LeaderLineExt = 0;
            lineAnnotation.LeaderLine = 0;
            //Assign the Line caption type
            lineAnnotation.LineCaption = true;
            lineAnnotation.CaptionType = PdfLineCaptionType.Inline;
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation);
            //Save the document to disk.
            document.Save("LineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            //To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            //Create a new line annotation.
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Create pdf line border
            Dim lineBorder As LineBorder = New LineBorder()
            lineBorder.BorderStyle = PdfBorderStyle.Solid
            'lineBorder.DashArray = 1;
            lineBorder.BorderWidth = 1
            lineAnnotation.lineBorder = lineBorder
            lineAnnotation.LineIntent = PdfLineIntent.LineDimension
            'Assign the line ending style
            lineAnnotation.BeginLineStyle = PdfLineEndingStyle.Butt
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Diamond
            lineAnnotation.AnnotationFlags = PdfAnnotationFlags.Default
            'Assign the line color
            lineAnnotation.InnerLineColor = New PdfColor(Color.Green)
            lineAnnotation.BackColor = New PdfColor(Color.Green)
            'Assign the leader line
            lineAnnotation.LeaderLineExt = 0
            lineAnnotation.LeaderLine = 0
            'Assign the Line caption type
            lineAnnotation.LineCaption = True
            lineAnnotation.CaptionType = PdfLineCaptionType.Inline
            //Set the line ending style.
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Diamond
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation)
            //Save the document to disk.
            document.Save("LineAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLineAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes new instance of <see cref="T:Syncfusion.Pdf.Interactive.PdfLineAnnotation"/> class.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(new RectangleF(80, 420, 150, 420));
            //Create pdf line border
            LineBorder lineBorder = new LineBorder();
            lineBorder.BorderStyle = PdfBorderStyle.Solid;
            lineBorder.BorderWidth = 1;
            lineAnnotation.lineBorder = lineBorder;
            lineAnnotation.LineIntent = PdfLineIntent.LineDimension;
            //Assign the line ending style
            lineAnnotation.BeginLineStyle = PdfLineEndingStyle.Butt;
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Diamond;
            lineAnnotation.AnnotationFlags = PdfAnnotationFlags.Default;
            //Assign the line color
            lineAnnotation.InnerLineColor = new PdfColor(Color.Green);
            lineAnnotation.BackColor = new PdfColor(Color.Green);
            //Assign the leader line
            lineAnnotation.LeaderLineExt = 0;
            lineAnnotation.LeaderLine = 0;
            //Assign the Line caption type
            lineAnnotation.LineCaption = true;
            lineAnnotation.CaptionType = PdfLineCaptionType.Inline;
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation);
            //Save the document to disk.
            document.Save("LineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            //Create a new line annotation.
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(New RectangleF(80, 420, 150, 420))
            'Create pdf line border
            Dim lineBorder As LineBorder = New LineBorder()
            lineBorder.BorderStyle = PdfBorderStyle.Solid
            'lineBorder.DashArray = 1;
            lineBorder.BorderWidth = 1
            lineAnnotation.lineBorder = lineBorder
            lineAnnotation.LineIntent = PdfLineIntent.LineDimension
            'Assign the line ending style
            lineAnnotation.BeginLineStyle = PdfLineEndingStyle.Butt
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Diamond
            lineAnnotation.AnnotationFlags = PdfAnnotationFlags.Default
            'Assign the line color
            lineAnnotation.InnerLineColor = New PdfColor(Color.Green)
            lineAnnotation.BackColor = New PdfColor(Color.Green)
            'Assign the leader line
            lineAnnotation.LeaderLineExt = 0
            lineAnnotation.LeaderLine = 0
            'Assign the Line caption type
            lineAnnotation.LineCaption = True
            'Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation)
            'Save the document to disk.
            document.Save("LineAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLineAnnotation.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLineAnnotation.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLineAnnotation.LineCaption">
            <summary>
            Gets or sets whether the line annotation caption should be displayed.
            </summary>
            <value><c>true</c> if the line caption should be displayed, otherwise <c>false</c>.</value>
            <example>
            <code lang = "C#">
            //Create a new pdf document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(points, "Line Annoation");
            //Set the line caption.
            lineAnnotation.LineCaption = true;
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation);
            //Save the document to disk.
            document.Save("LineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            'Create a new line annotation.
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Set the line caption.
            lineAnnotation.LineCaption = True
            'Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation)
            'Save the document to disk.
            document.Save("LineAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLineAnnotation.LeaderLine">
            <summary>
            Gets or sets Leader Line 
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
             PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(points, "Line Annoation");
            //Set the leader line.
            lineAnnotation.LeaderLine = 10;
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation);
            //Save the document to disk.
            document.Save("LeaderLine.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            'Create a new line annotation.
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Set the LeaderLine to popupAnnotation.
            lineAnnotation.LeaderLine = 10
            'Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation)
            'Save the document to disk.
            document.Save("LeaderLine.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLineAnnotation.LeaderLineExt">
            <summary>
            Gets or sets Leader Line Extension
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
             PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(points, "Line Annoation");
            //Set the leader line extension.
            lineAnnotation.LeaderLineExt = 10;
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation);
            //Save the document to disk.
            document.Save("LeaderLineExt.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            'Create a new line annotation.
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Set the leader line extension.
            lineAnnotation.LeaderLineExt = 10
            'Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation)
            'Save the document to disk.
            document.Save("LeaderLineExt.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLineAnnotation.lineBorder">
            <summary>
            Gets or sets Border style of the Line Annotation.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.LineBorder"/> enumeration member specifying the border style for the line.</value>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(points, "Line Annoation");
            //Create pdf line border
            LineBorder lineBorder = new LineBorder();
            lineBorder.BorderStyle = PdfBorderStyle.Solid;
            lineBorder.BorderWidth = 1;
            lineAnnotation.lineBorder = lineBorder;
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation);
            //Save the document to disk.
            document.Save("LineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            'Create a new line annotation.
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Create pdf line border
            Dim lineBorder As LineBorder = New LineBorder()
            lineBorder.BorderStyle = PdfBorderStyle.Solid
            'lineBorder.DashArray = 1
            lineBorder.BorderWidth = 1
            lineAnnotation.lineBorder = lineBorder
            'Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation)
            'Save the document to disk.
            document.Save("LineAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLineAnnotation.BeginLineStyle">
            <summary>
            Gets or sets the style used for the beginning of the line. 
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfLineEndingStyle"/> enumeration member specifying the begin style for the line.</value>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(points, "Line Annoation");
            //Sets the begin line style.
            lineAnnotation.BeginLineStyle = PdfLineEndingStyle.Butt;
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation);
            //Save the document to disk.
            document.Save("LineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            'Create a new line annotation.
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Assign the line ending style
            lineAnnotation.BeginLineStyle = PdfLineEndingStyle.Butt
            'Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation)
            'Save the document to disk.
            document.Save("LineAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLineAnnotation.EndLineStyle">
            <summary>
            Gets or sets the style used for the end of the line. 
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfLineEndingStyle"/> enumeration member specifying the end style for the line.</value>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(points, "Line Annoation");
            //Sets the line ending style.
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Diamond;
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation);
            //Save the document to disk.
            document.Save("LineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            'Create a new line annotation.
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Sets the line ending style.
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Diamond
            'Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation)
            'Save the document to disk.
            document.Save("LineAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLineAnnotation.CaptionType">
            <summary>
            Gets or sets the line caption text type.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfLineCaptionType"/> enumeration member specifying the line caption type.</value>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(points, "Line Annoation");
            //Sets the line caption type.
            lineAnnotation.CaptionType = PdfLineCaptionType.Inline;
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation);
            //Save the document to disk.
            document.Save("LineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            'Create a new line annotation.
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Sets the line caption type.
            lineAnnotation.CaptionType = PdfLineCaptionType.Inline
            'Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation)
            'Save the document to disk.
            document.Save("LineAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLineAnnotation.LineIntent">
            <summary>
            Gets or sets LineIntent
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(points, "Line Annoation");
            //Sets the line intent.
             ineAnnotation.LineIntent = PdfLineIntent.LineDimension;
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation);
            //Save the document to disk.
            document.Save("LineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            'Create a new line annotation.
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Sets the line intent.
            lineAnnotation.LineIntent = PdfLineIntent.LineDimension
            'Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation)
            'Save the document to disk.
            document.Save("LineAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLineAnnotation.InnerLineColor">
            <summary>
            Gets or sets Inner Color of the PdfLine
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(points, "Line Annoation");
            //Sets the inner line color.
            linkannotation.InnerLineColor = new PdfColor(Color.Green);
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation);
            //Save the document to disk.
            document.Save("LineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            'Create a new line annotation.
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Sets the inner line color.
            linkannotation.InnerLineColor = new PdfColor(Color.Green)
            'Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation)
            'Save the document to disk.
            document.Save("LineAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLineAnnotation.BackColor">
            <summary>
            Gets or sets Background Color of the PdfLine
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(points, "Line Annoation");
            //Sets the line back color.
            linkannotation.BackColor = new PdfColor(Color.Green);
            //Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation);
            //Save the document to disk.
            document.Save("LineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            'Create a new line annotation.
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Sets the line back color.
            linkannotation.BackColor = new PdfColor(Color.Green)
            'Add this annotation to a new page.
            page.Annotations.Add(lineAnnotation)
            'Save the document to disk.
            document.Save("LineAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.LineBorder">
            <summary>
            Represents the border style of the Line annotation.
            </summary>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineannotation = new PdfLineAnnotation(points, "Line Annoation");
            //Create pdf line border
            LineBorder lineBorder = new LineBorder();
            lineBorder.BorderStyle = PdfBorderStyle.Solid;
            lineBorder.BorderWidth = 1;
            lineannotation.lineBorder = lineBorder;
            //Add this annotation to a new page.
            page.Annotations.Add(lineannotation);
            //Save document to disk.
            document.Save("LineBorder.pdf");
            </code>
            <code lang="VB">
            'Create a new pdf document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            'Create a new line annotation.
            Dim lineannotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Create pdf line border
            Dim lineBorder As LineBorder = New LineBorder()
            lineBorder.BorderStyle = PdfBorderStyle.Solid
            'lineBorder.DashArray = 1;
            lineBorder.BorderWidth = 1
            lineannotation.lineBorder = lineBorder
            'Add this annotation to a new page.
            page.Annotations.Add(lineannotation)
            'Save document to disk.
            document.Save("LineBorder.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.LineBorder.m_borderWidth">
            <summary>
            Internal variable to store border width.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.LineBorder.m_dashArray">
            <summary>
            Internal variable to store Border Dash.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.LineBorder.m_borderStyle">
            <summary>
            Internal variable to store border style;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.LineBorder.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.LineBorder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.LineBorder"/> class.
            </summary>
            <example>
            <code lang="C#">
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineannotation = new PdfLineAnnotation(points, "Line Annoation");
            //Create pdf line border
            LineBorder lineBorder = new LineBorder();
            lineBorder.BorderStyle = PdfBorderStyle.Solid;
            lineBorder.BorderWidth = 1;
            lineannotation.lineBorder = lineBorder;
            </code>
            <code lang="VB">
            'Create a new pdf document.
            'Create a new line annotation.
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            Dim lineannotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Create pdf line border
            Dim lineBorder As LineBorder = New LineBorder()
            lineBorder.BorderStyle = PdfBorderStyle.Solid
            'lineBorder.DashArray = 1
            lineBorder.BorderWidth = 1
            lineannotation.lineBorder = lineBorder
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.LineBorder.StyleToString(Syncfusion.Pdf.Interactive.PdfBorderStyle)">
            <summary>
            Converts border style to string.
            </summary>
            <param name="style">The style.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.LineBorder.BorderWidth">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The line border width.</value>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineannotation = new PdfLineAnnotation(points, "Line Annoation");
            //Create pdf line border
            LineBorder lineBorder = new LineBorder();
            lineBorder.BorderWidth = 1;
            //Add this annotation to a new page.
            page.Annotations.Add(lineannotation);
            //Save document to disk.
            document.Save("LineBorder.pdf");
            </code>
            <code lang="VB">
            'Create a new pdf document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            'Create a new line annotation.
            Dim lineannotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Create pdf line border
            Dim lineBorder As LineBorder = New LineBorder()
            lineBorder.BorderWidth = 1
            'Add this annotation to a new page.
            page.Annotations.Add(lineannotation)
            'Save document to disk.
            document.Save("LineBorder.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.LineBorder.BorderStyle">
            <summary>
            Gets or sets the border style.
            </summary>
            <value>The line border style.</value>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineannotation = new PdfLineAnnotation(points, "Line Annoation");
            //Create pdf line border
            LineBorder lineBorder = new LineBorder();
            lineBorder.BorderStyle = PdfBorderStyle.Solid;
            //Add this annotation to a new page.
            page.Annotations.Add(lineannotation);
            //Save document to disk.
            document.Save("LineBorder.pdf");
            </code>
            <code lang="VB">
            'Create a new pdf document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            'Create a new line annotation.
            Dim lineannotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Create pdf line border
            Dim lineBorder As LineBorder = New LineBorder()
            lineBorder.BorderStyle = PdfBorderStyle.Solid
            'Add this annotation to a new page.
            page.Annotations.Add(lineannotation)
            'Save document to disk.
            document.Save("LineBorder.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.LineBorder.DashArray">
            <summary>
            Gets or sets the Line Dash
            </summary>
            <value>The line border dash array.</value>
            <example>
            <code lang = "C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineannotation = new PdfLineAnnotation(points, "Line Annoation");
            //Create pdf line border
            LineBorder lineBorder = new LineBorder();
            lineBorder.DashArray = 1;
            //Add this annotation to a new page.
            page.Annotations.Add(lineannotation);
            //Save document to disk.
            document.Save("LineBorder.pdf");
            </code>
            <code lang="VB">
            'Create a new pdf document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points As Integer() = New Integer() {80, 420, 150, 420}
            //Create a new line annotation.
            Dim lineannotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Create pdf line border
            Dim lineBorder As LineBorder = New LineBorder()
            'lineBorder.DashArray = 1
            'Add this annotation to a new page.
            page.Annotations.Add(lineannotation)
            'Save document to disk.
            document.Save("LineBorder.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.LineBorder.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.Pdf3DAnnotation">
            <summary>
            Represents the 3D annotation for a PDF document.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new pdf3d annotation.
            Pdf3DAnnotation pdf3dAnnotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create pdfFont, pdfFont style and brush
            Font font = new Font("Calibri", 11, FontStyle.Regular);
            PdfFont pdfFont = new PdfTrueTypeFont(font, false);
            PdfBrush brush = new PdfSolidBrush(Color.DarkBlue);
            PdfBrush bgbrush = new PdfSolidBrush(Color.WhiteSmoke);
            PdfColor color = new PdfColor(Color.Silver);
            Pdf3DActivation activation = new Pdf3DActivation();
            activation.ActivationMode = Pdf3DActivationMode.PageVisible;
            activation.ShowToolbar = true;
            pdf3dAnnotation.Activation = activation;
            Pdf3DView defaultView = new Pdf3DView();
            defaultView.ExternalName="Near View";
            defaultView.CameraToWorldMatrix=new float[] { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            defaultView.CenterOfOrbit=131.695f;
            view.Background = background;
            view.Projection = projection;
            view.RenderMode = renderMode;
            view.LightingScheme = lighting;
            pdf3dAnnotation.Views.Add(defaultView);
            pdf3dAnnotation.Appearance.Normal.Graphics.DrawString("Click to activate", pdfFont, brush, new PointF(40, 40));
            //Add this annotation to a new page
            pdf3dAnnotation.Appearance.Normal.Draw(page, new PointF(pdf3dAnnotation.Location.X, pdf3dAnnotation.Location.Y));
            //Save the  document to disk.
            document.Save("3DAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new pdf3d annotation.
            Dim pdf3dAnnotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create pdfFont, pdfFont style and brush
            Dim font As Font = New Font("Calibri", 11, FontStyle.Regular)
            Dim pdfFont As PdfFont = New PdfTrueTypeFont(font, False)
            Dim brush As PdfBrush = New PdfSolidBrush(System.Drawing.Color.DarkBlue)
            Dim bgbrush As PdfBrush = New PdfSolidBrush(System.Drawing.Color.WhiteSmoke)
            Dim color As PdfColor = New PdfColor(System.Drawing.Color.Silver)
            'Create a new pdf3d projection.
            Dim projection As Pdf3DProjection  = New Pdf3DProjection()
            projection.ProjectionType = Pdf3DProjectionType.Perspective
            'Create a new pdf3d activation.
            Pdf3DActivation activation = new Pdf3DActivation()
            activation.ActivationMode = Pdf3DActivationMode.PageVisible
            activation.ShowToolbar = true
            pdf3dAnnotation.Activation = activation
            'Create a new pdf3d view.
            Dim defaultView As Pdf3DView  = New Pdf3DView()
            defaultView.ExternalName="Near View"
            defaultView.CameraToWorldMatrix=new Single() { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f }
            defaultView.CenterOfOrbit=131.695f
            view.Background = background
            view.Projection = projection
            view.RenderMode = renderMode
            view.LightingScheme = lighting
            pdf3dAnnotation.Views.Add(defaultView)
            'Add this annotation to a new page.
            pdf3dAnnotation.Appearance.Normal.Draw(page, New PointF(pdf3dAnnotation.Location.X, pdf3dAnnotation.Location.Y))
            'Save the  document to disk.
            document.Save("3DAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DAnnotation.m_u3d">
            <summary>
            Internal variable to store U3D.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.Pdf3DAnnotation.m_apperance">
            <summary>
            Internal variable to store apperance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfSoundAnnotation"/> class.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new pdf3d annotation.
            Pdf3DAnnotation pdf3dAnnotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150));
            //Adds the annotaiton.
            page.Annoatations.Add(pdf3dAnnotation);
            //Save the  document to disk.
            document.Save("3DAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new pdf3d annotation..
            Dim pdf3dAnnotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150))
            'Draw a pdf3dAnnotation into the new page.
            page.Annoatations.Add(pdf3dAnnotation)
            //Save the  document to disk.
            document.Save("3DAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <param name="rectangle">Bounds of the annotation.</param>
            <param name="fileName">Name of the sound file.</param>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new pdf3d annotation.
            Pdf3DAnnotation pdf3dAnnotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Adds the annotation on a page.
            page.Annoatations.Add(pdf3dAnnotation);
            //Save the  document to disk.
            document.Save("3DAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new pdf3d annotation..
            Dim pdf3dAnnotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Draws a pdf3dAnnotation into the new page.
            page.Annoatations.Add(pdf3dAnnotation)
            'Save the  document to disk.
            document.Save("3DAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DAnnotation.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.Pdf3DAnnotation.Save">
            <summary>
            Saves instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DAnnotation.Views">
            <summary>
            Gets the list of available views for the current 3D artwork.
            </summary>
            <example>
            <code lang="C#">
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new pdf3d annotation.
            Pdf3DAnnotation pdf3dAnnotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            Pdf3DView defaultView = new Pdf3DView();
            defaultView.ExternalName="Near View";
            defaultView.CameraToWorldMatrix=new float[] { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            defaultView.CenterOfOrbit=131.695f;
            pdf3dAnnotation.Views.Add(defaultView);
            page.Annoatations.Add(pdf3dAnnotation);
            //Save the  document to disk.
            document.Save("3DViews.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new pdf3d annotation..
            Dim pdf3dAnnotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new pdf3d view.
            Dim defaultView As Pdf3DView  = New Pdf3DView()
            defaultView.ExternalName="Near View"
            defaultView.CameraToWorldMatrix=new Single() { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f }
            defaultView.CenterOfOrbit=131.695f
            pdf3dAnnotation.Views.Add(defaultView)
            'Draw a pdf3dAnnotation into the new page.
            page.Annoatations.Add(pdf3dAnnotation)
            'Save the  document to disk.
            document.Save("3DViews.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DAnnotation.DefaultView">
            <summary>
            Gets or sets the default view.
            </summary>
            <value>The default view.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new pdf3d annotation.
            Pdf3DAnnotation pdf3dAnnotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            pdf3dAnnotation.DefaultView = 0;
            page.Annoatations.Add(pdf3dAnnotation);
            //Save the  document to disk.
            document.Save("3DDefaultView.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new pdf3d annotation..
            Dim pdf3dAnnotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            pdf3dAnnotation.DefaultView = 0
            'Draw a pdf3dAnnotation into the new page.
            page.Annoatations.Add(pdf3dAnnotation)
            'Save the  document to disk.
            document.Save("3DDefaultView.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DAnnotation.OnInstantiate">
            <summary>
            Gets or sets the code to execute when the 3D artwork is instantiated. 
            <value>Javascript code to be executed when the 3D artwork is instantiated.</value>
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new pdf3d annotation.
            Pdf3DAnnotation pdf3dAnnotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Create a bew pdf3d view.
            Pdf3DView defaultView = new Pdf3DView();
            defaultView.OnInstantiate="Near View";
            defaultView.CameraToWorldMatrix=new float[] { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f };
            defaultView.CenterOfOrbit=131.695f;
            pdf3dAnnotation.Views.Add(defaultView);
            //Adds the annotation.
            page.Annoatations.Add(pdf3dAnnotation);
            //Save the  document to disk.
            document.Save("3DViews.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new pdf3d annotation..
            Dim pdf3dAnnotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Adds a pdf3d view.
            Dim defaultView As Pdf3DView  = New Pdf3DView()
            defaultView.OnInstantiate="Near View"
            defaultView.CameraToWorldMatrix=new Single() { -0.382684f, 0.92388f, -0.0000000766026f, 0.18024f, 0.0746579f, 0.980785f, 0.906127f, 0.37533f, -0.19509f, -100, -112.432f, 45.6829f }
            defaultView.CenterOfOrbit=131.695f
            pdf3dAnnotation.Views.Add(defaultView)
            'Draw a pdf3dAnnotation into the new page.
            page.Annoatations.Add(pdf3dAnnotation)
            'Save the  document to disk.
            document.Save("3DViews.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DAnnotation.Activation">
            <summary>
            Gets or sets the activation options for the annotation. 
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new pdf3d annotation.
            Pdf3DAnnotation pdf3dAnnotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Creatas a new pdf3d actviation.
            Pdf3DActivation activation = new Pdf3DActivation();
            activation.ActivationMode = Pdf3DActivationMode.ExplicitActivation;
            activation.ShowToolbar = false;
            pdf3dAnnotation.Activation = activation;
            //Adds the annotation.
            page.Annoatations.Add(pdf3dAnnotation);
            //Save the  document to disk.
            document.Save("3DActivation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new pdf3d annotation.
            Dim pdf3dAnnotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Create a new pdf3d activation.
            Dim activation As Pdf3DActivation = New Pdf3DActivation()
            activation.ActivationMode = Pdf3DActivationMode.PageVisible
            activation.ShowToolbar = True
            pdf3dAnnotation.Activation = activation
            'Draw a pdf3dAnnotation into the new page.
            page.Annoatations.Add(pdf3dAnnotation)
            'Save the  document to disk.
            document.Save("3DActivation.pdf")
            </code>
            </example> 
            <remarks>Defines the times at which the annotation should be activated and deactivated and the state of the 3D artwork instance at those times.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.Pdf3DAnnotation.FileName">
            <value>Filename with Full path</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new pdf3d annotation.
            Pdf3DAnnotation pdf3dAnnotation = new Pdf3DAnnotation(new RectangleF(10, 50, 300, 150), @"..\..\Data\GetSubgraphBound.u3d");
            //Gets the filename.
            string fileName=pdf3dAnnotation.FileName;
            //Adds the annotation.
            page.Annoatations.Add(pdf3dAnnotation);
            //Save the  document to disk.
            document.Save("3DAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new pdf3d annotation..
            Dim pdf3dAnnotation As Pdf3DAnnotation = New Pdf3DAnnotation(New RectangleF(10, 300, 300, 150), "..\..\Data\threeLevelHierarchy.u3d")
            'Gets a filename.
            Dim fileName As string=pdf3dAnnotation.FileName
            'Draw a pdf3dAnnotation into the new page.
            page.Annoatations.Add(pdf3dAnnotation)
            'Save the  document to disk.
            document.Save("3DAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAnnotation1">
            <summary>
            Base class for annotation objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotation1.m_color">
            <summary>
            Color of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotation1.m_border">
            <summary>
            Border of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotation1.m_rectangle">
            <summary>
            Bounds of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotation1.m_page">
            <summary>
            Parent page of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotation1.m_text">
            <summary>
            Text of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotation1.m_annotationFlags">
            <summary>
            NAnootation's style flags.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotation1.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation1.#ctor">
            <summary>
            Creates new annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation1.#ctor(System.Drawing.RectangleF)">
            <summary>
            Creates new annotation object with the specified bounds.
            </summary>
            <param name="bounds">Bounds of the annotation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation1.SetPage(Syncfusion.Pdf.PdfPage)">
            <summary>
            Sets related page of the annotation.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation1.SetLocation(System.Drawing.PointF)">
            <summary>
            Sets the location.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation1.SetSize(System.Drawing.SizeF)">
            <summary>
            Sets the size.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation1.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation1.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotation1.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation1.Color">
            <summary>
            Gets or sets the background of the annotation�s icon when closed.
            The title bar of the annotation�s pop-up window.
            The border of a link annotation.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation1.Border">
            <summary>
            Gets or sets annotation's border.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation1.Bounds">
            <summary>
            Gets or sets annotation's bounds. If this property is not set bounds are calculated automatically
            based on <see cref="P:Syncfusion.Pdf.Interactive.PdfAnnotation1.Location">Location</see> property and content of annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation1.Location">
            <summary>
            Gets or sets location of the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation1.Size">
            <summary>
            Gets or sets size of the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation1.Page">
            <summary>
            Gets a page which this annotation is connected to.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation1.Text">
            <summary>
            Gets or sets content of the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation1.AnnotationFlags">
            <summary>
            Gets or sets annotation flags.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation1.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotation1.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAnnotationBase">
            <summary>
            It's a base class for all annotations   
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationBase.m_dictionary">
            <summary>
            Internal variable to store dictinary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationBase.m_crossTable">
            <summary>
            Cross table of the document;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationBase.m_list">
            <summary>
            Collection of the descend annotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfAnnotationBase"/> class.
            </summary>
            <remarks>Note that the Type field shouldn't be generated.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationBase.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfBookmarkBase"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationBase.Add(System.String)">
            <summary>
            Creates and adds an outline.
            </summary>
            <param name="title">The title of the new outline.</param>
            <returns>The outline created.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAnnotationBase.UpdateFields">
            <summary>
            Updates all outline dictionary fields.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationBase.Item(System.Int32)">
            <summary>
            Gets an <see cref="T:PdfOutline"/> instance at the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationBase.List">
            <summary>
            Gets the sub items.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationBase.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAnnotationBase.CrossTable">
            <summary>
            Gets the cross table.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFreeTextAnnotation.Initialize">
            <summary>
            Initializes Annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFreeTextAnnotation.Save">
            <summary>
            Saves an Text Markup Annotation .
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation">
            <summary>
            Represents the text markup annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create pdf font and pdf font style .
            Font font = new Font("Calibri", 10, FontStyle.Bold);
            PdfFont pdfFont = new PdfTrueTypeFont(font, false);
            //Create a new pdfbrush.
            PdfBrush pdfBrush = new PdfSolidBrush(Color.Black);
            //Draw text in the new page.
            page.Graphics.DrawString("Text Markup Annotation Demo", pdfFont, pdfBrush, new PointF(150, 10));
            string markupText = "Text Markup";
            SizeF size = pdfFont.MeasureString(markupText);
            RectangleF rectangle = new RectangleF(175, 40, size.Width, size.Height);
            page.Graphics.DrawString(markupText, pdfFont, pdfBrush, rectangle);
            //Create a pdf textmarkup annotation .
            PdfTextMarkupAnnotation markupAnnotation = new PdfTextMarkupAnnotation("Markup annotation", "Markup annotation with highlight style", markupText, new PointF(175, 40), pdfFont);
            markupAnnotation.TextMarkupColor = new PdfColor(Color.BlueViolet);
            markupAnnotation.TextMarkupAnnotationType = PdfTextMarkupAnnotationType.Highlight;
            //Add this annotation to a new page.
            page.Annotations.Add(markupAnnotation);
            //Save the document to disk.
            document.Save("TextMarkup.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create pdffont and pdffont style .
            Dim pdfFont As Font = New Font("Calibri", 10, FontStyle.Bold)
            Dim pdfFont As PdfFont = New PdfTrueTypeFont(font, false)
            'Create a new pdfbrush.
            Dim pdfBrush As PdfBrush = New PdfSolidBrush(Color.Black)
            Dim text As string  = "Text Markup"
            Dim size As SizeF  = pdfFont.MeasureString(text)
            'Create a new rectangle.
            Dim rectangle As RectangleF = New RectangleF(175, 40, size.Width, size.Height)
            page.Graphics.DrawString(text, pdfFont, pdfBrush, rectangle)
            'Create a new pdf textmarkup annotation .
            Dim  markupAnnotation As PdfTextMarkupAnnotation  = New PdfTextMarkupAnnotation("Markup annotation", "Markup annotation with highlight style", markupText, new PointF(175, 40), pdfFont)
            markupAnnotation.TextMarkupColor = New PdfColor(Color.BlueViolet)
            markupAnnotation.TextMarkupAnnotationType = PdfTextMarkupAnnotationType.Highlight
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("TextMarkup.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.m_textMarkupAnnotationType">
            <summary>
            To specifying the TextMarkupAnnotationType .
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.m_quadPoints">
            <summary>
            To specifying the QuadPoints .
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.m_points">
            <summary>
            To store the QuadPoints to the PdfArray
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.m_textMarkupColor">
            <summary>
            To specifying the Text Markup Color .
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.m_text">
            <summary>
            To specifying the Text Markup Annotation Title .
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.m_textSize">
            <summary>
            To specifying the Text Size .
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.m_textPoint">
            <summary>
            To specifying the Text Location .
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.m_font">
            <summary>
            To specifying the Text Font.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create pdffont and pdffont style .
            Font font = new Font("Calibri", 10, FontStyle.Bold);
            PdfFont pdfFont = new PdfTrueTypeFont(font, false);
            //Create a new pdfbrush.
            PdfBrush pdfBrush = new PdfSolidBrush(Color.Black);
            page.Graphics.DrawString("Text Markup Annotation Demo", pdfFont, pdfBrush, new PointF(150, 10));
            string markupText = "Text Markup";
            SizeF size = pdfFont.MeasureString(markupText);
            RectangleF rectangle = new RectangleF(175, 40, size.Width, size.Height);
            page.Graphics.DrawString(markupText, pdfFont, pdfBrush, rectangle);
            //Create a pdf text markup annotation  .
            PdfTextMarkupAnnotation markupAnnotation = new PdfTextMarkupAnnotation("Markup annotation", "Markup annotation with highlight style", markupText, new PointF(175, 40), pdfFont);
            markupAnnotation.TextMarkupColor = new PdfColor(Color.BlueViolet);
            markupAnnotation.TextMarkupAnnotationType = PdfTextMarkupAnnotationType.Highlight;
            //Add this annotation to a new page.
            page.Annotations.Add(markupAnnotation);
            //Save the document to disk.
            document.Save("TextMarkup.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create pdffont and pdffont style .
            Dim pdfFont As Font = New Font("Calibri", 10, FontStyle.Bold)
            Dim pdfFont As PdfFont = New PdfTrueTypeFont(font, false)
            'Create a new pdfbrush.
            Dim pdfBrush As PdfBrush = New PdfSolidBrush(Color.Black)
            Dim text As string = "Text Markup"
            Dim size As SizeF = pdfFont.MeasureString(text)
            'Create a new rectangle.
            Dim rectangle As RectangleF = New RectangleF(175, 40, size.Width, size.Height)
            page.Graphics.DrawString(text, pdfFont, pdfBrush, rectangle)
            'Create a pdf text markup annotation  .
            Dim  markupAnnotation As PdfTextMarkupAnnotation  = New PdfTextMarkupAnnotation()
            markupAnnotation.TextMarkupColor = New PdfColor(Color.BlueViolet)
            markupAnnotation.TextMarkupAnnotationType = PdfTextMarkupAnnotationType.Highlight
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("TextMarkup.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.#ctor(System.String,System.String,System.String,System.Drawing.PointF,Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes new instance of <see cref="T:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation"/> class.
            </summary>
            <param name="markupTitle">The markup annotation title.</param>
            <param name="text">The string specifies the text of the annotation.</param>
            <param name="markupText">The string specifies the markup text of the annotation.</param>
            <param name="point">The location of the markup text annotation.</param>
            <param name="pdfFont">The <see cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> specifies the text appearance of the markup text annotation.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create pdffont and pdffont style .
            Font font = new Font("Calibri", 10, FontStyle.Bold);
            PdfFont pdfFont = new PdfTrueTypeFont(font, false);
            //Create a new pdfbrush .
            PdfBrush pdfBrush = new PdfSolidBrush(Color.Black);
            page.Graphics.DrawString("Text Markup Annotation Demo", pdfFont, pdfBrush, new PointF(150, 10));
            string markupText = "Text Markup";
            SizeF size = pdfFont.MeasureString(markupText);
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(175, 40, size.Width, size.Height);
            page.Graphics.DrawString(markupText, pdfFont, pdfBrush, rectangle);
            //Create a pdf text markup annotation  .
            PdfTextMarkupAnnotation markupAnnotation = new PdfTextMarkupAnnotation();
            markupAnnotation.TextMarkupColor = new PdfColor(Color.BlueViolet);
            markupAnnotation.TextMarkupAnnotationType = PdfTextMarkupAnnotationType.Highlight;
            //Add this annotation to a new page.
            page.Annotations.Add(markupAnnotation);
            //Save the document to disk.
            document.Save("TextMarkup.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create pdffont and pdffont style .
            Dim font As Font  = New Font("Calibri", 10, FontStyle.Bold)
            Dim pdfFont As PdfFont  = New PdfTrueTypeFont(font, false)
            'Create a new pdfbrush .
            Dim pdfBrush As PdfBrush  = New PdfSolidBrush(Color.Black)
            Dim text As string  = "Text Markup"
            Dim size As SizeF  = pdfFont.MeasureString(text)
            'Create a new rectangle.
            Dim rectangle As RectangleF  = New RectangleF(175, 40, size.Width, size.Height)
            page.Graphics.DrawString(text, pdfFont, pdfBrush, rectangle)
            'Create a pdf text markup annotation .
            Dim  markupAnnotation As PdfTextMarkupAnnotation  = New PdfTextMarkupAnnotation("Markup annotation", "Markup annotation with highlight style", markupText, new PointF(175, 40), pdfFont)
            markupAnnotation.TextMarkupColor = New PdfColor(Color.BlueViolet)
            markupAnnotation.TextMarkupAnnotationType = PdfTextMarkupAnnotationType.Highlight
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("TextMarkup.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes new instance of <see cref="T:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation"/> class.
            </summary>
            <param name="rectangle">The bounds of the annotation.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create pdffont and pdffont style .
            Font font = new Font("Calibri", 10, FontStyle.Bold);
            PdfFont pdfFont = new PdfTrueTypeFont(font, false);
            //Create a new pdfbrush .
            PdfBrush pdfBrush = new PdfSolidBrush(Color.Black);
            page.Graphics.DrawString("Text Markup Annotation Demo", pdfFont, pdfBrush, new PointF(150, 10));
            string markupText = "Text Markup";
            SizeF size = pdfFont.MeasureString(markupText);
            RectangleF rectangle = new RectangleF(175, 40, size.Width, size.Height);
            page.Graphics.DrawString(markupText, pdfFont, pdfBrush, rectangle);
            //Create a pdf text markup annotation  .
            PdfTextMarkupAnnotation markupAnnotation = new PdfTextMarkupAnnotation(rectangle);
            markupAnnotation.TextMarkupColor = new PdfColor(Color.BlueViolet);
            markupAnnotation.TextMarkupAnnotationType = PdfTextMarkupAnnotationType.Highlight;
            //Add this annotation to a new page.
            page.Annotations.Add(markupAnnotation);
            //Save the document to disk.
            document.Save("TextMarkup.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create pdffont and pdffont style .
            Dim font As Font  = New Font("Calibri", 10, FontStyle.Bold)
            Dim pdfFont As PdfFont  = New PdfTrueTypeFont(font, false)
            'Create a new pdfBrush.
            Dim pdfBrush As PdfBrush  = New PdfSolidBrush(Color.Black)
            Dim text As string  = "Text Markup"
            Dim size As SizeF  = pdfFont.MeasureString(text)
            Dim rectangle As RectangleF  = New RectangleF(175, 40, size.Width, size.Height)
            page.Graphics.DrawString(text, pdfFont, pdfBrush, rectangle)
            'Create a pdf text markup annotation .
            Dim  markupAnnotation As PdfTextMarkupAnnotation  = New PdfTextMarkupAnnotation(rectangle)
            markupAnnotation.TextMarkupColor = New PdfColor(Color.BlueViolet)
            markupAnnotation.TextMarkupAnnotationType = PdfTextMarkupAnnotationType.Highlight
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("TextMarkup.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.Initialize">
            <summary>
            Initializes Annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.Save">
            <summary>
            Saves an Text Markup Annotation .
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.TextMarkupAnnotationType">
            <summary>
            Gets or sets TextMarkupAnnotationType .
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create pdffont and pdffont style .
            Font font = new Font("Calibri", 10, FontStyle.Bold);
            PdfFont pdfFont = new PdfTrueTypeFont(font, false);
            //Create a new pdf brush.
            PdfBrush pdfBrush = new PdfSolidBrush(Color.Black);
            page.Graphics.DrawString("Text Markup Annotation Demo", pdfFont, pdfBrush, new PointF(150, 10));
            string markupText = "Text Markup";
            SizeF size = pdfFont.MeasureString(markupText);
            RectangleF rectangle = new RectangleF(175, 40, size.Width, size.Height);
            page.Graphics.DrawString(markupText, pdfFont, pdfBrush, rectangle);
            //Create a pdf text markup annotation  .
            PdfTextMarkupAnnotation markupAnnotation = new PdfTextMarkupAnnotation("Markup annotation", "Markup annotation with highlight style", markupText, new PointF(175, 40), pdfFont);
            markupAnnotation.TextMarkupAnnotationType = PdfTextMarkupAnnotationType.Highlight;
            //Add this annotation to a new page.
            page.Annotations.Add(markupAnnotation);
            //Save the document to disk.
            document.Save("TextMarkup.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create pdffont and pdffont style .
            Dim pdfFont As Font  = New Font("Calibri", 10, FontStyle.Bold)
            Dim pdfFont As PdfFont  = New PdfTrueTypeFont(font, false)
            'Create a new pdf brush.
            Dim pdfBrush As PdfBrush  = New PdfSolidBrush(Color.Black)
            Dim text As string  = "Text Markup"
            Dim size As SizeF  = pdfFont.MeasureString(text)
            'Create a new rectangle.
            Dim rectangle As RectangleF  = New RectangleF(175, 40, size.Width, size.Height)
            page.Graphics.DrawString(text, pdfFont, pdfBrush, rectangle)
            'Create a pdf text markup annotation  .
            Dim  markupAnnotation As PdfTextMarkupAnnotation  = New PdfTextMarkupAnnotation("Markup annotation", "Markup annotation with highlight style", markupText, new PointF(175, 40), pdfFont)
            markupAnnotation.TextMarkupAnnotationType = PdfTextMarkupAnnotationType.Highlight
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("TextMarkup.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotation.TextMarkupColor">
            <summary>
            Gets or sets text markup color.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create pdffont and pdffont style .
            Font font = new Font("Calibri", 10, FontStyle.Bold);
            PdfFont pdfFont = new PdfTrueTypeFont(font, false);
            //Create a new pdfbrush.
            PdfBrush pdfBrush = new PdfSolidBrush(Color.Black);
            page.Graphics.DrawString("Text Markup Annotation Demo", pdfFont, pdfBrush, new PointF(150, 10));
            string markupText = "Text Markup";
            SizeF size = pdfFont.MeasureString(markupText);
            RectangleF rectangle = new RectangleF(175, 40, size.Width, size.Height);
            page.Graphics.DrawString(markupText, pdfFont, pdfBrush, rectangle);
            //Create a pdf text markup annotation  .
            PdfTextMarkupAnnotation markupAnnotation = new PdfTextMarkupAnnotation("Markup annotation", "Markup annotation with highlight style", markupText, new PointF(175, 40), pdfFont);
            markupAnnotation.TextMarkupColor = new PdfColor(Color.BlueViolet);
            //Add this annotation to a new page.
            page.Annotations.Add(markupAnnotation);
            //Save the document to disk.
            document.Save("TextMarkup.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create pdffont and pdffont style .
            Dim pdfFont As Font  = New Font("Calibri", 10, FontStyle.Bold)
            Dim pdfFont As PdfFont  = New PdfTrueTypeFont(font, false)
            'Create a new pdfbrush.
            Dim pdfBrush As PdfBrush  = New PdfSolidBrush(Color.Black)
            Dim text As string  = "Text Markup"
            Dim size As SizeF  = pdfFont.MeasureString(text)
            'Create a new rectangle.
            Dim rectangle As RectangleF  = New RectangleF(175, 40, size.Width, size.Height)
            page.Graphics.DrawString(text, pdfFont, pdfBrush, rectangle)
            'Create a pdf text markup annotation  .
            Dim  markupAnnotation As PdfTextMarkupAnnotation  = New PdfTextMarkupAnnotation("Markup annotation", "Markup annotation with highlight style", markupText, new PointF(175, 40), pdfFont)
            markupAnnotation.TextMarkupColor = New PdfColor(Color.BlueViolet)
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("TextMarkup.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfTextWebLink">
            <summary>
            Represents the class for text web link annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new solid brush
            PdfBrush brush = new PdfSolidBrush(Color.Black);
            //Set the font
            float fontSize = 10f;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, fontSize);
            //Create a text weblink annotation
            PdfTextWebLink webLinkAnnotation = new PdfTextWebLink();
            webLinkAnnotation.Url = "http://www.yahoo.com";
            webLinkAnnotation.Text = "Yagoo Mail";
            webLinkAnnotation.Brush = brush;
            webLinkAnnotation.Font = font;
            webLinkAnnotation.Pen = PdfPens.Brown;
            webLinkAnnotation.DrawTextWebLink(page, new PointF(50, 40));
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40));
            //Add this annotation to a new page.
            page.Annotations.Add(webLinkAnnotation);
            //Save the document to disk.
            document.Save("TextWebLink(.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new solid brush
            Dim brush As PdfBrush  = New PdfSolidBrush(Color.Black)
            'Set the font
            Dim fontSize As Single  = 10f
            Dim font As PdfFont  = New PdfStandardFont(PdfFontFamily.Helvetica, fontSize)
            'Create a text weblink annotation
            Dim webLinkAnnotation As PdfTextWebLink  = New PdfTextWebLink()
            webLinkAnnotation.Url = "http://www.yahoo.com"
            webLinkAnnotation.Text = "Yagoo Mail"
            webLinkAnnotation.Brush = brush
            webLinkAnnotation.Font = font
            webLinkAnnotation.Pen = PdfPens.Brown
            webLinkAnnotation.DrawTextWebLink(page, new PointF(50, 40))
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40))
            'Add this annotation to a new page.
            page.Annotations.Add(webLinkAnnotation)
            'Save the document to disk.
            document.Save("TextWebLink(.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfTextElement">
            <summary>
            Represents the text area with the ability to span several pages.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfLayoutElement">
            <summary>
            Represents the base class for all elements that can be layout on the pages.
            </summary>
            [System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Assert, Name = "FullTrust")]
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfGraphicsElement">
            <summary>
            Represents a base class for all page graphics elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphicsElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfGraphicsElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphicsElement.Draw(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphicsElement.Draw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.PointF)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="location">Location of the element in the Graphics' co-ordinate system.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphicsElement.Draw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Single,System.Single)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="x">X co-ordinate of the element.</param>
            <param name="y">Y co-ordinate of the element.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphicsElement.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLayoutElement.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.PointF)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="location">Start location on the page.</param>
            <returns>Layouting result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLayoutElement.Draw(Syncfusion.Pdf.PdfPage,System.Single,System.Single)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="x">X co-ordinate of the element on the page.</param>
            <param name="y">Y co-ordinate of the element on the page.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLayoutElement.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the element.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLayoutElement.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the element.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLayoutElement.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.PointF,Syncfusion.Pdf.Graphics.PdfLayoutFormat)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="location">Start location on the page.</param>
            <param name="format">Lay outing format.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLayoutElement.Draw(Syncfusion.Pdf.PdfPage,System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfLayoutFormat)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="x">X co-ordinate of the element on the page.</param>
            <param name="y">Y co-ordinate of the element on the page.</param>
            <param name="format">Layout format.</param>
            <returns>Layout result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLayoutElement.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfLayoutFormat)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the element.</param>
            <param name="format">Layout format.</param>
            <returns>Layout result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLayoutElement.Layout(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Layout parameters.</param>
            <returns>Returns the results of layout.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLayoutElement.OnEndPageLayout(Syncfusion.Pdf.Graphics.EndPageLayoutEventArgs)">
            <summary>
            Raises EndPageLayout event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLayoutElement.OnBeginPageLayout(Syncfusion.Pdf.Graphics.BeginPageLayoutEventArgs)">
            <summary>
            Raises BeginPageLayout event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="E:Syncfusion.Pdf.Graphics.PdfLayoutElement.EndPageLayout">
            <summary>
            Event. Raises after the element was printed on the page.
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.Graphics.PdfLayoutElement.BeginPageLayout">
            <summary>
            Event. Raises before the element should be printed on the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLayoutElement.RaiseEndPageLayout">
            <summary>
            Gets a value indicating whether EndPageLayout is not null.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLayoutElement.RaiseBeginPageLayout">
            <summary>
            Gets a value indicating whether BeginPageLayout is not null.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLayoutElement.EmbedFontResource">
            <summary>
            Gets a value indicating whether [embed fonts].
            </summary>
            <value><c>true</c> if [embed fonts]; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTextElement.m_text">
            <summary>
            Text data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTextElement.m_value">
            <summary>
            Text data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTextElement.m_pen">
            <summary>
            Pen for text drawing.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTextElement.m_brush">
            <summary>
            Brush for text drawing.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTextElement.m_font">
            <summary>
            Font for text drawing.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTextElement.m_format">
            <summary>
            Text format.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTextElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTextElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTextElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTextElement"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTextElement.#ctor(System.String,Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTextElement"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTextElement.#ctor(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTextElement"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTextElement.#ctor(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTextElement"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTextElement.#ctor(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTextElement"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTextElement.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.PointF,Syncfusion.Pdf.Graphics.PdfLayoutFormat)">
            <summary>
            Draws the text on the page.
            </summary>
            <param name="page">Current page where the text should be drawn.</param>
            <param name="location">Start location on the page.</param>
            <param name="format">Lay outing format.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTextElement.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.PointF,System.Single,Syncfusion.Pdf.Graphics.PdfLayoutFormat)">
            <summary>
            Draws the text on the page.
            </summary>
            <param name="page">Current page where the text should be drawn.</param>
            <param name="location">Start location on the page.</param>
            <param name="width">Width of the text bounds.</param>
            <param name="format">Lay outing format.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTextElement.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfLayoutFormat)">
            <summary>
            Draws the text on the page.
            </summary>
            <param name="page">Current page where the text should be drawn.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the text.</param>
            <param name="format">Lay outing format.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTextElement.GetBrush">
            <summary>
            Gets a brush for drawing.
            </summary>
            <returns>Gets a brush for drawing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTextElement.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTextElement.Layout(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Returns lay outing results.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTextElement.Text">
            <summary>
            Gets or sets a value indicating the text that should be printed.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTextElement.Value">
            <summary>
            Gets or sets a value indicating the text that should be printed.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTextElement.Pen">
            <summary>
            Gets or sets a pen that will be used to draw the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTextElement.Brush">
            <summary>
            Gets or sets the brush that will be used to draw the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTextElement.Font">
            <summary>
            Gets or sets a font that will be used to draw the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTextElement.StringFormat">
            <summary>
            Gets or sets text settings that will be used to draw the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextWebLink.m_url">
            <summary>
            Internal variable to store Url.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextWebLink.m_uriAnnotation">
            <summary>
            Internal variable to store Uri Annotation object. 
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfTextWebLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfTextWebLink"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new solid brush
            PdfBrush brush = new PdfSolidBrush(Color.Black);
            //Set the font
            float fontSize = 10f;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, fontSize);
            //Create a text weblink annotation
            PdfTextWebLink webLinkAnnotation = new PdfTextWebLink();
            webLinkAnnotation.Url = "http://www.yahoo.com";
            webLinkAnnotation.Text = "Yagoo Mail";
            webLinkAnnotation.Brush = brush;
            webLinkAnnotation.Font = font;
            webLinkAnnotation.Pen = PdfPens.Brown;
            webLinkAnnotation.DrawTextWebLink(page, new PointF(50, 40));
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40));
            //Add this annotation to a new page.
            page.Annotations.Add(webLinkAnnotation);
            //Save the document to disk.
            document.Save("TextWebLink(.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new solid brush
            Dim brush As PdfBrush  = New PdfSolidBrush(Color.Black)
            'Set the font
            Dim fontSize As Single  = 10f
            Dim font As PdfFont  = New PdfStandardFont(PdfFontFamily.Helvetica, fontSize)
            'Create a text weblink annotation
            Dim webLinkAnnotation As PdfTextWebLink  = New PdfTextWebLink()
            webLinkAnnotation.Url = "http://www.yahoo.com"
            webLinkAnnotation.Text = "Yagoo Mail"
            webLinkAnnotation.Brush = brush
            webLinkAnnotation.Font = font
            webLinkAnnotation.Pen = PdfPens.Brown
            webLinkAnnotation.DrawTextWebLink(page, new PointF(50, 40))
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40))
            'Add this annotation to a new page.
            page.Annotations.Add(webLinkAnnotation)
            'Save the document to disk.
            document.Save("TextWebLink(.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfTextWebLink.DrawTextWebLink(Syncfusion.Pdf.PdfPage,System.Drawing.PointF)">
            <summary>
            Draws a Text Web Link on the Page
            </summary>
            <param name="page">The page where the annotation should be placed.</param>
            <param name="location">The location of the annotation.</param>
            <returns>Pdf Layout result</returns>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new solid brush
            PdfBrush brush = new PdfSolidBrush(Color.Black);
            //Set the font
            float fontSize = 10f;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, fontSize);
            //Create a text weblink annotation
            PdfTextWebLink webLinkAnnotation = new PdfTextWebLink();
            webLinkAnnotation.Url = "http://www.yahoo.com";
            webLinkAnnotation.Text = "Yagoo Mail";
            webLinkAnnotation.Brush = brush;
            webLinkAnnotation.Font = font;
            webLinkAnnotation.Pen = PdfPens.Brown;
            webLinkAnnotation.DrawTextWebLink(page, new PointF(50, 40));
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40));
            //Add this annotation to a new page.
            page.Annotations.Add(webLinkAnnotation);
            //Save the document to disk.
            document.Save("TextWebLink(.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new solid brush
            Dim brush As PdfBrush  = New PdfSolidBrush(Color.Black)
            'Set the font
            Dim fontSize As Single  = 10f
            Dim font As PdfFont  = New PdfStandardFont(PdfFontFamily.Helvetica, fontSize)
            'Create a text weblink annotation
            Dim webLinkAnnotation As PdfTextWebLink  = New PdfTextWebLink()
            webLinkAnnotation.Url = "http://www.yahoo.com"
            webLinkAnnotation.Text = "Yagoo Mail"
            webLinkAnnotation.Brush = brush
            webLinkAnnotation.Font = font
            webLinkAnnotation.Pen = PdfPens.Brown
            webLinkAnnotation.DrawTextWebLink(page, new PointF(50, 40))
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40))
            'Add this annotation to a new page.
            page.Annotations.Add(webLinkAnnotation)
            'Save the document to disk.
            document.Save("TextWebLink(.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfTextWebLink.DrawTextWebLink(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.PointF)">
            <summary>
            Draw a Text Web Link on the Graphics
            </summary>
            <param name="g">The <see cref="T:Syncfusion.Pdf.Graphics.PdfGraphics"/> object specifies where annotation should be placed..</param>
            <param name="location">The location of the annotation.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new solid brush
            PdfBrush brush = new PdfSolidBrush(Color.Black);
            //Set the font
            float fontSize = 10f;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, fontSize);
            //Create a text weblink annotation
            PdfTextWebLink webLinkAnnotation = new PdfTextWebLink();
            webLinkAnnotation.Url = "http://www.yahoo.com";
            webLinkAnnotation.Text = "Yagoo Mail";
            webLinkAnnotation.Brush = brush;
            webLinkAnnotation.Font = font;
            webLinkAnnotation.Pen = PdfPens.Brown;
            webLinkAnnotation.DrawTextWebLink(page.Graphics, new PointF(50, 40));
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40));
            //Add this annotation to a new page.
            page.Annotations.Add(webLinkAnnotation);
            //Save the document to disk.
            document.Save("TextWebLink(.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new solid brush
            Dim brush As PdfBrush  = New PdfSolidBrush(Color.Black)
            'Set the font
            Dim fontSize As Single  = 10f
            Dim font As PdfFont  = New PdfStandardFont(PdfFontFamily.Helvetica, fontSize)
            'Create a text weblink annotation
            Dim webLinkAnnotation As PdfTextWebLink  = New PdfTextWebLink()
            webLinkAnnotation.Url = "http://www.yahoo.com"
            webLinkAnnotation.Text = "Yagoo Mail"
            webLinkAnnotation.Brush = brush
            webLinkAnnotation.Font = font
            webLinkAnnotation.Pen = PdfPens.Brown
            webLinkAnnotation.DrawTextWebLink(page.Graphics, new PointF(50, 40))
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40))
            'Add this annotation to a new page.
            page.Annotations.Add(webLinkAnnotation)
            'Save the document to disk.
            document.Save("TextWebLink(.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfTextWebLink.Url">
            <summary>
            Gets or sets the Url address.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new pdf textweblink annotation
            PdfTextWebLink webLinkAnnotation = new PdfTextWebLink();
            webLinkAnnotation.Url = "http://www.yahoo.com";
            webLinkAnnotation.DrawTextWebLink(page, new PointF(50, 40));
            //Add this annotation to a new page.
            page.Annotations.Add(webLinkAnnotation);
            //Save the document to disk.
            document.Save("TextWebLink(.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a text weblink annotation
            Dim webLinkAnnotation As PdfTextWebLink  = New PdfTextWebLink()
            webLinkAnnotation.Url = "http://www.yahoo.com"
            webLinkAnnotation.DrawTextWebLink(page, new PointF(50, 40))
            'Add this annotation to a new page.
            page.Annotations.Add(webLinkAnnotation)
            'Save the document to disk.
            document.Save("TextWebLink(.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfPopupAnnotation">
            <summary>
            Represents a Base class for popup annotation which can be either in open or closed state.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation(rectangle,"Test popup annotation");
            popupAnnotation.Border.Width = 4;
            popupAnnotation.Border.HorizontalRadius = 20;
            popupAnnotation.Border.VerticalRadius = 30;
            //Set the pdf popup icon.
            popupAnnotation.Icon = PdfPopupIcon.NewParagraph;
            //Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the document to disk.
            document.Save("PopupAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation(rectangle, "Test popup annotation")
            popupAnnotation.Border.Width = 4
            popupAnnotation.Border.HorizontalRadius = 20
            popupAnnotation.Border.VerticalRadius = 30
            'Set the pdf popup icon.
            popupAnnotation.Icon = PdfPopupIcon.NewParagraph
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("PopupAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfPopupAnnotation.m_open">
            <summary>
            Indicates whether annotation is open or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfPopupAnnotation.m_icon">
            <summary>
            Type of the icon of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfPopupAnnotation.m_appearance">
            <summary>
            Annotation's appearance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfPopupAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfPopupAnnotation"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation();
            popupAnnotation.Text="Test popup annotation";
            popupAnnotation.Bounds=rectangle;
            popupAnnotation.Border.Width = 4;
            popupAnnotation.Border.HorizontalRadius = 20;
            popupAnnotation.Border.VerticalRadius = 30;
            //Set the pdf popup icon.
            popupAnnotation.Icon = PdfPopupIcon.NewParagraph;
            //Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the document to disk.
            document.Save("PopupAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation()
            popupAnnotation.Text="Test popup annotation"
            popupAnnotation.Bounds=rectangle
            popupAnnotation.Border.Width = 4
            popupAnnotation.Border.HorizontalRadius = 20
            popupAnnotation.Border.VerticalRadius = 30
            'Set the pdf popup icon.
            popupAnnotation.Icon = PdfPopupIcon.NewParagraph
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("PopupAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfPopupAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfPopupAnnotation"/> class.
            </summary>
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation(rectangle);
            popupAnnotation.Text="Test popup annotation";
            popupAnnotation.Border.Width = 4;
            popupAnnotation.Border.HorizontalRadius = 20;
            popupAnnotation.Border.VerticalRadius = 30;
            //Set the pdf popup icon.
            popupAnnotation.Icon = PdfPopupIcon.NewParagraph;
            //Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the document to disk.
            document.Save("PopupAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation(rectangle()
            popupAnnotation.Text="Test popup annotation"
            popupAnnotation.Border.Width = 4
            popupAnnotation.Border.HorizontalRadius = 20
            popupAnnotation.Border.VerticalRadius = 30
            'Set the pdf popup icon.
            popupAnnotation.Icon = PdfPopupIcon.NewParagraph
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("PopupAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfPopupAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfPopupAnnotation"/> class.
            </summary>
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
            <param name="text">The string specifies the annotation text.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation(rectangle,"Test popup annotation");
            popupAnnotation.Border.Width = 4;
            popupAnnotation.Border.HorizontalRadius = 20;
            popupAnnotation.Border.VerticalRadius = 30;
            //Set the pdf popup icon.
            popupAnnotation.Icon = PdfPopupIcon.NewParagraph;
            //Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the document to disk.
            document.Save("PopupAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New Rect angleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation(rectangle, "Test popup annotation")
            popupAnnotation.Border.Width = 4
            popupAnnotation.Border.HorizontalRadius = 20
            popupAnnotation.Border.VerticalRadius = 30
            'Set the pdf popup icon.
            popupAnnotation.Icon = PdfPopupIcon.NewParagraph
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("PopupAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfPopupAnnotation.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfPopupAnnotation.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfPopupAnnotation.Icon">
            <summary>
            Gets or sets icon style.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation(rectangle,"Test popup annotation");
            //Set the pdf popup icon.
            popupAnnotation.Icon = PdfPopupIcon.NewParagraph;
            //Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the document to disk.
            document.Save("PopupIcon.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation(rectangle, "Test popup annotation")
            'Set the pdf popup icon.
            popupAnnotation.Icon = PdfPopupIcon.NewParagraph
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("PopupIcon.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfPopupAnnotation.Open">
            <summary>
            Gets or sets value whether annotation is initially open or closed
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation(rectangle,"Test popup annotation");
            //Set the Open to popupAnnotation.
            popupAnnotation.Open = true;
            //Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the document to disk.
            document.Save("PopupOpen.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation(rectangle, "Test popup annotation")
            'Set the Open to popupAnnotation.
            popupAnnotation.Open = True
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("PopupOpen.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfPopupAnnotation.Appearance">
            <summary>
            Gets or sets appearance of the annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation(rectangle,"Test popup annotation");
            //Gets the appreance of popup annotation.
            PdfAppearance appreance=popupAnnotation.PdfAppearance;
            //Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the document to disk.
            document.Save("PopupAppearance.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation(rectangle, "Test popup annotation")
            'Gets the appreance of popup annotation
            Dim appreance As PdfAppearance  = popupAnnotation.PdfAppearance
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("PopupAppearance.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotation">
            <summary>
            Represents the Rubber Stamp annotation for a PDF document.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();    
            //Create a new pdf rubber stamp annotation.
            RectangleF rectangle = new RectangleF(40, 60, 80, 20);
            PdfRubberStampAnnotation rubberstampAnnotation = new PdfRubberStampAnnotation(rectangle, " Text Rubber Stamp Annotation");
            rubberstampAnnotation.Icon = PdfRubberStampAnnotationIcon.Draft;
            rubberstampAnnotation.Text = "Text Properties Rubber Stamp Annotation";
            page.Annotations.Add(rubberstampAnnotation);
            //Save the document to disk.
            document.Save("Rubberstamp.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new pdf rubber stamp annotation.
            Dim Rubberstampannotation As RectangleF  = New RectangleF(40, 60, 80, 20)
            Dom rubberstampAnnotation As PdfRubberStampAnnotation  = New PdfRubberStampAnnotation(Rubberstampannotation, " Text Rubber Stamp Annotation")
            rubberstampAnnotation.Icon = PdfRubberStampAnnotationIcon.Draft
            rubberstampAnnotation.Text = "Text Properties Rubber Stamp Annotation"
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("Rubberstamp.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotation.m_rubberStampAnnotaionIcon">
            <summary>
            internal varable for the rubberstamp annotation icon
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotation.m_appearance">
            <summary>
            Annotation's appearance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotation"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new pdf rubber stamp annotation.
            RectangleF Rubberstampannotation = new RectangleF(40, 60, 80, 20);
            PdfRubberStampAnnotation rubberstampAnnotation = new PdfRubberStampAnnotation();
            rubberstampAnnotation.Icon = PdfRubberStampAnnotationIcon.Draft;
            rubberstampAnnotation.Text = "Text Properties Rubber Stamp Annotation";
            page.Annotations.Add(rubberstampAnnotation);
            //Save the document to disk.
            document.Save("Rubberstamp.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new pdf rubber stamp annotation.
            Dim Rubberstampannotation As RectangleF  = New RectangleF(40, 60, 80, 20)
            Dom rubberstampAnnotation As PdfRubberStampAnnotation  = New PdfRubberStampAnnotation()
            rubberstampAnnotation.Icon = PdfRubberStampAnnotationIcon.Draft
            rubberstampAnnotation.Text = "Text Properties Rubber Stamp Annotation"
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("Rubberstamp.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotation"/> class.
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new pdf rubber stamp annotation.
            RectangleF Rubberstampannotation = new RectangleF(40, 60, 80, 20);
            PdfRubberStampAnnotation rubberstampAnnotation = new PdfRubberStampAnnotation(Rubberstampannotation);
            rubberstampAnnotation.Icon = PdfRubberStampAnnotationIcon.Draft;
            rubberstampAnnotation.Text = "Text Properties Rubber Stamp Annotation";
            page.Annotations.Add(rubberstampAnnotation);
            //Save the document to disk.
            document.Save("Rubberstamp.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new pdf rubber stamp annotation.
            Dim Rubberstampannotation As RectangleF  = New RectangleF(40, 60, 80, 20)
            Dom rubberstampAnnotation As PdfRubberStampAnnotation  = New PdfRubberStampAnnotation(Rubberstampannotation)
            rubberstampAnnotation.Icon = PdfRubberStampAnnotationIcon.Draft
            rubberstampAnnotation.Text = "Text Properties Rubber Stamp Annotation"
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("Rubberstamp.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotation"/> class.
            </summary>
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
            <param name="text">Text of the rubber stamp annotation.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new pdf rubber stamp annotation.
            RectangleF Rubberstampannotation = new RectangleF(40, 60, 80, 20);
            PdfRubberStampAnnotation rubberstampAnnotation = new PdfRubberStampAnnotation(Rubberstampannotation, " Text Rubber Stamp Annotation");
            rubberstampAnnotation.Icon = PdfRubberStampAnnotationIcon.Draft;
            rubberstampAnnotation.Text = "Text Properties Rubber Stamp Annotation";
            page.Annotations.Add(rubberstampAnnotation);
            //Save the document to disk.
            document.Save("Rubberstamp.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new pdf rubber stamp annotation.
            Dim Rubberstampannotation As RectangleF  = New RectangleF(40, 60, 80, 20)
            Dom rubberstampAnnotation As PdfRubberStampAnnotation  = New PdfRubberStampAnnotation(Rubberstampannotation, " Text Rubber Stamp Annotation")
            rubberstampAnnotation.Icon = PdfRubberStampAnnotationIcon.Draft
            rubberstampAnnotation.Text = "Text Properties Rubber Stamp Annotation"
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("Rubberstamp.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotation.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotation.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotation.Icon">
            <summary>
            Gets or sets the annotation's icon. 
            </summary>        
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new pdf rubber stamp annotation.
            RectangleF Rubberstampannotation = new RectangleF(40, 60, 80, 20);
            PdfRubberStampAnnotation rubberstampAnnotation = new PdfRubberStampAnnotation(Rubberstampannotation, " Text Rubber Stamp Annotation");
            //Sets the rubber stamp icon.
            rubberstampAnnotation.Icon = PdfRubberStampAnnotationIcon.Draft;
            page.Annotations.Add(rubberstampAnnotation);
            //Save the document to disk.
            document.Save("Rubberstamp.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new pdf rubber stamp annotation.
            Dim Rubberstampannotation As RectangleF  = New RectangleF(40, 60, 80, 20)
            Dom rubberstampAnnotation As PdfRubberStampAnnotation  = New PdfRubberStampAnnotation(Rubberstampannotation, " Text Rubber Stamp Annotation")
            Sets the rubber stamp icon
            rubberstampAnnotation.Icon = PdfRubberStampAnnotationIcon.Draft
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("Rubberstamp.pdf")
            </code>
            </example> 
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon"/> enumeration member specifying the icon for the annotation when it is displayed in closed state. </value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotation.Appearance">
            <summary>
            Gets or sets appearance of the annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new pdf rubber stamp annotation.
            RectangleF Rubberstampannotation = new RectangleF(40, 60, 80, 20);
            PdfRubberStampAnnotation rubberstampAnnotation = new PdfRubberStampAnnotation(Rubberstampannotation, " Text Rubber Stamp Annotation");
            //Sets the pdfappreance.
            rubberstampAnnotation.Appearance = new PdfAppearance(annotation);
            annotation.Appearance.Normal.Draw(page, New PointF(rubberstampAnnotation.Location.X, rubberstampAnnotation.Location.Y));
            page.Annotations.Add(rubberstampAnnotation);
            //Save the document to disk.
            document.Save("Rubberstamp.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new pdf rubber stamp annotation.
            Dim Rubberstampannotation As RectangleF  = New RectangleF(40, 60, 80, 20)
            Dom rubberstampAnnotation As PdfRubberStampAnnotation  = New PdfRubberStampAnnotation(Rubberstampannotation, " Text Rubber Stamp Annotation")
            'Sets the pdfappreance.
            rubberstampAnnotation.Appearance = New PdfAppearance(annotation)
            rubberstampAnnotation.Appearance.Normal.Draw(page, New PointF(rubberstampAnnotation.Location.X, rubberstampAnnotation.Location.Y))
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the document to disk.
            document.Save("Rubberstamp.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfSoundAnnotation">
            <summary>
            Represents the sound annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            soundAnnotation.Sound.Encoding = PdfSoundEncoding.Signed;
            soundAnnotation.Sound.Channels = PdfSoundChannels.Stereo;
            soundAnnotation.Sound.Bits = 16;
            soundAnnotation.Color = new PdfColor(Color.Red);
            //Sets the pdf sound icon.
            soundAnnotation.Icon = PdfSoundIcon.Speaker;
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the document to disk.
            document.Save("SoundIcon.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Datastartup.wav")
            soundAnnotation.Sound.Channels = PdfSoundChannels.Stereo;
            soundAnnotation.Sound.Bits = 16;
            soundAnnotation.Color = new PdfColor(Color.Red);
            'Sets the pdf sound icon.
            soundAnnotation.Icon = PdfSoundIcon.Speaker
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the document to disk.
            document.Save("SoundIcon.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundAnnotation.m_icon">
            <summary>
            Type of icon of the sound link.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundAnnotation.m_sound">
            <summary>
            Internal variable to store sound.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSoundAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
            <param name="fileName">The string specifies the file name of the sound annotation.</param>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Sets the pdf sound icon.
            soundAnnotation.Icon = PdfSoundIcon.Speaker;
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the document to disk.
            document.Save("SoundIcon.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Datastartup.wav")
            'Sets the pdf sound icon.
            soundAnnotation.Icon = PdfSoundIcon.Speaker
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the document to disk.
            document.Save("SoundIcon.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSoundAnnotation.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSoundAnnotation.Save">
            <summary>
            Saves instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSoundAnnotation.Icon">
            <summary>
            Gets or sets the icon to be used in displaying the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Sets the pdf sound icon.
            soundAnnotation.Icon = PdfSoundIcon.Speaker;
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the document to disk.
            document.Save("SoundIcon.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Datastartup.wav")
            'Sets the pdf sound icon.
            soundAnnotation.Icon = PdfSoundIcon.Speaker
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the document to disk.
            document.Save("SoundIcon.pdf")
            </code>
            </example> 
            <value>The <see cref="T:Syncfusion.Pdf.Interactive.PdfSoundIcon"/> enumeration member specifying the icon for the annotation.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSoundAnnotation.Sound">
            <summary>
            Gets or sets the sound.
            </summary>
            <value>The <see cref="T:Syncfusion.Pdf.Interactive.PdfSound"/> object specified a sound for the annotation.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Sets the pdfsound
            soundAnnotation.Sound = new PdfSound("@..\..\Data\endsup.wav");
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the document to disk.
            document.Save("PdfSound.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Data\startup.wav")
            'Sets the pdfsound
            soundAnnotation.Sound = New PdfSound("..\..\Data\endsup.wav")
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the document to disk.
            document.Save("PdfSound.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSoundAnnotation.FileName">
            <value>The string specifies the file name of the sound annotation.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Gets the file name.
            string fileName=soundAnnotation.FileName;
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the document to disk.
            document.Save("SoundFileName.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Datastartup.wav")
            'Gets the file name.
            Dim fileName As string=soundAnnotation.FileName
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the document to disk.
            document.Save("SoundFileName.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfUriAnnotation">
            <summary>
            Represents the Uri annotation
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Uri Annotation.
            PdfUriAnnotation uriAnnotation = new PdfUriAnnotation(rectangle, "http://www.google.com");
            //Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation";
            //Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation);
            //Save the document to disk.
            document.Save("UriAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new uri Annotation.
            Dim uriAnnotation As PdfUriAnnotation = New PdfUriAnnotation(rectangle, "http://www.google.com")
            'Set the Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation"
            'Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation)
            'Save the document to disk.
            document.Save("UriAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfUriAnnotation.m_uriAction">
            <summary>
            Internal variable to store acton for the annotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfUriAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfUriAnnotation"/> class.
            </summary>        
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Uri Annotation.
            PdfUriAnnotation uriAnnotation = new PdfUriAnnotation(rectangle);
            //Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation";
            // Set Uri to uriAnnotation
            uriAnnotation.Uri="http://www.google.com"
            //Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation);
            //Save the document to disk.
            document.Save("UriAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new uri Annotation.
            Dim uriAnnotation As PdfUriAnnotation = New PdfUriAnnotation(rectangle)
            'Set the Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation"
            'Set Uri to uriAnnotation;
            uriAnnotation.Uri="http://www.google.com"
            'Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation)
            'Save the document to disk.
            document.Save("UriAnnotation.pdf")
            </code>
            </example> 
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfUriAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfUriAnnotation"/> class.
            </summary>
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
            <param name="uri">unique resource identifier path.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Uri Annotation.
            PdfUriAnnotation uriAnnotation = new PdfUriAnnotation(rectangle, "http://www.google.com");
            //Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation";
            //Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation);
            //Save the document to disk.
            document.Save("UriAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new uri Annotation.
            Dim uriAnnotation As PdfUriAnnotation = New PdfUriAnnotation(rectangle, "http://www.google.com")
            'Set the Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation"
            'Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation)
            'Save the document to disk.
            document.Save("UriAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfUriAnnotation.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfUriAnnotation.Uri">
            <summary>
            Gets or sets the Uri address.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Uri Annotation.
            PdfUriAnnotation uriAnnotation = new PdfUriAnnotation(rectangle);
            //Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation";
            // Set Uri to uriAnnotation
            uriAnnotation.Uri="http://www.google.com";
            //Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation);
            //Save the document to disk.
            document.Save("UriAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new uri Annotation.
            Dim uriAnnotation As PdfUriAnnotation = New PdfUriAnnotation(rectangle)
            'Set the Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation"
            'Set Uri to uriAnnotation;
            uriAnnotation.Uri="http://www.google.com"
            'Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation)
            'Save the document to disk.
            document.Save("UriAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfUriAnnotation.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The <see cref="T:Syncfusion.Pdf.Interactive.PdfAction"/> object specifies the action of the annotation.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Uri Annotation.
            PdfUriAnnotation uriAnnotation = new PdfUriAnnotation(rectangle);
            //Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation";
            // Set Uri to uriAnnotation
            uriAnnotation.Uri="http://www.google.com";
             //Creates a new Sound action
            PdfSoundAction soundAction = new PdfSoundAction(@"..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav");
            soundAction.Sound.Bits = 16;
            soundAction.Sound.Channels = PdfSoundChannels.Stereo;
            soundAction.Sound.Encoding = PdfSoundEncoding.Signed;
            soundAction.Volume = 0.9f;
            uriAnnotation.Action=soundAction;
            //Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation);
            //Save the document to disk.
            document.Save("UriAnnotation.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new uri Annotation.
            Dim uriAnnotation As PdfUriAnnotation = New PdfUriAnnotation(rectangle)
            'Set the Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation"
            'Set Uri to uriAnnotation;
            uriAnnotation.Uri="http://www.google.com"
            'Creates a new sound annotation
            Dim soundAction As PdfSoundAction = New PdfSoundAction("..\..\..\..\..\..\..\..\..\Common\Data\PDF\startup.wav")
            soundAction.Sound.Bits = 16
            soundAction.Sound.Channels = PdfSoundChannels.Stereo
            soundAction.Sound.Encoding = PdfSoundEncoding.Signed
            soundAction.Volume = 0.9F
            soundAction.Mix = True
            uriAnnotation.Action=soundAction
            'Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation)
            'Save the document to disk.
            document.Save("UriAnnotation.pdf")
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.WidgetAnnotation">
            <summary>
            Represents the widget annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAnnotation.m_parent">
            <summary>
            Internal variable to store parent field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAnnotation.m_extendedAppearance">
            <summary>
            Internal variable to store extended appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAnnotation.m_border">
            <summary>
            Intrenal variable to store border parameters.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAnnotation.m_widgetAppearance">
            <summary>
            Internal variable to store appearance of the widget.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAnnotation.m_highlightMode">
            <summary>
            Internal variable to store highlighting mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAnnotation.m_defaultAppearance">
            <summary>
            Internal variable to store default appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAnnotation.m_alignment">
            <summary>
            Internal variable to store alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAnnotation.m_actions">
            <summary>
            Internal variable to store annotation's actions.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAnnotation.m_appearance">
            <summary>
            Annotation's appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAnnotation.m_appearanceState">
            <summary>
            Internal variable to store default appearance state value.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotation.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotation.OnBeginSave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Save"/> event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotation.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotation.HighlightModeToString(Syncfusion.Pdf.Interactive.PdfHighlightMode)">
            <summary>
            Highlightings the mode to string.
            </summary>
            <param name="m_highlightingMode">The m_highlighting mode.</param>
            <returns>String representation of the highlighting mode in Pdf suiatable format.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotation.GetAppearance">
            <summary>
            Gets the appearance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAnnotation.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAnnotation.ExtendedAppearance">
            <summary>
            Gets or sets the extended appearance.
            </summary>
            <value>The extended appearance.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAnnotation.DefaultAppearance">
            <summary>
            Gets the default appearance.
            </summary>
            <value>The default appearance.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAnnotation.WidgetBorder">
            <summary>
            Gets or sets annotation's border.
            </summary>
            <value>The widget border.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAnnotation.WidgetAppearance">
            <summary>
            Gets the widget appearance.
            </summary>
            <value>The widget appearance.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAnnotation.HighlightMode">
            <summary>
            Gets or sets the highlighting mode.
            </summary>
            <value>The highlighting mode.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAnnotation.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAnnotation.Actions">
            <summary>
            Gets the actions of the annotation.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAnnotation.Appearance">
            <summary>
            Gets or sets appearance of the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAnnotation.AppearanceState">
            <summary>
            Gets or sets default appearance name.
            </summary>
            <value>The state of the appearance.</value>
        </member>
        <member name="E:Syncfusion.Pdf.Interactive.WidgetAnnotation.BeginSave">
            <summary>
            Raise before object saves.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection">
            <summary>
            Represents collection of widget annotations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.m_array">
            <summary>
            Internal variable to store array of anootation's primitives.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.Add(Syncfusion.Pdf.Interactive.WidgetAnnotation)">
            <summary>
            Adds the specified annotation.
            </summary>
            <param name="annotation">The annotation.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.Insert(System.Int32,Syncfusion.Pdf.Interactive.WidgetAnnotation)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.Remove(Syncfusion.Pdf.Interactive.WidgetAnnotation)">
            <summary>
            Removes the specified annotation.
            </summary>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the annotation at the specified position.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.IndexOf(Syncfusion.Pdf.Interactive.WidgetAnnotation)">
            <summary>
            Gets the index of the specified annotation.
            </summary>
            <param name="annotation">The annotation.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.Contains(Syncfusion.Pdf.Interactive.WidgetAnnotation)">
            <summary>
            Determines whether the annotation is present in collection.
            </summary>
            <param name="annotation">The annotation.</param>
            <returns>
            <c>true</c> if collection contains the specified annotation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.DoAdd(Syncfusion.Pdf.Interactive.WidgetAnnotation)">
            <summary>
            Adds the annotation.
            </summary>
            <param name="annotation">The annotation.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.DoInsert(System.Int32,Syncfusion.Pdf.Interactive.WidgetAnnotation)">
            <summary>
            Insters.the annotation at the specified position.
            </summary>
            <param name="index">The index.</param>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.DoRemove(Syncfusion.Pdf.Interactive.WidgetAnnotation)">
            <summary>
            Removes the annotation.
            </summary>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.DoRemoveAt(System.Int32)">
            <summary>
            Removes the annotation at the specified position.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.DoClear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Interactive.WidgetAnnotation"/> at the specified index.
            </summary>
            <value>Annotation at the specified position.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAnnotationCollection.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.WidgetAppearance">
            <summary>
            Represents appearance of the widget annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAppearance.m_borderColor">
            <summary>
            Internal variable to store border's color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAppearance.m_backColor">
            <summary>
            Internal variable to store color of the background.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAppearance.m_normalCaption">
            <summary>
            Internal variable to store normal cation text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetAppearance.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetAppearance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.WidgetAppearance"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAppearance.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAppearance.BackColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAppearance.NormalCaption">
            <summary>
            Gets or sets the normal caption.
            </summary>
            <value>The normal caption.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetAppearance.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.WidgetBorder">
            <summary>
            Represents the border style of the widget annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetBorder.m_width">
            <summary>
            Internal variable to store border width.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetBorder.m_style">
            <summary>
            Internal variable to store border style;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.WidgetBorder.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetBorder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.WidgetBorder"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.WidgetBorder.StyleToString(Syncfusion.Pdf.Interactive.PdfBorderStyle)">
            <summary>
            Converts border style to string.
            </summary>
            <param name="style">The style.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetBorder.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetBorder.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.WidgetBorder.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfSoundIcon">
            <summary>
            Specifies the name of an icon to be used in displaying the sound annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new cectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"...\..\.Data\startup.wav");
            //Sets the sound icon
            soundAnnotation.Icon = PdfSoundIcon.Speaker;
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the  document to disk.
            document.Save("SoundIcon.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            'Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "..\..\Datastartup.wav")
            'Sets the sound icon
             soundAnnotation.Icon = PdfSoundIcon.Speaker
            'Add this annotation to a new page.
             page.Annotations.Add(soundAnnotation)
            'Save the  document to disk.
             document.Save("SoundIcon.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundIcon.Speaker">
            <summary>
            Speaker icon of sound link.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundIcon.Mic">
            <summary>
            Microphone icon of sound link.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAttachmentIcon">
            <summary>
            Specifies the type of icon to be used in displaying file attachment annotations.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF attachmentRectangle = new RectangleF(10, 40, 30, 30);
            //Create a new attachment annotation.
            PdfAttachmentAnnotation attachmentAnnotation = new PdfAttachmentAnnotation(attachmentRectangle,@"..\..\Images\business.jpg");
            //Set the Attachment icon to attachment annotation.
            attachmentAnnotation.Icon = PdfAttachmentIcon.PushPin;
            //Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation);
            //Save the  document to disk.
            document.Save("AttachmentIcon.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim attachmentRectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new pdf attachment annotation.
            Dim attachmentAnnotation As PdfAttachmentAnnotation = New PdfAttachmentAnnotation(attachmentRectangle, "..\..\Images\business.jpg")
            'Set the attachment icon.
            attachmentAnnotation.Icon = PdfAttachmentIcon.PushPin
            'Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation)
            'Save the  document to disk.
            document.Save("AttachmentIcon.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAttachmentIcon.PushPin">
            <summary>
            Type of icon used in file attachment annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAttachmentIcon.Tag">
            <summary>
            Type of icon used in file attachment annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAttachmentIcon.Graph">
            <summary>
            Type of icon used in file attachment annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAttachmentIcon.Paperclip">
            <summary>
            Type of icon used in file attachment annotation.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAnnotationFlags">
            <summary>
            Specifies the enumeration of the annotation flags.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF docLinkAnnotationRectangle = new RectangleF(10, 40, 30, 30);
            //Create a new document link annotation.
            PdfDocumentLinkAnnotation documentAnnotation = new PdfDocumentLinkAnnotation(docLinkAnnotationRectangle);
            //Set the annotation flags to document annotation.
            documentAnnotation.AnnotationFlags = PdfAnnotationFlags.NoRotate;
            //Add this annotation to a new page.
            page.Annotations.Add(attachmentAnnotation);
            //Save the document to disk.
            document.Save("AnnotationFlags.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim docLinkAnnotationRectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new document link annotation.
            Dim documentAnnotation As PdfDocumentLinkAnnotation = New PdfDocumentLinkAnnotation(docLinkAnnotationRectangle)
            'Set the annotation flags .
            documentAnnotation.AnnotationFlags = PdfAnnotationFlags.NoRotate
            'Add this annotation to a new page.
            page.Annotations.Add(documentAnnotation)
            'Save the  document to disk.
            document.Save("AnnotationFlags.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationFlags.Default">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationFlags.Invisible">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationFlags.Hidden">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationFlags.Print">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationFlags.NoZoom">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationFlags.NoRotate">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationFlags.NoView">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationFlags.ReadOnly">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationFlags.Locked">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAnnotationFlags.ToggleNoView">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfPopupIcon">
            <summary>
            Specifies the enumeration of popup annotation icons.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF popupAnnotationRectangle = new RectangleF(10, 40, 30, 30);
            //Create a new popup annotation.
            PdfPopupAnnotation popupAnnotation = new PdfPopupAnnotation(popupAnnotationRectangle,"Test popup annotation");
            //Sets the popup icon.
            popupAnnotation.Icon = PdfPopupIcon.NewParagraph;
            //Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation);
            //Save the  document to disk.
            document.Save("PopupIcon.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim popupAnnotationRectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new popup annotation.
            Dim popupAnnotation As PdfPopupAnnotation = New PdfPopupAnnotation(popupAnnotationRectangle, "Test popup annotation")
            'Set the popup icon.
            popupAnnotation.Icon = PdfPopupIcon.NewParagraph
            'Add this annotation to a new page.
            page.Annotations.Add(popupAnnotation)
            'Save the  document to disk.
            document.Save("PopupIcon.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfPopupIcon.Note">
            <summary>
            Indicates note popup annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfPopupIcon.Comment">
            <summary>
            Indicates comment popup annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfPopupIcon.Help">
            <summary>
            Indicates help popup annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfPopupIcon.Insert">
            <summary>
            Indicates insert popup annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfPopupIcon.Key">
            <summary>
            Indicates key popup annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfPopupIcon.NewParagraph">
            <summary>
            Indicates new paragraph popup annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfPopupIcon.Paragraph">
            <summary>
            Indicates paragraph popup annotation.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon">
            <summary>
            Specifies the enumeration of rubber stamp annotation icons.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedRubberStampAnnotation rubberStampAnnotation = document.Pages[1].Annotations[5] as PdfLoadedRubberStampAnnotation;
            //Set the icon
            rubberStampAnnotation.Icon = PdfRubberStampAnnotationIcon.Approved;
            //Save the document.
            document.Save("RubberStampAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim popupAnnotation As PdfLoadedRubberStampAnnotation = document.Pages(1).Annotations(5) as PdfLoadedRubberStampAnnotation
            'Set the icon
            rubberStampAnnotation.Icon = PdfRubberStampAnnotationIcon.Approved
            'Save the document.
            document.Save("RubberStampAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon.Approved">
            <summary>
            Indicates approved rubber stamp annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon.AsIs">
            <summary>
            Indicates AaIs rubber stamp annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon.Confidential">
            <summary>
            Indicates confidential rubber stamp annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon.Departmental">
            <summary>
            Indicates departmental rubber stamp annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon.Draft">
            <summary>
            Indicates draft rubber stamp annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon.Experimental">
            <summary>
            Indicates experimental rubber stamp annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon.Expired">
            <summary>
            Indicates expired rubber stamp annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon.Final">
            <summary>
            Indicates final rubber stamp annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon.ForComment">
            <summary>
            Indicates for comment rubber stamp annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon.ForPublicRelease">
            <summary>
            Indicates for public release rubber stamp annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon.NotApproved">
            <summary>
            Indicates not approved rubber stamp annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon.NotForPublicRelease">
            <summary>
            Indicates not for public release rubber stamp annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon.Sold">
            <summary>
            Indicates sold rubber stamp annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRubberStampAnnotationIcon.TopSecret">
            <summary>
            Indicates topsecret rubber stamp annotation
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLineEndingStyle">
            <summary>
            Specifies the Line Ending Style to be used in the Line annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
             PdfLineAnnotation linkannotation = new PdfLineAnnotation(points, "Line Annoation");
            linkannotation.EndLineStyle = PdfLineEndingStyle.Diamond;
            //Add this annotation to a new page.
            page.Annotations.Add(linkannotation);
            //Save the  document to disk.
            document.Save("LineEndingStyle.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points() As Integer = { 80, 420, 150, 420 }
            'Create a new line annotation.
            Dim lineannotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            linkannotation.EndLineStyle = PdfLineEndingStyle.Diamond
            'Add this annotation to a new page.
            page.Annotations.Add(linkannotation)
            'Save the  document to disk.
            document.Save("LineEndingStyle.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineEndingStyle.Square">
            <summary>
            Indicates Square
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineEndingStyle.Circle">
            <summary>
            Indicates Circle
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineEndingStyle.Diamond">
            <summary>
            Indicates Diamond
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineEndingStyle.OpenArrow">
            <summary>
            Indicates OpenArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineEndingStyle.ClosedArrow">
            <summary>
            Indicates ClosedArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineEndingStyle.None">
            <summary>
            Indicates None
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineEndingStyle.ROpenArrow">
            <summary>
            Indicates ROpenArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineEndingStyle.Butt">
            <summary>
            Indicates Butt
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineEndingStyle.RClosedArrow">
            <summary>
            IdicaIndicatestes RClosedArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineEndingStyle.Slash">
            <summary>
            Indicates Slash
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLineBorderStyle">
            <summary>
            Specifies the Line Border Style is to be used in the Line annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
             PdfLineAnnotation lineannotation = new PdfLineAnnotation(points, "Line Annoation");
            //Set the line border style.
            lineannotation.PdfLineBorderStyle = PdfLineBorderStyle.Dashed;
            //Add this annotation to a new page.
            page.Annotations.Add(lineannotation);
            //Save the  document to disk.
            document.Save("LineBorderStyle.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points() As Integer = { 80, 420, 150, 420 }
            'Create a new line annotation.
            Dim lineannotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Set the line border style.
            lineannotation.PdfLineBorderStyle = PdfLineBorderStyle.Dashed
            'Add this annotation to a new page.
            page.Annotations.Add(lineannotation)
            Save the  document to disk.
            document.Save("LineBorderStyle.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineBorderStyle.Solid">
            <summary>
            Indicates Solid
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineBorderStyle.Dashed">
            <summary>
            Indicates Dashed
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineBorderStyle.Beveled">
            <summary>
            Indicates Beveled
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineBorderStyle.Inset">
            <summary>
            Indicates Inset
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineBorderStyle.Underline">
            <summary>
            Indicates Underline
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLineIntent">
            <summary>
            Specifies the Line Intent Style is to be used in the Line annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineannotation = new PdfLineAnnotation(points, "Line Annoation");
            //Set the pdf line indent.
            lineannotation.PdfLineIntent = PdfLineIntent.LineArrow;
            //Add this annotation to a new page.
            page.Annotations.Add(lineannotation);
            //Save the  document to disk.
            document.Save("LineEndingStyle.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points() As Integer = { 80, 420, 150, 420 }
            'Create a new line annotation.
            Dim lineannotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Set the Line intent.
            lineannotation.PdfLineIntent = PdfLineIntent.LineArrow
            'Add this annotation to a new page.
            page.Annotations.Add(lineannotation)
            Save the  document to disk.
            document.Save("LineEndingStyle.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineIntent.LineArrow">
            <summary>
            Indicates Line Arrow as intent of the line annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineIntent.LineDimension">
            <summary>
            Indicates LineDimension as intent of the line annotation
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLineCaptionType">
            <summary>
            Specifies the Line Caption Type is to be used in the Line annotation.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation.
            PdfLineAnnotation lineannotation = new PdfLineAnnotation(points, "Line Annoation");
            //Set the line caption type.
            lineannotation.PdfLineCaptionType = PdfLineCaptionType.Inline
            //Add this annotation to a new page.
            page.Annotations.Add(lineannotation);
            //Save the  document to disk.
            document.Save("LineCaptionType.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'To specify the line end points
            Dim points() As Integer = { 80, 420, 150, 420 }
            'Create a new line annotation.
            Dim lineannotation As PdfLineAnnotation = New PdfLineAnnotation(points, "Line Annoation")
            'Set the line caption type.
            lineannotation.PdfLineCaptionType = PdfLineCaptionType.Inline
            'Add this annotation to a new page.
            page.Annotations.Add(lineannotation)
            'Save the  document to disk.
            document.Save("LineCaptionType.pdf")
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineCaptionType.Inline">
            <summary>
            Indicates Inline as annotation�s caption positioning
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLineCaptionType.Top">
            <summary>
            Indicates Top as annotation�s caption positioning
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotationType">
            <summary>
            Specifies the Style of the Text Markup Annotation
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedTextMarkupAnnotation textMarkupAnnotation = document.Pages[1].Annotations[5] as PdfLoadedTextMarkupAnnotation;
            //Sets the pdf text markup annotation type
            textMarkupAnnotation.TextMarkupAnnotationType=PdfTextMarkupAnnotationType.Highlight
            //Save the document.
            document.Save("TextMarkupAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim textMarkupAnnotation As PdfLoadedTextMarkupAnnotation = document.Pages(1).Annotations(5) as PdfLoadedTextMarkupAnnotation
            'Sets the pdf text markup annotation type
            textMarkupAnnotation.TextMarkupAnnotationType=PdfTextMarkupAnnotationType.Highlight
            'Save the document.
            document.Save("TextMarkupAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotationType.Highlight">
            <summary>
            The Text Markup Annotation Type is Highlight.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotationType.Underline">
            <summary>
            The Text Markup Annotation Type is Underline.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotationType.Squiggly">
            <summary>
            The Text Markup Annotation Type is Squiggly.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextMarkupAnnotationType.StrikeOut">
            <summary>
            The Text Markup Annotation Type is StrikeOut.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes">
            <summary>
            Specifies the annotation types.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.Highlight">
            <summary>
            Highlight type annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.Underline">
            <summary>
            Underline type annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.StrikeOut">
            <summary>
            StrikeOut type annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.Squiggly">
            <summary>
            Squiggly type annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.AnnotationStates">
            <summary>
            AnnotationStates type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.TextAnnotation">
            <summary>
            TextAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.LinkAnnotation">
            <summary>
            LinkAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.DocumentLinkAnnotation">
            <summary>
            DocumentLinkAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.FileLinkAnnotation">
            <summary>
            FileLinkAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.FreeTextAnnotation">
            <summary>
            FreeTextAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.LineAnnotation">
            <summary>
            LineAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.SquareandCircleAnnotation">
            <summary>
            SquareandCircleAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.PolygonandPolylineAnnotation">
            <summary>
            PolygonandPolylineAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.TextMarkupAnnotation">
            <summary>
            TextMarkupAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.CaretAnnotation">
            <summary>
            CaretAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.RubberStampAnnotation">
            <summary>
            RubberStampAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.LnkAnnotation">
            <summary>
            LnkAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.PopupAnnotation">
            <summary>
            PopupAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.FileAttachmentAnnotation">
            <summary>
            FileAttachmentAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.SoundAnnotation">
            <summary>
            SoundAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.MovieAnnotation">
            <summary>
            MovieAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.ScreenAnnotation">
            <summary>
            ScreenAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.WidgetAnnotation">
            <summary>
            WidgetAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.PrinterMarkAnnotation">
            <summary>
            PrinterMarkAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.TrapNetworkAnnotation">
            <summary>
            TrapNetworkAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.WatermarkAnnotation">
            <summary>
            WatermarkAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.TextWebLinkAnnotation">
            <summary>
            TextWebLinkAnnotation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.InkAnnotation">
            <summary>
            InkAnnotation type
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotationTypes.Null">
            <summary>
            No annotation.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfCalGrayColor">
            <summary>
            Represents a calibrated gray color, based on a CalGray colorspace. 
            </summary>
            <example>
            <code lang="C#">
            // Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = doc.Pages.Add();          
            RectangleF rect = new RectangleF(20, 70, 100, 50);
            // Create Gray ColorSpace
            PdfCalGrayColorSpace calGrayCS = new PdfCalGrayColorSpace();
            // Create new instance for PdfCalGrayColor
            PdfCalGrayColor gray = new PdfCalGrayColor(calGrayCS);
            gray.Gray = 0.2;
            PdfPen pen = new PdfPen(gray);
            PdfBrush brush = new PdfSolidBrush(gray);
            // Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalGrayColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()  
            Dim rect As RectangleF = New RectangleF(20, 70, 100, 50)
            ' Creates GrayColorSpace
            Dim calGrayCS As PdfCalGrayColorSpace = New PdfCalGrayColorSpace()
            ' Create new instance for PdfCalGrayColor
            Dim gray As PdfCalGrayColor = New PdfCalGrayColor(calGrayCS)
            gray.Gray = 0.2
            Dim pen As PdfPen = New PdfPen(gray)
            Dim brush As PdfBrush = New PdfSolidBrush(gray)
            ' Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalGrayColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalGrayColorSpace"/> Class        
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class  
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor">
            <summary>
            Represents the extended color, based on a complex colorspace. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfExtendedColor.m_colorspace">
            <summary>
            To store the Colorspace.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfExtendedColor.#ctor(Syncfusion.Pdf.ColorSpace.PdfColorSpaces)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> class.
            </summary>
            <param name="colorspace">The colorspace.</param>
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfExtendedColor.ColorSpace">
            <summary>
            Gets the Colorspace
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfCalGrayColor.m_gray">
            <summary>
            Local Variable to store the Gray value.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfCalGrayColor.#ctor(Syncfusion.Pdf.ColorSpace.PdfColorSpaces)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.ColorSpace.PdfCalGrayColor"/> class.
            </summary>
            <param name="colorspace">The color space.</param>
            <example>
            <code lang="C#">
            // Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = doc.Pages.Add();      
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);
            RectangleF rect = new RectangleF(20, 70, 100, 50);
            // Create Gray ColorSpace
            PdfCalGrayColorSpace calGrayCS = new PdfCalGrayColorSpace();
            // Create new instance for PdfCalGrayColor
            PdfCalGrayColor gray = new PdfCalGrayColor(calGrayCS);
            gray.Gray = 0.2;
            PdfPen pen = new PdfPen(gray);
            PdfBrush brush = new PdfSolidBrush(gray);
            // Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalGrayColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page.
            Dim page As PdfPage = doc.Pages.Add()  
            Dim rect As RectangleF = New RectangleF(20, 70, 100, 50)
            ' Create Gray ColorSpace
            Dim calGrayCS As PdfCalGrayColorSpace = New PdfCalGrayColorSpace()
            ' Create new instance for PdfCalGrayColor
            Dim gray As PdfCalGrayColor = New PdfCalGrayColor(calGrayCS)
            gray.Gray = 0.2
            Dim pen As PdfPen = New PdfPen(gray)
            Dim brush As PdfBrush = New PdfSolidBrush(gray)
            ' Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalGrayColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalGrayColorSpace"/> Class        
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfCalGrayColor.Gray">
            <summary>
            Gets or sets the gray level for this color. 
            </summary>
            <value>The gray level of this color.</value>
            <remarks>The acceptable range for this value is [0.0 1.0]. 
            0.0 means the darkest color that can be achieved, and 1.0 means the lightest color. </remarks>
            <example>
            <code lang="C#">
            // Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Gets the graphics object.
            PdfGraphics g = page.Graphics;
            // Created font object
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);
            RectangleF rect = new RectangleF(20, 70, 100, 50);
            // Creates GrayColorSpace
            PdfCalGrayColorSpace calGrayCS = new PdfCalGrayColorSpace();
            // Create new instance for PdfCalGrayColor
            PdfCalGrayColor red = new PdfCalGrayColor(calGrayCS);
            red.Gray = 0.2;
            PdfPen pen = new PdfPen(red);
            PdfBrush brush = new PdfSolidBrush(red);
            // Draw the rectangle
            g.DrawRectangle(pen, rect);
            doc.Save("CalGrayColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Gets the graphics object.
            Dim g As PdfGraphics = page.Graphics
            ' Created font object
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            Dim rect As RectangleF = New RectangleF(20, 70, 100, 50)
            ' Creates GrayColorSpace
            Dim calGrayCS As PdfCalGrayColorSpace = New PdfCalGrayColorSpace()
            ' Create new instance for PdfCalGrayColor
            Dim red As PdfCalGrayColor = New PdfCalGrayColor(calGrayCS)
            red.Gray = 0.2
            Dim pen As PdfPen = New PdfPen(red)
            Dim brush As PdfBrush = New PdfSolidBrush(red)
            ' Draw the rectangle
            g.DrawRectangle(pen, rect)
            doc.Save("CalGrayColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalGrayColorSpace"/> Class        
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfCalGrayColorSpace">
            <summary>
            Represents a CalGray colorspace.
            </summary>
            <example>
            <code lang="C#">
            // Create a new PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            RectangleF rect = new RectangleF(20, 70, 100, 50);
            // Creates GrayColorSpace
            PdfCalGrayColorSpace calGrayCS = new PdfCalGrayColorSpace();
            // Create new instance for PdfCalGrayColor
            PdfCalGrayColor gray = new PdfCalGrayColor(calGrayCS);
            gray.Gray = 0.2;
            PdfPen pen = new PdfPen(gray);
            PdfBrush brush = new PdfSolidBrush(gray);
            // Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalGrayColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()   
            Dim rect As RectangleF = New RectangleF(20, 70, 100, 50)
            ' Creates GrayColorSpace
            Dim calGrayCS As PdfCalGrayColorSpace = New PdfCalGrayColorSpace()
            ' Create new instance for PdfCalGrayColor
            Dim gray As PdfCalGrayColor = New PdfCalGrayColor(calGrayCS)
            gray.Gray = 0.2
            Dim pen As PdfPen = New PdfPen(gray)
            Dim brush As PdfBrush = New PdfSolidBrush(gray)
            ' Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalGrayColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalGrayColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class    
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces">
            <summary>
            Represents the base class for all colorspaces. 
            </summary>
            <example>
            <code lang="C#">
            // Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //  Set the document`s color spaces as GrayScale 
            doc.ColorSpace = PdfColorSpace.GrayScale;
            PdfPen pen = new PdfPen(PdfBrushes.Red);          
            // Draws the rectangle
            page.Graphics.DrawRectangle(pen, new RectangleF(0,0,100,200));
            doc.Save("ColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            '  Set the document`s color spaces as GrayScale 
            doc.ColorSpace = PdfColorSpace.GrayScale
            Dim pen As PdfPen = New PdfPen(PdfBrushes.Red)
            ' Draws the rectangle
            page.Graphics.DrawRectangle(pen, New RectangleF(0,0,100,200))
            doc.Save("ColorSpace.pdf")
            </code>
            </example>           
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.IPdfWrapper"/> Interface
        </member>
        <member name="T:Syncfusion.Pdf.IPdfCache">
            <summary>
            Interface of the objects that support caching of their internals.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IPdfCache.EqualsTo(Syncfusion.Pdf.IPdfCache)">
            <summary>
            Checks whether the object is similar to another object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True - if the objects have equal internals and can share them, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IPdfCache.GetInternals">
            <summary>
            Returns internals of the object.
            </summary>
            <returns>Returns internals of the object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IPdfCache.SetInternals(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Sets internals to the object.
            </summary>
            <param name="internals">Internals of the object.</param>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfColorSpaces.resources">
            <summary>
            Internal variable to store the resources.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfColorSpaces.s_syncObject">
            <summary>
            Internal variable to store the internal object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfColorSpaces.m_colorInternals">
            <summary>
            Internal variable to store the color Internals.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfColorSpaces.m_dictionary">
            <summary>
            Internal variable to store the dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfColorSpaces.colorspace">
            <summary>
            Internal variable to store the colorspace.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfColorSpaces.Syncfusion#Pdf#IPdfCache#EqualsTo(Syncfusion.Pdf.IPdfCache)">
            <summary>
            Checks whether the object is similar to another object.
            </summary>
            <param name="obj">The object to compare witht ehcurrent object.</param>
            <returns>True - if the objects have equal internals and can share them, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfColorSpaces.Syncfusion#Pdf#IPdfCache#GetInternals">
            <summary>
            Returns internals of the object.
            </summary>
            <returns>Returns internals of the object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfColorSpaces.Syncfusion#Pdf#IPdfCache#SetInternals(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Sets internals to the object.
            </summary>
            <param name="internals">Internals of the object.</param>
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfColorSpaces.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets Pdf primitive representing the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfCalGrayColorSpace.m_whitePoint">
            <summary>
            Local variable to store the White point of this colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfCalGrayColorSpace.m_gama">
            <summary>
            Local variable to store the Game value of this colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfCalGrayColorSpace.m_blackPoint">
            <summary>
            Local variable to store the black point of this colorspace.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfCalGrayColorSpace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfCalGrayColorSpace"/> class.
            </summary>
            <example>
            <code lang="C#">
            // Create a new PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            RectangleF rect = new RectangleF(20, 70, 100, 50);
            // Creates GrayColorSpace
            PdfCalGrayColorSpace calGrayCS = new PdfCalGrayColorSpace();
            // Create new instance for PdfCalGrayColor
            PdfCalGrayColor gray = new PdfCalGrayColor(calGrayCS);
            gray.Gray = 0.2;
            PdfPen pen = new PdfPen(gray);
            PdfBrush brush = new PdfSolidBrush(gray);
            // Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalGrayColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()   
            Dim rect As RectangleF = New RectangleF(20, 70, 100, 50)
            ' Creates GrayColorSpace
            Dim calGrayCS As PdfCalGrayColorSpace = New PdfCalGrayColorSpace()
            ' Create new instance for PdfCalGrayColor
            Dim gray As PdfCalGrayColor = New PdfCalGrayColor(calGrayCS)
            gray.Gray = 0.2
            Dim pen As PdfPen = New PdfPen(gray)
            Dim brush As PdfBrush = New PdfSolidBrush(gray)
            ' Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalGrayColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalGrayColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class        
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfCalGrayColorSpace.Initialize">
            <summary>
            Initializes the PdfLab Colorspace.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfCalGrayColorSpace.CreateInternals">
            <summary>
            Creates PdfCalGray ColorSpace Array
            </summary>
            <returns>PdfCalGray's ColorSpace Array.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfCalGrayColorSpace.BlackPoint">
            <summary>
            Gets or sets the black point. 
            </summary>
            <value>An array of three numbers [XB YB ZB] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse black point. Default value: [ 0.0 0.0 0.0 ].</value>
            <example>
            <code lang="C#">
            // Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();       
            RectangleF rect = new RectangleF(20, 70, 100, 50);
            // Create CalGraycolor space
            PdfCalGrayColorSpace calGrayCS = new PdfCalGrayColorSpace();
            calGrayCS.BlackPoint = new double[] { 0.2, 0.3, 0.8 };
            // Create new instance for PdfCalGrayColor
            PdfCalGrayColor red = new PdfCalGrayColor(calGrayCS);
            red.Gray = 0.2;
            PdfPen pen = new PdfPen(red);
            PdfBrush brush = new PdfSolidBrush(red);
            // Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalGrayColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()       
            Dim rect As RectangleF = New RectangleF(20, 70, 100, 50)
            ' Create CalGraycolor space
            Dim calGrayCS As PdfCalGrayColorSpace = New PdfCalGrayColorSpace()
            calGrayCS.BlackPoint = New Double() { 0.2, 0.3, 0.8 }
            ' Create new instance for PdfCalGrayColor
            Dim red As PdfCalGrayColor = New PdfCalGrayColor(calGrayCS)
            red.Gray = 0.2
            Dim pen As PdfPen = New PdfPen(red)
            Dim brush As PdfBrush = New PdfSolidBrush(red)
            ' Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalGrayColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalGrayColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class        
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfCalGrayColorSpace.Gamma">
            <summary>
            Gets or sets the gamma.
            </summary>
            <example>
            <value>The gamma value for the gray component.</value>
            <code lang="C#">
            // Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();     
            RectangleF rect = new RectangleF(20, 70, 100, 50);
            // Creates gray color space
            PdfCalGrayColorSpace calGrayCS = new PdfCalGrayColorSpace();
            // Update color values
            calGrayCS.Gamma = 0.7;       
            // Create new instance for PdfCalGrayColor
            PdfCalGrayColor gray = new PdfCalGrayColor(calGrayCS);
            gray.Gray = 0.2;
            PdfPen pen = new PdfPen(gray);
            PdfBrush brush = new PdfSolidBrush(gray);
            // Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalGrayColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()       
            Dim rect As RectangleF = New RectangleF(20, 70, 100, 50)
            ' Creates gray color space
            Dim calGrayCS As PdfCalGrayColorSpace = New PdfCalGrayColorSpace()
            ' Update color values
            calGrayCS.Gamma = 0.7
            ' Create new instance for PdfCalGrayColor
            Dim gray As PdfCalGrayColor = New PdfCalGrayColor(calGrayCS)
            gray.Gray = 0.2
            Dim pen As PdfPen = New PdfPen(gray)
            Dim brush As PdfBrush = New PdfSolidBrush(gray)
            ' Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalGrayColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalGrayColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class        
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfCalGrayColorSpace.WhitePoint">
            <summary>
            Gets or sets the white point.
            </summary>
            <value>An array of three numbers [XW YW ZW] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse white point. The numbers XW and ZW must be positive, and YW must be equal to 1.0.</value>
            <example>
            <code lang="C#">
            // Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();      
            RectangleF rect = new RectangleF(20, 70, 100, 50);
            // Create CalGraycolor space
            PdfCalGrayColorSpace calGrayCS = new PdfCalGrayColorSpace();
            calGrayCS.WhitePoint = new double[] { 0.2, 1, 0.8 }; 
            // Create new instance for PdfCalGrayColor
            PdfCalGrayColor gray = new PdfCalGrayColor(calGrayCS);
            gray.Gray = 0.2;
            PdfPen pen = new PdfPen(gray);
            PdfBrush brush = new PdfSolidBrush(gray);
            // Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalGrayColorSpace.pdf");            
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()       
            Dim rect As RectangleF = New RectangleF(20, 70, 100, 50)
            ' Create CalGraycolor space
            Dim calGrayCS As PdfCalGrayColorSpace = New PdfCalGrayColorSpace()
            calGrayCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            ' Create new instance for PdfCalGrayColor
            Dim gray As PdfCalGrayColor = New PdfCalGrayColor(calGrayCS)
            gray.Gray = 0.2
            Dim pen As PdfPen = New PdfPen(gray)
            Dim brush As PdfBrush = New PdfSolidBrush(gray)
            ' Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalGrayColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalGrayColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class        
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor">
            <summary>
            Represents a calibrated RGB color, based on a CalRGB colorspace. 
            </summary>
            <example>
            <code lang="C#">
            // Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();  
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            // Creates RedColorSpace
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 1.6, 1.1, 2.5 };
            calRgbCS.Matrix = new double[] { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
            calRgbCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            PdfCalRGBColor red = new PdfCalRGBColor(calRgbCS);
            red.Red = 0;
            red.Green = 1;
            red.Blue = 0;
            PdfPen pen = new PdfPen(red);
            PdfBrush brush = new PdfSolidBrush(red);
            // Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalRedColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Gets the graphics object.
            Dim g As PdfGraphics = page.Graphics
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            ' Creates RedColorSpace
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 1.6, 1.1, 2.5 }
            calRgbCS.Matrix = New Double() { 1, 0, 0, 0, 1, 0, 0, 0, 1 }
            calRgbCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            Dim red As PdfCalRGBColor = New PdfCalRGBColor(calRgbCS)
            red.Red = 0
            red.Green = 1
            red.Blue = 0
            Dim pen As PdfPen = New PdfPen(red)
            Dim brush As PdfBrush = New PdfSolidBrush(red)
            ' Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalRedColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor.m_red">
            <summary>
            Local variable to store the Red Color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor.m_green">
            <summary>
            Local variable to store the Green Color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor.m_blue">
            <summary>
            Local variable to store the Blue Color.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor.#ctor(Syncfusion.Pdf.ColorSpace.PdfColorSpaces)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor"/> class.
            </summary>
            <param name="colorspace">The colorspace</param>
            <example>
            <code lang="C#">
            // Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();  
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            // Creates RedColorSpace
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 1.6, 1.1, 2.5 };
            calRgbCS.Matrix = new double[] { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
            calRgbCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            PdfCalRGBColor red = new PdfCalRGBColor(calRgbCS);
            red.Red = 0;
            red.Green = 1;
            red.Blue = 0;
            PdfPen pen = new PdfPen(red);
            PdfBrush brush = new PdfSolidBrush(red);
            // Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalRedColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Gets the graphics object.
            Dim g As PdfGraphics = page.Graphics
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            ' Creates RedColorSpace
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 1.6, 1.1, 2.5 }
            calRgbCS.Matrix = New Double() { 1, 0, 0, 0, 1, 0, 0, 0, 1 }
            calRgbCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            Dim red As PdfCalRGBColor = New PdfCalRGBColor(calRgbCS)
            red.Red = 0
            red.Green = 1
            red.Blue = 0
            Dim pen As PdfPen = New PdfPen(red)
            Dim brush As PdfBrush = New PdfSolidBrush(red)
            ' Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalRedColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor.Blue">
            <summary>
            Gets or sets the Blue value.
            </summary>
            <value>The blue level of this color.</value>
            <remarks>The acceptable range for this value is [0.0 1.0]. 0.0 means the darkest color that can be achieved, and 1.0 means the lightest. </remarks>
            <example>
            <code lang="C#">
            // Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();  
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            // Creates RedColorSpace
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 1.6, 1.1, 2.5 };
            calRgbCS.Matrix = new double[] { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
            calRgbCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            PdfCalRGBColor red = new PdfCalRGBColor(calRgbCS);          
            red.Blue = 0;
            PdfPen pen = new PdfPen(red);
            PdfBrush brush = new PdfSolidBrush(red);
            // Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalRedColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Gets the graphics object.
            Dim g As PdfGraphics = page.Graphics
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            ' Creates RedColorSpace
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 1.6, 1.1, 2.5 }
            calRgbCS.Matrix = New Double() { 1, 0, 0, 0, 1, 0, 0, 0, 1 }
            calRgbCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            Dim red As PdfCalRGBColor = New PdfCalRGBColor(calRgbCS)
            red.Green = 1
            Dim pen As PdfPen = New PdfPen(red)
            Dim brush As PdfBrush = New PdfSolidBrush(red)
            ' Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalRedColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor.Green">
            <summary>
            Gets or sets the green level for this color. 
            </summary>
            <value>The green level of this color. </value>
            <remarks>The acceptable range for this value is [0.0 1.0]. 0.0 means the darkest color that can be achieved, and 1.0 means the lightest color. </remarks>
            <example>
            <code lang="C#">
            // Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();  
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            // Creates RedColorSpace
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 1.6, 1.1, 2.5 };
            calRgbCS.Matrix = new double[] { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
            calRgbCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            PdfCalRGBColor red = new PdfCalRGBColor(calRgbCS);     
            red.Green = 1;        
            PdfPen pen = new PdfPen(red);
            PdfBrush brush = new PdfSolidBrush(red);
            // Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalRedColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Gets the graphics object.
            Dim g As PdfGraphics = page.Graphics
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            ' Creates RedColorSpace
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 1.6, 1.1, 2.5 }
            calRgbCS.Matrix = New Double() { 1, 0, 0, 0, 1, 0, 0, 0, 1 }
            calRgbCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            Dim red As PdfCalRGBColor = New PdfCalRGBColor(calRgbCS)        
            red.Green = 1        
            Dim pen As PdfPen = New PdfPen(red)
            Dim brush As PdfBrush = New PdfSolidBrush(red)
            ' Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalRedColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor.Red">
            <summary>
            Gets or sets the red level for this color.
            </summary>
            <value>The red level of this color.</value>
            <remarks>The acceptable range for this value is [0.0 1.0]. 0.0 means the darkest color that can be achieved, and 1.0 means the lightest color. </remarks>
            <example>
            <code lang="C#">
            // Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();  
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            // Creates RedColorSpace
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 1.6, 1.1, 2.5 };
            calRgbCS.Matrix = new double[] { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
            calRgbCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            PdfCalRGBColor red = new PdfCalRGBColor(calRgbCS);
            red.Red = 0;      
            PdfPen pen = new PdfPen(red);
            PdfBrush brush = new PdfSolidBrush(red);
            // Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalRedColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Gets the graphics object.
            Dim g As PdfGraphics = page.Graphics
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            ' Creates RedColorSpace
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 1.6, 1.1, 2.5 }
            calRgbCS.Matrix = New Double() { 1, 0, 0, 0, 1, 0, 0, 0, 1 }
            calRgbCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            Dim red As PdfCalRGBColor = New PdfCalRGBColor(calRgbCS)
            red.Red = 0     
            Dim pen As PdfPen = New PdfPen(red)
            Dim brush As PdfBrush = New PdfSolidBrush(red)
            ' Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalRedColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace">
            <summary>
            Representing a CalRGB colorspace. 
            </summary>
            <example>
            <code lang="C#">
            // Create a new PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();  
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            // Creates RedColorSpace
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 1.6, 1.1, 2.5 };
            calRgbCS.Matrix = new double[] { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
            calRgbCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            PdfCalRGBColor red = new PdfCalRGBColor(calRgbCS);
            red.Red = 0;
            red.Green = 1;
            red.Blue = 0;
            PdfPen pen = new PdfPen(red);
            PdfBrush brush = new PdfSolidBrush(red);
            // Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalRedColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Gets the graphics object.
            Dim g As PdfGraphics = page.Graphics
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            ' Creates RedColorSpace
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 1.6, 1.1, 2.5 }
            calRgbCS.Matrix = New Double() { 1, 0, 0, 0, 1, 0, 0, 0, 1 }
            calRgbCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            Dim red As PdfCalRGBColor = New PdfCalRGBColor(calRgbCS)
            red.Red = 0
            red.Green = 1
            red.Blue = 0
            Dim pen As PdfPen = New PdfPen(red)
            Dim brush As PdfBrush = New PdfSolidBrush(red)
            ' Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalRedColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class   
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace.m_whitePoint">
            <summary>
            Local variable to store the Whitepoint of this colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace.m_blackPoint">
            <summary>
            Local variable to store the BlackPoint of this colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace.m_gama">
            <summary>
            Local variable to store the Gama of this colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace.m_matrix">
            <summary>
            Local variable to store the Matrix value of this colorspace.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfCalRGBColorSpace"/> class.
            </summary>
            <example>
            <code lang="C#">
            // Create a new PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();  
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            // Creates RedColorSpace
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 1.6, 1.1, 2.5 };
            calRgbCS.Matrix = new double[] { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
            calRgbCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            PdfCalRGBColor red = new PdfCalRGBColor(calRgbCS);
            red.Red = 0;
            red.Green = 1;
            red.Blue = 0;
            PdfPen pen = new PdfPen(red);
            PdfBrush brush = new PdfSolidBrush(red);
            // Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalRedColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Gets the graphics object.
            Dim g As PdfGraphics = page.Graphics
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            ' Creates RedColorSpace
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 1.6, 1.1, 2.5 }
            calRgbCS.Matrix = New Double() { 1, 0, 0, 0, 1, 0, 0, 0, 1 }
            calRgbCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            Dim red As PdfCalRGBColor = New PdfCalRGBColor(calRgbCS)
            red.Red = 0
            red.Green = 1
            red.Blue = 0
            Dim pen As PdfPen = New PdfPen(red)
            Dim brush As PdfBrush = New PdfSolidBrush(red)
            ' Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalRedColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class       
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace.Initialize">
            <summary>
            Initializes the PdfCalRGB ColorSpace
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace.CreateInternals">
            <summary>
            Creates PdfCalRGB ColorSpace Array
            </summary>
            <returns>PdfCalRGB's ColorSpace Array.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace.BlackPoint">
            <summary>
            Gets or sets the black point. 
            </summary>
            <value>An array of three numbers [XB YB ZB] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse black point. </value>
            <example>
            <code lang="C#">
            // Create a new PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();  
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            // Creates redColorSpace
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.BlackPoint = new double[] { 0.5, 1, 0.8 };   
            PdfCalRGBColor red = new PdfCalRGBColor(calRgbCS);
            red.Red = 0;
            red.Green = 1;
            red.Blue = 0;
            PdfPen pen = new PdfPen(red);
            PdfBrush brush = new PdfSolidBrush(red);
            // Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalRedColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Gets the graphics object.
            Dim g As PdfGraphics = page.Graphics
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            ' Creates redColorSpace
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.BlackPoint = New Double() { 0.5, 1, 0.8 }
            Dim red As PdfCalRGBColor = New PdfCalRGBColor(calRgbCS)
            red.Red = 0
            red.Green = 1
            red.Blue = 0
            Dim pen As PdfPen = New PdfPen(red)
            Dim brush As PdfBrush = New PdfSolidBrush(red)
            ' Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalRedColorSpace.pdf")
            </code>
            </example>      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace.Gamma">
            <summary>
            Gets or sets the gamma. 
            </summary>
            <value>An array of three numbers [GR GG GB] specifying the gamma for the red, green, and blue components of the color space. </value>
            <example>
            <code lang="C#">
            // Create a new PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();  
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            // Creates redColorSpace
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 1.6, 1.1, 2.5 };        
            PdfCalRGBColor red = new PdfCalRGBColor(calRgbCS);
            red.Red = 0;
            red.Green = 1;
            red.Blue = 0;
            PdfPen pen = new PdfPen(red);
            PdfBrush brush = new PdfSolidBrush(red);
            // Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalRedColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Gets the graphics object.
            Dim g As PdfGraphics = page.Graphics
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            ' Creates redColorSpace
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 1.6, 1.1, 2.5 }
            Dim red As PdfCalRGBColor = New PdfCalRGBColor(calRgbCS)
            red.Red = 0
            red.Green = 1
            red.Blue = 0
            Dim pen As PdfPen = New PdfPen(red)
            Dim brush As PdfBrush = New PdfSolidBrush(red)
            ' Draw the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalRedColorSpace.pdf")
            </code>
            </example>        
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace.Matrix">
            <summary>
            Gets or sets the colorspace transformation matrix. 
            </summary>
            <value>An array of nine numbers [XA YA ZA XB YB ZB XC YC ZC] specifying the linear interpretation of the decoded A, B, and C components of the color space with respect to the final XYZ representation.</value>
            <example>
            <code lang="C#">
            // Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();                  
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            // Creates redColorSpace
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Matrix = new double[] { 1, 0, 0, 0, 1, 0, 0, 0, 1 };   
            PdfCalRGBColor red = new PdfCalRGBColor(calRgbCS);
            red.Red = 0;
            PdfPen pen = new PdfPen(red);
            PdfBrush brush = new PdfSolidBrush(red);
            // Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalRedColorSpace.pdf");            
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()    
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            ' Creates redColorSpace
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Matrix = New Double() { 1, 0, 0, 0, 1, 0, 0, 0, 1 }
            Dim red As PdfCalRGBColor = New PdfCalRGBColor(calRgbCS)
            red.Red = 0
            Dim pen As PdfPen = New PdfPen(red)
            Dim brush As PdfBrush = New PdfSolidBrush(red)
            ' Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalRedColorSpace.pdf")
            </code>
            </example>      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace.WhitePoint">
            <summary>
            Gets or sets the white point.
            </summary>
            <value>An array of three numbers [XW YW ZW] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse white point.</value>
            <example>
            <code lang="C#">
            // Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();                    
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            // Creates redColorSpace
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            PdfCalRGBColor red = new PdfCalRGBColor(calRgbCS);
            red.Red = 0;
            PdfPen pen = new PdfPen(red);
            PdfBrush brush = new PdfSolidBrush(red);
            // Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("CalRedColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()        
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            ' Creates redColorSpace
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            Dim red As PdfCalRGBColor = New PdfCalRGBColor(calRgbCS)
            red.Red = 0
            Dim pen As PdfPen = New PdfPen(red)
            Dim brush As PdfBrush = New PdfSolidBrush(red)
            ' Draws the rectangle
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("CalRedColorSpace.pdf")
            </code>
            </example>       
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfDeviceColorSpace">
            <summary>
            Represents a device colorspace.
            </summary>
            <example>
            <code lang="C#">   
            //  Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = doc.Pages.Add();          
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfExponentialInterpolationFunction function = new PdfExponentialInterpolationFunction(true);
            float[] numArray = new float[3];
            numArray[0] = 0.38f;
            numArray[1] = 0.88f;
            function.C1 = numArray;
            PdfSeparationColorSpace colorspace = new PdfSeparationColorSpace();           
            colorspace.AlternateColorSpaces = new PdfDeviceColorSpace(PdfColorSpace.RGB);
            colorspace.TintTransform = function;
            colorspace.Colorant = "PANTONE Orange 021 C";
            PdfSeparationColor color = new PdfSeparationColor(colorspace);
            color.Tint = 0.7;
            PdfBrush brush = new PdfSolidBrush(color);
            page.Graphics.DrawRectangle(brush, rect);
            doc.Save("DeviceColorSpace.pdf");
            </code>
            <code lang="VB">
            '  Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page.
            Dim page As PdfPage = doc.Pages.Add()
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim [function] As PdfExponentialInterpolationFunction = New PdfExponentialInterpolationFunction(True)
            Dim numArray() As Single = New Single(2){}
            numArray(0) = 0.38f
            numArray(1) = 0.88f
            [function].C1 = numArray
            Dim colorspace As PdfSeparationColorSpace = New PdfSeparationColorSpace()
            colorspace.AlternateColorSpaces = New PdfDeviceColorSpace(PdfColorSpace.RGB)
            colorspace.TintTransform = [function]
            colorspace.Colorant = "PANTONE Orange 021 C"
            Dim color As PdfSeparationColor = New PdfSeparationColor(colorspace)
            color.Tint = 0.7
            Dim brush As PdfBrush = New PdfSolidBrush(color)
            page.Graphics.DrawRectangle(brush, rect)
            doc.Save("DeviceColorSpace.pdf")
            </code>
            </example>  
            <seealso cref="T:Syncfusion.Pdf.Functions.PdfExponentialInterpolationFunction"/> Class         
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfDeviceColorSpace.m_DeviceColorSpaceType">
            <summary>
            Local variable to store the Device Colospace Type.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfDeviceColorSpace.#ctor(Syncfusion.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.ColorSpace.PdfDeviceColorSpace"/> class.
            </summary>
            <param name="colorspace">The colorspace.</param>
            <example>
            <code lang="C#">   
            //  Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = doc.Pages.Add();          
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfExponentialInterpolationFunction function = new PdfExponentialInterpolationFunction(true);
            float[] numArray = new float[3];
            numArray[0] = 0.38f;
            numArray[1] = 0.88f;
            function.C1 = numArray;
            PdfSeparationColorSpace colorspace = new PdfSeparationColorSpace();           
            colorspace.AlternateColorSpaces = new PdfDeviceColorSpace(PdfColorSpace.RGB);
            colorspace.TintTransform = function;
            colorspace.Colorant = "PANTONE Orange 021 C";
            PdfSeparationColor color = new PdfSeparationColor(colorspace);
            color.Tint = 0.7;
            PdfBrush brush = new PdfSolidBrush(color);
            page.Graphics.DrawRectangle(brush, rect);
            doc.Save("DeviceColorSpace.pdf");
            </code>
            <code lang="VB">
            '  Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page.
            Dim page As PdfPage = doc.Pages.Add()
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim [function] As PdfExponentialInterpolationFunction = New PdfExponentialInterpolationFunction(True)
            Dim numArray() As Single = New Single(2){}
            numArray(0) = 0.38f
            numArray(1) = 0.88f
            [function].C1 = numArray
            Dim colorspace As PdfSeparationColorSpace = New PdfSeparationColorSpace()
            colorspace.AlternateColorSpaces = New PdfDeviceColorSpace(PdfColorSpace.RGB)
            colorspace.TintTransform = [function]
            colorspace.Colorant = "PANTONE Orange 021 C"
            Dim color As PdfSeparationColor = New PdfSeparationColor(colorspace)
            color.Tint = 0.7
            Dim brush As PdfBrush = New PdfSolidBrush(color)
            page.Graphics.DrawRectangle(brush, rect)
            doc.Save("DeviceColorSpace.pdf")
            </code>
            </example>     
            <seealso cref="T:Syncfusion.Pdf.Functions.PdfExponentialInterpolationFunction"/> Class         
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfDeviceColorSpace.DeviceColorSpaceType">
            <summary>
            Gets or sets the DeviceColorSpaceType
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfExponentialInterpolationFunction function = new PdfExponentialInterpolationFunction(true);
            float[] numArray = new float[1];
            numArray[0] = 0.38f;          
            function.C1 = numArray;
            PdfSeparationColorSpace colorspace = new PdfSeparationColorSpace();
            // Creates device color space
            PdfDeviceColorSpace deviceColorspace1 = new PdfDeviceColorSpace(PdfColorSpace.CMYK);
            deviceColorspace1.DeviceColorSpaceType = PdfColorSpace.GrayScale;
            // Set the device color space
            colorspace.AlternateColorSpaces = deviceColorspace1;
            colorspace.TintTransform = function;
            colorspace.Colorant = "PANTONE Orange 021 C";
            PdfSeparationColor color = new PdfSeparationColor(colorspace);
            color.Tint = 0.7;
            PdfBrush brush = new PdfSolidBrush(color);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(brush, rect);
            doc.Save("DeviceColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            Dim [function] As PdfExponentialInterpolationFunction = New PdfExponentialInterpolationFunction(True)
            Dim numArray() As Single = New Single(0){}
            numArray(0) = 0.38f
            [function].C1 = numArray
            Dim colorspace As PdfSeparationColorSpace = New PdfSeparationColorSpace()
            ' Creates device color space
            Dim deviceColorspace1 As PdfDeviceColorSpace = New PdfDeviceColorSpace(PdfColorSpace.CMYK)
            deviceColorspace1.DeviceColorSpaceType = PdfColorSpace.GrayScale
            ' Set the device color space
            colorspace.AlternateColorSpaces = deviceColorspace1
            colorspace.TintTransform = [function]
            colorspace.Colorant = "PANTONE Orange 021 C"
            Dim color As PdfSeparationColor = New PdfSeparationColor(colorspace)
            color.Tint = 0.7
            Dim brush As PdfBrush = New PdfSolidBrush(color)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(brush, rect)
            doc.Save("DeviceColorSpace.pdf")
            </code>
            </example>     
            <seealso cref="T:Syncfusion.Pdf.Functions.PdfExponentialInterpolationFunction"/> Class         
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfICCColor">
            <summary>
            Represents an ICC color, based on an ICC colorspace.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Read the ICC profile from disk.
            FileStream fs = new FileStream("rgb.icc", FileMode.Open, FileAccess.Read);
            byte[] profileData = new byte[fs.Length];
            fs.Read(profileData, 0, profileData.Length);
            fs.Close();
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 7.6, 5.1, 8.5 };      
            // Creating instance for ICCColorSpace      
            PdfICCColorSpace IccBasedCS = new PdfICCColorSpace();
            IccBasedCS.ProfileData = profileData;
            IccBasedCS.AlternateColorSpace = calRgbCS;
            IccBasedCS.ColorComponents = 3;
            IccBasedCS.Range = new double[] { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 };
            PdfICCColor iccColorSpace = new PdfICCColor(IccBasedCS);
            iccColorSpace.ColorComponents = new double[] { 1, 0, 1 };
            PdfPen pen = new PdfPen(iccColorSpace);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("ICCColorCS.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Read the ICC profile from disk.
            Dim fs As FileStream = New FileStream("rgb.icc", FileMode.Open, FileAccess.Read)
            Dim profileData() As Byte = New Byte(fs.Length - 1){}
            fs.Read(profileData, 0, profileData.Length)
            fs.Close()
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 7.6, 5.1, 8.5 }
            ' Creating instance for ICCColorSpace      
            Dim IccBasedCS As PdfICCColorSpace = New PdfICCColorSpace()
            IccBasedCS.ProfileData = profileData
            IccBasedCS.AlternateColorSpace = calRgbCS
            IccBasedCS.ColorComponents = 3
            IccBasedCS.Range = New Double() { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 }
            Dim iccColorSpace As PdfICCColor = New PdfICCColor(IccBasedCS)
            iccColorSpace.ColorComponents = New Double() { 1, 0, 1 }
            Dim pen As PdfPen = New PdfPen(iccColorSpace)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("ICCColorCS.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace"/> Class       
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfICCColor.m_components">
            <summary>
            Local variable to store the color components.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfICCColor.m_colorspaces">
            <summary>
            Local variable to store the Alternatic Colorspace of this Color.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfICCColor.#ctor(Syncfusion.Pdf.ColorSpace.PdfColorSpaces)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.ColorSpace.PdfICCColor"/> class.
            </summary>
            <param name="colorspace">The colorspace.</param>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Read the ICC profile from disk.
            FileStream fs = new FileStream("rgb.icc", FileMode.Open, FileAccess.Read);
            byte[] profileData = new byte[fs.Length];
            fs.Read(profileData, 0, profileData.Length);
            fs.Close();
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 7.6, 5.1, 8.5 };      
            // Creating instance for ICCColorSpace      
            PdfICCColorSpace IccBasedCS = new PdfICCColorSpace();
            IccBasedCS.ProfileData = profileData;
            IccBasedCS.AlternateColorSpace = calRgbCS;
            IccBasedCS.ColorComponents = 3;
            IccBasedCS.Range = new double[] { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 };
            PdfICCColor iccColorSpace = new PdfICCColor(IccBasedCS);
            iccColorSpace.ColorComponents = new double[] { 1, 0, 1 };
            PdfPen pen = new PdfPen(iccColorSpace);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("ICCColorCS.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Read the ICC profile from disk.
            Dim fs As FileStream = New FileStream("rgb.icc", FileMode.Open, FileAccess.Read)
            Dim profileData() As Byte = New Byte(fs.Length - 1){}
            fs.Read(profileData, 0, profileData.Length)
            fs.Close()
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 7.6, 5.1, 8.5 }
            ' Creating instance for ICCColorSpace      
            Dim IccBasedCS As PdfICCColorSpace = New PdfICCColorSpace()
            IccBasedCS.ProfileData = profileData
            IccBasedCS.AlternateColorSpace = calRgbCS
            IccBasedCS.ColorComponents = 3
            IccBasedCS.Range = New Double() { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 }
            Dim iccColorSpace As PdfICCColor = New PdfICCColor(IccBasedCS)
            iccColorSpace.ColorComponents = New Double() { 1, 0, 1 }
            Dim pen As PdfPen = New PdfPen(iccColorSpace)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("ICCColorCS.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace"/> Class       
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfICCColor.ColorComponents">
            <summary>
            Gets or sets the color components. 
            </summary>
            <value>An array of values that describe the color in the ICC colorspace. </value>
            <remarks>The length of this array must match the value of ColorComponents property on the underlying ICC colorspace. </remarks>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Read the ICC profile from disk.
            FileStream fs = new FileStream("rgb.icc", FileMode.Open, FileAccess.Read);
            byte[] profileData = new byte[fs.Length];
            fs.Read(profileData, 0, profileData.Length);
            fs.Close();
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 7.6, 5.1, 8.5 };      
            // Creating instance for ICCColorSpace      
            PdfICCColorSpace IccBasedCS = new PdfICCColorSpace();
            IccBasedCS.ProfileData = profileData;
            IccBasedCS.AlternateColorSpace = calRgbCS;
            IccBasedCS.ColorComponents = 3;
            IccBasedCS.Range = new double[] { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 };
            PdfICCColor iccColorSpace = new PdfICCColor(IccBasedCS);
            iccColorSpace.ColorComponents = new double[] { 1, 0, 1 };
            PdfPen pen = new PdfPen(iccColorSpace);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("ICCColorCS.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Read the ICC profile from disk.
            Dim fs As FileStream = New FileStream("rgb.icc", FileMode.Open, FileAccess.Read)
            Dim profileData() As Byte = New Byte(fs.Length - 1){}
            fs.Read(profileData, 0, profileData.Length)
            fs.Close()
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 7.6, 5.1, 8.5 }
            ' Creating instance for ICCColorSpace      
            Dim IccBasedCS As PdfICCColorSpace = New PdfICCColorSpace()
            IccBasedCS.ProfileData = profileData
            IccBasedCS.AlternateColorSpace = calRgbCS
            IccBasedCS.ColorComponents = 3
            IccBasedCS.Range = New Double() { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 }
            Dim iccColorSpace As PdfICCColor = New PdfICCColor(IccBasedCS)
            iccColorSpace.ColorComponents = New Double() { 1, 0, 1 }
            Dim pen As PdfPen = New PdfPen(iccColorSpace)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("ICCColorCS.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace"/> Class       
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfICCColor.ColorSpaces">
            <summary>
            Gets the Colorspace.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfICCColorProfile">
            <summary>
            Class represents the ICC Colorspace.
            <remarks>Used during creation of documents with PDF/A1B compliance.</remarks>
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfICCColorProfile.m_stream">
            <summary>
            Internal variable to store the stream..
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfICCColorProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.ColorSpace.PdfICCColorProfile"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfICCColorProfile.Save">
            <summary>
            Saves an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfICCColorProfile.Stream_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Stream control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfICCColorProfile.GetProfileData">
            <summary>
            Gets the profile data.
            </summary>
            <returns> bytes</returns>
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfICCColorProfile.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace">
            <summary>
            Represents an ICC based colorspace..
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Read the ICC profile from disk.
            FileStream fs = new FileStream("rgb.icc", FileMode.Open, FileAccess.Read);
            byte[] profileData = new byte[fs.Length];
            fs.Read(profileData, 0, profileData.Length);
            fs.Close();
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 7.6, 5.1, 8.5 };      
            // Creating instance for ICCColorSpace      
            PdfICCColorSpace IccBasedCS = new PdfICCColorSpace();
            IccBasedCS.ProfileData = profileData;
            IccBasedCS.AlternateColorSpace = calRgbCS;
            IccBasedCS.ColorComponents = 3;
            IccBasedCS.Range = new double[] { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 };
            PdfICCColor iccColorSpace = new PdfICCColor(IccBasedCS);
            iccColorSpace.ColorComponents = new double[] { 1, 0, 1 };
            PdfPen pen = new PdfPen(iccColorSpace);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("ICCColorCS.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Read the ICC profile from disk.
            Dim fs As FileStream = New FileStream("rgb.icc", FileMode.Open, FileAccess.Read)
            Dim profileData() As Byte = New Byte(fs.Length - 1){}
            fs.Read(profileData, 0, profileData.Length)
            fs.Close()
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 7.6, 5.1, 8.5 }
            ' Creating instance for ICCColorSpace      
            Dim IccBasedCS As PdfICCColorSpace = New PdfICCColorSpace()
            IccBasedCS.ProfileData = profileData
            IccBasedCS.AlternateColorSpace = calRgbCS
            IccBasedCS.ColorComponents = 3
            IccBasedCS.Range = New Double() { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 }
            Dim iccColorSpace As PdfICCColor = New PdfICCColor(IccBasedCS)
            iccColorSpace.ColorComponents = New Double() { 1, 0, 1 }
            Dim pen As PdfPen = New PdfPen(iccColorSpace)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("ICCColorCS.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfICCColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class   
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.m_alterantecolorspaces">
            <summary>
            Local variable to store the Alternative Colorspaces.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.m_colorcomponents">
            <summary>
            Loacal variable to store the Color Components.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.m_profileData">
            <summary>
            Local variable to store the Color Profile Data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.m_range">
            <summary>
            Local variable to store the Color Range.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.m_stream">
            <summary>
            Local variable to store the internal stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace"/> class.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Read the ICC profile from disk.
            FileStream fs = new FileStream("rgb.icc", FileMode.Open, FileAccess.Read);
            byte[] profileData = new byte[fs.Length];
            fs.Read(profileData, 0, profileData.Length);
            fs.Close();
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 7.6, 5.1, 8.5 };      
            // Creating instance for ICCColorSpace      
            PdfICCColorSpace IccBasedCS = new PdfICCColorSpace();
            IccBasedCS.ProfileData = profileData;
            IccBasedCS.AlternateColorSpace = calRgbCS;
            IccBasedCS.ColorComponents = 3;
            IccBasedCS.Range = new double[] { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 };
            PdfICCColor iccColorSpace = new PdfICCColor(IccBasedCS);
            iccColorSpace.ColorComponents = new double[] { 1, 0, 1 };
            PdfPen pen = new PdfPen(iccColorSpace);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("ICCColorCS.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Read the ICC profile from disk.
            Dim fs As FileStream = New FileStream("rgb.icc", FileMode.Open, FileAccess.Read)
            Dim profileData() As Byte = New Byte(fs.Length - 1){}
            fs.Read(profileData, 0, profileData.Length)
            fs.Close()
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 7.6, 5.1, 8.5 }
            ' Creating instance for ICCColorSpace      
            Dim IccBasedCS As PdfICCColorSpace = New PdfICCColorSpace()
            IccBasedCS.ProfileData = profileData
            IccBasedCS.AlternateColorSpace = calRgbCS
            IccBasedCS.ColorComponents = 3
            IccBasedCS.Range = New Double() { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 }
            Dim iccColorSpace As PdfICCColor = New PdfICCColor(IccBasedCS)
            iccColorSpace.ColorComponents = New Double() { 1, 0, 1 }
            Dim pen As PdfPen = New PdfPen(iccColorSpace)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("ICCColorCS.pdf")
            </code>
            </example>     
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfICCColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.GetProfileData">
            <summary>
            Set the Color Profile.
            </summary>
            <returns>ICC profile data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.Save">
            <summary>
            Saves an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.Initialize">
            <summary>
            Initializes the PdfICCBased Colorspace.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.CreateInternals">
            <summary>
            Creates PdfCalGray ColorSpace Array
            </summary>
            <returns>PdfCalGray's ColorSpace Array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.Stream_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Stream control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.AlternateColorSpace">
            <summary>
            Gets or sets the alternate color space.
            </summary>
            <value>The alternate color space to be used in case the one specified in the stream data is not supported.</value>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Read the ICC profile from disk.
            FileStream fs = new FileStream("rgb.icc", FileMode.Open, FileAccess.Read);
            byte[] profileData = new byte[fs.Length];
            fs.Read(profileData, 0, profileData.Length);
            fs.Close();
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 7.6, 5.1, 8.5 };      
            // Creating instance for ICCColorSpace      
            PdfICCColorSpace IccBasedCS = new PdfICCColorSpace();
            IccBasedCS.ProfileData = profileData;
            IccBasedCS.AlternateColorSpace = calRgbCS;
            IccBasedCS.ColorComponents = 3;
            IccBasedCS.Range = new double[] { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 };
            PdfICCColor iccColorSpace = new PdfICCColor(IccBasedCS);
            iccColorSpace.ColorComponents = new double[] { 1, 0, 1 };
            PdfPen pen = new PdfPen(iccColorSpace);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("ICCColorCS.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Read the ICC profile from disk.
            Dim fs As FileStream = New FileStream("rgb.icc", FileMode.Open, FileAccess.Read)
            Dim profileData() As Byte = New Byte(fs.Length - 1){}
            fs.Read(profileData, 0, profileData.Length)
            fs.Close()
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 7.6, 5.1, 8.5 }
            ' Creating instance for ICCColorSpace      
            Dim IccBasedCS As PdfICCColorSpace = New PdfICCColorSpace()
            IccBasedCS.ProfileData = profileData
            IccBasedCS.AlternateColorSpace = calRgbCS
            IccBasedCS.ColorComponents = 3
            IccBasedCS.Range = New Double() { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 }
            Dim iccColorSpace As PdfICCColor = New PdfICCColor(IccBasedCS)
            iccColorSpace.ColorComponents = New Double() { 1, 0, 1 }
            Dim pen As PdfPen = New PdfPen(iccColorSpace)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("ICCColorCS.pdf")
            </code>
            </example>     
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfICCColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.ColorComponents">
            <summary>
            Gets or sets the color components.
            </summary>
            <value>The number of color components in the color space described by the ICC profile data.</value>
            <remarks>This number must match the number of components actually in the ICC profile. As of PDF 1.4, this value must be 1, 3 or 4.</remarks>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Read the ICC profile from disk.
            FileStream fs = new FileStream("rgb.icc", FileMode.Open, FileAccess.Read);
            byte[] profileData = new byte[fs.Length];
            fs.Read(profileData, 0, profileData.Length);
            fs.Close();
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 7.6, 5.1, 8.5 };      
            // Creating instance for ICCColorSpace      
            PdfICCColorSpace IccBasedCS = new PdfICCColorSpace();
            IccBasedCS.ProfileData = profileData;
            IccBasedCS.AlternateColorSpace = calRgbCS;
            IccBasedCS.ColorComponents = 3;
            IccBasedCS.Range = new double[] { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 };
            PdfICCColor iccColorSpace = new PdfICCColor(IccBasedCS);
            iccColorSpace.ColorComponents = new double[] { 1, 0, 1 };
            PdfPen pen = new PdfPen(iccColorSpace);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("ICCColorCS.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Read the ICC profile from disk.
            Dim fs As FileStream = New FileStream("rgb.icc", FileMode.Open, FileAccess.Read)
            Dim profileData() As Byte = New Byte(fs.Length - 1){}
            fs.Read(profileData, 0, profileData.Length)
            fs.Close()
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 7.6, 5.1, 8.5 }
            ' Creating instance for ICCColorSpace      
            Dim IccBasedCS As PdfICCColorSpace = New PdfICCColorSpace()
            IccBasedCS.ProfileData = profileData
            IccBasedCS.AlternateColorSpace = calRgbCS
            IccBasedCS.ColorComponents = 3
            IccBasedCS.Range = New Double() { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 }
            Dim iccColorSpace As PdfICCColor = New PdfICCColor(IccBasedCS)
            iccColorSpace.ColorComponents = New Double() { 1, 0, 1 }
            Dim pen As PdfPen = New PdfPen(iccColorSpace)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("ICCColorCS.pdf")
            </code>
            </example>      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfICCColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.ProfileData">
            <summary>
            Gets or sets the profile data.
            </summary>
            <value>The ICC profile data.</value>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Read the ICC profile from disk.
            FileStream fs = new FileStream("rgb.icc", FileMode.Open, FileAccess.Read);
            byte[] profileData = new byte[fs.Length];
            fs.Read(profileData, 0, profileData.Length);
            fs.Close();
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 7.6, 5.1, 8.5 };      
            // Creating instance for ICCColorSpace      
            PdfICCColorSpace IccBasedCS = new PdfICCColorSpace();
            IccBasedCS.ProfileData = profileData;
            IccBasedCS.AlternateColorSpace = calRgbCS;
            IccBasedCS.ColorComponents = 3;
            IccBasedCS.Range = new double[] { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 };
            PdfICCColor iccColorSpace = new PdfICCColor(IccBasedCS);
            iccColorSpace.ColorComponents = new double[] { 1, 0, 1 };
            PdfPen pen = new PdfPen(iccColorSpace);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("ICCColorCS.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Read the ICC profile from disk.
            Dim fs As FileStream = New FileStream("rgb.icc", FileMode.Open, FileAccess.Read)
            Dim profileData() As Byte = New Byte(fs.Length - 1){}
            fs.Read(profileData, 0, profileData.Length)
            fs.Close()
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 7.6, 5.1, 8.5 }
            ' Creating instance for ICCColorSpace      
            Dim IccBasedCS As PdfICCColorSpace = New PdfICCColorSpace()
            IccBasedCS.ProfileData = profileData
            IccBasedCS.AlternateColorSpace = calRgbCS
            IccBasedCS.ColorComponents = 3
            IccBasedCS.Range = New Double() { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 }
            Dim iccColorSpace As PdfICCColor = New PdfICCColor(IccBasedCS)
            iccColorSpace.ColorComponents = New Double() { 1, 0, 1 }
            Dim pen As PdfPen = New PdfPen(iccColorSpace)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("ICCColorCS.pdf")
            </code>
            </example>     
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfICCColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfICCColorSpace.Range">
            <summary>
            Gets or sets the range for color components. 
            </summary>
            <value>An array of 2 � ColorComponents numbers [ min0 max0 min1 max1 ... ] specifying the minimum and maximum valid values of the corresponding color components. These values must match the information in the ICC profile.</value>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Read the ICC profile from disk.
            FileStream fs = new FileStream("rgb.icc", FileMode.Open, FileAccess.Read);
            byte[] profileData = new byte[fs.Length];
            fs.Read(profileData, 0, profileData.Length);
            fs.Close();
            PdfCalRGBColorSpace calRgbCS = new PdfCalRGBColorSpace();
            calRgbCS.Gamma = new double[] { 7.6, 5.1, 8.5 };      
            // Creating instance for ICCColorSpace      
            PdfICCColorSpace IccBasedCS = new PdfICCColorSpace();
            IccBasedCS.ProfileData = profileData;
            IccBasedCS.AlternateColorSpace = calRgbCS;
            IccBasedCS.ColorComponents = 3;
            IccBasedCS.Range = new double[] { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 };
            PdfICCColor iccColorSpace = new PdfICCColor(IccBasedCS);
            iccColorSpace.ColorComponents = new double[] { 1, 0, 1 };
            PdfPen pen = new PdfPen(iccColorSpace);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("ICCColorCS.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Read the ICC profile from disk.
            Dim fs As FileStream = New FileStream("rgb.icc", FileMode.Open, FileAccess.Read)
            Dim profileData() As Byte = New Byte(fs.Length - 1){}
            fs.Read(profileData, 0, profileData.Length)
            fs.Close()
            Dim calRgbCS As PdfCalRGBColorSpace = New PdfCalRGBColorSpace()
            calRgbCS.Gamma = New Double() { 7.6, 5.1, 8.5 }
            ' Creating instance for ICCColorSpace      
            Dim IccBasedCS As PdfICCColorSpace = New PdfICCColorSpace()
            IccBasedCS.ProfileData = profileData
            IccBasedCS.AlternateColorSpace = calRgbCS
            IccBasedCS.ColorComponents = 3
            IccBasedCS.Range = New Double() { 0.0, 1.0, 0.0, 1.0, 0.0, 1.0 }
            Dim iccColorSpace As PdfICCColor = New PdfICCColor(IccBasedCS)
            iccColorSpace.ColorComponents = New Double() { 1, 0, 1 }
            Dim pen As PdfPen = New PdfPen(iccColorSpace)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("ICCColorCS.pdf")
            </code>
            </example>      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfCalRGBColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfICCColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfIndexedColor">
            <summary>
            Represents an indexed color, based on an indexed colorspace. 
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates indexed color space
            PdfIndexedColorSpace colorspace = new PdfIndexedColorSpace();
            colorspace.BaseColorSpace = new PdfDeviceColorSpace(PdfColorSpace.RGB);
            colorspace.MaxColorIndex = 3;
            colorspace.IndexedColorTable = new byte[] { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 };
            // Creates index color
            PdfIndexedColor color = new PdfIndexedColor(colorspace);
            color.SelectColorIndex = 3;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("IndexedColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates indexed color space
            Dim colorspace As PdfIndexedColorSpace = New PdfIndexedColorSpace()
            colorspace.BaseColorSpace = New PdfDeviceColorSpace(PdfColorSpace.RGB)
            colorspace.MaxColorIndex = 3
            colorspace.IndexedColorTable = New Byte() { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 }
            ' Creates index color
            Dim color As PdfIndexedColor = New PdfIndexedColor(colorspace)
            color.SelectColorIndex = 3
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("IndexedColor.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfDeviceColorSpace"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfIndexedColor.m_colorIndex">
            <summary>
            Local variable to store the color index.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfIndexedColor.#ctor(Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.ColorSpace.PdfIndexedColor"/> class.
            </summary>
            <param name="colorspace">The colorspace.</param>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates indexed color space
            PdfIndexedColorSpace colorspace = new PdfIndexedColorSpace();
            colorspace.BaseColorSpace = new PdfDeviceColorSpace(PdfColorSpace.RGB);
            colorspace.MaxColorIndex = 3;
            colorspace.IndexedColorTable = new byte[] { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 };
            // Creates index color
            PdfIndexedColor color = new PdfIndexedColor(colorspace);
            color.SelectColorIndex = 3;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("IndexedColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates indexed color space
            Dim colorspace As PdfIndexedColorSpace = New PdfIndexedColorSpace()
            colorspace.BaseColorSpace = New PdfDeviceColorSpace(PdfColorSpace.RGB)
            colorspace.MaxColorIndex = 3
            colorspace.IndexedColorTable = New Byte() { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 }
            ' Creates index color
            Dim color As PdfIndexedColor = New PdfIndexedColor(colorspace)
            color.SelectColorIndex = 3
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("IndexedColor.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfDeviceColorSpace"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfIndexedColor.SelectColorIndex">
            <summary>
            Gets or sets the color index
            </summary>
            <value>The index of the select color.</value>
            <remarks>The acceptable range for this value is 0 - MaxColorIndex.</remarks>
            <example>        
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates indexed color space
            PdfIndexedColorSpace colorspace = new PdfIndexedColorSpace();
            colorspace.BaseColorSpace = new PdfDeviceColorSpace(PdfColorSpace.RGB);
            colorspace.MaxColorIndex = 3;
            colorspace.IndexedColorTable = new byte[] { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 };
            // Creates index color
            PdfIndexedColor color = new PdfIndexedColor(colorspace);
            color.SelectColorIndex = 3;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("IndexedColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates indexed color space
            Dim colorspace As PdfIndexedColorSpace = New PdfIndexedColorSpace()
            colorspace.BaseColorSpace = New PdfDeviceColorSpace(PdfColorSpace.RGB)
            colorspace.MaxColorIndex = 3
            colorspace.IndexedColorTable = New Byte() { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 }
            ' Creates index color
            Dim color As PdfIndexedColor = New PdfIndexedColor(colorspace)
            color.SelectColorIndex = 3
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("IndexedColor.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfDeviceColorSpace"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace">
            <summary>
            Represents an indexed colorspace.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates indexed color space
            PdfIndexedColorSpace colorspace = new PdfIndexedColorSpace();
            colorspace.BaseColorSpace = new PdfDeviceColorSpace(PdfColorSpace.RGB);
            colorspace.MaxColorIndex = 3;
            colorspace.IndexedColorTable = new byte[] { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 };
            // Creates index color
            PdfIndexedColor color = new PdfIndexedColor(colorspace);
            color.SelectColorIndex = 3;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("IndexedColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates indexed color space
            Dim colorspace As PdfIndexedColorSpace = New PdfIndexedColorSpace()
            colorspace.BaseColorSpace = New PdfDeviceColorSpace(PdfColorSpace.RGB)
            colorspace.MaxColorIndex = 3
            colorspace.IndexedColorTable = New Byte() { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 }
            ' Creates index color
            Dim color As PdfIndexedColor = New PdfIndexedColor(colorspace)
            color.SelectColorIndex = 3
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("IndexedColor.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfIndexedColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfDeviceColorSpace"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class  
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace.m_basecolorspace">
            <summary>
            Local variable to store the base colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace.m_maxColorIndex">
            <summary>
            Local variable to store the maximum Color Index.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace.m_indexedColorTable">
            <summary>
            Local variable to store the indexed Color Table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace.m_stream">
            <summary>
            Local variable to store the stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace"/> class.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates indexed color space
            PdfIndexedColorSpace colorspace = new PdfIndexedColorSpace();
            colorspace.BaseColorSpace = new PdfDeviceColorSpace(PdfColorSpace.RGB);
            colorspace.MaxColorIndex = 3;
            colorspace.IndexedColorTable = new byte[] { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 };
            // Creates index color
            PdfIndexedColor color = new PdfIndexedColor(colorspace);
            color.SelectColorIndex = 3;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("IndexedColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates indexed color space
            Dim colorspace As PdfIndexedColorSpace = New PdfIndexedColorSpace()
            colorspace.BaseColorSpace = New PdfDeviceColorSpace(PdfColorSpace.RGB)
            colorspace.MaxColorIndex = 3
            colorspace.IndexedColorTable = New Byte() { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 }
            ' Creates index color
            Dim color As PdfIndexedColor = New PdfIndexedColor(colorspace)
            color.SelectColorIndex = 3
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("IndexedColor.pdf")
            </code>
            </example>       
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfIndexedColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfDeviceColorSpace"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace.GetProfileData">
            <summary>
            Gets the profile data.
            </summary>
            <returns>The profile data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace.Save">
            <summary>
            Saves an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace.Initialize">
            <summary>
            Initializes the PdfICCBased Colorspace.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace.CreateInternals">
            <summary>
            Creates PdfCalGray ColorSpace Array
            </summary>
            <returns>PdfCalGray's ColorSpace Array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace.Stream_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Stream control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace.BaseColorSpace">
            <summary>
            Gets or sets the base colorspace. 
            </summary>
            <value>The color space in which the values in the color table are to be interpreted.</value>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates indexed color space
            PdfIndexedColorSpace colorspace = new PdfIndexedColorSpace();
            colorspace.BaseColorSpace = new PdfDeviceColorSpace(PdfColorSpace.RGB);
            colorspace.MaxColorIndex = 3;
            colorspace.IndexedColorTable = new byte[] { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 };
            // Creates index color
            PdfIndexedColor color = new PdfIndexedColor(colorspace);
            color.SelectColorIndex = 3;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("IndexedColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates indexed color space
            Dim colorspace As PdfIndexedColorSpace = New PdfIndexedColorSpace()
            colorspace.BaseColorSpace = New PdfDeviceColorSpace(PdfColorSpace.RGB)
            colorspace.MaxColorIndex = 3
            colorspace.IndexedColorTable = New Byte() { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 }
            ' Creates index color
            Dim color As PdfIndexedColor = New PdfIndexedColor(colorspace)
            color.SelectColorIndex = 3
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("IndexedColor.pdf")
            </code>
            </example>        
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfIndexedColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfDeviceColorSpace"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace.MaxColorIndex">
            <summary>
            Gets or sets the index of the max color.
            </summary>
            <value>The maximum index that can be used to access the values in the color table.</value>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates indexed color space
            PdfIndexedColorSpace colorspace = new PdfIndexedColorSpace();
            colorspace.BaseColorSpace = new PdfDeviceColorSpace(PdfColorSpace.RGB);
            colorspace.MaxColorIndex = 3;
            colorspace.IndexedColorTable = new byte[] { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 };
            // Creates index color
            PdfIndexedColor color = new PdfIndexedColor(colorspace);
            color.SelectColorIndex = 3;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("IndexedColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates indexed color space
            Dim colorspace As PdfIndexedColorSpace = New PdfIndexedColorSpace()
            colorspace.BaseColorSpace = New PdfDeviceColorSpace(PdfColorSpace.RGB)
            colorspace.MaxColorIndex = 3
            colorspace.IndexedColorTable = New Byte() { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 }
            ' Creates index color
            Dim color As PdfIndexedColor = New PdfIndexedColor(colorspace)
            color.SelectColorIndex = 3
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("IndexedColor.pdf")
            </code>
            </example>      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfIndexedColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfDeviceColorSpace"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfIndexedColorSpace.IndexedColorTable">
            <summary>
            Gets or sets the color table. 
            </summary>
            <value>The table of color components.</value>
            <remarks>The color table data must be m * (maxIndex + 1) bytes long, where m is the number of color components in the base color space. Each byte is an unsigned integer in the range 0 to 255 that is scaled to the range of the corresponding color component in the base color space; that is, 0 corresponds to the minimum value in the range for that component, and 255 corresponds to the maximum.</remarks>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates indexed color space
            PdfIndexedColorSpace colorspace = new PdfIndexedColorSpace();
            colorspace.BaseColorSpace = new PdfDeviceColorSpace(PdfColorSpace.RGB);
            colorspace.MaxColorIndex = 3;
            colorspace.IndexedColorTable = new byte[] { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 };
            // Creates index color
            PdfIndexedColor color = new PdfIndexedColor(colorspace);
            color.SelectColorIndex = 3;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("IndexedColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates indexed color space
            Dim colorspace As PdfIndexedColorSpace = New PdfIndexedColorSpace()
            colorspace.BaseColorSpace = New PdfDeviceColorSpace(PdfColorSpace.RGB)
            colorspace.MaxColorIndex = 3
            colorspace.IndexedColorTable = New Byte() { 150, 0, 222, 255, 0, 0, 0, 255, 0, 0, 0, 255 }
            ' Creates index color
            Dim color As PdfIndexedColor = New PdfIndexedColor(colorspace)
            color.SelectColorIndex = 3
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("IndexedColor.pdf")
            </code>
            </example>     
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfIndexedColor"/> Class    
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfDeviceColorSpace"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfLabColor">
            <summary>
            Represents a calibrated Lab color, based on a Lab colorspace. 
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Create lab color space
            PdfLabColorSpace calGrayCS = new PdfLabColorSpace();
            calGrayCS.Range = new double[] { 0.2, 1, 0.8, 23.5 };
            calGrayCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            // Create lab color
            PdfLabColor labColor = new PdfLabColor(calGrayCS);
            labColor.L = 90;
            labColor.A = 0.5;
            labColor.B = 20;
            PdfPen pen = new PdfPen(labColor);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("LabColor.pdf");
            </code>
            <code lang="VB">
            ' Create a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates lab color space
            Dim calGrayCS As PdfLabColorSpace = New PdfLabColorSpace()
            calGrayCS.Range = New Double() { 0.2, 1, 0.8, 23.5 }
            calGrayCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            ' Create lab color
            Dim labColor As PdfLabColor = New PdfLabColor(calGrayCS)
            labColor.L = 90
            labColor.A = 0.5
            labColor.B = 20
            Dim pen As PdfPen = New PdfPen(labColor)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("LabColor.pdf")
            </code>
            </example>      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfLabColor.m_a">
            <summary>
            Local variable to store the A value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfLabColor.m_b">
            <summary>
            Local variable to store the B value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfLabColor.m_l">
            <summary>
            Local variable to store the L value.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfLabColor.#ctor(Syncfusion.Pdf.ColorSpace.PdfColorSpaces)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLabColor"/> class.
            </summary>
            <param name="colorspace">The ColorSpace.</param>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Create lab color space
            PdfLabColorSpace calGrayCS = new PdfLabColorSpace();
            calGrayCS.Range = new double[] { 0.2, 1, 0.8, 23.5 };
            calGrayCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            // Create lab color
            PdfLabColor labColor = new PdfLabColor(calGrayCS);
            labColor.L = 90;
            labColor.A = 0.5;
            labColor.B = 20;
            PdfPen pen = new PdfPen(labColor);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("LabColor.pdf");
            </code>
            <code lang="VB">
            ' Create a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates lab color space
            Dim calGrayCS As PdfLabColorSpace = New PdfLabColorSpace()
            calGrayCS.Range = New Double() { 0.2, 1, 0.8, 23.5 }
            calGrayCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            ' Create lab color
            Dim labColor As PdfLabColor = New PdfLabColor(calGrayCS)
            labColor.L = 90
            labColor.A = 0.5
            labColor.B = 20
            Dim pen As PdfPen = New PdfPen(labColor)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("LabColor.pdf")
            </code>
            </example>           
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfLabColor.A">
            <summary>
            Gets or sets the a* component for this color. 
            </summary>
            <value>The a* component of this color.</value>
            <remarks>The range for this value is defined by the Range property of the underlying Lab colorspace. </remarks>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Create lab color space
            PdfLabColorSpace calGrayCS = new PdfLabColorSpace();
            calGrayCS.Range = new double[] { 0.2, 1, 0.8, 23.5 };
            calGrayCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            // Create lab color
            PdfLabColor labColor = new PdfLabColor(calGrayCS);
            labColor.L = 90;
            labColor.A = 0.5;
            labColor.B = 20;
            PdfPen pen = new PdfPen(labColor);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("LabColor.pdf");
            </code>
            <code lang="VB">
            ' Create a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates lab color space
            Dim calGrayCS As PdfLabColorSpace = New PdfLabColorSpace()
            calGrayCS.Range = New Double() { 0.2, 1, 0.8, 23.5 }
            calGrayCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            ' Create lab color
            Dim labColor As PdfLabColor = New PdfLabColor(calGrayCS)
            labColor.L = 90
            labColor.A = 0.5
            labColor.B = 20
            Dim pen As PdfPen = New PdfPen(labColor)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("LabColor.pdf")
            </code>
            </example>                
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfLabColor.B">
            <summary>
            Gets or sets the b* component for this color. 
            </summary>
            <value>The b* component of this color.</value>
            <remarks>The range for this value is defined by the Range property of the underlying Lab colorspace. </remarks>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Create lab color space
            PdfLabColorSpace calGrayCS = new PdfLabColorSpace();
            calGrayCS.Range = new double[] { 0.2, 1, 0.8, 23.5 };
            calGrayCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            // Create lab color
            PdfLabColor labColor = new PdfLabColor(calGrayCS);
            labColor.L = 90;
            labColor.A = 0.5;
            labColor.B = 20;
            PdfPen pen = new PdfPen(labColor);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("LabColor.pdf");
            </code>
            <code lang="VB">
            ' Create a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates lab color space
            Dim calGrayCS As PdfLabColorSpace = New PdfLabColorSpace()
            calGrayCS.Range = New Double() { 0.2, 1, 0.8, 23.5 }
            calGrayCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            ' Create lab color
            Dim labColor As PdfLabColor = New PdfLabColor(calGrayCS)
            labColor.L = 90
            labColor.A = 0.5
            labColor.B = 20
            Dim pen As PdfPen = New PdfPen(labColor)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("LabColor.pdf")
            </code>
            </example>          
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfLabColor.L">
            <summary>
            Gets or sets the l component for this color. 
            </summary>
            <value>The l component of this color. </value>
            <remarks>The acceptable range for this value is [0.0 100.0]. 0.0 means the darkest color that can be achieved, and 100.0 means the lightest color. </remarks>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Create lab color space
            PdfLabColorSpace calGrayCS = new PdfLabColorSpace();
            calGrayCS.Range = new double[] { 0.2, 1, 0.8, 23.5 };
            calGrayCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            // Create lab color
            PdfLabColor labColor = new PdfLabColor(calGrayCS);
            labColor.L = 90;
            labColor.A = 0.5;
            labColor.B = 20;
            PdfPen pen = new PdfPen(labColor);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("LabColor.pdf");
            </code>
            <code lang="VB">
            ' Create a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates lab color space
            Dim calGrayCS As PdfLabColorSpace = New PdfLabColorSpace()
            calGrayCS.Range = New Double() { 0.2, 1, 0.8, 23.5 }
            calGrayCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            ' Create lab color
            Dim labColor As PdfLabColor = New PdfLabColor(calGrayCS)
            labColor.L = 90
            labColor.A = 0.5
            labColor.B = 20
            Dim pen As PdfPen = New PdfPen(labColor)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("LabColor.pdf")
            </code>
            </example>            
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace">
            <summary>
            Represents a Lab colorspace
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Create lab color space
            PdfLabColorSpace calGrayCS = new PdfLabColorSpace();
            calGrayCS.Range = new double[] { 0.2, 1, 0.8, 23.5 };
            calGrayCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            // Create lab color
            PdfLabColor labColor = new PdfLabColor(calGrayCS);
            labColor.L = 90;
            labColor.A = 0.5;
            labColor.B = 20;
            PdfPen pen = new PdfPen(labColor);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("LabColor.pdf");
            </code>
            <code lang="VB">
            ' Create a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates lab color space
            Dim calGrayCS As PdfLabColorSpace = New PdfLabColorSpace()
            calGrayCS.Range = New Double() { 0.2, 1, 0.8, 23.5 }
            calGrayCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            ' Create lab color
            Dim labColor As PdfLabColor = New PdfLabColor(calGrayCS)
            labColor.L = 90
            labColor.A = 0.5
            labColor.B = 20
            Dim pen As PdfPen = New PdfPen(labColor)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("LabColor.pdf")
            </code>
            </example>       
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfLabColor"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace.m_whitePoint">
            <summary>
            Local variable to store the WhitePoint.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace.m_blackPoint">
            <summary>
            Local variable to store the BlackPoint
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace.m_range">
            <summary>
            Local variable to store the Range
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace"/> class.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Create lab color space
            PdfLabColorSpace calGrayCS = new PdfLabColorSpace();
            calGrayCS.Range = new double[] { 0.2, 1, 0.8, 23.5 };
            calGrayCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            // Create lab color
            PdfLabColor labColor = new PdfLabColor(calGrayCS);
            labColor.L = 90;
            labColor.A = 0.5;
            labColor.B = 20;
            PdfPen pen = new PdfPen(labColor);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("LabColor.pdf");
            </code>
            <code lang="VB">
            ' Create a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates lab color space
            Dim calGrayCS As PdfLabColorSpace = New PdfLabColorSpace()
            calGrayCS.Range = New Double() { 0.2, 1, 0.8, 23.5 }
            calGrayCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            ' Create lab color
            Dim labColor As PdfLabColor = New PdfLabColor(calGrayCS)
            labColor.L = 90
            labColor.A = 0.5
            labColor.B = 20
            Dim pen As PdfPen = New PdfPen(labColor)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("LabColor.pdf")
            </code>
            </example>       
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfLabColor"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace.Initialize">
            <summary>
            Initializes the PdfLab Colorspace.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace.CreateInternals">
            <summary>
            Creates PdfLab colorspace Array
            </summary>
            <returns>PdfLab's colorspace Array.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace.BlackPoint">
            <summary>
            Gets or sets BlackPoint
            </summary>
            <value>An array of three numbers [XB YB ZB] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse black point.</value>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Create lab color space
            PdfLabColorSpace calGrayCS = new PdfLabColorSpace();
            calGrayCS.Range = new double[] { 0.2, 1, 0.8, 23.5 };
            calGrayCS.BlackPoint = new double[] { 0.2, 1, 0.8 };
            // Create lab color
            PdfLabColor labColor = new PdfLabColor(calGrayCS);
            labColor.L = 90;
            labColor.A = 0.5;
            labColor.B = 20;
            PdfPen pen = new PdfPen(labColor);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("LabColor.pdf");
            </code>
            <code lang="VB">
            ' Create a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates lab color space
            Dim calGrayCS As PdfLabColorSpace = New PdfLabColorSpace()
            calGrayCS.Range = New Double() { 0.2, 1, 0.8, 23.5 }
            calGrayCS.BlackPoint = New Double() { 0.2, 1, 0.8 }
            ' Create lab color
            Dim labColor As PdfLabColor = New PdfLabColor(calGrayCS)
            labColor.L = 90
            labColor.A = 0.5
            labColor.B = 20
            Dim pen As PdfPen = New PdfPen(labColor)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("LabColor.pdf")
            </code>
            </example>              
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfLabColor"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace.Range">
            <summary>
            Gets or sets the Range
            </summary>
            <value>An array of three numbers [XB YB ZB] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse black point.</value>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Create lab color space
            PdfLabColorSpace calGrayCS = new PdfLabColorSpace();
            calGrayCS.Range = new double[] { 0.2, 1, 0.8, 23.5 };
            calGrayCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            // Create lab color
            PdfLabColor labColor = new PdfLabColor(calGrayCS);
            labColor.L = 90;
            labColor.A = 0.5;
            labColor.B = 20;
            PdfPen pen = new PdfPen(labColor);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("LabColor.pdf");
            </code>
            <code lang="VB">
            ' Create a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates lab color space
            Dim calGrayCS As PdfLabColorSpace = New PdfLabColorSpace()
            calGrayCS.Range = New Double() { 0.2, 1, 0.8, 23.5 }
            calGrayCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            ' Create lab color
            Dim labColor As PdfLabColor = New PdfLabColor(calGrayCS)
            labColor.L = 90
            labColor.A = 0.5
            labColor.B = 20
            Dim pen As PdfPen = New PdfPen(labColor)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("LabColor.pdf")
            </code>
            </example>         
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfLabColor"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfLabColorSpace.WhitePoint">
            <summary>
            Gets or sets the white point
            </summary>
            <value>An array of three numbers [XW YW ZW] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse white point. </value>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Create lab color space
            PdfLabColorSpace calGrayCS = new PdfLabColorSpace();
            calGrayCS.Range = new double[] { 0.2, 1, 0.8, 23.5 };
            calGrayCS.WhitePoint = new double[] { 0.2, 1, 0.8 };
            // Create lab color
            PdfLabColor labColor = new PdfLabColor(calGrayCS);
            labColor.L = 90;
            labColor.A = 0.5;
            labColor.B = 20;
            PdfPen pen = new PdfPen(labColor);
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            page.Graphics.DrawRectangle(pen, rect);
            doc.Save("LabColor.pdf");
            </code>
            <code lang="VB">
            ' Create a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates lab color space
            Dim calGrayCS As PdfLabColorSpace = New PdfLabColorSpace()
            calGrayCS.Range = New Double() { 0.2, 1, 0.8, 23.5 }
            calGrayCS.WhitePoint = New Double() { 0.2, 1, 0.8 }
            ' Create lab color
            Dim labColor As PdfLabColor = New PdfLabColor(calGrayCS)
            labColor.L = 90
            labColor.A = 0.5
            labColor.B = 20
            Dim pen As PdfPen = New PdfPen(labColor)
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("LabColor.pdf")
            </code>
            </example>            
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfLabColor"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfSeparationColor">
            <summary>
            Represents a separation color, based on a separation colorspace. 
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates ExponentialInterpolationFunction function
            PdfExponentialInterpolationFunction function = new PdfExponentialInterpolationFunction(true);
            float[] numArray = new float[4];
            numArray[0] = 0.38f;
            numArray[1] = 0.88f;
            function.C1 = numArray;
            // Creates SeparationColorSpace
            PdfSeparationColorSpace colorspace = new PdfSeparationColorSpace();
            colorspace.TintTransform = function;
            colorspace.Colorant = "PANTONE Orange 021 C";
            PdfSeparationColor color = new PdfSeparationColor(colorspace);
            color.Tint = 0.7;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);    
            doc.Save("SeparationColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates ExponentialInterpolationFunction function
            Dim [function] As PdfExponentialInterpolationFunction = New PdfExponentialInterpolationFunction(True)
            Dim numArray() As Single = New Single(3){}
            numArray(0) = 0.38f
            numArray(1) = 0.88f
            [function].C1 = numArray
            ' Creates SeparationColorSpace
            Dim colorspace As PdfSeparationColorSpace = New PdfSeparationColorSpace()
            colorspace.TintTransform = [function]
            colorspace.Colorant = "PANTONE Orange 021 C"
            Dim color As PdfSeparationColor = New PdfSeparationColor(colorspace)
            color.Tint = 0.7
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("SeparationColor.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfSeparationColor.m_tint">
            <summary>
            Local variable to store the tint value.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfSeparationColor.#ctor(Syncfusion.Pdf.ColorSpace.PdfColorSpaces)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.ColorSpace.PdfSeparationColor"/> class.
            </summary>
            <param name="colorspace">The colorspace.</param>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates ExponentialInterpolationFunction function
            PdfExponentialInterpolationFunction function = new PdfExponentialInterpolationFunction(true);
            float[] numArray = new float[4];
            numArray[0] = 0.38f;
            numArray[1] = 0.88f;
            function.C1 = numArray;
            // Creates SeparationColorSpace
            PdfSeparationColorSpace colorspace = new PdfSeparationColorSpace();
            colorspace.TintTransform = function;
            colorspace.Colorant = "PANTONE Orange 021 C";
            PdfSeparationColor color = new PdfSeparationColor(colorspace);
            color.Tint = 0.7;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);    
            doc.Save("SeparationColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates ExponentialInterpolationFunction function
            Dim [function] As PdfExponentialInterpolationFunction = New PdfExponentialInterpolationFunction(True)
            Dim numArray() As Single = New Single(3){}
            numArray(0) = 0.38f
            numArray(1) = 0.88f
            [function].C1 = numArray
            ' Creates SeparationColorSpace
            Dim colorspace As PdfSeparationColorSpace = New PdfSeparationColorSpace()
            colorspace.TintTransform = [function]
            colorspace.Colorant = "PANTONE Orange 021 C"
            Dim color As PdfSeparationColor = New PdfSeparationColor(colorspace)
            color.Tint = 0.7
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("SeparationColor.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfSeparationColor.Tint">
            <summary>
            Gets or sets the Tint Value.
            </summary>
            <value>A float value specifying the tint of this color.</value>
            <remarks>The acceptable range for this value is [0.0 1.0]. 0.0 means the lightest color that can be achieved, and 1.0 means the darkest color.</remarks>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates ExponentialInterpolationFunction function
            PdfExponentialInterpolationFunction function = new PdfExponentialInterpolationFunction(true);
            float[] numArray = new float[4];
            numArray[0] = 0.38f;
            numArray[1] = 0.88f;
            function.C1 = numArray;
            // Creates SeparationColorSpace
            PdfSeparationColorSpace colorspace = new PdfSeparationColorSpace();
            colorspace.TintTransform = function;
            colorspace.Colorant = "PANTONE Orange 021 C";
            PdfSeparationColor color = new PdfSeparationColor(colorspace);
            color.Tint = 0.7;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);    
            doc.Save("SeparationColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates ExponentialInterpolationFunction function
            Dim [function] As PdfExponentialInterpolationFunction = New PdfExponentialInterpolationFunction(True)
            Dim numArray() As Single = New Single(3){}
            numArray(0) = 0.38f
            numArray(1) = 0.88f
            [function].C1 = numArray
            ' Creates SeparationColorSpace
            Dim colorspace As PdfSeparationColorSpace = New PdfSeparationColorSpace()
            colorspace.TintTransform = [function]
            colorspace.Colorant = "PANTONE Orange 021 C"
            Dim color As PdfSeparationColor = New PdfSeparationColor(colorspace)
            color.Tint = 0.7
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("SeparationColor.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfExtendedColor"/> Class      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace">
            <summary>
            Represents a separation colorspace
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates ExponentialInterpolationFunction function
            PdfExponentialInterpolationFunction function = new PdfExponentialInterpolationFunction(true);
            float[] numArray = new float[4];
            numArray[0] = 0.38f;
            numArray[1] = 0.88f;
            function.C1 = numArray;
            // Creates SeparationColorSpace
            PdfSeparationColorSpace colorspace = new PdfSeparationColorSpace();
            colorspace.TintTransform = function;
            colorspace.Colorant = "PANTONE Orange 021 C";
            PdfSeparationColor color = new PdfSeparationColor(colorspace);
            color.Tint = 0.7;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);    
            doc.Save("SeparationColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates ExponentialInterpolationFunction function
            Dim [function] As PdfExponentialInterpolationFunction = New PdfExponentialInterpolationFunction(True)
            Dim numArray() As Single = New Single(3){}
            numArray(0) = 0.38f
            numArray(1) = 0.88f
            [function].C1 = numArray
            ' Creates SeparationColorSpace
            Dim colorspace As PdfSeparationColorSpace = New PdfSeparationColorSpace()
            colorspace.TintTransform = [function]
            colorspace.Colorant = "PANTONE Orange 021 C"
            Dim color As PdfSeparationColor = New PdfSeparationColor(colorspace)
            color.Tint = 0.7
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("SeparationColor.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfSeparationColor"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class   
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace.m_colorant">
            <summary>
            Local variable to store the Coloring.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace.m_function">
            <summary>
            Local variable to store teh Pdffuncion.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace.m_stream">
            <summary>
            Local variable to store the internal stream.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace.m_alterantecolorspaces">
            <summary>
            Local variable to store the Alternative Colorspaces.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace"/> class.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates ExponentialInterpolationFunction function
            PdfExponentialInterpolationFunction function = new PdfExponentialInterpolationFunction(true);
            float[] numArray = new float[4];
            numArray[0] = 0.38f;
            numArray[1] = 0.88f;
            function.C1 = numArray;
            // Creates SeparationColorSpace
            PdfSeparationColorSpace colorspace = new PdfSeparationColorSpace();
            colorspace.TintTransform = function;
            colorspace.Colorant = "PANTONE Orange 021 C";
            PdfSeparationColor color = new PdfSeparationColor(colorspace);
            color.Tint = 0.7;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);    
            doc.Save("SeparationColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates ExponentialInterpolationFunction function
            Dim [function] As PdfExponentialInterpolationFunction = New PdfExponentialInterpolationFunction(True)
            Dim numArray() As Single = New Single(3){}
            numArray(0) = 0.38f
            numArray(1) = 0.88f
            [function].C1 = numArray
            ' Creates SeparationColorSpace
            Dim colorspace As PdfSeparationColorSpace = New PdfSeparationColorSpace()
            colorspace.TintTransform = [function]
            colorspace.Colorant = "PANTONE Orange 021 C"
            Dim color As PdfSeparationColor = New PdfSeparationColor(colorspace)
            color.Tint = 0.7
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("SeparationColor.pdf")
            </code>
            </example>        
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfSeparationColor"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace.GetProfileData">
            <summary>
            Get the profile data.
            </summary>
            <returns>The profile data</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace.Save">
            <summary>
            Saves an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace.Initialize">
            <summary>
            Initializes the PdfICCBased Colorspace.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace.CreateInternals">
            <summary>
            Creates PdfCalGray ColorSpace Array
            </summary>
            <returns>PdfCalGray's ColorSpace Array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace.Stream_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Stream control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace.AlternateColorSpaces">
            <summary>
            Gets or sets the alternate color spaces.
            </summary>
            <value>The alternate color space to be used when the destination device does not support separation colorspace.</value>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates ExponentialInterpolationFunction function
            PdfExponentialInterpolationFunction function = new PdfExponentialInterpolationFunction(true);
            float[] numArray = new float[4];
            numArray[0] = 0.38f;
            numArray[1] = 0.88f;
            function.C1 = numArray;
            // Creates SeparationColorSpace
            PdfSeparationColorSpace colorspace = new PdfSeparationColorSpace();
            colorspace.AlternateColorSpaces = new PdfDeviceColorSpace(PdfColorSpace.GrayScale);          
            colorspace.TintTransform = function;
            colorspace.Colorant = "PANTONE Orange 021 C";
            PdfSeparationColor color = new PdfSeparationColor(colorspace);
            color.Tint = 0.7;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);    
            doc.Save("SeparationColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates ExponentialInterpolationFunction function
            Dim [function] As PdfExponentialInterpolationFunction = New PdfExponentialInterpolationFunction(True)
            Dim numArray() As Single = New Single(3){}
            numArray(0) = 0.38f
            numArray(1) = 0.88f
            [function].C1 = numArray
            ' Creates SeparationColorSpace
            Dim colorspace As PdfSeparationColorSpace = New PdfSeparationColorSpace()
            colorspace.AlternateColorSpaces = New PdfDeviceColorSpace(PdfColorSpace.GrayScale)
            colorspace.TintTransform = [function]
            colorspace.Colorant = "PANTONE Orange 021 C"
            Dim color As PdfSeparationColor = New PdfSeparationColor(colorspace)
            color.Tint = 0.7
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("SeparationColor.pdf")
            </code>
            </example>      
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfSeparationColor"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace.Colorant">
            <summary>
            Gets or sets the colorant represented by this separation colorspace. 
            </summary>
            <value>The name of the colorant.</value>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates ExponentialInterpolationFunction function
            PdfExponentialInterpolationFunction function = new PdfExponentialInterpolationFunction(true);
            float[] numArray = new float[4];
            numArray[0] = 0.38f;
            numArray[1] = 0.88f;
            function.C1 = numArray;
            // Creates SeparationColorSpace
            PdfSeparationColorSpace colorspace = new PdfSeparationColorSpace();
            colorspace.AlternateColorSpaces = new PdfDeviceColorSpace(PdfColorSpace.GrayScale);          
            colorspace.TintTransform = function;
            colorspace.Colorant = "PANTONE Orange 021 C";
            PdfSeparationColor color = new PdfSeparationColor(colorspace);
            color.Tint = 0.7;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);    
            doc.Save("SeparationColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates ExponentialInterpolationFunction function
            Dim [function] As PdfExponentialInterpolationFunction = New PdfExponentialInterpolationFunction(True)
            Dim numArray() As Single = New Single(3){}
            numArray(0) = 0.38f
            numArray(1) = 0.88f
            [function].C1 = numArray
            ' Creates SeparationColorSpace
            Dim colorspace As PdfSeparationColorSpace = New PdfSeparationColorSpace()
            colorspace.AlternateColorSpaces = New PdfDeviceColorSpace(PdfColorSpace.GrayScale)
            colorspace.TintTransform = [function]
            colorspace.Colorant = "PANTONE Orange 021 C"
            Dim color As PdfSeparationColor = New PdfSeparationColor(colorspace)
            color.Tint = 0.7
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("SeparationColor.pdf")
            </code>
            </example>        
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfSeparationColor"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.ColorSpace.PdfSeparationColorSpace.TintTransform">
            <summary>
            Gets or sets the tint transform function for the this colorspace. 
            </summary>
            <value>Tint transform function for the colorspace.</value>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates ExponentialInterpolationFunction function
            PdfExponentialInterpolationFunction function = new PdfExponentialInterpolationFunction(true);
            float[] numArray = new float[4];
            numArray[0] = 0.38f;
            numArray[1] = 0.88f;
            function.C1 = numArray;
            // Creates SeparationColorSpace
            PdfSeparationColorSpace colorspace = new PdfSeparationColorSpace();
            colorspace.AlternateColorSpaces = new PdfDeviceColorSpace(PdfColorSpace.GrayScale);          
            colorspace.TintTransform = function;
            colorspace.Colorant = "PANTONE Orange 021 C";
            PdfSeparationColor color = new PdfSeparationColor(colorspace);
            color.Tint = 0.7;
            RectangleF rect = new RectangleF(20, 70, 200, 100);
            PdfPen pen = new PdfPen(color);
            page.Graphics.DrawRectangle(pen, rect);    
            doc.Save("SeparationColor.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates ExponentialInterpolationFunction function
            Dim [function] As PdfExponentialInterpolationFunction = New PdfExponentialInterpolationFunction(True)
            Dim numArray() As Single = New Single(3){}
            numArray(0) = 0.38f
            numArray(1) = 0.88f
            [function].C1 = numArray
            ' Creates SeparationColorSpace
            Dim colorspace As PdfSeparationColorSpace = New PdfSeparationColorSpace()
            colorspace.AlternateColorSpaces = New PdfDeviceColorSpace(PdfColorSpace.GrayScale)
            colorspace.TintTransform = [function]
            colorspace.Colorant = "PANTONE Orange 021 C"
            Dim color As PdfSeparationColor = New PdfSeparationColor(colorspace)
            color.Tint = 0.7
            Dim rect As RectangleF = New RectangleF(20, 70, 200, 100)
            Dim pen As PdfPen = New PdfPen(color)
            page.Graphics.DrawRectangle(pen, rect)
            doc.Save("SeparationColor.pdf")
            </code>
            </example>        
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfSeparationColor"/> Class            
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfPen"/> Class
            <seealso cref="T:Syncfusion.Pdf.ColorSpace.PdfColorSpaces"/> Class 
        </member>
        <member name="T:Syncfusion.Pdf.Compression.DefaultCompressor">
            <summary>
            Class for default compressor. Default compressor does not
            compress data.
            </summary>
            <property name="flag" value="Finished"/>
        </member>
        <member name="T:Syncfusion.Pdf.Compression.IPdfCompressor">
            <property name="flag" value="Finished" />
            <summary>
            Summary description of IPDFCompressor.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.IPdfCompressor.Compress(System.Byte[])">
            <property name="flag" value="Finished" />
            <summary>
            Compresses bytes data.
            </summary>
            <param name="data">Bytes data.</param>
            <returns>
            Compressed bytes data.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.IPdfCompressor.Compress(System.String)">
            <property name="flag" value="Finished" />
            <summary>
            Compresses string data.
            </summary>
            <param name="data">String data.</param>
            <returns>
            Compressed string data.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.IPdfCompressor.Compress(System.IO.Stream)">
            <property name="flag" value="Finished" />
            <summary>
            Compresses stream data.
            </summary>
            <param name="inputStream">Stream data.</param>
            <returns>
            Compressed streams data.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.IPdfCompressor.Decompress(System.String)">
            <property name="flag" value="Finished" />
            <summary>
            Decompresses string data.
            </summary>
            <param name="value">String data.</param>
            <returns>
            Decompressed bytes data.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.IPdfCompressor.Decompress(System.Byte[])">
            <property name="flag" value="Finished" />
            <summary>
            Decompresses bytes data.
            </summary>
            <param name="value">Bytes data.</param>
            <returns>
            Decompressed bytes data.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.IPdfCompressor.Decompress(System.IO.Stream)">
            <property name="flag" value="Finished" />
            <summary>
            Decompresses stream data.
            </summary>
            <param name="inputStream">Stream data.</param>
            <returns>
            Decompressed stream data.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.Compression.IPdfCompressor.Type">
            <property name="flag" value="Finished" />
            <summary>
            Gets the compressor type.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Compression.IPdfCompressor.Name">
            <property name="flag" value="Finished" />
            <summary>
            Gets the compressor name in PDF format.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.DefaultCompressor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Compression.DefaultCompressor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.DefaultCompressor.Compress(System.Byte[])">
            <summary>
            Compresses bytes data.
            </summary>
            <param name="data">Bytes data that should be compressed.</param>
            <returns>Compressed bytes data.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.DefaultCompressor.Compress(System.IO.Stream)">
            <summary>
            Compresses stream data.
            </summary>
            <param name="inputStream">Stream data that should be
            compressed.</param>
            <returns>Compressed streams data.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.DefaultCompressor.Compress(System.String)">
            <summary>
            Compresses string data.
            </summary>
            <param name="data">String data that should be compressed.</param>
            <returns>Compressed string data.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.DefaultCompressor.Decompress(System.String)">
            <summary>
            Decompresses string data.
            </summary>
            <param name="value">String data that should be decompressed.</param>
            <returns>Decompressed bytes data.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.DefaultCompressor.Decompress(System.Byte[])">
            <summary>
            Decompresses bytes data.
            </summary>
            <param name="value">Bytes data that should be decompressed.</param>
            <returns>Decompressed bytes data.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.DefaultCompressor.Decompress(System.IO.Stream)">
            <summary>
            Decompresses stream data.
            </summary>
            <param name="inputStream">Stream data that should be
            decompressed.</param>
            <returns>Decompressed stream data.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Syncfusion.Pdf.Compression.DefaultCompressor.Name">
            <summary>
            Gets the name of the compressor in PDF format.
            </summary>
            <value></value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Syncfusion.Pdf.Compression.DefaultCompressor.Type">
            <summary>
            Gets the type of the compressor.
            </summary>
            <value></value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="T:Syncfusion.Pdf.Compression.PdfASCII85Compressor">
            <summary>
            Compresses data using the ASCII85 compression
            method, reproducing the original text or binary data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfASCII85Compressor.m_asciiOffset">
            <summary>
            Internal variable contains the ascii offset.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfASCII85Compressor.m_encodedBlock">
            <summary>
            Internal variable contains the encoded block.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfASCII85Compressor.m_decodedBlock">
            <summary>
            Internal variable contains the decoded block.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfASCII85Compressor.m_tuple">
            <summary>
            Internal variable.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfASCII85Compressor.m_codeTable">
            <summary>
            The code Table.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfASCII85Compressor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Compression.PdfASCII85Compressor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfASCII85Compressor.Decompress(System.Byte[],System.IO.Stream)">
            <summary>
            Decompresses the specified input data.
            </summary>
            <param name="inputData">The input data.</param>
            <param name="outputData">The output data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfASCII85Compressor.Compress(System.Byte[])">
            <summary>
            Compresses bytes data.
            </summary>
            <param name="data">Bytes data to be compressed.</param>
            <returns>Compressed bytes data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfASCII85Compressor.Compress(System.String)">
            <summary>
            Compresses string data.
            </summary>
            <param name="data">String data to be compressed.</param>
            <returns>Compressed string data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfASCII85Compressor.Compress(System.IO.Stream)">
            <summary>
            Compresses stream data.
            </summary>
            <param name="inputStream">Stream data to be compressed.</param>
            <returns>Compressed streams data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfASCII85Compressor.Decompress(System.String)">
            <summary>
            Decompresses string data.
            </summary>
            <param name="value">String data to be decompressed.</param>
            <returns>Decompressed bytes data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfASCII85Compressor.Decompress(System.Byte[])">
            <summary>
            Decompresses bytes data.
            </summary>
            <param name="value">Bytes data to be decompressed.</param>
            <returns>decompressed bytes data</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfASCII85Compressor.Decompress(System.IO.Stream)">
            <summary>
            Decompresses stream data.
            </summary>
            <param name="inputStream">Stream data to be decompressed.</param>
            <returns>Decompressed stream data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfASCII85Compressor.DecodeBlock">
            <summary>
            Decodes the block.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfASCII85Compressor.DecodeBlock(System.Int32)">
            <summary>
            Decodes the block.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Compression.PdfASCII85Compressor.Type">
            <summary>
            Gets the Type of the compressor.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Pdf.Compression.PdfASCII85Compressor.Name">
            <summary>
            Gets name of compressor in PDF format.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Compression.PdfCcittEncoder">
            <summary>
            Encodes data to CCITT format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.c_G3code_Eol">
            <summary>
            End of line.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.c_G3code_Invalid">
            <summary>
            Invalide data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.c_G3code_Eof">
            <summary>
            End of input data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.c_G3code_Incomp">
            <summary>
            Incomplete run code.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.c_Length">
            <summary>
            Bit length of g3 code.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.c_Code">
            <summary>
            G3 code.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.c_Runlen">
            <summary>
            Run length in bits.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.c_Eol">
            <summary>
            EOL code value - 0000 0000 0000 1.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.s_tableZeroSpan">
            <summary>
            Holds table zero span.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.s_tableOneSpan">
            <summary>
            Holds table one span.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.s_terminatingWhiteCodes">
            <summary>
            Holds terminating white codes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.s_terminatingBlackCodes">
            <summary>
            Holds terminating black codes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.s_horizontalTabel">
            <summary>
            001
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.s_passcode">
            <summary>
            0001
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.s_maskTabel">
            <summary>
            holds mask table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.s_verticalTable">
            <summary>
            Holds vertical table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.m_rowbytes">
            <summary>
            Holds row bytes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.m_rowPixels">
            <summary>
            Holds row pixels.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.m_countBit">
            <summary>
            Holds bit count.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.m_data">
            <summary>
            Holds data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.m_refline">
            <summary>
            Holds reference line.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.m_outBuf">
            <summary>
            Holds out buffer array list.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.m_imageData">
            <summary>
            Holds image data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfCcittEncoder.m_offsetData">
            <summary>
            Holds offset data.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Compression.PdfCcittEncoder"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.#cctor">
            <summary>
            Initializes the <see cref="T:Syncfusion.Pdf.Compression.PdfCcittEncoder"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.EncodeData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes the image.
            </summary>
            <param name="data">The image data.</param>
            <param name="width">The image width.</param>
            <param name="height">The image height.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.CreateVerticalTable">
            <summary>
            Creates ccitt vertical table.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.CreteTableZeroSpan">
            <summary>
            Creates ccitt zero span.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.CreteTableOneSpan">
            <summary>
            Creates citt one span.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.CreateTerminatingWhiteCodes">
            <summary>
            Creates terminating white codes.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.CreateTerminatingBlackCodes">
            <summary>
            Creates terminating black codes.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.Putcode(System.Int32[])">
            <summary>
            Putcodes the specified table.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.PutSpan(System.Int32,System.Int32[][])">
            <summary>
            Putspans the specified span.
            </summary>
            <param name="span">The span.</param>
            <param name="tab">The tab.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.PutBits(System.Int32,System.Int32)">
            <summary>
            Puts the bits.
            </summary>
            <param name="bits">The bits.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.Fax3Encode">
            <summary>
            Implements Fax3Encode.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.Fax4Encode">
            <summary>
            Implements Fax4Encode.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.Pixel(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pixels the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="bit">The bit.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.FindFirstSpan(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the first span.
            </summary>
            <param name="bp">The bp.</param>
            <param name="offset">The offset.</param>
            <param name="bs">The bs.</param>
            <param name="be">The be.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.FindZeroSpan(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the zero span.
            </summary>
            <param name="bp">The bp.</param>
            <param name="offset">The offset.</param>
            <param name="bs">The bs.</param>
            <param name="be">The be.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.Finddiff(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Finddiffs the specified bp.
            </summary>
            <param name="bp">The bp.</param>
            <param name="offset">The offset.</param>
            <param name="bs">The bs.</param>
            <param name="be">The be.</param>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfCcittEncoder.Finddiff2(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Finddiff2s the specified bp.
            </summary>
            <param name="bp">The bp.</param>
            <param name="offset">The offset.</param>
            <param name="bs">The bs.</param>
            <param name="be">The be.</param>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Pdf.Compression.PdfLzwCompressor">
            <summary>
            Compresses data using the LZW compression
            method, reproducing the original text or binary data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.c_eod">
            <summary>
            EndOfData marker.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.c_clearTable">
            <summary>
            Clear-table marker.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.c_startCode">
            <summary>
            Start code marker.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.c_10BitsCode">
            <summary>
            The marker to set the dictionary to 10 bits code length.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.c_11BitsCode">
            <summary>
            The marker to set the dictionary to 11 bits code length
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.c_12BitsCode">
            <summary>
            The marker to set the dictionary to 12 bits code length
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.m_codeTable">
            <summary>
            Table for codes (dictionary).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.m_inputData">
            <summary>
            Input data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.m_outputData">
            <summary>
            Output data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.m_tableIndex">
            <summary>
            Table index.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.m_bitsToGet">
            <summary>
            The number of bits per code.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.m_byteRead">
            <summary>
            Byte read.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.m_nextData">
            <summary>
            Next data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.m_nextBits">
            <summary>
            Nex bits.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfLzwCompressor.m_sizeTable">
            <summary>
            The size of the table.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfLzwCompressor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Compression.PdfLzwCompressor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfLzwCompressor.Decompress(System.Byte[],System.IO.Stream)">
            <summary>
            Decompresses the specified input data.
            </summary>
            <param name="inputData">The input data.</param>
            <param name="outputData">The output data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfLzwCompressor.Compress(System.Byte[])">
            <summary>
            Compresses bytes data.
            </summary>
            <param name="data">Bytes data to be compressed.</param>
            <returns>Compressed bytes data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfLzwCompressor.Compress(System.String)">
            <summary>
            Compresses string data.
            </summary>
            <param name="data">String data to be compressed.</param>
            <returns>Compressed string data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfLzwCompressor.Compress(System.IO.Stream)">
            <summary>
            Compresses stream data.
            </summary>
            <param name="inputStream">Stream data to be compressed.</param>
            <returns>Compressed streams data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfLzwCompressor.Decompress(System.String)">
            <summary>
            Decompresses string data.
            </summary>
            <param name="value">String data to be decompressed.</param>
            <returns>Decompressed bytes data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfLzwCompressor.Decompress(System.Byte[])">
            <summary>
            Decompresses bytes data.
            </summary>
            <param name="value">Bytes data to be decompressed.</param>
            <returns>decompressed bytes data</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfLzwCompressor.Decompress(System.IO.Stream)">
            <summary>
            Decompresses stream data.
            </summary>
            <param name="inputStream">Stream data to be decompressed.</param>
            <returns>Decompressed stream data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfLzwCompressor.InitializeDataTable">
            <summary>
            Initializes the data table.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfLzwCompressor.WriteCode(System.Byte[])">
            <summary>
            Writes the code to output stream.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfLzwCompressor.AddCodeToTable(System.Byte[],System.Byte)">
            <summary>
            Adds the code to table.
            </summary>
            <param name="oldBytes">The old bytes.</param>
            <param name="newByte">The new byte.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfLzwCompressor.AddCodeToTable(System.Byte[])">
            <summary>
            Adds the code to table.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfLzwCompressor.UniteBytes(System.Byte[],System.Byte)">
            <summary>
            Add new data to the olddata array.
            </summary>
            <param name="oldData">The old data.</param>
            <param name="newData">The new data.</param>
            <returns>Result data array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfLzwCompressor.NewCode">
            <summary>
            News the code.
            </summary>
            <returns>code</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Compression.PdfLzwCompressor.Type">
            <summary>
            Gets the Type of the compressor.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Pdf.Compression.PdfLzwCompressor.Name">
            <summary>
            Gets name of compressor in PDF format.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Compression.PdfPngFilter">
            <summary>
            PdfPngFilter provides methods that allows to restore original data
            being modified by similar filter or modify data to better compression ratio.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfPngFilter.m_zero">
            <summary>
            Required for type cast.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfPngFilter.s_subFilter">
            <summary>
            Delegate for the sub filter.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfPngFilter.s_upFilter">
            <summary>
            Delegate for the up filter.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfPngFilter.s_averageFilter">
            <summary>
            Delegate for the average filter.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfPngFilter.s_paethFilter">
            <summary>
            Delegate for the Paeth filter.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfPngFilter.s_decompressFilter">
            <summary>
            Delegate for the restore filter.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfPngFilter.Compress(System.Byte[],System.Int32,Syncfusion.Pdf.Compression.PdfPngFilter.Type)">
            <summary>
            Modifies the data by the filter of type 'type'.
            </summary>
            <param name="data">The data to modify.</param>
            <param name="bpr">Bytes per row.</param>
            <param name="type">The type of the filter.</param>
            <returns>The modified data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfPngFilter.Decompress(System.Byte[],System.Int32)">
            <summary>
            Retrieves the original data from the modified.
            </summary>
            <param name="data">The modified data.</param>
            <param name="bpr">Bytes per row.</param>
            <returns>The original data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfPngFilter.Modify(System.Byte[],System.Int32,Syncfusion.Pdf.Compression.PdfPngFilter.RowFilter,System.Boolean)">
            <summary>
            Performs actual compression or decompression.
            </summary>
            <param name="data">The original data buffer.</param>
            <param name="bpr">The BPR.</param>
            <param name="filter">The filter.</param>
            <param name="pack">if it is pack, set to <c>true</c></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfPngFilter.CompressSub(System.Byte[],System.Int64,System.Int32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Modifies a row by the Sub algorithm.
            </summary>
            <param name="data">The original data buffer.</param>
            <param name="inIndex">The current row index within the original buffer.</param>
            <param name="inBPR">The byte-per-row value of the original buffer.</param>
            <param name="result">The result data buffer.</param>
            <param name="resIndex">The current row index within the result buffer.</param>
            <param name="resBPR">The byte-per-row value of the result buffer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfPngFilter.CompressUp(System.Byte[],System.Int64,System.Int32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Modifies a row by the Up algorithm.
            </summary>
            <param name="data">The original data buffer.</param>
            <param name="inIndex">The current row index within the original buffer.</param>
            <param name="inBPR">The byte-per-row value of the original buffer.</param>
            <param name="result">The result data buffer.</param>
            <param name="resIndex">The current row index within the result buffer.</param>
            <param name="resBPR">The byte-per-row value of the result buffer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfPngFilter.CompressAverage(System.Byte[],System.Int64,System.Int32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Modifies a row by the Average algorithm.
            </summary>
            <param name="data">The original data buffer.</param>
            <param name="inIndex">The current row index within the original buffer.</param>
            <param name="inBPR">The byte-per-row value of the original buffer.</param>
            <param name="result">The result data buffer.</param>
            <param name="resIndex">The current row index within the result buffer.</param>
            <param name="resBPR">The byte-per-row value of the result buffer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfPngFilter.CompressPaeth(System.Byte[],System.Int64,System.Int32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Modifies a row by the Paeth algorithm.
            </summary>
            <param name="data">The original data buffer.</param>
            <param name="inIndex">The current row index within the original buffer.</param>
            <param name="inBPR">The byte-per-row value of the original buffer.</param>
            <param name="result">The result data buffer.</param>
            <param name="resIndex">The current row index within the result buffer.</param>
            <param name="resBPR">The byte-per-row value of the result buffer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfPngFilter.Decompress(System.Byte[],System.Int64,System.Int32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Retrieves original data for a single row.
            </summary>
            <param name="data">The original data buffer.</param>
            <param name="inIndex">The current row index within the original buffer.</param>
            <param name="inBPR">The byte-per-row value of the original buffer.</param>
            <param name="result">The result data buffer.</param>
            <param name="resIndex">The current row index within the result buffer.</param>
            <param name="resBPR">The byte-per-row value of the result buffer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfPngFilter.DecompressNone(System.Byte[],System.Int64,System.Int32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Decompresses a row using none filter.
            </summary>
            <param name="data">The original data buffer.</param>
            <param name="inIndex">The current row index within the original buffer.</param>
            <param name="inBPR">The byte-per-row value of the original buffer.</param>
            <param name="result">The result data buffer.</param>
            <param name="resIndex">The current row index within the result buffer.</param>
            <param name="resBPR">The byte-per-row value of the result buffer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfPngFilter.DeompressSub(System.Byte[],System.Int64,System.Int32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Decompresses a row using the Sub filter.
            </summary>
            <param name="data">The original data buffer.</param>
            <param name="inIndex">The current row index within the original buffer.</param>
            <param name="inBPR">The byte-per-row value of the original buffer.</param>
            <param name="result">The result data buffer.</param>
            <param name="resIndex">The current row index within the result buffer.</param>
            <param name="resBPR">The byte-per-row value of the result buffer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfPngFilter.DecompressUp(System.Byte[],System.Int64,System.Int32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Decompresses a row compressed by the Up filter.
            </summary>
            <param name="data">The original data buffer.</param>
            <param name="inIndex">The current row index within the original buffer.</param>
            <param name="inBPR">The byte-per-row value of the original buffer.</param>
            <param name="result">The result data buffer.</param>
            <param name="resIndex">The current row index within the result buffer.</param>
            <param name="resBPR">The byte-per-row value of the result buffer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfPngFilter.DecompressAverage(System.Byte[],System.Int64,System.Int32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Decompress a row compressed by the Average algorithm.
            </summary>
            <param name="data">The original data buffer.</param>
            <param name="inIndex">The current row index within the original buffer.</param>
            <param name="inBPR">The byte-per-row value of the original buffer.</param>
            <param name="result">The result data buffer.</param>
            <param name="resIndex">The current row index within the result buffer.</param>
            <param name="resBPR">The byte-per-row value of the result buffer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfPngFilter.DecompressPaeth(System.Byte[],System.Int64,System.Int32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Unpacks a row packed by the Paeth algorithm.
            </summary>
            <param name="data">The original data buffer.</param>
            <param name="inIndex">The current row index within the original buffer.</param>
            <param name="inBPR">The byte-per-row value of the original buffer.</param>
            <param name="result">The result data buffer.</param>
            <param name="resIndex">The current row index within the result buffer.</param>
            <param name="resBPR">The byte-per-row value of the result buffer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfPngFilter.PaethPredictor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns the Paeth predictor.
            </summary>
            <param name="a">Left pixel.</param>
            <param name="b">Above pixel.</param>
            <param name="c">Upper left pixel.</param>
            <returns>The value of the Paeth predictor.</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Compression.PdfPngFilter.Type">
            <summary>
            Defines Png Filtern Type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfPngFilter.Type.None">
            <summary>
             None compression.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfPngFilter.Type.Sub">
            <summary>
            Sub compression
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfPngFilter.Type.Up">
            <summary>
            Up compression
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfPngFilter.Type.Average">
            <summary>
            Average compression
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfPngFilter.Type.Paeth">
            <summary>
            Paeth compression
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Compression.PdfPngFilter.RowFilter">
            <summary>
            Used to call a row filter.
            </summary>
            <param name="data">The original data buffer.</param>
            <param name="inIndex">The current row index within the original buffer.</param>
            <param name="inBPR">The byte-per-row value of the original buffer.</param>
            <param name="result">The result data buffer.</param>
            <param name="resIndex">The current row index within the result buffer.</param>
            <param name="resBPR">The byte-per-row value of the result buffer.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Compression.PdfZlibCompressor">
            <summary>
            Compresses data using the zlib / deflate compression
            method, reproducing the original text or binary data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfZlibCompressor.DefaultBufferSize">
            <summary>
            Default buffer size for decompression.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfZlibCompressor.DefaultName">
            <summary>
            Name of the compressor.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Compression.PdfZlibCompressor.m_level">
            <summary>
            Level of compression.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfZlibCompressor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Compression.PdfZlibCompressor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfZlibCompressor.#ctor(Syncfusion.Pdf.PdfCompressionLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Compression.PdfZlibCompressor"/> class.
            </summary>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfZlibCompressor.Compress(System.Byte[])">
            <summary>
            Compresses bytes data.
            </summary>
            <param name="data">Bytes data to be compressed.</param>
            <returns>Compressed bytes data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfZlibCompressor.Compress(System.IO.Stream)">
            <summary>
            Compresses stream data.
            </summary>
            <param name="inputStream">Stream data.</param>
            <returns>Compressed streams data.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfZlibCompressor.Compress(System.String)">
            <summary>
            Compresses string data.
            </summary>
            <param name="data">String data to be compressed.</param>
            <returns>Compressed string data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfZlibCompressor.Decompress(System.String)">
            <summary>
            Decompresses string data.
            </summary>
            <param name="data">String data to be decompressed.</param>
            <returns>Decompressed bytes data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfZlibCompressor.Decompress(System.Byte[])">
            <summary>
            Decompresses bytes data.
            </summary>
            <param name="data">Bytes data to be decompressed.</param>
            <returns>Decompressed bytes data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Compression.PdfZlibCompressor.Decompress(System.IO.Stream)">
            <summary>
            Decompresses stream data.
            </summary>
            <param name="inputStream">Stream data to be decompressed.</param>
            <returns>Decompressed stream data.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Compression.PdfZlibCompressor.Name">
            <summary>
            Gets name of compressor in PDF format.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Compression.PdfZlibCompressor.Type">
            <summary>
            Gets type of compressor.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Compression.PdfZlibCompressor.Encoding">
            <summary>
            Gets encoding value for this compressor.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Compression.PdfZlibCompressor.Level">
            <summary>
            Gets or sets level of compression.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfCompressionLevel">
            <summary>
            Defines data compression level.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCompressionLevel.None">
            <property name="flag" value="Finished" />
            <summary>
            Pack without compression.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCompressionLevel.BestSpeed">
            <property name="flag" value="Finished" />
            <summary>
            Use high speed compression, reduce of data size is low.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCompressionLevel.BelowNormal">
            <property name="flag" value="Finished" />
            <summary>
            Something middle between normal and BestSpeed compressions.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCompressionLevel.Normal">
            <property name="flag" value="Finished" />
            <summary>
            Use normal compression, middle between speed and size.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCompressionLevel.AboveNormal">
            <property name="flag" value="Finished" />
            <summary>
            Pack better but require a little more time.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCompressionLevel.Best">
            <property name="flag" value="Finished" />
            <summary>
            Use best compression, slow enough.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.CompressionType">
            <property name="flag" value="Finished" />
            <summary>
            Enumerator that implements compression level.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.CompressionType.None">
            <property name="flag" value="Finished" />
            <summary>
            No compression.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.CompressionType.Zlib">
            <property name="flag" value="Finished" />
            <summary>
            Compresses data using the zlib or deflate compression method,
            reproducing the original text or binary data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.CompressionType.LZW">
            <property name="flag" value="Finished" />
            <summary>
            Compresses data using the LZW compression method, reproducing
            the original text or binary data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.CompressionType.ASCII85">
            <property name="flag" value="Finished" />
            <summary>
            Compresses data using the ASCII85 compression method, reproducing
            the original text or binary data.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.StreamFilters">
            <property name="flag" value="Finished" />
            <summary>
            Represents supported stream filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.StreamFilters.DCTDecode">
            <property name="flag" value="Finished" />
            <summary>
            Decompresses data encoded using a DCT (discrete cosine transform)
            technique based on the JPEG standard, reproducing image sample
            data that approximates the original data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.StreamFilters.FlateDecode">
            <property name="flag" value="Finished" />
            <summary>
            Decompresses data encoded using the zlib / deflate
            compression method, reproducing the original text or binary
            data.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAttachment">
            <summary>
            Represents attachments of the Pdf document.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification">
            <summary>
            Represents specification of embedded file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfFileSpecificationBase">
            <summary>
            Represents base class for file specification objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfFileSpecificationBase.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFileSpecificationBase.#ctor(System.String)">
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFileSpecificationBase.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFileSpecificationBase.Save">
            <summary>
            Saves an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFileSpecificationBase.FormatFileName(System.String,System.Boolean)">
            <summary>
            Formats file name to Unix format.
            </summary>
            <param name="fileName">File name to format.</param>
            <param name="flag">bool value which represents the file path type.</param>
            <returns>Formatted file name.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFileSpecificationBase.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the m_dictionary control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/>
            instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFileSpecificationBase.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFileSpecificationBase.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFileSpecificationBase.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.m_description">
            <summary>
            Internal variable to store description.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.m_embeddedFile">
            <summary>
            Embedded file instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.m_dictionary">
            <summary>
            Dictionary to store file specification properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.m_portfolioAttributes">
            <summary>
            PortfolioAttributes instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.#ctor(System.String)">
            <param name="fileName">file name</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.#ctor(System.String,System.Byte[])">
            <param name="fileName">Name of the file.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.#ctor(System.String,System.IO.Stream)">
            <param name="fileName">Name of the file.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.Save">
            <summary>
            Saves object state.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.FileName">
            <value></value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.MimeType">
            <summary>
            Gets or sets the MIME type of the embedded file.
            </summary>
            <value>The MIME type of the embedded file.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.CreationDate">
            <summary>
            Gets or sets creation date.
            </summary>
            <value>Creation date.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.ModificationDate">
            <summary>
            Gets or sets modification date.
            </summary>
            <value>Modification date.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfEmbeddedFileSpecification.PortfolioAttributes">
            <summary>
            Gets or sets the Portfolio attributes.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachment.#ctor(System.String)">
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachment.#ctor(System.String,System.Byte[])">
            <param name="fileName">Name of the file.</param>
            <param name="data">The data to be attached as a file.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachment.#ctor(System.String,System.IO.Stream)">
            <param name="fileName">Name of the file.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAttachmentCollection">
            <summary>
            Represents a collection of the attachment objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.m_array">
            <summary>
            Internal variable to store internal array of attachments.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.m_dictionary">
            <summary>
            Internal variable to store dictionary wrapper.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.dic">
            <summary>
            internal Variable to store filename and attachment.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.orderList">
            <summary>
            internal variable to store ordered filename.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.count">
            <summary>
            internal variable to store file count value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.m_CrossTable">
            <summary>
            store the cross table
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfAttachmentCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfAttachmentCollection"/> class.
            </summary>
            <param name="attachmentDictionary">The attachment dictionary.</param>
            <param name="table">The table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.Add(Syncfusion.Pdf.Interactive.PdfAttachment)">
            <summary>
            Adds the specified attachment.
            </summary>
            <param name="attachment">The attachment.</param>
            <returns>Position of the inserted attachment.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.Insert(System.Int32,Syncfusion.Pdf.Interactive.PdfAttachment)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="attachment">The attachment.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.Remove(Syncfusion.Pdf.Interactive.PdfAttachment)">
            <summary>
            Removes the specified attachment.
            </summary>
            <param name="attachment">The attachment.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes attachment at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.IndexOf(Syncfusion.Pdf.Interactive.PdfAttachment)">
            <summary>
            Indexes the of attachment.
            </summary>
            <param name="attachment">The attachment.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.Contains(Syncfusion.Pdf.Interactive.PdfAttachment)">
            <summary>
            Determines whether 
            </summary>
            <param name="attachment">The attachment.</param>
            <returns>
            if it contains the specified attachment, set to <c>true</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.DoAdd(Syncfusion.Pdf.Interactive.PdfAttachment)">
            <summary>
            Adds the attachment.
            </summary>
            <param name="attachment">The attachment.</param>
            <returns>The index of the attachment.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.DoInsert(System.Int32,Syncfusion.Pdf.Interactive.PdfAttachment)">
            <summary>
            Does the insert.
            </summary>
            <param name="index">The index.</param>
            <param name="attachment">The attachment.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.DoRemove(Syncfusion.Pdf.Interactive.PdfAttachment)">
            <summary>
            Removes the attachment.
            </summary>
            <param name="attachment">The attachment.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.DoRemoveAt(System.Int32)">
            <summary>
            Removes the attachment.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.DoClear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.Item(System.Int32)">
            <summary>
            Gets attachment by its index in the collection.
            </summary>
            <param name="index">Index of the attachment.</param>
            <returns>Attachment object by its index in the collection.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAttachmentCollection.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfAutomaticField">
            <summary>
            Represents a fields which is calculated before the document saves.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfGraphicsElement"/> Class    
        </member>
        <member name="F:Syncfusion.Pdf.PdfAutomaticField.m_bounds">
            <summary>
            Internal variable to store field's bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAutomaticField.m_font">
            <summary>
            Internal variable to store font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAutomaticField.m_brush">
            <summary>
            Internal variable to store brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAutomaticField.m_pen">
            <summary>
            Internal variable to store pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAutomaticField.m_stringFormat">
            <summary>
            Internal variable to store string format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAutomaticField.m_templateSize">
            <summary>
            Internal variable to store template size.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfAutomaticField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfAutomaticField"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfAutomaticField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfAutomaticField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticField.Draw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Single,System.Single)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="x">X co-ordinate of the element.</param>
            <param name="y">Y co-ordinate of the element.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticField.GetValue(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Gets the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticField.PerformDraw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Performs draw.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="location">The location.</param>
            <param name="scalingX">The scaling X.</param>
            <param name="scalingY">The scaling Y.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticField.GetSize">
            <summary>
            Gets the template size.
            </summary>
            <returns>The template size.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticField.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticField.GetBrush">
            <summary>
            Gets the brush. If brush is undefined default black brush will be used.
            </summary>
            <returns>The brush </returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticField.GetFont">
            <summary>
            Gets the font. If font is undefined default font will be used.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Pdf.PdfAutomaticField.Bounds">
            <summary>
            Gets or sets the bounds of the field.
            </summary>
            <value>The bounds value.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfAutomaticField.Size">
            <summary>
            Gets or sets the size of the field.
            </summary>
            <value>The size of the field.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfAutomaticField.Location">
            <summary>
            Gets or sets the location of the field.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfAutomaticField.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfAutomaticField.Brush">
            <summary>
            Gets or sets the brush.
            </summary>
            <value>The brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfAutomaticField.Pen">
            <summary>
            Gets or sets the pen.
            </summary>
            <value>The pen.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfAutomaticField.StringFormat">
            <summary>
            Gets or sets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="T:Syncfusion.Pdf.PdfAutomaticFieldInfo">
            <summary>
            Represents information about the automatic field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAutomaticFieldInfo.m_location">
            <summary>
            Internal variable to store location of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAutomaticFieldInfo.m_field">
            <summary>
            Internal variable to store field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAutomaticFieldInfo.m_scalingX">
            <summary>
            Internal variable to store x scaling factor.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAutomaticFieldInfo.m_scalingY">
            <summary>
            Internal variable to store y scaling factor.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticFieldInfo.#ctor(Syncfusion.Pdf.PdfAutomaticField,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfAutomaticFieldInfo"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticFieldInfo.#ctor(Syncfusion.Pdf.PdfAutomaticField,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfAutomaticFieldInfo"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="location">The location.</param>
            <param name="scalingX">The scaling X.</param>
            <param name="scalingY">The scaling Y.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticFieldInfo.#ctor(Syncfusion.Pdf.PdfAutomaticFieldInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfAutomaticFieldInfo"/> class.
            </summary>
            <param name="fieldInfo">The field info.</param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfAutomaticFieldInfo.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfAutomaticFieldInfo.Field">
            <summary>
            Gets or sets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfAutomaticFieldInfo.ScalingX">
            <summary>
            Gets or sets the scaling X factor.
            </summary>
            <value>The scaling X factor.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfAutomaticFieldInfo.ScalingY">
            <summary>
            Gets or sets the scaling Y factor.
            </summary>
            <value>The scaling Y factor.</value>
        </member>
        <member name="T:Syncfusion.Pdf.PdfAutomaticFieldInfoCollection">
            <summary>
            Represent a collection of automatic fields information.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class    
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticFieldInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfAutomaticFieldInfoCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfAutomaticFieldInfoCollection.Add(Syncfusion.Pdf.PdfAutomaticFieldInfo)">
            <summary>
            Adds the specified field info.
            </summary>
            <param name="fieldInfo">The field info.</param>
            <returns>field Info</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.PdfCompositeField" -->
        <member name="T:Syncfusion.Pdf.PdfMultipleValueField">
            <summary>
            Represents automatic field which has the same value within the <see cref="T:Syncfusion.Pdf.Graphics.PdfGraphics"/>
            </summary>
            <seealso cref="T:Syncfusion.Pdf.PdfDynamicField"/> Class  
        </member>
        <member name="T:Syncfusion.Pdf.PdfDynamicField">
            <summary>
            Represents automatic field which value is dynamically evaluated.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.PdfAutomaticField"/> Class  
        </member>
        <member name="M:Syncfusion.Pdf.PdfDynamicField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfDynamicField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDynamicField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfDynamicField"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDynamicField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfDynamicField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDynamicField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfDynamicField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDynamicField.GetPageFromGraphics(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Gets the page from a graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns>The proper PdfPage instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDynamicField.GetLoadedPageFromGraphics(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Gets the  Loaded page from a graphics.
            </summary>
            <param name="graphics">The graphics</param>
            <returns>The graphics</returns>
        </member>
        <member name="F:Syncfusion.Pdf.PdfMultipleValueField.m_list">
            <summary>
            Internal variable to store templates associated with the graphics.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfMultipleValueField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfMultipleValueField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfMultipleValueField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfMultipleValueField"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfMultipleValueField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfMultipleValueField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfMultipleValueField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfMultipleValueField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfMultipleValueField.PerformDraw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Performs draw.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="location">The location.</param>
            <param name="scalingX">The scaling X.</param>
            <param name="scalingY">The scaling Y.</param>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCompositeField.m_automaticFields">
            <summary>
            Internal variable to store list of automatic fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCompositeField.m_text">
            <summary>
            Internal variable to store value.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfCompositeField.#ctor" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfCompositeField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfCompositeField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfCompositeField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfCompositeField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush,System.String)" -->
        <member name="M:Syncfusion.Pdf.PdfCompositeField.#ctor(System.String,Syncfusion.Pdf.PdfAutomaticField[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfCompositeField"/> class.
            </summary>
            <param name="text">The wide-character string to be drawn.</param>
            <param name="list">The list of <see cref="T:Syncfusion.Pdf.PdfAutomaticField"/> objects.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCompositeField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.String,Syncfusion.Pdf.PdfAutomaticField[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfCompositeField"/> class.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="text">The wide-character string to be drawn.</param>
            <param name="list">The list of <see cref="T:Syncfusion.Pdf.PdfAutomaticField"/> objects.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCompositeField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush,System.String,Syncfusion.Pdf.PdfAutomaticField[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfCompositeField"/> class.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="brush">A <see cref="T:Syncfusion.Pdf.Graphics.PdfBrush"/> object that is used to fill the string. </param>
            <param name="text">The wide-character string to be drawn.</param>
            <param name="list">The list of <see cref="T:Syncfusion.Pdf.PdfAutomaticField"/> objects.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCompositeField.GetValue(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Gets the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns></returns>
            <exclude/>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.PdfCompositeField.Text" -->
        <member name="P:Syncfusion.Pdf.PdfCompositeField.AutomaticFields">
            <summary>
            Gets or sets the automatic fields.
            </summary>
            <value>The automatic fields.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.PdfCreationDateField" -->
        <member name="T:Syncfusion.Pdf.PdfSingleValueField">
            <summary>
            Represents automatic field which has the same value 
            in the whole document.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.PdfDynamicField"/> Class    
        </member>
        <member name="F:Syncfusion.Pdf.PdfSingleValueField.m_list">
            <summary>
            Internal variable to store templates associated with the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSingleValueField.m_painterGraphics">
            <summary>
            Internal variable to array of graphics.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSingleValueField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSingleValueField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSingleValueField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSingleValueField"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSingleValueField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSingleValueField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSingleValueField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSingleValueField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSingleValueField.PerformDraw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Performs draw.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="location">The location.</param>
            <param name="scalingX">The scaling X.</param>
            <param name="scalingY">The scaling Y.</param>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCreationDateField.m_formatString">
            <summary>
            Internal variable to store format of the date.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfCreationDateField.#ctor" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfCreationDateField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfCreationDateField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfCreationDateField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)" -->
        <member name="M:Syncfusion.Pdf.PdfCreationDateField.GetValue(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Gets the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns></returns>
            <exclude/>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.PdfCreationDateField.DateFormatString" -->
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.PdfDateTimeField" -->
        <member name="T:Syncfusion.Pdf.PdfStaticField">
            <summary>
            Represents automatic field which value can be evaluated in the moment of creation.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.PdfAutomaticField"/> Class    
        </member>
        <member name="F:Syncfusion.Pdf.PdfStaticField.m_template">
            <summary>
            Internal variable to store template of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfStaticField.m_graphicsList">
            <summary>
            Internal variable to store list of graphicses.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStaticField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfStaticField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStaticField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfStaticField"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStaticField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfStaticField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStaticField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfStaticField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStaticField.PerformDraw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Performs draw.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="location">The location.</param>
            <param name="scalingX">The scaling X.</param>
            <param name="scalingY">The scaling Y.</param>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDateTimeField.m_date">
            <summary>
            Internal variable to store date value of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDateTimeField.m_formatString">
            <summary>
            Internal variable to store format of the date.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfDateTimeField.#ctor" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfDateTimeField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfDateTimeField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfDateTimeField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)" -->
        <member name="M:Syncfusion.Pdf.PdfDateTimeField.GetValue(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Get the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns>value</returns>
            <exclude/>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.PdfDateTimeField.DateFormatString" -->
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.PdfDestinationPageNumberField" -->
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.PdfPageNumberField" -->
        <member name="T:Syncfusion.Pdf.PdfMultipleNumberValueField">
            <summary>
            Represents automatic field which has the same value within the <see cref="T:Syncfusion.Pdf.Graphics.PdfGraphics"/>
            </summary>
            <seealso cref="T:Syncfusion.Pdf.PdfMultipleValueField"/> Class   
        </member>
        <member name="F:Syncfusion.Pdf.PdfMultipleNumberValueField.m_numberStyle">
            <summary>
            Internal variable to store numbering style.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfMultipleNumberValueField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfMultipleNumberValueField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfMultipleNumberValueField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfMultipleNumberValueField"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfMultipleNumberValueField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfMultipleNumberValueField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfMultipleNumberValueField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfMultipleNumberValueField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfMultipleNumberValueField.NumberStyle">
            <summary>
            Gets or sets the number style.
            </summary>
            <value>The number style.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfPageNumberField.#ctor" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfPageNumberField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfPageNumberField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfPageNumberField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)" -->
        <member name="M:Syncfusion.Pdf.PdfPageNumberField.GetValue(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Gets the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns>result</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageNumberField.InternalGetValue(Syncfusion.Pdf.PdfPage)">
            <summary>
            Internal method to get value of the field.
            </summary>
            <param name="page">The page.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageNumberField.InternalLoadedGetValue(Syncfusion.Pdf.PdfLoadedPage)">
            <summary>
            Internal method to get value of the field.
            </summary>
            <param name="page">The page</param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDestinationPageNumberField.m_page">
            <summary>
            Internal variable to store destination page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDestinationPageNumberField.m_loadedPage">
            <summary>
            Internal variable to store the Loaded Page.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfDestinationPageNumberField.#ctor" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfDestinationPageNumberField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfDestinationPageNumberField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfDestinationPageNumberField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)" -->
        <member name="M:Syncfusion.Pdf.PdfDestinationPageNumberField.GetValue(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Gets the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.PdfDestinationPageNumberField.LoadedPage" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.PdfDestinationPageNumberField.Page" -->
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.PdfDocumentAuthorField" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfDocumentAuthorField.#ctor" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfDocumentAuthorField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfDocumentAuthorField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfDocumentAuthorField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)" -->
        <member name="M:Syncfusion.Pdf.PdfDocumentAuthorField.GetValue(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Gets the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.PdfNumbersConvertor">
            <summary>
            Utility class for number conversion.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfNumbersConvertor.LetterLimit">
            <summary>
            Limit number of converting arabic to \"A\" format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfNumbersConvertor.AcsiiStartIndex">
            <summary>
            Index of A char in the ASCII table.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfNumbersConvertor.Convert(System.Int32,Syncfusion.Pdf.PdfNumberStyle)">
            <summary>
            Converts the specified number to numberStyle format.
            </summary>
            <param name="intArabic">The arabic value.</param>
            <param name="numberStyle">The number style.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfNumbersConvertor.ArabicToRoman(System.Int32)">
            <summary>
            Converts arabic number to roman.
            </summary>
            <param name="intArabic">Number in arabic format.</param>
            <returns>Number in Roman format.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfNumbersConvertor.ArabicToLetter(System.Int32)">
            <summary>
            Converts arabic number to \"A\" format.
            </summary>
            <param name="arabic">Number in arabic format.</param>
            <returns>Number in \"A\" format.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfNumbersConvertor.GenerateNumber(System.Int32@,System.Int32,System.String)">
            <summary>
            Utility metnod for converting arabic number to roman format.
            </summary>
            <param name="value">Current number value.</param>
            <param name="magnitude">Max current number.</param>
            <param name="letter">Roman equivalent.</param>
            <returns>Roman equivalent.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfNumbersConvertor.ConvertToLetter(System.Single)">
            <summary>
            Utility metnod. Helps to convert arabic number to \"A\" format.
            </summary>
            <param name="arabic">Arabic number.</param>
            <returns>Sequence of number.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfNumbersConvertor.AppendChar(System.Text.StringBuilder,System.Int32)">
            <summary>
            Adds letter instead of number.
            </summary>
            <param name="builder">String builder object.</param>
            <param name="number">Number to be converted to letter.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.PdfPageCountField" -->
        <member name="F:Syncfusion.Pdf.PdfPageCountField.m_numberStyle">
            <summary>
            Internal variable to store numbering style.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageCountField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfPageCountField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageCountField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfPageCountField"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageCountField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfPageCountField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageCountField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfPageCountField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageCountField.GetValue(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Gets the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns>result</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.PdfPageCountField.NumberStyle" -->
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.PdfSectionNumberField" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfSectionNumberField.#ctor" -->
        <member name="M:Syncfusion.Pdf.PdfSectionNumberField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSectionNumberField"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionNumberField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSectionNumberField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionNumberField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSectionNumberField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionNumberField.GetValue(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Gets the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns>The value of the field.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.PdfSectionPageCountField" -->
        <member name="M:Syncfusion.Pdf.PdfSectionPageCountField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSectionPageCountField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCountField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSectionPageCountField"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCountField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSectionPageCountField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCountField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSectionPageCountField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCountField.GetValue(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Gets the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns>result</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.PdfSectionPageNumberField" -->
        <member name="M:Syncfusion.Pdf.PdfSectionPageNumberField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSectionPageNumberField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageNumberField.#ctor(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSectionPageNumberField"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageNumberField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSectionPageNumberField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageNumberField.#ctor(Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSectionPageNumberField"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageNumberField.GetValue(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Gets the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns>result</returns>
        </member>
        <member name="T:Syncfusion.Pdf.PdfTemplateValuePair">
            <summary>
            Represent class to store information about template and value pairs 
            used in automatic fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTemplateValuePair.m_template">
            <summary>
            Internal variable to store template.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTemplateValuePair.m_value">
            <summary>
            Intenal variable to store value.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfTemplateValuePair.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfTemplateValuePair"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfTemplateValuePair.#ctor(Syncfusion.Pdf.Graphics.PdfTemplate,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfTemplateValuePair"/> class.
            </summary>
            <param name="template">The template.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfTemplateValuePair.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfTemplateValuePair.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedBookmark">
            <summary>
            Represents loaded bookmark class.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfBookmark">
            <summary>
            Each instance of this class represents
            an bookmark node in the bookmark tree.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfBookmarkBase">
            <summary>
            This class plays two roles: it's a base class for all bookmarks
            and it's a root of a bookmarks tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBookmarkBase.m_list">
            <summary>
            Collection of the descend outlines.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBookmarkBase.m_dictionary">
            <summary>
            Internal variable to store dictinary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBookmarkBase.m_crossTable">
            <summary>
            Cross table of the document;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBookmarkBase.bookmark">
            <summary>
            Internal variable to store loaded bookmark.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBookmarkBase.m_booklist">
            <summary>
            Temp variable to store loaded bookmark.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBookmarkBase.m_isExpanded">
            <summary>
            Gets or sets the whether the bookmark tree is expanded or not
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmarkBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfOutlineBase"/> class.
            </summary>
            <remarks>Note that the Type field shouldn't be generated.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmarkBase.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfBookmarkBase"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmarkBase.Add(System.String)">
            <summary>
            Creates and adds an outline.
            </summary>
            <param name="title">The title of the new outline.</param>
            <returns>The outline created.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmarkBase.Contains(Syncfusion.Pdf.Interactive.PdfBookmark)">
            <summary>
            Determines whether the specified outline is a direct descendant of the outline base.
            </summary>
            <param name="outline">The outline.</param>
            <returns>
            <c>true</c> if the specified outline is a direct descendant of the outline base;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmarkBase.Remove(System.String)">
            <summary>
            Removes the specified bookmark from the document.
            </summary>
            <param name="title">The title of the outline.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmarkBase.RemoveAt(System.Int32)">
            <summary>
            Removes the specified bookmark from the document at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmarkBase.Clear">
            <summary>
            Removes all the bookmark from the document.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmarkBase.Insert(System.Int32,System.String)">
            <summary>
            Inserts a new outline at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="title">The title of the new outline.</param>
            <returns>The new outline.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmarkBase.GetBookmarkCollection(System.Collections.Generic.List{Syncfusion.Pdf.Interactive.PdfBookmark},System.Collections.Generic.List{Syncfusion.Pdf.Interactive.PdfBookmark})">
            <summary>
            To get the BookMark Collection
            </summary>
            <param name="pageBookmarks"></param>
            <param name="bookmarks"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmarkBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see>
            object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmarkBase.ReproduceTree">
            <summary>
            Reproduces the tree.
            </summary>
            <returns>The list of bookmark kids.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmarkBase.UpdateFields">
            <summary>
            Updates all outline dictionary fields.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmarkBase.GetFirstBookMark(Syncfusion.Pdf.Interactive.PdfBookmarkBase)">
            <summary>
            Gets the first book mark.
            </summary>
            <param name="bookmark">The bookmark.</param>
            <returns>First Bookmark</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmarkBase.Count">
            <summary>
            Gets number of the elements in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmarkBase.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Interactive.PdfBookmark"/> at the specified index.
            </summary>
            <value>index</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmarkBase.List">
            <summary>
            Gets the sub items.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmarkBase.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmarkBase.CrossTable">
            <summary>
            Gets the cross table.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmarkBase.IsExpanded">
            <summary>
            Gets or sets the whether to expand the node or not
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmarkBase.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBookmark.m_destination">
            <summary>
            
            Internal variable to store destination.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBookmark.m_color">
            <summary>
            Internal variable to store color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBookmark.m_textStyle">
            <summary>
            Internal variable to store text Style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBookmark.m_previous">
            <summary>
            Internal variable to store previous. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBookmark.m_next">
            <summary>
            Internal variable to store next.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBookmark.m_parent">
            <summary>
            Internal variable to store parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBookmark.m_action">
            <summary>
            Internal variable to store action.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmark.#ctor(System.String,Syncfusion.Pdf.Interactive.PdfBookmarkBase,Syncfusion.Pdf.Interactive.PdfBookmark,Syncfusion.Pdf.Interactive.PdfBookmark)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfBookmark"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="parent">The parent.</param>
            <param name="previous">The previous.</param>
            <param name="next">The next.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmark.#ctor(System.String,Syncfusion.Pdf.Interactive.PdfBookmarkBase,Syncfusion.Pdf.Interactive.PdfBookmark,Syncfusion.Pdf.Interactive.PdfBookmark,Syncfusion.Pdf.Interactive.PdfDestination)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfBookmark"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="parent">The parent.</param>
            <param name="previous">The previous.</param>
            <param name="next">The next.</param>
            <param name="dest">The dest.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmark.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfBookmark"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmark.SetParent(Syncfusion.Pdf.Interactive.PdfBookmarkBase)">
            <summary>
            Sets the parent.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmark.UpdateColor">
            <summary>
            Updates the color.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfBookmark.UpdateTextStyle">
            <summary>
            Updates the outline text style.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmark.Destination">
            <summary>
            Gets or sets the outline destination.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmark.Title">
            <summary>
            Gets or sets the outline title.
            </summary>
            <remarks>The outline title is the text,
            which appears in the outline tree as a tree node.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmark.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmark.TextStyle">
            <summary>
            Gets or sets the text style.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmark.Action">
            <summary>
            Gets or sets the Action for the Outline.
            </summary>        
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmark.IsExpanded">
            <summary>
            Gets or sets the whether to expand the node or not
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmark.Previous">
            <summary>
            Gets or sets the previous outline object.
            </summary>
            <remarks>The null value means that the object is the first outline.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmark.Parent">
            <summary>
            Gets the parent outline base.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfBookmark.Next">
            <summary>
            Gets or sets the next outline object.
            </summary>
            <remarks>The null value means that the object is the last outline.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfLoadedBookmark"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.GetTitle">
            <summary>
            Gets the title.
            </summary>
            <returns>The title of the bookmark.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.GetColor">
            <summary>
            Gets the color.
            </summary>
            <returns>The color of the bookmark.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.GetTextStyle">
            <summary>
            Gets the text style.
            </summary>
            <returns>The style of bookmark text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.GetNext">
            <summary>
            Gets the next.
            </summary>
            <returns>The next bookmark to this bookmark.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.GetPrevious">
            <summary>
            Gets the previos.
            </summary>
            <returns>The previous bookmark to this bookmark.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.SetColor(Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Sets the color.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.SetTextStyle(Syncfusion.Pdf.Interactive.PdfTextStyle)">
            <summary>
            Sets the text style.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.GetDestination">
            <summary>
            Gets the destination.
            </summary>
            <returns>The destination of bookmark.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.Destination">
            <summary>
            Gets or sets the outline destination.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.Title">
            <summary>
            Gets or sets the outline title.
            </summary>
            <remarks>The outline title is the text,
            which appears in the outline tree as a tree node.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.TextStyle">
            <summary>
            Gets or sets the text style.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.Next">
            <summary>
            Gets or sets the next outline object.
            </summary>
            <remarks>The null value means that the object is the last outline.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.Previous">
            <summary>
            Gets or sets the previous outline object.
            </summary>
            <remarks>The null value means that the object is the first outline.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.Parent">
            <summary>
            Gets the parent outline base.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedBookmark.List">
            <summary>
            Gets the sub items.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfTextStyle">
            <summary>
            Allows to choose outline text style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextStyle.Regular">
            <summary>
            Regular text style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextStyle.Italic">
            <summary>
            Italic text style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextStyle.Bold">
            <summary>
            Bold text style.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfBookletCreator">
            <summary>
            Represents a booklet creator, which allows to create a booklet from a Pdf document.
            </summary>
            <example>
            <code lang="C#">
            //Load a PDF document
            PdfLoadedDocument ldoc = new PdfLoadedDocument("SourceDoc.pdf");
            // Creates a booklet from the given PDF document         
            PdfDocument doc = PdfBookletCreator.CreateBooklet(ldoc, new SizeF(300, 500));
            //Save the document
            doc.Save("Booklet.pdf");
            </code>
            <code lang="VB">
            'Load a PDF document
            Dim ldoc As PdfLoadedDocument = New PdfLoadedDocument("SourceDoc.pdf")
            ' Creates a booklet from the given PDF document              
            Dim doc As PdfDocument = PdfBookletCreator.CreateBooklet(ldoc, New SizeF(300, 500))
            'Save the document
            doc.Save("Booklet.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/>
        </member>
        <member name="M:Syncfusion.Pdf.PdfBookletCreator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfBookletCreator"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfBookletCreator.CreateBooklet(Syncfusion.Pdf.Parsing.PdfLoadedDocument,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfBookletCreator"/> class.
            </summary>
            <param name="loadedDocument">The existing PDF document.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            The initialized PDF document, which could be saved.
            </returns>
            <example>
            <code lang="C#">
            //Load an existing PDF document
            PdfLoadedDocument ldoc = new PdfLoadedDocument("SourceDoc.pdf");
            //Creates a booklet from the given PDF document          
            PdfDocument doc = PdfBookletCreator.CreateBooklet(ldoc, new SizeF(300, 500));
            //Save the document
            doc.Save("Booklet.pdf");
            </code>
            <code lang="VB">
            'Load a PDF document
            Dim ldoc As PdfLoadedDocument = New PdfLoadedDocument("SourceDoc.pdf")
            'Creates a booklet from the given PDF document          
            Dim doc As PdfDocument = PdfBookletCreator.CreateBooklet(ldoc, New SizeF(300, 500))
            'Save the document
            doc.Save("Booklet.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/>
        </member>
        <member name="M:Syncfusion.Pdf.PdfBookletCreator.CreateBooklet(Syncfusion.Pdf.Parsing.PdfLoadedDocument,System.Drawing.SizeF,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfBookletCreator"/> class.
            </summary>
            <param name="loadedDocument">The loaded document.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="twoSide">if set to <c>true</c> if the result in document should be printed
            on both sides of paper.</param>
            <returns>
            The initialized PDF document, which could be saved.
            </returns>
            <example>
            <code lang="C#">
            //Load a PDF document
            PdfLoadedDocument ldoc = new PdfLoadedDocument("SourceDoc.pdf");
            //Creates a booklet from the given PDF document      
            PdfDocument doc = PdfBookletCreator.CreateBooklet(ldoc, new SizeF(300, 500), false);
            //Save the document
            doc.Save("Booklet.pdf");
            </code>
            <code lang="VB">
            'Load a PDF document
            Dim ldoc As PdfLoadedDocument = New PdfLoadedDocument("SourceDoc.pdf")
            'Creates a booklet from the given PDF document             
            Dim doc As PdfDocument = PdfBookletCreator.CreateBooklet(ldoc, New SizeF(300, 500), False)
            'Save the document
            doc.Save("Booklet.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/>
        </member>
        <member name="M:Syncfusion.Pdf.PdfBookletCreator.CreateBooklet(Syncfusion.Pdf.Parsing.PdfLoadedDocument,System.Drawing.SizeF,System.Boolean,Syncfusion.Pdf.Graphics.PdfMargins)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfBookletCreator"/> class.
            </summary>
            <param name="loadedDocument">The loaded document.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="twoSide">if set to <c>true</c> if the result in document should be printed
            on both sides of paper.</param>
            <param name="margin">The margin value for generated PDF document.</param>
            <returns>The initialized PDF document, which could be saved.</returns>
            <example>
            <code lang="C#">
            // Loads an existing document
            PdfLoadedDocument srcDoc = new PdfLoadedDocument("sourceDoc.pdf");
            // Specify the margin.
            PdfMargins margin = new PdfMargins();
            margin.All = 10;
            //Creates a booklet from the given PDF document        
            PdfDocument doc = PdfBookletCreator.CreateBooklet(srcDoc,new SizeF(300, 500), false,margin);
            doc.Save("Booklet.pdf");
            </code>
            <code lang="VB">
            ' Loads an existing document
            Dim srcDoc As PdfLoadedDocument = New PdfLoadedDocument("sourceDoc.pdf")
            ' Specify the margin.
            Dim margin As PdfMargins = New PdfMargins()
            margin.All = 10
            'Creates a booklet from the given PDF document         
            Dim doc As PdfDocument = PdfBookletCreator.CreateBooklet(srcDoc,New SizeF(300, 500), False,margin)
            doc.Save("Booklet.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/>
        </member>
        <member name="M:Syncfusion.Pdf.PdfBookletCreator.GetNextPair(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the next pair of page indeces.
            </summary>
            <param name="index">The current iteration index.</param>
            <param name="count">The pages count.</param>
            <param name="twoSide">if set to <c>true</c> if the result in document should be printed
            on both sides of paper.</param>
            <returns>
            An array of integers that holds the indices.
            </returns>
        </member>
        <member name="T:Syncfusion.Pdf.PdfCatalog">
            <summary>
            Represents internal catalog of the Pdf document.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Primitives.PdfDictionary"/> Class    
        </member>
        <member name="T:Syncfusion.Pdf.Primitives.IPdfPrimitive">
            <summary>
            Defines the basic interace of the various Primitive..
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.IPdfPrimitive.Save(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Saves the object using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.IPdfPrimitive.Clone(Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates a deep copy of the IPdfPrimitive object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.IPdfPrimitive.Status">
            <summary>
            Specfies the status of the IPdfPrmitive. Status is registered if it has a reference or else none.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.IPdfPrimitive.IsSaving">
            <summary>
            Gets or sets a value indicating whether this document is saving or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.IPdfPrimitive.ObjectCollectionIndex">
            <summary>
            Gets or sets the integer value of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.IPdfPrimitive.ClonedObject">
            <summary>
            Stores the cloned object for future use.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.IPdfPrimitive.Position">
            <summary>
            Gets or sets the position of the object.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IPdfChangable">
            <summary>
             Interface of the objects that support Changable of their internals.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IPdfChangable.FreezeChanges(System.Object)">
            <summary>
            Freezes the changes.
            </summary>
            <param name="freezer">The freezer.</param>
        </member>
        <member name="P:Syncfusion.Pdf.IPdfChangable.Changed">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Pdf.IPdfChangable"/> is changed.
            </summary>
            <value><c>true</c> if changed; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfDictionary.Prefix">
            <summary>
            Start marker for dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfDictionary.Suffix">
            <summary>
            End marker for dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfDictionary.m_items">
            <summary>
            Collection of items in the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfDictionary.m_archive">
            <summary>
            Flag for PDF file formar 1.5 is dictionary archiving needed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfDictionary.m_encrypt">
            <summary>
            Flag is dictionary need to encrypt.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfDictionary.m_isDecrypted">
            <summary>
            Flag is dictionary need to decrypt.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfDictionary.m_bChanged">
            <summary>
            Indicates if the object was changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfDictionary.m_status">
            <summary>
            Shows the type of object status whether it is object registered or other status;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfDictionary.m_isSaving">
            <summary>
            Indicates if the object is currently in saving state or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfDictionary.m_index">
            <summary>
            Holds the index number of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfDictionary.m_position">
            <summary>
            Internal variable to store the position.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfDictionary.m_crossTable">
            <summary>
            Internal variable to hold PdfCrossTable reference.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfDictionary.m_clonedObject">
            <summary>
            Internal variable to hold cloned object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:PdfDictionary"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfDictionary"/> class
            with values taken from the dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the dictionary contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.ContainsKey(Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Determines whether the dictionary contains the key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the dictionary contains the key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.Remove(Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.Clear">
            <summary>
            Clears items from object dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.Clone(Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates a copy of PdfDictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.GetValue(Syncfusion.Pdf.IO.PdfCrossTable,System.String,System.String)">
            <summary>
            Gets a value from itself or one of the parent dictionaries.
            </summary>
            <param name="crossTable">The cross table.</param>
            <param name="key">The key of the value.</param>
            <param name="parentKey">The key to the parent.</param>
            <returns>The value by the key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.GetValue(System.String,System.String)">
            <summary>
            Gets a value from itself or one of the parent dictionaries.
            </summary>
            <param name="key">The key of the value.</param>
            <param name="parentKey">The key to the parent.</param>
            <returns>The value by the key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.GetString(System.String)">
            <summary>
            Returns the string specified by the propertyName parameter.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The string by its name.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.GetInt(System.String)">
            <summary>
            Returns the integer value of the dictionary entry specified by the propertyName variable.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The integer value of the property.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SaveItems(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Save dictionary items.
            </summary>
            <param name="writer">Writer object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.GetName(System.String)">
            <summary>
            Creates a PDF name object.
            </summary>
            <param name="name">The string which the object is initialized with.</param>
            <returns>The PDF object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.OnBeginSave(Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Raises event <see cref="E:Syncfusion.Pdf.Primitives.PdfDictionary.BeginSave"/>.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.OnEndSave(Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Raises event <see cref="E:Syncfusion.Pdf.Primitives.PdfDictionary.EndSave"/>.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.Save(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Saves the object using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.Save(Syncfusion.Pdf.IO.IPdfWriter,System.Boolean)">
            <summary>
            Saves the object.
            </summary>
            <param name="writer">Writer object.</param>
            <param name="bRaiseEvent">If true - raises the event, False - doesn't raise.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SetProperty(System.String,Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Sets the internal property.
            </summary>
            <param name="key">The key.</param>
            <param name="primitive">The primitive.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SetProperty(Syncfusion.Pdf.Primitives.PdfName,Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Sets the internal property.
            </summary>
            <param name="key">The PdfName.</param>
            <param name="primitive">The primitive.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SetProperty(System.String,Syncfusion.Pdf.IPdfWrapper)">
            <summary>
            Sets the internal property.
            </summary>
            <param name="key">The key.</param>
            <param name="wrapper">The wrapper.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SetProperty(Syncfusion.Pdf.Primitives.PdfDictionary,System.String,Syncfusion.Pdf.IPdfWrapper)">
            <summary>
            Sets the property.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="wrapper">The wrapper.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SetProperty(Syncfusion.Pdf.Primitives.PdfDictionary,System.String,Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Sets the property.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="primitive">The primitive.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SetBoolean(System.String,System.Boolean)">
            <summary>
            Sets the boolean.
            </summary>
            <param name="key">The key.</param>
            <param name="value">Boolean value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SetNumber(System.String,System.Int32)">
            <summary>
            Sets the integer number.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SetNumber(System.String,System.Single)">
            <summary>
            Sets the float number.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SetArray(System.String,Syncfusion.Pdf.Primitives.IPdfPrimitive[])">
            <summary>
            Sets the array.
            </summary>
            <param name="key">The key.</param>
            <param name="list">The list of primitives to be placed into array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SetDateTime(System.String,System.DateTime)">
            <summary>
            Sets the date time.
            </summary>
            <param name="key">The key.</param>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.GetDateTime(Syncfusion.Pdf.Primitives.PdfString)">
            <summary>
            Gets the date time from Pdf standard date format.
            </summary>
            <param name="dateTimeString">The string, which contains Pdf standard date format.</param>
            <returns>The time in <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SetString(System.String,System.String)">
            <summary>
            Sets the string primitive.
            </summary>
            <param name="key">The key.</param>
            <param name="str">The string.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SetName(Syncfusion.Pdf.Primitives.PdfDictionary,System.String,System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SetName(System.String,System.String)">
            <summary>
            Sets the name primitive.
            </summary>
            <param name="key">The key.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.SetName(System.String,System.String,System.Boolean)">
            <summary>
            Sets the name.
            </summary>
            <param name="key">The key.</param>
            <param name="name">The name.</param>
            <param name="processSpecialCharacters">Determines whether to process special characters.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.CheckChanges">
            <summary>
            Checks the changes.
            </summary>
            <returns>Returns <b>true</b> if the dictionary was changed.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.FreezeChanges(System.Object)">
            <summary>
            Freezes the changes.
            </summary>
            <param name="freezer">The freezer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfDictionary.Modify">
            <summary>
            Mark this instance modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.Item(Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Gets or sets the <see cref="T:IPdfSavable"/> with the specified key.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:IPdfSavable"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.Archive">
            <summary>
            Get or set flag if need to archive dictionary.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.Encrypt">
            <summary>
            Gets or sets flag if encryption is needed.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.IsDecrypted">
            <summary>
            Gets or sets flag if decryption is needed.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.Status">
            <summary>
            Gets or sets the Status of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.IsSaving">
            <summary>
            Gets or sets a value indicating whether this document is saving or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.ObjectCollectionIndex">
            <summary>
            Gets or sets the integer value of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.Position">
            <summary>
            Gets or sets the position of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.CrossTable">
            <summary>
            Returns PdfCrossTable associated with the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.ClonedObject">
            <summary>
            Returns cloned object.
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.Primitives.PdfDictionary.BeginSave">
            <summary>
            Event. Raise before the object saves. 
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.Primitives.PdfDictionary.EndSave">
            <summary>
            Event. Raise after the object saved. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfDictionary.Changed">
            <summary>
            Gets a value indicating whether this <see cref="T:PdfDictionary"/> is changed.
            </summary>
            <value><c>true</c> if changed; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalog.m_sections">
            <summary>
            Internal variable to store collection of sections.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalog.m_attachment">
            <summary>
            Internal variable to store collection of attachments
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalog.m_viewerPreferences">
            <summary>
            Internal variable to store viewer's preferences.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalog.m_names">
            <summary>
            Internal variable to store catalog's names.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalog.m_form">
            <summary>
            Internal variable to store form.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalog.m_loadedForm">
            <summary>
            Loaded form.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalog.m_loadedDocument">
            <summary>
            Loaded document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalog.m_dictionary">
            <summary>
            Internal variable to store dictionary;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalog.m_pdfPortfolio">
            <summary>
            Internal variable to store portfolio
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalog.m_noNames">
            <summary>
            No Names
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalog.m_structTreeRoot">
            <summary>
            Internal variable to store StructTreeRoot.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfCatalog"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalog.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfCatalog"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="catalog">The catalog dictionary.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalog.CreateNamesIfNone">
            <summary>
            Creates the names if there is none.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalog.ApplyPdfXConformance">
            <summary>
            Applies the PDF/X Conformance attributes to the document.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalog.Clear">
            <summary>
            Clear PdfCatalog
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCatalog.ViewerPreferences">
            <summary>
            Gets or sets the viewer preferences.
            </summary>
            <value>The viewer preferences.</value>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the document`s viewer preference. 
            doc.ViewerPreferences.PageMode = PdfPageMode.UseAttachments;
            doc.ViewerPreferences.PageScaling = PageScalingMode.None;
            doc.ViewerPreferences.FitWindow = true;
            doc.ViewerPreferences.PageLayout = PdfPageLayout.SinglePage;
            // Save the document
            doc.Save("ViewerPreferences.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s viewer preference
            doc.ViewerPreferences.PageMode = PdfPageMode.UseAttachments
            doc.ViewerPreferences.PageScaling = PageScalingMode.None
            doc.ViewerPreferences.FitWindow = True
            doc.ViewerPreferences.PageLayout = PdfPageLayout.SinglePage
            ' Save the document
            doc.Save("ViewerPreferences.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCatalog.PdfPortfolio">
            <summary>
            Gets or setsthe Pdfportfolio
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCatalog.StructTreeRoot">
            <summary>
            Returns StructTreeRoot associated with the document.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCatalog.Form">
            <summary>
            Gets or sets the interactive form.
            </summary>
            <value>The form.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            // Creates a form
            PdfForm form = document.Form;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            //Add the field to listbox.
            form.Fields.Add(listBox);            
            //Set the properties.
            listBox.Bounds = new RectangleF(100, 350, 100, 50);
            listBox.HighlightMode = PdfHighlightMode.Outline;
            //Add the items to the list box
            listBox.Items.Add(new PdfListFieldItem("English", "English"));
            listBox.Items.Add(new PdfListFieldItem("French", "French"));
            listBox.Items.Add(new PdfListFieldItem("German", "German"));
            //Select the item
            listBox.SelectedIndex = 2;
            //Set the multiselect option
            listBox.MultiSelect = true;                    
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            ' Creates a form
            Dim form As PdfForm = document.Form
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            'Add the field to listbox.
            form.Fields.Add(listBox)
            'Set the properties.
            listBox.Bounds = New RectangleF(100, 350, 100, 50)
            listBox.HighlightMode = PdfHighlightMode.Outline
            'Add the items to the list box
            listBox.Items.Add(New PdfListFieldItem("English", "English"))
            listBox.Items.Add(New PdfListFieldItem("French", "French"))
            listBox.Items.Add(New PdfListFieldItem("German", "German"))
            'Select the item
            listBox.SelectedIndex = 2
            'Set the multiselect option
            listBox.MultiSelect = True
            document.Save("Form.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCatalog.Names">
            <summary>
            Gets the names.
            </summary>
            <value>The names.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCatalog.Destinations">
            <summary>
            Gets the named destinations' dictionary.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCatalog.LoadedForm">
            <summary>
            Gets or sets the loaded form.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCatalog.LoadedDocument">
            <summary>
            Gets or sets the loaded Document.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCatalog.Pages">
            <summary>
            Gets or sets the sections, which contain pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCatalog.Attachments">
            <summary>
            Gets or sets the loaded form.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfCatalogNames">
            <summary>
            Represents names dictionary of the document's catalog entry.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.IPdfWrapper"/> Interface    
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalogNames.m_attachments">
            <summary>
            Internal variable to store collection of attachments.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalogNames.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfCatalogNames"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfCatalogNames"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.GetNamedObjectFromTree(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Primitives.PdfString)">
            <summary>
            Gets the named object from a tree.
            </summary>
            <param name="root">The tree root.</param>
            <param name="name">The name.</param>
            <returns>The named object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.FindName(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Primitives.PdfString)">
            <summary>
            Finds the name in the tree.
            </summary>
            <param name="current">The current.</param>
            <param name="name">The name.</param>
            <returns>The object specified by its name or null.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.GetProperKid(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Primitives.PdfString)">
            <summary>
            Gets the proper kid from an array.
            </summary>
            <param name="current">The current node.</param>
            <param name="name">The name we're looking for.</param>
            <returns>The proper kid.</returns>
            <remarks>The name should be within the kid limits.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.CheckLimits(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Primitives.PdfString)">
            <summary>
            Checks the limits of the named tree node.
            </summary>
            <param name="kid">The kid.</param>
            <param name="name">The name.</param>
            <returns>Returns true if the kid should have the name (the name is within its limits).</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.MergeEmbedded(Syncfusion.Pdf.PdfCatalogNames,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Merges the embedded name trees.
            </summary>
            <param name="names">The names.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.AppendEmbedded(System.Collections.Generic.List{Syncfusion.Pdf.Primitives.IPdfPrimitive},Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Appends the list of embedded file dictionaries.
            </summary>
            <param name="embedded">The list.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.GetNodeRightLimit(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Gets the node left limit.
            </summary>
            <param name="node">The node.</param>
            <returns>The node left limit.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.AppendObjects(System.String,Syncfusion.Pdf.Primitives.PdfDictionary,System.Collections.Generic.List{Syncfusion.Pdf.Primitives.IPdfPrimitive},System.Boolean,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Appends the objects to the node of the name tree.
            </summary>
            <param name="baseName">Name of the base.</param>
            <param name="node">The node.</param>
            <param name="embedded">The embedded.</param>
            <param name="updateLimits">if set to <c>true</c> the limits should be updated.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.GetEmbedded">
            <summary>
            Generates the list of embedded file dictionaries.
            </summary>
            <returns>The list of embedded file dictionaries.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.CollectObjects(Syncfusion.Pdf.Primitives.PdfDictionary,System.Collections.Generic.List{Syncfusion.Pdf.Primitives.IPdfPrimitive})">
            <summary>
            Collects the objects.
            </summary>
            <param name="leafNode">The leaf node.</param>
            <param name="array">The array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.Clear">
            <summary>
            Clear catalog names.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCatalogNames.EmbeddedFiles">
            <summary>
            Gets or sets the embedded files.
            </summary>
            <value>The embedded files.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCatalogNames.Destinations">
            <summary>
            Gets the destinations.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCatalogNames.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.PdfCatalogNames.NodeInfo">
            <summary>
            Holds info about current base node and its current child.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalogNames.NodeInfo.Node">
            <summary>
            Internal variable to store Dictionary entry.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalogNames.NodeInfo.Index">
            <summary>
            Internal variable to store index value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalogNames.NodeInfo.Count">
            <summary>
            Internal variable to store dictionary entries count.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCatalogNames.NodeInfo.Kids">
            <summary>
            Internal variable to store Kids value.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.NodeInfo.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfCatalogNames.NodeInfo"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCatalogNames.NodeInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfCatalogNames.NodeInfo"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="T:Syncfusion.Pdf.PdfDocument">
            <summary>
            Represents a logic to create Pdf document.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font with Bold font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
            //Save the document.
            document.Save("Document.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font with Bold font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
            'Save the document.
            document.Save("Document.pdf");
            </code>
            </example>    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfDocumentBase"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class    
        </member>
        <member name="T:Syncfusion.Pdf.PdfDocumentBase">
            <summary>
            Represent common properties of PdfDocument and PdfLoadedDocument classes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_objects">
            <summary>
            Collection of the main objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_security">
            <summary>
            Security properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_currentSavingObj">
            <summary>
            Object that is saving currently.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_catalog">
            <summary>
            Document catlog.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_crossTable">
            <summary>
            Cross table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_documentInfo">
            <summary>
            Document information and properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_password">
            <summary>
            String contain either user or owner password.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_compression">
            <summary>
            Desired level of the new stream compression.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_fileStructure">
            <summary>
            Specifies file structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_disposeObjects">
            <summary>
            A list of the objects that have to be disposed after document closing.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_enableMemoryOptimization">
            <summary>
            Internal variable to store if memory optimization should be done.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_portfolio">
            <summary>
            Internal varible to store portfolio
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.primitive">
            <summary>
            Internal variable to store OCG groups.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_positon">
            <summary>
            Internal variable to store position.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_orderposition">
            <summary>
            Internal variable to store order position.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_onpositon">
            <summary>
            Internal variable to store  on position.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_offpositon">
            <summary>
            Internal variable to store  off position.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_order">
            <summary>
            Internal variable to store layer order.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_on">
            <summary>
            Internal variable to store visible layers.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_off">
            <summary>
            Internal variable to store invisible layers.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_sublayer">
            <summary>
            Internal variable to store Sub Layers.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_sublayerposition">
            <summary>
            Internal variable to store Sub Layers Position.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.m_printLayer">
            <summary>
            Stores the array of Print layer references
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.m_fileStructure_TaggedPdfChanged(System.Object,System.EventArgs)">
            <summary>
            If PDF is set as tagged, initializes StructTree in the catalog.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.Merge(Syncfusion.Pdf.PdfDocumentBase,Syncfusion.Pdf.Parsing.PdfLoadedDocument)">
            <summary>
            Merges the specified dest.
            </summary>
            <param name="dest">The destination document.</param>
            <param name="src">The source document.</param>
            <returns>The merged document</returns>
            <example>
            <code lang="C#">
            // Source document.
            PdfLoadedDocument srcDoc = new PdfLoadedDocument("Src1.pdf");
            // Destination PDF document
            PdfDocument destDoc = new PdfDocument();          
            //Merge the source pdf document.
            PdfDocumentBase.Merge(destDoc, srcDoc);
            destDoc.Save("Merge.pdf");
            </code>
            <code lang="VB">
            ' Source document.
            Dim srcDoc As PdfLoadedDocument = New PdfLoadedDocument("Src1.pdf")
            ' Destination PDF document
            Dim destDoc As PdfDocument = New PdfDocument()
            'Merge the source pdf document.
            PdfDocumentBase.Merge(destDoc, srcDoc)
            destDoc.Save("Merge.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.DisposeOnClose(System.IDisposable)">
            <summary>
            Adds an object to a collection of the objects that will be disposed during document closing.
            </summary>
            <param name="obj">The object that will be disposed during document closing.</param>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();               
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;
            // Loads an Image
            Image img = Image.FromFile("Logo.png");
            PdfImage pdfImg = new PdfBitmap(img);
            //Draw the image
            g.DrawImage(pdfImg,20, 20, 100,200);            
            doc.Save("DisposeOnClose.pdf");        
            // Dispose the Img object along with the document.
            doc.DisposeOnClose(img);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            ' Loads an Image
            Dim img As Image = Image.FromFile("Logo.png")
            Dim pdfImg As PdfImage = New PdfBitmap(img)
            'Draw the image
            g.DrawImage(pdfImg,20, 20, 100,200)
            doc.Save("DisposeOnClose.pdf")
            ' Dispose the Img object along with the document.
            doc.DisposeOnClose(img)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.SaveAsync(Windows.Storage.StorageFile)">
            <summary>
            Saves the Pdf document to a storage file
            </summary>
            <param name="stFile">Storage file to save the PDF document.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.Close">
            <summary>
            Closes the document. Releases all common resources.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();               
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;
            // Loads an Image            
            PdfImage pdfImg = new PdfBitmap(Image.FromFile("Logo.png"));
            //Draw the image
            g.DrawImage(pdfImg,20, 20, 100,200);
            //Save the document
            doc.Save("Close.pdf");
            // Closes the document
            doc.Close();
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            ' Loads an Image            
            Dim pdfImg As PdfImage = New PdfBitmap(Image.FromFile("Logo.png"))   
            'Draw the image
            g.DrawImage(pdfImg,20, 20, 100,200)
            'Save the document
            doc.Save("Close.pdf")
            ' Closes the document
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.Close(System.Boolean)">
            <summary> 
            Closes the document.
            </summary>
            <param name="completely">if set to <c>true</c> the document should close its stream as well.</param>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();               
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;
            // Loads an Image            
            PdfImage pdfImg = new PdfBitmap(Image.FromFile("Logo.png")); 
            //Draw the image
            g.DrawImage(pdfImg,20, 20, 100,200);
            //Save the document
            doc.Save("Close.pdf");
            // Closes the document completely.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            ' Loads an Image            
            Dim pdfImg As PdfImage = New PdfBitmap(Image.FromFile("Logo.png")) 
            'Draw the image
            g.DrawImage(pdfImg,20, 20, 100,200)
            'Save the document
            doc.Save("Close.pdf")
            ' Closes the document completely.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.Save(System.IO.Stream)">
            <summary>
            Saves the document to the specified stream.
            </summary>
            <param name="stream">The stream object where PDF document will be saved.</param>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;
            // Loads an Image            
            PdfImage pdfImg = new PdfBitmap(Image.FromFile("Logo.png")); 
            //Draw the image
            g.DrawImage(pdfImg, 20, 20, 100, 200);
            // Save the document as a stream
            MemoryStream stream = new MemoryStream();
            doc.Save(stream);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            ' Loads an Image            
            Dim pdfImg As PdfImage = New PdfBitmap(Image.FromFile("Logo.png"))
            'Draw the image
            g.DrawImage(pdfImg, 20, 20, 100, 200)
            ' Save the document as a stream
            Dim stream As MemoryStream = New MemoryStream()
            doc.Save(stream)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.ImportPage(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Imports a page.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="page">The page.</param>
            <returns>The page in the target document.</returns>
            <example>
            <code lang="C#">
            // Source document
            PdfLoadedDocument srcDoc = new PdfLoadedDocument("SrcDocument.pdf");
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            // Importing pages from source document.
            doc.ImportPage(srcDoc, srcDoc.Pages[0]);
            doc.Save("ImportPages.pdf");
            </code>
            <code lang="VB">
            ' Source document
            Dim srcDoc As PdfLoadedDocument = New PdfLoadedDocument("SrcDocument.pdf")
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Importing pages from source document.
            doc.ImportPage(srcDoc, srcDoc.Pages(0))
            doc.Save("ImportPages.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.ImportPage(Syncfusion.Pdf.Parsing.PdfLoadedDocument,System.Int32)">
            <summary>
            Imports a page.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="pageIndex">Index of the page.</param>
            <returns>The page in the target document.</returns>
            <example>
            <code lang="C#">
            // Source document
            PdfLoadedDocument srcDoc = new PdfLoadedDocument("SrcDocument.pdf");
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            // Importing pages from source document.
            doc.ImportPage(srcDoc, 0);
            doc.Save("ImportPages.pdf");
            </code>
            <code lang="VB">
            ' Source document
            Dim srcDoc As PdfLoadedDocument = New PdfLoadedDocument("SrcDocument.pdf")
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Importing pages from source document.
            doc.ImportPage(srcDoc, 0)
            doc.Save("ImportPages.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.ImportPageRange(Syncfusion.Pdf.Parsing.PdfLoadedDocument,System.Int32,System.Int32)">
            <summary>
            Imports a page range from a loaded document.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="startIndex">The start page index.</param>
            <param name="endIndex">The end page index.</param>
            <returns>The last created page in the target document.</returns>
            <example>
            <code lang="C#">
            // Source document
            PdfLoadedDocument srcDoc = new PdfLoadedDocument("SrcDocument.pdf");
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            // Importing pages from source document.
            doc.ImportPageRange(srcDoc, 0, 2);
            doc.Save("ImportPages.pdf");
            </code>
            <code lang="VB">
            ' Source document
            Dim srcDoc As PdfLoadedDocument = New PdfLoadedDocument("SrcDocument.pdf")
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Importing pages from source document.
            doc.ImportPageRange(srcDoc, 0, 2)
            doc.Save("ImportPages.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.Append(Syncfusion.Pdf.Parsing.PdfLoadedDocument)">
            <summary>
            Appends the specified loaded document to this one.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <example>
            <code lang="C#">
            // Source document
            PdfLoadedDocument srcDoc = new PdfLoadedDocument("SrcDocument.pdf");
            //Create a new document.
            PdfDocument doc = new PdfDocument();          
            // Appending the document with source document.
            doc.Append(srcDoc);
            // Save the document.
            doc.Save("Append.pdf");
            </code>
            <code lang="VB">
            ' Source document
            Dim srcDoc As PdfLoadedDocument = New PdfLoadedDocument("SrcDocument.pdf")
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Appending the document with source document.
            doc.Append(srcDoc)
            ' Save the document.
            doc.Save("Append.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.ImportPageAsync(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Imports the page in asynchronous mode
            </summary>
            <param name="ldDoc">Source document</param>
            <param name="page">Source page</param>
            <returns>Imported page</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.ImportPageAsync(Syncfusion.Pdf.Parsing.PdfLoadedDocument,System.Int32)">
            <summary>
            Import page in asynchronous mode
            </summary>
            <param name="ldDoc">Source document</param>
            <param name="pageIndex">Page index</param>
            <returns>Imported page</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.ImportPageRangeAsync(Syncfusion.Pdf.Parsing.PdfLoadedDocument,System.Int32,System.Int32)">
            <summary>
            Import pages in asynchronous mode
            </summary>
            <param name="ldDoc">Source document</param>
            <param name="startIndex">First page index</param>
            <param name="endIndex">Last page index</param>
            <returns>Imported page</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.AppendAsync(Syncfusion.Pdf.Parsing.PdfLoadedDocument)">
            <summary>
            Append document in asynchronous mode
            </summary>
            <param name="ldDoc">Source document</param>
            <returns>Task returning the status</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.MergeAsync(Syncfusion.Pdf.PdfDocumentBase,Syncfusion.Pdf.Parsing.PdfLoadedDocument)">
            <summary>
            Merge documents in asynchronous mode
            </summary>
            <param name="dest">Destination document</param>
            <param name="src">Source document</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.CheckEncryption(Syncfusion.Pdf.Parsing.PdfLoadedDocument)">
            <summary>
            Checks whether the PDF document was encrypted.
            </summary>
            <returns>True if the document was encrypted.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.GetForm">
            <summary>
            Gets the form.
            </summary>
            <returns>The proper PdfForm instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.SetMainObjectCollection(Syncfusion.Pdf.IO.PdfMainObjectCollection)">
            <summary>
            Sets the main object collection.
            </summary>
            <param name="moc">The main object collection.</param>
            <remarks>Allows to use null values as the parameter,
            which causes assigning null value to the variable. That's used for clearing.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.SetSecurity(Syncfusion.Pdf.Security.PdfSecurity)">
            <summary>
            Sets the security object.
            </summary>
            <param name="security">The security.</param>
            <remarks>Allows to set null.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.SetCrossTable(Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Sets the cross table.
            </summary>
            <param name="cTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.SetCatalog(Syncfusion.Pdf.PdfCatalog)">
            <summary>
            Sets the catalog.
            </summary>
            <param name="catalog">The catalog.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.OnDocumentSaved(Syncfusion.Pdf.DocumentSavedEventArgs)">
            <property name="flag" value="Finished" />
            <summary>
            Raises DocumentSaved event.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.AddFields(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfPageBase,System.Collections.Generic.List{Syncfusion.Pdf.Interactive.PdfField})">
            <summary>
            Adds the fields connected to the page.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="newPage">The new page.</param>
            <param name="fields">The lost of the fields.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.ClonePage(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfPageBase,System.Collections.Generic.List{Syncfusion.Pdf.Primitives.PdfArray})">
            <summary>
            Clones pages and their resource dictionaries and adds them into the document.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="page">The page being cloned.</param>
            <param name="destinations">The destinations.</param>
            <returns>page</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.CheckFields(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfPageBase,System.Collections.Generic.List{Syncfusion.Pdf.Interactive.PdfField})">
            <summary>
            Checks what fields are connected with the page.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="page">The page.</param>
            <param name="fields">An array where the fields connected to the page are stored.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.MergeAttachments(Syncfusion.Pdf.Parsing.PdfLoadedDocument)">
            <summary>
            Merges the attachments.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <remarks>This method merges only named attachments.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.ExportBookmarks(Syncfusion.Pdf.Parsing.PdfLoadedDocument,System.Collections.Generic.List{Syncfusion.Pdf.Interactive.PdfBookmarkBase},System.Int32,System.Collections.Generic.Dictionary{Syncfusion.Pdf.PdfPageBase,System.Object})">
            <summary>
            Exports the bookmarks to the new document.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="bookmarks">The bookmarks.</param>
            <param name="pageCorrespondance">The page correspondance dictionary.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.MarkBookmarks(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{Syncfusion.Pdf.Interactive.PdfBookmarkBase})">
            <summary>
            Marks the bookmarks pointing to the page for exporting.
            </summary>
            <param name="pageBookmarks">The page bookmarks.</param>
            <param name="bookmarks">The bookmarks.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.MarkBookmarks(Syncfusion.Pdf.Interactive.PdfBookmarkBase,System.Collections.Generic.List{Syncfusion.Pdf.Interactive.PdfBookmarkBase})">
            <summary>
            Marks the bookmarks pointing to the page for exporting.
            </summary>
            <param name="bookmarkBase">The page bookmarks.</param>
            <param name="bookmarks">The bookmarks.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.FixDestinations(System.Collections.Generic.Dictionary{Syncfusion.Pdf.Primitives.IPdfPrimitive,System.Object},System.Collections.Generic.List{Syncfusion.Pdf.Primitives.PdfArray})">
            <summary>
            Fixes the destinations.
            </summary>
            <param name="pageCorrespondance">The page correspondance.</param>
            <param name="destinations">The destinations.</param>
        </member>
        <member name="E:Syncfusion.Pdf.PdfDocumentBase.DocumentSaved">
            <property name="flag" value="Finished" />
            <summary>
            Event. Rises when the document has been saved.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.Security">
            <summary>
            Gets the security parameters of the document.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Reading security settings of the document
            PdfSecurity security = doc.Security;
            doc.Save("Security.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Reading security settings of the document
            Dim security As PdfSecurity = doc.Security
            doc.Save("Security.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.IsSecurityGranted">
            <summary>
            Gets a value indicating whether this instance is security granted.
            </summary>
            <value>
            <c>true</c> if this instance is security granted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.DocumentInformation">
            <summary>
            Gets or sets document's information and properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.ViewerPreferences">
            <summary>
            Gets or sets a viewer preferences object controlling the way the document is to be 
            presented on the screen or in print.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set the document`s viewer preference
            doc.ViewerPreferences.PageLayout = PdfPageLayout.TwoPageLeft;
            doc.ViewerPreferences.PageScaling = PageScalingMode.AppDefault;
            doc.ViewerPreferences.PageMode = PdfPageMode.FullScreen;
            doc.Save("ViewerPreferences.pdf");            
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Set the document`s viewer preference
            doc.ViewerPreferences.PageLayout = PdfPageLayout.TwoPageLeft
            doc.ViewerPreferences.PageScaling = PageScalingMode.AppDefault
            doc.ViewerPreferences.PageMode = PdfPageMode.FullScreen
            doc.Save("ViewerPreferences.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.Compression">
            <summary>
            Gets or sets the desired level of stream compression.
            </summary>
            <remarks>All new objects should be compressed with this level of the compression.</remarks>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            // Set the document`s compression level
            doc.Compression = PdfCompressionLevel.Best;
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            doc.Save("Compression.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            '  Set the document`s compression level
            doc.Compression = PdfCompressionLevel.Best
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            doc.Save("Compression.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.FileStructure">
            <summary>
            Gets or sets the internal structure of the PDF file.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the document`s cross reference Type
            doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream;
            // Set the pdf version
            doc.FileStructure.Version = PdfVersion.Version1_6;
            // Save the document
            doc.Save("FileStructure.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            '  Set the document`s cross reference Type
            doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream
            ' set the pdf version
            doc.FileStructure.Version = PdfVersion.Version1_6
            ' Save the document
            doc.Save("FileStructure.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.PortfolioInformation">
            <summary>
            Gets or sets the pdf Portfolio to the Document.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.Bookmarks">
            <summary>
            Gets the bookmarks.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.WasEncrypted">
            <summary>
            Gets a value indicating whether the document was encrypted.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.IsPdfViewerDocumentDisable">
            <summary>
            Gets a value indicating whether the document was Pdf viewer document.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.PdfObjects">
            <summary>
            Gets the PDF objects collection, which stores all objects and references to it..
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.CurrentSavingObj">
            <summary>
            Gets or sets the current saving object number.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.CrossTable">
            <summary>
            Gets the cross-reference table.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.Catalog">
            <summary>
            Gets the PDF document catalog.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.DisposeObjects">
            <summary>
            Gets a list of the objects that have to be disposed after document closing.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.PageCount">
            <summary>
            Gets the number of pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentBase.EnableMemoryOptimization">
            <summary>
            Gets or sets whether to optimize memory.
            </summary>
            <remarks>Optimization will be effective only with merge, append and import functions. 
            Only memory will be optimized, different in time occur based on the document size.
            </remarks>
        </member>
        <member name="T:Syncfusion.Pdf.PdfDocumentBase.DocumentSavedEventHandler">
            <summary>
            Delegate. Is used for raising events after document saving.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfDocumentBase.NodeInfo">
            <summary>
            Holds info about current node.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.NodeInfo.Index">
            <summary>
            Internal variable to store index value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.NodeInfo.Base">
            <summary>
            Internal variable to store Bookmark.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentBase.NodeInfo.Kids">
            <summary>
            Internal variable to store ArrayList.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentBase.NodeInfo.#ctor(Syncfusion.Pdf.Interactive.PdfBookmarkBase,System.Collections.Generic.List{Syncfusion.Pdf.Interactive.PdfBookmarkBase})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfDocumentBase.NodeInfo"/> class.
            </summary>
            <param name="bookmarkBase">The bookmark base.</param>
            <param name="kids">The kids.</param>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.DefaultMargin">
            <summary>
            Default margin value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.s_defaultFont">
            <summary>
            Font used in complex objects to draw strings and text when it is not defined explicitly.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.s_cache">
            <summary>
            Cache of the objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.s_cacheLock">
            <summary>
            Helps to lock s_cache to avoid race conditions.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.m_pageTemplate">
            <summary>
            Internal variable to store template which is applied to each page of the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.m_attachments">
            <summary>
            Internal variable to store document's collection of attachments.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.m_pages">
            <summary>
            Internal variable to store document's collection of pages.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.m_isPdfViewerDocumentDisable">
            <summary>
            Indicates whether the document was Pdf Viewer document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.m_sections">
            <summary>
            Internal variable to store document's collection of sections.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.m_settings">
            <summary>
            Default page settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.m_outlines">
            <summary>
            Root outline.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.m_bPageLabels">
            <summary>
            Indicates if the page labels were set.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.m_bWasEncrypted">
            <summary>
            Indicates whether the document was encrypted or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.m_actions">
            <summary>
            Internal variable to store additional document's actions.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.m_colorSpace">
            <summary>
            Defines the color space of the document
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.m_progressDelegade">
            <summary>
            The delegade of the progress event handler.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.ConformanceLevel">
            <summary>
            Local Variable to store the Conformance Level.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocument.m_enableCache">
            <summary>
            Indicates whether enable cache or not
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfDocument"/> class.
            </summary>        
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font with Bold font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
            //Save the document.
            document.Save("Document.pdf");;
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font with Bold font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
            'Save the document.
            document.Save("Document.pdf");
            </code>
            </example>    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class                   
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfDocument"/> class.
            </summary>
            <param name="isMerging"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.SaveAsync(System.IO.Stream)">
            <summary>
            Save the document to a stream in Asynchronous mode.
            </summary>
            <param name="stream">Stream for saving the PDF document.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.Save(System.IO.Stream)">
            <summary>
            Saves the document to the specified stream.
            </summary>
            <param name="stream">The stream object where PDF document will be saved.</param>    
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;
            // Loads an Image            
            PdfImage pdfImg = new PdfBitmap(Image.FromFile("Logo.png")); 
            //Draw the image
            g.DrawImage(pdfImg, 20, 20, 100, 200);
            // Save the document as a stream
            MemoryStream stream = new MemoryStream();
            doc.Save(stream);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            ' Loads an Image            
            Dim pdfImg As PdfImage = New PdfBitmap(Image.FromFile("Logo.png"))
            'Draw the image
            g.DrawImage(pdfImg, 20, 20, 100, 200)
            ' Save the document as a stream
            Dim stream As MemoryStream = New MemoryStream()
            doc.Save(stream)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.Close(System.Boolean)">
            <summary>
            Closes the document.
            </summary>
            <param name="completely">if set to <c>true</c> the document should be disposed completely.</param>
            <remarks>The document is disposed after calling the Close method. So, the document can't be saved if Close method was invoked.</remarks>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();            
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;                        
            //Create a solid brush
            PdfBrush brush = new PdfSolidBrush(Color.Black);          
            float fontSize = 20f;
            //Set the font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, fontSize);            
            //Draw the text
            g.DrawString("Hello world!", font, brush,new PointF(20,20));           
            doc.Save("Sample.pdf");
            // Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            'Create a solid brush
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Black)
            Dim fontSize As Single = 20f
            'Set the font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, fontSize)
            'Draw the text
            g.DrawString("Hello world!", font, brush,New PointF(20,20))
            doc.Save("Sample.pdf")
            ' Closes the document.
            doc.Close(True)
            </code>
            </example>                
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <value>A new object that is a copy of this instance.</value>        
            <remarks>The resulting clone must be of the same type as or a compatible type to the original instance.</remarks>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();            
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;                        
            //Create a solid brush
            PdfBrush brush = new PdfSolidBrush(Color.Black);          
            float fontSize = 20f;
            //Set the font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, fontSize);            
            //Draw the text
            g.DrawString("Hello world!", font, brush,new PointF(20,20));           
            // Cloning the document
            PdfDocument cloneDoc = doc.Clone();
            cloneDoc.Save("Clone.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            'Create a solid brush
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Black)
            Dim fontSize As Single = 20f
            'Set the font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, fontSize)
            'Draw the text
            g.DrawString("Hello world!", font, brush,New PointF(20,20))
            ' Cloning the document
            Dim cloneDoc As PdfDocument = doc.Clone()
            cloneDoc.Save("Clone.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.ValidateLicense">
            <summary>
            Checks whether license is valid.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.OnPageSave(Syncfusion.Pdf.PdfPage)">
            <summary>
            Called when a page is saved.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.PageLabelsSet">
            <summary>
            Informs the document that the page labels were set.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.OnSaveProgress(Syncfusion.Pdf.ProgressEventArgs)">
            <summary>
            Raises the <see cref="E:Progress"/> event.
            </summary>
            <param name="arguments">The <see cref="T:Syncfusion.Pdf.ProgressEventArgs"/>
            instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.CheckPagesPresence">
            <summary>
            Checks the pages presence.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.ProcessPageLabels">
            <summary>
            Processes the page labels.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.ResetProgress">
            <summary>
            Resets the progress mechanism.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.SetProgress">
            <summary>
            Sets the progress mechanism.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.SetDocumentColorProfile">
            <summary>
            Embeds the RGB ICC ColorProfile to the document to attain PDF/A conformance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.GetForm">
            <summary>
            Gets the form.
            </summary>
            <returns>The proper PdfForm instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocument.AddFields(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfPageBase,System.Collections.Generic.List{Syncfusion.Pdf.Interactive.PdfField})">
            <summary>
            Adds the fields connected to the page.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="newPage">The new page.</param>
            <param name="fields">The lost of the fields.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.PdfDocument.ClonePage(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfPageBase,System.Collections.Generic.List{Syncfusion.Pdf.Primitives.PdfArray})" -->
        <member name="E:Syncfusion.Pdf.PdfDocument.SaveProgress">
            <summary>
            Occurs when the document is being saved.
            </summary>
            <remarks>
            This event raised on saving the document. It will keep track of the save progress of the document.
            </remarks> 
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add new pages to the document.
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold);
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
            document.SaveProgress += new PdfDocument.ProgressEventHandler(document_SaveProgress);
            //Saves the document
            document.Save("Document.pdf");;
            // Event handler for PageAdded event
            void document_SaveProgress(object sender, ProgressEventArgs arguments)
            {
              MessageBox.Show(String.Format("Current: {0}, Progress: {1}, Total {2}", arguments.Current, arguments.Progress, arguments.Total));
            }
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Private document As PdfDocument = New PdfDocument()
            'Add new pages to the document.
            Private page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Private font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
            AddHandler document.SaveProgress, AddressOf document_SaveProgress
            'Saves the document
            document.Save("Document.pdf");
            ' Event handler for PageAdded event
            Private Sub document_SaveProgress(ByVal sender As Object, ByVal arguments As ProgressEventArgs)
             MessageBox.Show(String.Format("Current: {0}, Progress: {1}, Total {2}", arguments.Current, arguments.Progress, arguments.Total))
            End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument.ProgressEventHandler"/> Delegate
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocument.Template">
            <summary>
            Gets or sets a template that is applied to all pages in the document.
            </summary>        
            <example>
            <code lang="C#">
            //Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            RectangleF rect = new RectangleF(0, 0, page.GetClientSize().Width, page.GetClientSize().Height);
            //Creates a new page and adds it as the last page of the document template
            PdfPageTemplateElement footer = new PdfPageTemplateElement(rect);
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            PdfSolidBrush brush = new PdfSolidBrush(Color.Gray);
            //Create page number field
            PdfPageNumberField pageNumber = new PdfPageNumberField(font, brush);
            //Create page count field
            PdfPageCountField count = new PdfPageCountField(font, brush);
            PdfCompositeField compositeField = new PdfCompositeField(font, brush, "Page {0} of {1}", pageNumber, count);
            compositeField.Bounds = footer.Bounds;
            compositeField.Draw(footer.Graphics, new PointF(40, footer.Height - 50));          
            //Add the footer template at the bottom
            doc.Template.Bottom = footer;
            doc.Save("Template.pdf");
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            Dim rect As RectangleF = New RectangleF(0, 0, page.GetClientSize().Width, page.GetClientSize().Height)
            'Create a page template
            Dim footer As PdfPageTemplateElement = New PdfPageTemplateElement(rect)
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Gray)
            'Create page number field
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField(font, brush)
            'Create page count field
            Dim count As PdfPageCountField = New PdfPageCountField(font, brush)
            Dim compositeField As PdfCompositeField = New PdfCompositeField(font, brush, "Page {0} of {1}", pageNumber, count)
            compositeField.Bounds = footer.Bounds
            compositeField.Draw(footer.Graphics, New PointF(40, footer.Height - 50))
            'Add the footer template at the bottom
            doc.Template.Bottom = footer
            doc.Save("Template.pdf")
            </code>
            </example>
            <value>The <see cref="T:Syncfusion.Pdf.PdfDocumentTemplate"/> specifying the default template for the document.</value>
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfTemplate"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocument.IsPdfViewerDocumentDisable">
            <summary>
            Gets a value indicating whether the document was PDF viewer document.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocument.Actions">
            <summary>
            Gets the additional document's actions.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document
            PdfDocument document = new PdfDocument();
            //Create and add new launch Action to the document
            PdfLaunchAction action = new PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte);
            document.Actions.AfterOpen = action;
            //Save the document
            document.Save("LaunchAction.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Create and add new launch Action to the document.
            Dim action As PdfLaunchAction = New PdfLaunchAction("myAction.txt", PdfFilePathType.Absoulte)
            document.Actions.AfterOpen = action
            'Save the document
            document.Save("LaunchAction.pdf")
            </code>
            </example>
            <value>The <see cref="T:Syncfusion.Pdf.Interactive.PdfDocumentActions"/> specifying the document action.</value>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLaunchAction"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocument.Pages">
            <summary>
            Gets the collection of the pages in the document.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.PdfDocumentPageCollection"/> object containing the list of document's pages. </value>
            <remarks>This collection is exposed for usability purposes only.
            The pages are contained in the sections. So, sections should be used for pages manipulating.</remarks>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument(); 
            // Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Page collection
            PdfDocumentPageCollection pageCollection = doc.Pages;
            PdfFont standardFont = new PdfStandardFont(PdfFontFamily.TimesRoman,10);  
            // Drawing string on first page
            pageCollection[0].Graphics.DrawString("FirstPage", standardFont, PdfBrushes.Black, new PointF(10, 10));
            doc.Save("Pages.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            ' Page collection
            Dim pageCollection As PdfDocumentPageCollection = doc.Pages
            Dim standardFont As PdfFont = New PdfStandardFont(PdfFontFamily.TimesRoman,10)
            ' Drawing string on first page
            pageCollection(0).Graphics.DrawString("FirstPage", standardFont, PdfBrushes.Black, New PointF(10, 10))
            doc.Save("Pages.pdf")
            </code>
            </example>        
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.PdfDocument.Sections" -->
        <member name="P:Syncfusion.Pdf.PdfDocument.PageSettings">
            <summary>
            Gets or sets page settings of the document's sections.
            </summary>
            <example>
            <value>A <see cref="T:Syncfusion.Pdf.PdfPageSettings"/> object containing the setting values for a document`s pages.</value>
            <code lang="C#">
            // Create a new document class object.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set page size
            doc.PageSettings.Size = PdfPageSize.A6;
            //Set page orientation
            doc.PageSettings.Orientation = PdfPageOrientation.Landscape;
            doc.Save("PageSettings.pdf");
            </code>
            <code lang="VB">
            ' Create a new document class object.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Set page size
            doc.PageSettings.Size = PdfPageSize.A6
            'Set page orientation
            doc.PageSettings.Orientation = PdfPageOrientation.Landscape
            doc.Save("PageSettings.pdf")
            </code>
            </example>
            <remarks>The changing of the settings doesn't take any effect on the already existing pages.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocument.Bookmarks">
            <summary>
            Gets the root of the bookmark tree in the document.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfBookmarkBase"/> object specifying the document's bookmarks. </value>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Create outline
            PdfBookmark bookMark = document.Bookmarks.Add("InteractiveFeature");
            bookMark.Color = Color.DarkBlue;
            bookMark.TextStyle = PdfTextStyle.Bold;
            bookMark.Title = "Interactive Feature";
            bookMark.Destination = new PdfDestination(page);
            doc.Save("Bookmarks.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create outline
            Dim bookMark As PdfBookmark = document.Bookmarks.Add("InteractiveFeature")
            bookMark.Color = Color.DarkBlue
            bookMark.TextStyle = PdfTextStyle.Bold
            bookMark.Title = "Interactive Feature"
            bookMark.Destination = New PdfDestination(page)
            doc.Save("Bookmarks.pdf")
            </code>
            </example>
            <remarks>Creates an bookmark root instance
            if it's called for first time.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocument.Attachments">
            <summary>
            Gets the attachments of the document.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            // Creates a new page in document
            PdfPage page = doc.Pages.Add();
            // Adding an image as attachment
            PdfAttachment attachment = new PdfAttachment("Logo.jpg");
            attachment.Description = "Syncfusion Logo";
            attachment.MimeType = "application/jpeg";
            // Add the attachment in document
            doc.Attachments.Add(attachment);
            doc.Save("Attachment.pdf");
            </code>
            <code lang="VB">
            ' Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Creates a new page in document
            Dim page As PdfPage = doc.Pages.Add()
            ' Adding an image as attachment
            Dim attachment As PdfAttachment = New PdfAttachment("Logo.jpg")
            attachment.Description = "Syncfusion Logo"
            attachment.MimeType = "application/jpeg"
            ' Add the attachment in document
            doc.Attachments.Add(attachment)
            doc.Save("Attachment.pdf")
            </code>
            </example>
            <value>The <see cref="T:Syncfusion.Pdf.Interactive.PdfAttachmentCollection"/> object contains list of files which are attached in the PDF document.</value>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfAttachment"/> Class.
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocument.Form">
            <summary>
            Gets the interactive form of the document.
            </summary>
            <example>
            <code lang="C#">
            // Create a document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a text box
            PdfTextBoxField firstNameTextBox = new PdfTextBoxField(page, "firstNameTextBox");                    
            firstNameTextBox.Bounds = new RectangleF(100, 20, 200, 20);
            firstNameTextBox.Font = font;            
            //Add the textbox in form
            document.Form.Fields.Add(firstNameTextBox);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            ' Create a document.
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create a text box
            Dim firstNameTextBox As PdfTextBoxField = New PdfTextBoxField(page, "firstNameTextBox")        
            firstNameTextBox.Bounds = New RectangleF(100, 20, 200, 20)
            firstNameTextBox.Font = font
            'Add the textbox in form
            document.Form.Fields.Add(firstNameTextBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <value>The <see cref="T:Syncfusion.Pdf.Interactive.PdfForm"/> object contains the list of form elements of the document.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocument.ColorSpace">
            <summary>
            Gets or sets the color space of the document.
            </summary>
            <remarks>This property has impact on the new created pages only.
            If a page was created it remains its colour space obliviously
            to this property changes.</remarks>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //  Set the document`s color spaces as GrayScale 
            doc.ColorSpace = PdfColorSpace.GrayScale;
            doc.Save("ColorSpace.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s color spaces as GrayScale 
            doc.ColorSpace = PdfColorSpace.GrayScale
            doc.Save("ColorSpace.pdf")
            </code>
            </example>
            <value>The <see cref="T:Syncfusion.Pdf.Graphics.PdfColorSpace"/> of the document.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocument.Cache">
            <summary>
            Gets collection of the cached objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocument.DefaultFont">
            <summary>
            Gets the default font. It is used for complex objects when font is 
            not explicitly defined.
            </summary>
            <value>The default font.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocument.WasEncrypted">
            <summary>
            Gets a value indicating whether the document was encrypted.
            </summary>
            <value><c>true</c> if the document was encrypted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocument.PageCount">
            <summary>
            Gets the number of pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocument.Conformance">
            <summary>
            Gets or Sets the Pdf Conformance level.
            Supported : PDF/A-1b - Level B compliance in Part 1
            </summary>
            <value>The <see cref="T:Syncfusion.Pdf.PdfConformanceLevel"/>.</value>
            <remarks>Not Supported under Medium Trust environment.</remarks>
            <example>
            <remarks>Default value is None.</remarks>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument(PdfConformanceLevel.Pdf_A1B);
            //Creates a new page and adds it as the last page of the document to the document.
            PdfPage page = document.Pages.Add();
            // Create a 'Times New Roman' font
            Font font = new Font("Times New Roman", 10);
            // Create font with bold font style.
            PdfFont pdfFont = new PdfTrueTypeFont(font, false);
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", pdfFont, PdfBrushes.Black, new PointF(10, 10));
            //Save document to disk.
            document.Save("ConformanceLevel.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument(PdfConformanceLevel.Pdf_A1B)
            ' Create a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            ' Create a 'Times New Roman' font
            Dim font As Font = New Font("Times New Roman", 10)
            ' Create font with bold font style.
            Dim pdfFont As PdfFont = New PdfTrueTypeFont(font, False)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", pdfFont, PdfBrushes.Black, New PointF(10, 10))
            'Save document to disk.
            document.Save("ConformanceLevel.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.PdfDocument.ProgressEventHandler">
            <summary>
            Delegate for the <see cref="T:Syncfusion.Pdf.PdfDocument.ProgressEventHandler"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="arguments">The arguments.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add new pages to the document.
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold);
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
            document.SaveProgress += new PdfDocument.ProgressEventHandler(document_SaveProgress);
            //Saves the document
            document.Save("Document.pdf");;
            //  Handles the event
            void document_SaveProgress(object sender, ProgressEventArgs arguments)
            {
              MessageBox.Show(String.Format("Current: {0}, Progress: {1}, Total {2}", arguments.Current, arguments.Progress, arguments.Total));
            }
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Private document As PdfDocument = New PdfDocument()
            'Add new pages to the document.
            Private page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Private font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
            AddHandler document.SaveProgress, AddressOf document_SaveProgress
            'Saves the document
            document.Save("Document.pdf");
            '  Handles the event
            Private Sub document_SaveProgress(ByVal sender As Object, ByVal arguments As ProgressEventArgs)
             MessageBox.Show(String.Format("Current: {0}, Progress: {1}, Total {2}", arguments.Current, arguments.Progress, arguments.Total))
            End Sub
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.ProgressEventArgs">
            <summary>
            Shows the saving progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ProgressEventArgs.m_total">
            <summary>
            The Total
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ProgressEventArgs.m_current">
            <summary>
            The Current object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ProgressEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ProgressEventArgs"/> class.
            </summary>
            <param name="current">The current index.</param>
            <param name="total">The total number.</param>
        </member>
        <member name="M:Syncfusion.Pdf.ProgressEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.ProgressEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.ProgressEventArgs.Total">
            <summary>
            Gets the total number of the elements (pages) that need to be saved.
            </summary>     
        </member>
        <member name="P:Syncfusion.Pdf.ProgressEventArgs.Current">
            <summary>
            Gets the current element (page) index that just was saved.
            </summary>
            <remarks>The index value increases constantly from 0 to Total.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.ProgressEventArgs.Progress">
            <summary>
            Gets the progress.
            </summary>
            <remarks>Progress constantly increases from 0.0 to 1.0.
            1.0 value means that entire document has been saved.</remarks>
        </member>
        <member name="T:Syncfusion.Pdf.DocumentSavedEventArgs">
            <summary>
            Arguments for event raised after document saving.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.DocumentSavedEventArgs.m_writer">
            <summary>
            Document's destination stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.DocumentSavedEventArgs.#ctor(Syncfusion.Pdf.IO.PdfWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.DocumentSavedEventArgs"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Syncfusion.Pdf.DocumentSavedEventArgs.Writer">
            <summary>
            Gets document's destination stream.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfDocumentInformation">
            <summary>
            A class containing the information about the document.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument pdfDoc= new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = pdfDoc.Pages.Add();           
            //Set the Document`s properties.
            pdfDoc.DocumentInformation.Title = "Document Properties Information";
            pdfDoc.DocumentInformation.Author = "Syncfusion";
            pdfDoc.DocumentInformation.Keywords = "PDF";
            pdfDoc.DocumentInformation.Subject = "PDF demo";
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software";
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now;
            //Save the document
            pdfDoc.Save("DocumentInformation.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim pdfDoc As PdfDocument= New PdfDocument()
            'Create a page
            Dim page As PdfPage = pdfDoc.Pages.Add()
            'set the Document`s properties.
            pdfDoc.DocumentInformation.Title = "Document Properties Information"
            pdfDoc.DocumentInformation.Author = "Syncfusion"
            pdfDoc.DocumentInformation.Keywords = "PDF"
            pdfDoc.DocumentInformation.Subject = "PDF demo"
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software"
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now
            'Save the document
            pdfDoc.Save("DocumentInformation.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.IPdfWrapper"/> Interface   
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentInformation.m_catalog">
            <summary>
            Parent catalog class.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentInformation.m_author">
            <summary>
            Author of the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentInformation.m_title">
            <summary>
            Title of the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentInformation.m_subject">
            <summary>
            The subject of the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentInformation.m_keywords">
            <summary>
            Keywords associated with the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentInformation.m_creator">
            <summary>
            If the document was converted to PDF from another format, the name of 
            the application that created the original document from which it was converted.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentInformation.m_producer">
            <summary>
            If the document was converted to PDF from another format, the name of the 
            application that converted it to PDF.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentInformation.m_creationDate">
            <summary>
            The date and time the document was created.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentInformation.m_modificationDate">
            <summary>
            The date and time the document was modified.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentInformation.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentInformation.#ctor(Syncfusion.Pdf.PdfCatalog)">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentInformation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.PdfCatalog)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfDocumentInformation"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="catalog">The catalog.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentInformation.ApplyPdfXConformance">
            <summary>
            Applies to attributes to attain PDF/X1a:2001 conformance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentInformation.CreationDate">
            <summary>
            Gets or sets the creation date.
            </summary>
            <value>The creation date.</value>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument pdfDoc= new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = pdfDoc.Pages.Add();           
            //Set the document`s information.
            pdfDoc.DocumentInformation.Title = "Document Properties Information";
            pdfDoc.DocumentInformation.Author = "Syncfusion";
            pdfDoc.DocumentInformation.Keywords = "PDF";
            pdfDoc.DocumentInformation.Subject = "PDF demo";
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software";
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now;
            //Save the document
            pdfDoc.Save("DocumentInformation.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim pdfDoc As PdfDocument= New PdfDocument()
            'Create a page
            Dim page As PdfPage = pdfDoc.Pages.Add()
            'Set the document`s information.
            pdfDoc.DocumentInformation.Title = "Document Properties Information"
            pdfDoc.DocumentInformation.Author = "Syncfusion"
            pdfDoc.DocumentInformation.Keywords = "PDF"
            pdfDoc.DocumentInformation.Subject = "PDF demo"
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software"
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now
            'Save the document
            pdfDoc.Save("DocumentInformation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentInformation.ModificationDate">
            <summary>
            Gets or sets the modification date.
            </summary>
            <value>The modification date.</value>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument pdfDoc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = pdfDoc.Pages.Add();
            //Set the document`s information.
            pdfDoc.DocumentInformation.Title = "Document Properties Information";
            pdfDoc.DocumentInformation.Author = "Syncfusion";
            pdfDoc.DocumentInformation.Keywords = "PDF";
            pdfDoc.DocumentInformation.Subject = "PDF demo";
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software";
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now;
            //Sets the modification date
            pdfDoc.DocumentInformation.ModificationDate = DateTime.Now;
            //Save the document
            pdfDoc.Save("DocumentInformation.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim pdfDoc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = pdfDoc.Pages.Add()
            'Set the document`s information.
            pdfDoc.DocumentInformation.Title = "Document Properties Information"
            pdfDoc.DocumentInformation.Author = "Syncfusion"
            pdfDoc.DocumentInformation.Keywords = "PDF"
            pdfDoc.DocumentInformation.Subject = "PDF demo"
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software"
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now
            'Sets the modification date
            pdfDoc.DocumentInformation.ModificationDate = DateTime.Now
            'Save the document
            pdfDoc.Save("DocumentInformation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentInformation.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument pdfDoc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = pdfDoc.Pages.Add();
            //Set the document`s information.
            pdfDoc.DocumentInformation.Title = "Document Properties Information";
            pdfDoc.DocumentInformation.Author = "Syncfusion";
            pdfDoc.DocumentInformation.Keywords = "PDF";
            pdfDoc.DocumentInformation.Subject = "PDF demo";
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software";
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now;       
            pdfDoc.DocumentInformation.ModificationDate = DateTime.Now;
            //Save the document
            pdfDoc.Save("DocumentInformation.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim pdfDoc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = pdfDoc.Pages.Add()
            'Set the document`s information.
            pdfDoc.DocumentInformation.Title = "Document Properties Information"
            pdfDoc.DocumentInformation.Author = "Syncfusion"
            pdfDoc.DocumentInformation.Keywords = "PDF"
            pdfDoc.DocumentInformation.Subject = "PDF demo"
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software"
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now        
            pdfDoc.DocumentInformation.ModificationDate = DateTime.Now
            'Save the document
            pdfDoc.Save("DocumentInformation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentInformation.Author">
            <summary>
            Gets or sets the author.
            </summary>
            <value>The author of the document.</value>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument pdfDoc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = pdfDoc.Pages.Add();
            //Set the document`s information.
            pdfDoc.DocumentInformation.Title = "Document Properties Information";
            // Sets the author information
            pdfDoc.DocumentInformation.Author = "Syncfusion";
            pdfDoc.DocumentInformation.Keywords = "PDF";
            pdfDoc.DocumentInformation.Subject = "PDF demo";
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software";
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now;       
            pdfDoc.DocumentInformation.ModificationDate = DateTime.Now;
            //Save the document
            pdfDoc.Save("DocumentInformation.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim pdfDoc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = pdfDoc.Pages.Add()
            'Set the document`s information.
            pdfDoc.DocumentInformation.Title = "Document Properties Information"
            ' Sets the author information
            pdfDoc.DocumentInformation.Author = "Syncfusion"
            pdfDoc.DocumentInformation.Keywords = "PDF"
            pdfDoc.DocumentInformation.Subject = "PDF demo"
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software"
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now        
            pdfDoc.DocumentInformation.ModificationDate = DateTime.Now
            'Save the document
            pdfDoc.Save("DocumentInformation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentInformation.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument pdfDoc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = pdfDoc.Pages.Add();
            //Set the document`s information.
            pdfDoc.DocumentInformation.Title = "Document Properties Information";        
            pdfDoc.DocumentInformation.Author = "Syncfusion";
            pdfDoc.DocumentInformation.Keywords = "PDF";
            // Sets the documents subject information
            pdfDoc.DocumentInformation.Subject = "PDF demo";
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software";
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now;       
            pdfDoc.DocumentInformation.ModificationDate = DateTime.Now;
            //Save the document
            pdfDoc.Save("DocumentInformation.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim pdfDoc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = pdfDoc.Pages.Add()
            'Set the document`s information.
            pdfDoc.DocumentInformation.Title = "Document Properties Information"        
            pdfDoc.DocumentInformation.Author = "Syncfusion"
            pdfDoc.DocumentInformation.Keywords = "PDF"
            ' Sets the documents subject information
            pdfDoc.DocumentInformation.Subject = "PDF demo"
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software"
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now        
            pdfDoc.DocumentInformation.ModificationDate = DateTime.Now
            'Save the document
            pdfDoc.Save("DocumentInformation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentInformation.Keywords">
            <summary>
            Gets or sets the keywords.
            </summary>
            <value>The keywords.</value>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument pdfDoc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = pdfDoc.Pages.Add();
            //Set the document`s information.
            pdfDoc.DocumentInformation.Title = "Document Properties Information";        
            pdfDoc.DocumentInformation.Author = "Syncfusion";
            // Sets the documents Keyword information
            pdfDoc.DocumentInformation.Keywords = "PDF";     
            pdfDoc.DocumentInformation.Subject = "PDF demo";
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software";
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now;       
            pdfDoc.DocumentInformation.ModificationDate = DateTime.Now;
            //Save the document
            pdfDoc.Save("DocumentInformation.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim pdfDoc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = pdfDoc.Pages.Add()
            'Set the document`s information.
            pdfDoc.DocumentInformation.Title = "Document Properties Information"        
            pdfDoc.DocumentInformation.Author = "Syncfusion"
            ' Sets the documents Keyword information
            pdfDoc.DocumentInformation.Keywords = "PDF"      
            pdfDoc.DocumentInformation.Subject = "PDF demo"
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software"
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now        
            pdfDoc.DocumentInformation.ModificationDate = DateTime.Now
            'Save the document
            pdfDoc.Save("DocumentInformation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentInformation.Creator">
            <summary>
            Gets or sets the creator.
            </summary>
            <value>The creator.</value>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument pdfDoc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = pdfDoc.Pages.Add();
            //Set the document`s information
            pdfDoc.DocumentInformation.Title = "Document Properties Information";
            pdfDoc.DocumentInformation.Author = "Syncfusion";
            pdfDoc.DocumentInformation.Keywords = "PDF";
            pdfDoc.DocumentInformation.Subject = "PDF demo";
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software";
            // Sets the documents creator information
            pdfDoc.DocumentInformation.Creator = "Essential PDF";
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now;
            pdfDoc.DocumentInformation.ModificationDate = DateTime.Now;
            //Save the document
            pdfDoc.Save("DocumentInformation.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim pdfDoc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = pdfDoc.Pages.Add()
            'Set the document`s information.
            pdfDoc.DocumentInformation.Title = "Document Properties Information"
            pdfDoc.DocumentInformation.Author = "Syncfusion"
            pdfDoc.DocumentInformation.Keywords = "PDF"
            pdfDoc.DocumentInformation.Subject = "PDF demo"
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software"
            ' Sets the documents creator information
            pdfDoc.DocumentInformation.Creator = "Essential PDF"
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now     
            pdfDoc.DocumentInformation.ModificationDate = DateTime.Now
            'Save the document
            pdfDoc.Save("DocumentInformation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentInformation.Producer">
            <summary>
            If the document was converted to PDF from another format,
            the name of the application (for example, Acrobat Distiller)
            that converted it to PDF.
            </summary>
            <value>The producer of the document.</value>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument pdfDoc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = pdfDoc.Pages.Add();
            // Set the various Document properties.
            pdfDoc.DocumentInformation.Title = "Document Properties Information";        
            pdfDoc.DocumentInformation.Author = "Syncfusion";
            // Sets the documents Keyword information
            pdfDoc.DocumentInformation.Keywords = "PDF";     
            pdfDoc.DocumentInformation.Subject = "PDF demo";
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software";
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now;       
            pdfDoc.DocumentInformation.ModificationDate = DateTime.Now;
            //Save the document
            pdfDoc.Save("DocumentInformation.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim pdfDoc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = pdfDoc.Pages.Add()
            'Set various Document properties.
            pdfDoc.DocumentInformation.Title = "Document Properties Information"        
            pdfDoc.DocumentInformation.Author = "Syncfusion"
            ' Sets the documents Keyword information
            pdfDoc.DocumentInformation.Keywords = "PDF"      
            pdfDoc.DocumentInformation.Subject = "PDF demo"
            pdfDoc.DocumentInformation.Producer = "Syncfusion Software"
            pdfDoc.DocumentInformation.CreationDate = DateTime.Now        
            pdfDoc.DocumentInformation.ModificationDate = DateTime.Now
            'Save the document
            pdfDoc.Save("DocumentInformation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentInformation.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentInformation.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.PdfFileStructure">
            <summary>
            This class represents a set of the properties that define the internal structure of PDF file.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the document`s cross reference type
            doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream;
            // Set the pdf version
            doc.FileStructure.Version = PdfVersion.Version1_6;
            // Save the document
            doc.Save("FileStructure.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s cross reference type
            doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream
            ' Set the pdf version
            doc.FileStructure.Version = PdfVersion.Version1_6
            ' Set the pdf version
            doc.Save("FileStructure.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.PdfFileStructure.m_version">
            <summary>
            the version of the file.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfFileStructure.m_crossReferenceType">
            <summary>
            The type of the cross-refrence.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfFileStructure.m_fileformat">
            <summary>
            Indicates the file format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfFileStructure.m_incrementalUpdate">
            <summary>
            Incremental operator bool value
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfFileStructure.m_taggedPdf">
            <summary>
            Tagged bool value
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfFileStructure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfFileStructure"/> class.
            </summary>    
        </member>
        <member name="E:Syncfusion.Pdf.PdfFileStructure.TaggedPdfChanged">
            <summary>
            Notifies if TaggedPDF property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfFileStructure.Version">
            <summary>
            Gets or sets the version of the PDF document.
            </summary>
            <value>The document version.</value>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();    
            // Set the pdf version
            doc.FileStructure.Version = PdfVersion.Version1_6;
            // Save the document
            doc.Save("FileStructure.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the pdf version
            doc.FileStructure.Version = PdfVersion.Version1_6
            ' Save the document
            doc.Save("FileStructure.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfFileStructure.IncrementalUpdate">
            <summary>
            Gets or sets a value indicating whether [incremental update].
            </summary>
            <value><c>true</c> if [incremental update]; otherwise, <c>false</c>.</value>
            <example>
            <code lang="C#">
            // Load an existing document
            PdfLoadedDocument lDoc = new PdfLoadedDocument("SourceDoc.pdf");
            // Sets the incremental update as True
            lDoc.FileStructure.IncrementalUpdate = true;
            //Creates a new page and adds it as the last page of the document
            lDoc.Pages.Add();
            // Saves the document
            lDoc.Save("FileStructure.pdf");
            </code>
            <code lang="VB">
            ' Load an existing document
            Dim lDoc As PdfLoadedDocument = New PdfLoadedDocument("SourceDoc.pdf")
            ' Sets the incremental update as True
            lDoc.FileStructure.IncrementalUpdate = True
            ' Create a page
            lDoc.Pages.Add()
            ' Saves the document
            lDoc.Save("FileStructure.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfFileStructure.CrossReferenceType">
            <summary>
            Gets or sets the type of PDF cross-reference.
            </summary>
            <remarks>Please see the description of <see cref="T:Syncfusion.Pdf.PdfCrossReferenceType"/> for more details.</remarks>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the cross reference type
            doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream;  
            // Save the document
            doc.Save("FileStructure.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the cross reference type
            doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream    
            ' Save the document
            doc.Save("FileStructure.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfFileStructure.FileFormat">
            <summary>
            Gets or sets the value indicating the format of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfFileStructure.TaggedPdf">
            <summary>
            Gets the value indicating whether the PDF document is tagged one or not.
            </summary>
            <value>If true PDF document is tagged, otherwise false.</value>
        </member>
        <member name="T:Syncfusion.Pdf.PdfViewerPreferences">
            <summary>
            Defines the way the document is to be presented on the screen or in print.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the document`s viewer preference
            doc.ViewerPreferences.PageMode = PdfPageMode.UseAttachments;
            doc.ViewerPreferences.PageScaling = PageScalingMode.None;
            doc.ViewerPreferences.FitWindow = true;
            doc.ViewerPreferences.PageLayout = PdfPageLayout.SinglePage;
            // Save the document
            doc.Save("ViewerPreferences.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s viewer preference
            doc.ViewerPreferences.PageMode = PdfPageMode.UseAttachments
            doc.ViewerPreferences.PageScaling = PageScalingMode.None
            doc.ViewerPreferences.FitWindow = True
            doc.ViewerPreferences.PageLayout = PdfPageLayout.SinglePage
            ' Save the document
            doc.Save("ViewerPreferences.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.PdfViewerPreferences.m_centerWindow">
            <summary>
            Internal variable to store value whether to center document's window.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfViewerPreferences.m_displayDocTitle">
            <summary>
            Internal variable to store value whether to display window�s title bar.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfViewerPreferences.m_fitWindow">
            <summary>
            Internal variable to store value whether to resize the document�s window 
            to fit the size of the first displayed page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfViewerPreferences.m_hideMenubar">
            <summary>
            Internal variable to store value whether to hide the viewer application�s 
            menu bar when the document is active.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfViewerPreferences.m_hideToolbar">
            <summary>
            Internal variable to store value whether to hide the viewer application�s 
            tool bars when the document is active.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfViewerPreferences.m_hideWindowUI">
            <summary>
            Internal vaiable to store value whether to hide user interface elements 
            in the document�s window.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfViewerPreferences.m_pageMode">
            <summary>
            Internal variable to store value how the document should be displayed when opened
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfViewerPreferences.m_pageLayout">
            <summary>
            Internal variable to store value specifying the page layout to be used when the 
            document is opened.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfViewerPreferences.m_catalog">
            <summary>
            Internal variable to store value specifying document's catalog.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfViewerPreferences.m_dictionary">
            <summary>
            Internal variable to store dictionary;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfViewerPreferences.m_pageScaling">
            <summary>
            Internal variable to store value specifying the page scaling mode used while printing.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfViewerPreferences.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfViewerPreferences"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfViewerPreferences.#ctor(Syncfusion.Pdf.PdfCatalog)">
            <summary>
            Initializes new <see cref="T:Syncfusion.Pdf.PdfViewerPreferences"/> instance.
            </summary>
            <param name="catalog">Catalog of the document.</param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfViewerPreferences.CenterWindow">
            <summary>
            A flag specifying whether to position the document�s window in the center of the screen.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the document`s viewer preference
            doc.ViewerPreferences.CenterWindow = true;           
            // Save the document
            doc.Save("ViewerPreferences.pdf");            
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s viewer preference
            doc.ViewerPreferences.CenterWindow = True
            ' Save the document
            doc.Save("ViewerPreferences.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfViewerPreferences.DisplayTitle">
            <summary>
            A flag specifying whether the window�s title bar should display the document title taken 
            from the Title entry of the document information dictionary. If false, the title bar 
            should instead display the name of the Pdf file containing the document.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the document`s viewer preference
            doc.ViewerPreferences.DisplayTitle = true;           
            // Save the document
            doc.Save("ViewerPreferences.pdf");            
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s viewer preference
            doc.ViewerPreferences.DisplayTitle = True
            ' Save the document
            doc.Save("ViewerPreferences.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfViewerPreferences.FitWindow">
            <summary>
            A flag specifying whether to resize the document�s window to fit the size of the first 
            displayed page.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the document`s viewer preference
            doc.ViewerPreferences.FitWindow = true;           
            // Save the document
            doc.Save("ViewerPreferences.pdf");            
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s viewer preference
            doc.ViewerPreferences.FitWindow = True
            ' Save the document
            doc.Save("ViewerPreferences.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfViewerPreferences.HideMenubar">
            <summary>
            A flag specifying whether to hide the viewer application�s menu bar when the 
            document is active.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the document`s viewer preference
            doc.ViewerPreferences.HideMenubar = true;           
            // Save the document
            doc.Save("ViewerPreferences.pdf");            
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s viewer preference
            doc.ViewerPreferences.HideMenubar = True
            ' Save the document
            doc.Save("ViewerPreferences.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfViewerPreferences.HideToolbar">
            <summary>
            A flag specifying whether to hide the viewer application�s tool bars when the document is active.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the document`s viewer preference
            doc.ViewerPreferences.HideToolbar = true;           
            // Save the document
            doc.Save("ViewerPreferences.pdf");            
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s viewer preference
            doc.ViewerPreferences.HideToolbar = True
            ' Save the document
            doc.Save("ViewerPreferences.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfViewerPreferences.HideWindowUI">
            <summary>
            A flag specifying whether to hide user interface elements in the document�s window 
            (such as scroll bars and navigation controls), leaving only the document�s contents displayed.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the document`s viewer preference
            doc.ViewerPreferences.HideWindowUI = true;           
            // Save the document
            doc.Save("ViewerPreferences.pdf");            
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s viewer preference
            doc.ViewerPreferences.HideWindowUI = True
            ' Save the document
            doc.Save("ViewerPreferences.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfViewerPreferences.PageMode">
            <summary>
            A name object specifying how the document should be displayed when opened.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the document`s viewer preference
            doc.ViewerPreferences.PageMode = PdfPageMode.UseAttachments;      
            // Save the document
            doc.Save("ViewerPreferences.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s viewer preference
            doc.ViewerPreferences.PageMode = PdfPageMode.UseAttachments      
            ' Save the document
            doc.Save("ViewerPreferences.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfViewerPreferences.PageLayout">
            <summary>
            A name object specifying the page layout to be used when the document is opened.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the document`s viewer preference      
            doc.ViewerPreferences.PageLayout = PdfPageLayout.SinglePage;
            // Save the document
            doc.Save("ViewerPreferences.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s viewer preference      
            doc.ViewerPreferences.PageLayout = PdfPageLayout.SinglePage
            ' Save the document
            doc.Save("ViewerPreferences.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfViewerPreferences.PageScaling">
            <summary>
            Gets or Set the page scaling option to be selected 
            when a print dialog is displayed for this document.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the document`s viewer preference      
            doc.ViewerPreferences.PageScaling = PageScalingMode.None;
            // Save the document
            doc.Save("ViewerPreferences.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s viewer preference
            doc.ViewerPreferences.PageScaling = PageScalingMode.None
            ' Save the document
            doc.Save("ViewerPreferences.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfViewerPreferences.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioAttributes.m_dictionary">
            <summary>
            Internal variable to store dictionary;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioAttributes.m_attributeKeys">
            <summary>
            Internal varible to store attribute keys
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioAttributes.m_attributes">
            <summary>
            Internal variable to store attributes
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioAttributes.#ctor">
            <summary>
            Initialize the instance of the class
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioAttributes.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initialize the instance of the class
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioAttributes.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioAttributes.AddAttributes(System.String,System.String)">
            <summary>
            Add the attributes into portfolio
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioAttributes.RemoveAttributes(System.String)">
            <summary>
            Remove the attributes from portfolio
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPortfolioAttributes.AttributesKey">
            <summary>
            Get Attribute keys
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPortfolioAttributes.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioInformation.m_catalog">
            <summary>
            Internal variable to store value specifying document's catalog.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioInformation.m_dictionary">
            <summary>
            Internal variable to store dictionary;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioInformation.m_Schema">
            <summary>
            internal variable to store schema of portfolio
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioInformation.m_viewMode">
            <summary>
            internal variable to store view mode
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioInformation.m_startupDocument">
            <summary>
            internal varible to store startup attachment document
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioInformation.#ctor">
            <summary>
            Initializes new  instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioInformation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initialize the new instance
            </summary>
            <param name="portfolioDictionary">portfolio dictionary </param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioInformation.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPortfolioInformation.Schema">
            <summary>
            Gets or sets the portfolio schema field
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPortfolioInformation.ViewMode">
            <summary>
            Get and set the viewmode of the portfolio
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPortfolioInformation.StartupDocument">
            <summary>
            Get and set the startup document of portfolio
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPortfolioInformation.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioSchema.m_dictionary">
            <summary>
            Internal variable to store dictionary;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioSchema.m_schemaField">
            <summary>
            Varible to store Schema field
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioSchema.fieldkeys">
            <summary>
            internal variable to store field keys
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioSchema.m_fieldCollections">
            <summary>
            Internal variable to store field collections
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioSchema.#ctor">
            <summary>
            Initialze the instance of the class
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioSchema.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            intialze the instance of the class
            </summary>
            <param name="schemaDictionary"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioSchema.AddSchemaField(Syncfusion.Pdf.PdfPortfolioSchemaField)">
            <summary>
            used to add the schemafield into schema dictionary
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioSchema.RemoveField(System.String)">
            <summary>
            used to remove the schemafield from schema dictionary
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioSchema.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPortfolioSchema.FieldKeys">
            <summary>
            Get the field keys from schema field
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPortfolioSchema.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioSchemaField.m_editable">
            <summary>
            variable to store editable value
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioSchemaField.m_name">
            <summary>
            Variable to store name of the schema field
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioSchemaField.m_order">
            <summary>
            variable to store the order of the schema field
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioSchemaField.m_visible">
            <summary>
            variable to store visibility of schema field
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPortfolioSchemaField.m_dictionary">
            <summary>
            Internal variable to store dictionary;
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioSchemaField.#ctor">
            <summary>
            initialize the instance of the class
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioSchemaField.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            initialize the instance of the class
            </summary>
            <param name="schemaField">scemafield dictionary</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPortfolioSchemaField.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPortfolioSchemaField.Editable">
            <summary>
            Gets or Sets the Editable value
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPortfolioSchemaField.Name">
            <summary>
            Gets or Sets the name of the schema field
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPortfolioSchemaField.Order">
            <summary>
            Gets or sets the Order of the Schema field
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPortfolioSchemaField.Type">
            <summary>
            Gets or Sets the schema field Type
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPortfolioSchemaField.Visible">
            <summary>
            Gets or Sets the visiblity of the Schema field
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPortfolioSchemaField.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.PdfFileFormat">
            <summary>
            Specifies the type of PDF file format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfFileFormat.Plain">
            <summary>
            Specifies plain PDF file format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfFileFormat.Linearized">
            <summary>
            Specifies Linearized PDF file format.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.HttpReadType">
            <summary>
            Specifies the different way of presenting the document at the client browser.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document 
            PdfPage page = doc.Pages.Add();
            // Load an existing image            
            PdfBitmap bmp = new PdfBitmap("Logo.png");
            // Draw the image
            page.Graphics.DrawImage(bmp, 20, 20, 100, 200);
            doc.Save("Sample.pdf", Response, HttpReadType.Open);   
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document 
            Dim page As PdfPage = doc.Pages.Add()
            ' Load an existing image            
            Dim bmp As PdfBitmap = New PdfBitmap("Logo.png")
            ' Draw the image
            page.Graphics.DrawImage(bmp, 20, 20, 100, 200)
            doc.Save("Sample.pdf", Response, HttpReadType.Open)
            </code>
            </example>
            <seealso cref="!:Syncfusion.Pdf.Page"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfBitmap"/> Class   
        </member>
        <member name="F:Syncfusion.Pdf.HttpReadType.Open">
            <summary>
            Send the generated document to the client browser and will open document inside browser or using application associated with .pdf extension externally.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.HttpReadType.Save">
            <summary>
            Send the generated document to the client browser and presents an option to save the document to disk or open inside the browser.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfVersion">
            <summary>
            Specifies the available PDF versions to save a PDF document.
            </summary>
            <example>
            <remarks>Default Value is Version1_5</remarks>
            <code lang="C#">
            //Create a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document 
            PdfPage page = doc.Pages.Add();    
            // Set the  pdf version as Version1_7
            doc.FileStructure.Version = PdfVersion.Version1_7;
            // Save the document
            doc.Save("FileStructure.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document 
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the  pdf version as Version1_7
            doc.FileStructure.Version = PdfVersion.Version1_7
            ' Save the document
            doc.Save("FileStructure.pdf")
            </code>
            </example>
            <seealso cref="!:FileStructure"/> Class       
        </member>
        <member name="F:Syncfusion.Pdf.PdfVersion.Version1_0">
            <summary>
            PDF version 1.0.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfVersion.Version1_1">
            <summary>
            PDF version 1.1.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfVersion.Version1_2">
            <summary>
            PDF version 1.2.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfVersion.Version1_3">
            <summary>
            PDF version 1.3. Adobe Acrobat 4.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfVersion.Version1_4">
            <summary>
            PDF version 1.4. Adobe Acrobat 5.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfVersion.Version1_5">
            <summary>
            PDF version 1.5. Adobe Acrobat 6.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfVersion.Version1_6">
            <summary>
            PDF version 1.6. Adobe Acrobat 7.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfVersion.Version1_7">
            <summary>
            PDF version 1.7. Adobe Acrobat 8.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfCrossReferenceType">
            <summary>
            Specifies the type of the PDF cross-reference.
            </summary>
            <remarks>Default value is CrossReferenceStream</remarks>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument doc = new PdfDocument();
            // Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set the CrossReferenceType as CrossReferenceStream
            doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream;  
            // Save the document
            doc.Save("FileStructure.pdf");
            </code>
            <code lang="VB">
            'Create a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the CrossReferenceType as CrossReferenceStream
            doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream    
            ' Save the document
            doc.Save("FileStructure.pdf")
            </code>
            </example>
            <seealso cref="!:FileStructure"/> Class    
        </member>
        <member name="F:Syncfusion.Pdf.PdfCrossReferenceType.CrossReferenceTable">
            <summary>
            The cross-reference table contains information that permits random access to indirect objects within the file so that the entire file need not be read to locate any particular object. The structure is useful for incremental updates, since it allows a new cross-reference section to be added to the PDF file, containing entries only for objects that have been added or deleted. Cross-reference is represented by cross-reference table. The cross-reference table is the traditional way of representing reference type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCrossReferenceType.CrossReferenceStream">
            <summary>
            Cross-reference is represented by cross-reference stream. Cross-reference streams are stream objects, and contain a dictionary and a data stream.
            This leads to more compact representation of the file data especially along with the compression enabled.
            This format is supported by PDF 1.5 version and higher only.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfConformanceLevel">
            <summary>
            Specifies the Pdf document's Conformance-level.
            </summary>
            <example>
            <remarks>Default value is None.</remarks>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument(PdfConformanceLevel.Pdf_A1B);
            //Creates a new page and adds it as the last page of the document to the document.
            PdfPage page = document.Pages.Add();
            // Create a 'Times New Roman' font
            Font font = new Font("Times New Roman", 10);
            // Create font with bold font style.
            PdfFont pdfFont = new PdfTrueTypeFont(font, false);
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", pdfFont, PdfBrushes.Black, new PointF(10, 10));
            //Save document to disk.
            document.Save("ConformanceLevel.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument(PdfConformanceLevel.Pdf_A1B)
            ' Create a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            ' Create a 'Times New Roman' font
            Dim font As Font = New Font("Times New Roman", 10)
            ' Create font with bold font style.
            Dim pdfFont As PdfFont = New PdfTrueTypeFont(font, False)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", pdfFont, PdfBrushes.Black, New PointF(10, 10))
            'Save document to disk.
            document.Save("ConformanceLevel.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class    
            <seealso cref="!:Syncfusion.Pdf.Graphics.Font"/> Class    
        </member>
        <member name="F:Syncfusion.Pdf.PdfConformanceLevel.None">
            <summary>
            Specifies Default / No Conformance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfConformanceLevel.Pdf_A1B">
            <summary>
            This PDF/A ISO standard [ISO 19005-1:2005] is based on Adobe PDF version 1.4
            and This Level B conformance indicates minimal compliance to ensure that the 
            rendered visual appearance of a conforming file is preservable over the long term.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfConformanceLevel.Pdf_X1A2001">
            <summary>
            This PDF/X-1a:2001 ISO standard [ISO 15930-1] is based on Adobe PDF version 1.3
            which uses only CMYK + Spot Color and this compliance to ensure that the 
            contents will be reliably reproduced in the repress environment.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PageScalingMode">
            <summary>
            Specifies the different page scaling option that shall be selected when a print dialog is displayed for this document.
            </summary>
            <remarks>Default value is AppDefault.</remarks>
            <example>
            <code lang="C#">
            //Create a new PDF document
            PdfDocument document = new PdfDocument();
            // Set AppDefault mode as page`s scaling mode 
            document.ViewerPreferences.PageScaling = PageScalingMode.AppDefault;
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font with Bold font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold);
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
            //Save documen to disk.
            document.Save("ScalingMode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document
            Dim document As PdfDocument = New PdfDocument()
            'Set AppDefault mode as page`s scaling mode
            document.ViewerPreferences.PageScaling = PageScalingMode.AppDefault
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font with Bold font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
            'Save documen to disk.
            document.Save("ScalingMode.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfViewerPreferences"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class    
        </member>
        <member name="F:Syncfusion.Pdf.PageScalingMode.AppDefault">
            <summary>
            Indicates the conforming reader�s default print scaling.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PageScalingMode.None">
            <summary>
            Indicates no page scaling.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPortfolioSchemaFieldType">
            <summary>
            indicates the type of the portfolio schema field.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPortfolioViewMode">
            <summary>
            indicates the type of the portfolio view mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.FieldPainter">
            <summary>
            Represents class which draws form fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FieldPainter.s_whiteBrush">
            <summary>
            Internal variable to store white brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FieldPainter.s_blackBrush">
            <summary>
            Internal variable to store black brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FieldPainter.s_silverBrush">
            <summary>
            Internal variable to store silver brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FieldPainter.s_grayBrush">
            <summary>
            Internal variable to store gray brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FieldPainter.s_pens">
            <summary>
            Internal variable to store cached pens.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FieldPainter.s_checkFieldFormat">
            <summary>
            Internal variable to store string format for check field symbols.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawButton(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PaintParams,System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws a button.
            </summary>
            <param name="g">The g.</param>
            <param name="paintParams">The paint params.</param>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawPressedButton(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PaintParams,System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws a pressed button.
            </summary>
            <param name="g">The g.</param>
            <param name="paintParams">The paint params.</param>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawTextBox(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PaintParams,System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat,System.Boolean,System.Boolean)">
            <summary>
            Draws a button.
            </summary>
            <param name="g">The g.</param>
            <param name="paintParams">The paint params.</param>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawListBox(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PaintParams,Syncfusion.Pdf.Interactive.PdfListFieldItemCollection,System.Int32[],Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws a list box.
            </summary>
            <param name="g">The graphics.</param>
            <param name="paintParams">The paint params.</param>
            <param name="items">The items.</param>
            <param name="selectedItem">The selected item index.</param>
            <param name="font">The font.</param>
            <param name="stringFormat">The string format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawCheckBox(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PaintParams,System.String,Syncfusion.Pdf.Interactive.PdfCheckFieldState)">
            <summary>
            Draws a check box.
            </summary>
            <param name="g">The g.</param>
            <param name="paintParams">The paint params.</param>
            <param name="checkSymbol">The check symbol.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawCheckBox(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PaintParams,System.String,Syncfusion.Pdf.Interactive.PdfCheckFieldState,Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Draws a check box.
            </summary>
            <param name="g">The g.</param>
            <param name="paintParams">The paint params.</param>
            <param name="checkSymbol">The check symbol.</param>
            <param name="state">The state.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawComboBox(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PaintParams)">
            <summary>
            Draws a combo box.
            </summary>
            <param name="g">The g.</param>
            <param name="paintParams">The paint params.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawRadioButton(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PaintParams,System.String,Syncfusion.Pdf.Interactive.PdfCheckFieldState)">
            <summary>
            Draws the radio button.
            </summary>
            <param name="g">The g.</param>
            <param name="paintParams">The paint params.</param>
            <param name="checkSymbol">The check symbol.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawSignature(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PaintParams)">
            <summary>
            Draws the signature.
            </summary>
            <param name="g">The g.</param>
            <param name="paintParams">The paint params.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawBorder(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Interactive.PdfBorderStyle,System.Int32)">
            <summary>
            Draws a border.
            </summary>
            <param name="g">The g.</param>
            <param name="bounds">The bounds.</param>
            <param name="borderPen">The border pen.</param>
            <param name="style">The style.</param>
            <param name="borderWidth">Width of the border.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawRoundBorder(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfPen,System.Int32)">
            <summary>
            Draws the round border.
            </summary>
            <param name="g">The g.</param>
            <param name="bounds">The bounds.</param>
            <param name="borderPen">The border pen.</param>
            <param name="borderWidth">Width of the border.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawRectangularControl(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PaintParams)">
            <summary>
            Draws a rectangular control.
            </summary>
            <param name="g">The g.</param>
            <param name="paintParams">The paint params.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawLeftTopShadow(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.RectangleF,System.Int32,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Draws the left top shadow.
            </summary>
            <param name="g">The g.</param>
            <param name="bounds">The bounds.</param>
            <param name="width">The width.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawRightBottomShadow(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.RectangleF,System.Int32,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Draws the right bottom shadow.
            </summary>
            <param name="g">The g.</param>
            <param name="bounds">The bounds.</param>
            <param name="width">The width.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.DrawRoundShadow(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PaintParams,Syncfusion.Pdf.Interactive.PdfCheckFieldState)">
            <summary>
            Draws the round shadow.
            </summary>
            <param name="g">The g.</param>
            <param name="paintParams">The paint params.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FieldPainter.GetPen(Syncfusion.Pdf.Graphics.PdfColor,System.Single)">
            <summary>
            Gets the pen.
            </summary>
            <param name="color">The color.</param>
            <param name="width">The width.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.FieldPainter.WhiteBrush">
            <summary>
            Gets the white brush.
            </summary>
            <value>The white brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.FieldPainter.BlackBrush">
            <summary>
            Gets the black brush.
            </summary>
            <value>The black brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.FieldPainter.GrayBrush">
            <summary>
            Gets the gray brush.
            </summary>
            <value>The gray brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.FieldPainter.SilverBrush">
            <summary>
            Gets the silver brush.
            </summary>
            <value>The silver brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.FieldPainter.CheckFieldFormat">
            <summary>
            Gets the check box format.
            </summary>
            <value>The check box format.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PaintParams">
            <summary>
            Represents class with field's paint parameters.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PaintParams.m_backBrush">
            <summary>
            Internal variable to store back brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PaintParams.m_foreBrush">
            <summary>
            Internal variable to store fore brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PaintParams.m_borderWidth">
            <summary>
            Internal variable to store border width.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PaintParams.m_borderPen">
            <summary>
            Internal variable to store border pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PaintParams.m_borderStyle">
            <summary>
            Internal variable to store border style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PaintParams.m_bounds">
            <summary>
            Internal variable to store bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PaintParams.m_shadowBrush">
            <summary>
            Internal variable to store shadow brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PaintParams.m_rotationAngle">
            <summary>
            Rotation angle of the form fields.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PaintParams.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PaintParams"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PaintParams.#ctor(System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Interactive.PdfBorderStyle,System.Int32,Syncfusion.Pdf.Graphics.PdfBrush,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PaintParams"/> class.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="backBrush">The back brush.</param>
            <param name="foreBrush">The fore brush.</param>
            <param name="borderPen">The border pen.</param>
            <param name="style">The style.</param>
            <param name="borderWidth">Width of the border.</param>
            <param name="shadowBrush">The shadow brush.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PaintParams.BackBrush">
            <summary>
            Gets or sets the back brush.
            </summary>
            <value>The back brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PaintParams.ForeBrush">
            <summary>
            Gets or sets the fore brush.
            </summary>
            <value>The fore brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PaintParams.BorderPen">
            <summary>
            Gets or sets the border pen.
            </summary>
            <value>The border pen.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PaintParams.BorderStyle">
            <summary>
            Gets or sets the border style.
            </summary>
            <value>The border style.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PaintParams.BorderWidth">
            <summary>
            Gets or sets the width of the border.
            </summary>
            <value>The width of the border.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PaintParams.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PaintParams.ShadowBrush">
            <summary>
            Gets or sets the shadow brush.
            </summary>
            <value>The shadow brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PaintParams.RotationAngle">
            <summary>
            Gets or Set the rotation angle.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfAppearanceField">
            <summary>
            Represents form field with appearance custom support.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfStyledField"/> Class   
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfStyledField">
            <summary>
            Represents form's field with style parameters.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfField"/> Class    
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfField">
            <summary>
            Represents field of the Pdf document's interactive form.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.IPdfWrapper"/> Interface  
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfField.m_name">
            <summary>
            Internal variable to store field's name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfField.m_page">
            <summary>
            Internal variable to store page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfField.m_flags">
            <summary>
            Internal variable to store flags of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfField.m_form">
            <summary>
            Internal variable to store form.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfField.m_mappingName">
            <summary>
            Internal variable to store mapping name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfField.m_export">
            <summary>
            Internal variable to store value whether to export field's data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfField.m_readOnly">
            <summary>
            Internal variable to store value whether the field is read only.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfField.m_required">
            <summary>
            Internal variable to store value whether the field is required.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfField.m_toolTip">
            <summary>
            Internal variable to store tool tip.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfField.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfField.m_flatten">
            <summary>
            Form flatten.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfField.m_disableAutoFormat">
            <summary>
            Indicates if AutoFormat has to be removed.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfField.#ctor(Syncfusion.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfField"/> class.
            </summary>
            <param name="page">The page where the field should be placed.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfField.SetForm(Syncfusion.Pdf.Interactive.PdfForm)">
            <summary>
            Sets the form.
            </summary>
            <param name="form">The form.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfField.Save">
            <summary>
            Saves an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfField.ApplyName(System.String)">
             <summary>
            Sets the proper name to the field.
             </summary>
             <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfField.Clone(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Clones the field.
            </summary>
            <param name="page">The page.</param>
            <returns>The copy of the field.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfField.DefineDefaultAppearance">
            <summary>
            Defines default appearance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfField.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfField.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the m_dictionary control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfField.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfField.Form">
            <summary>
            Gets the form.
            </summary>
            <value>The form.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfField.MappingName">
            <summary>
            Gets or sets the mapping name to be used when exporting interactive form 
            field data from the document.
            </summary>
            <value>The mapping name.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfField.Export">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfField"/> is export.
            </summary>
            <value><c>true</c> if export; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfField.ReadOnly">
            <summary>
            Gets or sets a value indicating whether [read only].
            </summary>
            <value> if the field is read only, set to <c>true</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfField.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfField"/> is required.
            </summary>
            <value><c>true</c> if required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfField.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfField.Page">
            <summary>
            Gets the page.
            </summary>
            <value>The page.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfField.Flatten">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfField"/> is flatten.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfField.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfField.Dictionary">
            <summary>
            Gets or sets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfField.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfStyledField.ShadowShift">
            <summary>
            Internal variable to store color shift value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfStyledField.m_widget">
            <summary>
            Internal variable to store widget of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfStyledField.m_font">
            <summary>
            Internal variable to store field's font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfStyledField.m_actions">
            <summary>
            Internal variable to store actions of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfStyledField.m_appearanceTemplate">
            <summary>
            Internal variable to store appearance template.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfStyledField.m_backBrush">
            <summary>
            Internal variable to store back color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfStyledField.m_foreBrush">
            <summary>
            Internal variable to store fore pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfStyledField.m_borderPen">
            <summary>
            Internal variable to store border pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfStyledField.m_stringFormat">
            <summary>
            Internal variable to store string format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfStyledField.m_shadowBrush">
            <summary>
            Internal variable to store shadow brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfStyledField.m_visible">
            <summary>
            Internal variable to store visibility of the field.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfStyledField.#ctor(Syncfusion.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfStyledField"/> class.
            </summary>
            <param name="page">The page where the field should be placed.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfStyledField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfStyledField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfStyledField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfStyledField.RemoveAnnoationFromPage(Syncfusion.Pdf.PdfPageBase,Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Removes the annotation from page.
            </summary>
            <param name="page">The page.</param>
            <param name="widget">The widget.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfStyledField.AddAnnotationToPage(Syncfusion.Pdf.PdfPageBase,Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Adds the annotation to page.
            </summary>
            <param name="page">The page.</param>
            <param name="widget">The widget.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfStyledField.BoundsAtLoadedPage(Syncfusion.Pdf.PdfPageBase,System.Drawing.RectangleF)">
            <summary>
            Bounds at loaded page.
            </summary>
            <param name="page">The page.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfStyledField.GetBoundsAtLoadedPage(Syncfusion.Pdf.PdfPageBase,System.Drawing.RectangleF)">
            <summary>
            Gets the bounds at loaded page.
            </summary>
            <param name="page">The page.</param>
            <param name="rect">The rect.</param>
            <returns>The bounds of field.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfStyledField.GetFont">
            <summary>
            Gets the font. If font is undefined default font will be used.
            </summary>
            <returns>font</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfStyledField.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfStyledField.DefineDefaultAppearance">
            <summary>
            Defines the default appearance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfStyledField.CreateBorderPen">
            <summary>
            Creates the border pen.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfStyledField.CreateBackBrush">
            <summary>
            Creates the back brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.BackColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.ForeColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.BorderWidth">
            <summary>
            Gets or sets the width of the border.
            </summary>
            <value>The width of the border.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.HighlightMode">
            <summary>
            Gets or sets the highlighting mode.
            </summary>
            <value>The highlighting mode.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text alignment.</value>
            <remarks>This property is meaningful for fields containing variable text only.
            (i.e. <seealso cref="T:Syncfusion.Pdf.Interactive.PdfTextBoxField"/>, <seealso cref="T:Syncfusion.Pdf.Interactive.PdfListBoxField"/> and
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfComboBoxField"/>).
            </remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.Actions">
            <summary>
            Gets the actions of the field.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.BorderStyle">
            <summary>
            Gets or sets the border style.
            </summary>
            <value>The border style.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfStyledField"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.ShadowBrush">
            <summary>
            Gets the right bottom beveled Shadow brush.
            </summary>
            <value>The right bottom beveled Shadow brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.Widget">
            <summary>
            Gets the widget.
            </summary>
            <value>The widget.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.AppearanceTemplate">
            <summary>
            Gets the appearance template.
            </summary>
            <value>The appearance template.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.BackBrush">
            <summary>
            Gets the back brush.
            </summary>
            <value>The back brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.BorderPen">
            <summary>
            Gets the border pen.
            </summary>
            <value>The border pen.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.ForeBrush">
            <summary>
            Gets the fore pen.
            </summary>
            <value>The fore pen.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfStyledField.StringFormat">
            <summary>
            Gets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAppearanceField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfAppearanceField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAppearanceField.#ctor(Syncfusion.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfAppearanceField"/> class.
            </summary>
            <param name="page">Page</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAppearanceField.Save">
            <summary>
            Saves an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAppearanceField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfAppearanceField.DrawAppearance(Syncfusion.Pdf.Graphics.PdfTemplate)">
            <summary>
            Draws the appearance.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfAppearanceField.Appearance">
            <summary>
            Gets the appearance.
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfButtonField">
            <summary>
            Represents button field in the PDF form.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics graphics = page.Graphics;
            // Creating action
            PdfSubmitAction submitAction = new PdfSubmitAction("http://stevex.net/dump.php");
            submitAction.DataFormat = SubmitDataFormat.Html;
            //Create submit button to transfer the values in the form
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(100, 500, 90, 20);
            submitButton.Font = font;
            submitButton.Text = "Submit";
            submitButton.Actions.MouseUp = submitAction;
            document.Form.Fields.Add(submitButton);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim graphics As PdfGraphics = page.Graphics
            ' Creating action
            Dim submitAction As PdfSubmitAction = New PdfSubmitAction("http://stevex.net/dump.php")
            submitAction.DataFormat = SubmitDataFormat.Html
            'Create submit button to transfer the values in the form
            Dim submitButton As PdfButtonField = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(100, 500, 90, 20)
            submitButton.Font = font
            submitButton.Text = "Submit"
            submitButton.Actions.MouseUp = submitAction
            document.Form.Fields.Add(submitButton)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfAppearanceField"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfSubmitAction"/> Class   
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfButtonField.m_text">
            <summary>
            Internal variable to store button's caption.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfButtonField.#ctor(Syncfusion.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfButtonField"/> class.
            </summary>
            <param name="page">The page where the fields should be placed.</param>
            <param name="name">The name of the button.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics graphics = page.Graphics;
            // Creating action
            PdfSubmitAction submitAction = new PdfSubmitAction("http://stevex.net/dump.php");
            submitAction.DataFormat = SubmitDataFormat.Html;
            //Create submit button to transfer the values in the form
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(100, 500, 90, 20);
            submitButton.Font = font;
            submitButton.Text = "Submit";
            submitButton.Actions.MouseUp = submitAction;
            document.Form.Fields.Add(submitButton);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim graphics As PdfGraphics = page.Graphics
            ' Creating action
            Dim submitAction As PdfSubmitAction = New PdfSubmitAction("http://stevex.net/dump.php")
            submitAction.DataFormat = SubmitDataFormat.Html
            'Create submit button to transfer the values in the form
            Dim submitButton As PdfButtonField = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(100, 500, 90, 20)
            submitButton.Font = font
            submitButton.Text = "Submit"
            submitButton.Actions.MouseUp = submitAction
            document.Form.Fields.Add(submitButton)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfAppearanceField"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfSubmitAction"/> Class  
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfButtonField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfButtonField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfButtonField.AddPrintAction">
            <summary>
            Adds Print action to current button field.
            <remarks>Clicking on the specified button will trigger the Print Dialog Box.</remarks>
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics graphics = page.Graphics;
            // Creating action
            PdfSubmitAction submitAction = new PdfSubmitAction("http://stevex.net/dump.php");
            submitAction.DataFormat = SubmitDataFormat.Html;
            //Create submit button to transfer the values in the form
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(100, 500, 90, 20);
            submitButton.Font = font;
            submitButton.Text = "Submit";
            // Subscribing print action
            submitButton.AddPrintAction();
            submitButton.Actions.MouseUp = submitAction;
            document.Form.Fields.Add(submitButton);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim graphics As PdfGraphics = page.Graphics
            ' Creating action
            Dim submitAction As PdfSubmitAction = New PdfSubmitAction("http://stevex.net/dump.php")
            submitAction.DataFormat = SubmitDataFormat.Html
            'Create submit button to transfer the values in the form
            Dim submitButton As PdfButtonField = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(100, 500, 90, 20)
            submitButton.Font = font
            submitButton.Text = "Submit"
            ' Subscribing print action
            submitButton.AddPrintAction()
            submitButton.Actions.MouseUp = submitAction
            document.Form.Fields.Add(submitButton)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfAppearanceField"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfSubmitAction"/> Class           
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfButtonField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfButtonField.Save">
            <summary>
            Saves an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfButtonField.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfButtonField.DrawAppearance(Syncfusion.Pdf.Graphics.PdfTemplate)">
            <summary>
            Draws the appearance.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfButtonField.DrawPressedAppearance(Syncfusion.Pdf.Graphics.PdfTemplate)">
            <summary>
            Draws the pressed appearance.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfButtonField.Text">
            <summary>
            Gets or sets the caption text.
            </summary>
            <value>The caption text.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics graphics = page.Graphics;
            // Creating action
            PdfSubmitAction submitAction = new PdfSubmitAction("http://stevex.net/dump.php");
            submitAction.DataFormat = SubmitDataFormat.Html;
            //Create submit button to transfer the values in the form
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(100, 500, 90, 20);
            submitButton.Font = font;
            submitButton.Text = "Submit";
            submitButton.Actions.MouseUp = submitAction;
            document.Form.Fields.Add(submitButton);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim graphics As PdfGraphics = page.Graphics
            ' Creating action
            Dim submitAction As PdfSubmitAction = New PdfSubmitAction("http://stevex.net/dump.php")
            submitAction.DataFormat = SubmitDataFormat.Html
            'Create submit button to transfer the values in the form
            Dim submitButton As PdfButtonField = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(100, 500, 90, 20)
            submitButton.Font = font
            submitButton.Text = "Submit"
            submitButton.Actions.MouseUp = submitAction
            document.Form.Fields.Add(submitButton)
            document.Save("Form.pdf")
            </code>
            </example>   
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfSubmitAction"/> Class   
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfCheckBoxField">
            <summary>
            Represents check box field in the PDF form.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics graphics = page.Graphics;
            //Create a check box
            PdfCheckBoxField checkBox = new PdfCheckBoxField(page, "C#.NET");   
            checkBox.Bounds = new RectangleF(100, 290, 20, 20);
            document.Form.Fields.Add(checkBox);
            checkBox.HighlightMode = PdfHighlightMode.Push;
            checkBox.BorderStyle = PdfBorderStyle.Beveled;
            //Set the value for the check box
            checkBox.Checked = true;
            document.Form.Fields.Add(checkBox);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim graphics As PdfGraphics = page.Graphics
            'Create a check box
            Dim checkBox As PdfCheckBoxField = New PdfCheckBoxField(page, "C#.NET") 
            checkBox.Bounds = New RectangleF(100, 290, 20, 20)
            document.Form.Fields.Add(checkBox)
            checkBox.HighlightMode = PdfHighlightMode.Push
            checkBox.BorderStyle = PdfBorderStyle.Beveled
            'Set the value for the check box
            checkBox.Checked = True
            document.Form.Fields.Add(checkBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfCheckFieldBase"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfCheckFieldBase">
            <summary>
            Represents base class for field which can be in checked and unchecked states.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics graphics = page.Graphics;
            //Create a check box
            PdfCheckBoxField checkBox = new PdfCheckBoxField(page, "C#.NET");    
            checkBox.Bounds = new RectangleF(100, 290, 20, 20);
            document.Form.Fields.Add(checkBox);
            checkBox.HighlightMode = PdfHighlightMode.Push;
            checkBox.BorderStyle = PdfBorderStyle.Beveled;
            //Set the value for the check box
            checkBox.Checked = true;
            document.Form.Fields.Add(checkBox);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim graphics As PdfGraphics = page.Graphics
            'Create a check box
            Dim checkBox As PdfCheckBoxField = New PdfCheckBoxField(page, "C#.NET")
            checkBox.Bounds = New RectangleF(100, 290, 20, 20)
            document.Form.Fields.Add(checkBox)
            checkBox.HighlightMode = PdfHighlightMode.Push
            checkBox.BorderStyle = PdfBorderStyle.Beveled
            'Set the value for the check box
            checkBox.Checked = True
            document.Form.Fields.Add(checkBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfStyledField"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.m_style">
            <summary>
            Internal variable to store check box' style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.m_checkedTemplate">
            <summary>
            Internal variable to store template for checked state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.m_uncheckedTemplate">
            <summary>
            Internal variable to store template for unchecked state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.m_pressedCheckedTemplate">
            <summary>
            Internal variable to store template for pressed checked state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.m_pressedUncheckedTemplate">
            <summary>
            Internal variable to store template for presssed unchecked state.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.#ctor(Syncfusion.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfCheckFieldBase"/> class.
            </summary>
            <param name="page">The page where the fields should be placed.</param>
            <param name="name">The name of the check box field.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics graphics = page.Graphics;
            //Create a check box
            PdfCheckBoxField checkBox = new PdfCheckBoxField(page, "C#.NET");
            checkBox.Bounds = new RectangleF(100, 290, 20, 20);
            document.Form.Fields.Add(checkBox);
            checkBox.HighlightMode = PdfHighlightMode.Push;
            checkBox.BorderStyle = PdfBorderStyle.Beveled;
            //Set the value for the check box
            checkBox.Checked = true;
            document.Form.Fields.Add(checkBox);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim graphics As PdfGraphics = page.Graphics
            'Create a check box
            Dim checkBox As PdfCheckBoxField = New PdfCheckBoxField(page, "C#.NET")     
            checkBox.Bounds = New RectangleF(100, 290, 20, 20)
            document.Form.Fields.Add(checkBox)
            checkBox.HighlightMode = PdfHighlightMode.Push
            checkBox.BorderStyle = PdfBorderStyle.Beveled
            'Set the value for the check box
            checkBox.Checked = True
            document.Form.Fields.Add(checkBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfStyledField"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfCheckFieldBase"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.StyleToString(Syncfusion.Pdf.Interactive.PdfCheckBoxStyle)">
            <summary>
            Styles to string.
            </summary>
            <param name="style">The style.</param>
            <returns>String representation of the check box' style.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.Save">
            <summary>
            Saves an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.DrawAppearance">
            <summary>
            Draws the appearance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.CreateTemplate(Syncfusion.Pdf.Graphics.PdfTemplate@)">
            <summary>
            Ensures the template is created.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.ReleaseTemplate(Syncfusion.Pdf.Graphics.PdfTemplate)">
            <summary>
            Releases the template.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>The <see cref="T:Syncfusion.Pdf.Interactive.PdfCheckBoxStyle"/> object specifies the style of the check box field.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics graphics = page.Graphics;
            //Create a check box
            PdfCheckBoxField checkBox = new PdfCheckBoxField(page, "C#.NET");
            //Set the value for the check box
            checkBox.Style = PdfCheckBoxStyle.Circle;        
            checkBox.Bounds = new RectangleF(100, 290, 20, 20);
            document.Form.Fields.Add(checkBox);
            checkBox.HighlightMode = PdfHighlightMode.Push;
            checkBox.BorderStyle = PdfBorderStyle.Beveled;
            //Set the value for the check box
            checkBox.Checked = true;
            document.Form.Fields.Add(checkBox);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim graphics As PdfGraphics = page.Graphics
            'Create a check box
            Dim checkBox As PdfCheckBoxField = New PdfCheckBoxField(page, "C#.NET")       
            'Set the value for the check box
            checkBox.Style = PdfCheckBoxStyle.Circle        
            checkBox.Bounds = New RectangleF(100, 290, 20, 20)
            document.Form.Fields.Add(checkBox)
            checkBox.HighlightMode = PdfHighlightMode.Push
            checkBox.BorderStyle = PdfBorderStyle.Beveled
            'Set the value for the check box
            checkBox.Checked = True
            document.Form.Fields.Add(checkBox);
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfStyledField"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.CheckedTemplate">
            <summary>
            Gets or sets the checked template.
            </summary>
            <value>The checked template.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.UncheckedTemplate">
            <summary>
            Gets or sets the unchecked template.
            </summary>
            <value>The unchecked template.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.PressedCheckedTemplate">
            <summary>
            Gets or sets the pressed checked template.
            </summary>
            <value>The pressed checked template.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfCheckFieldBase.PressedUncheckedTemplate">
            <summary>
            Gets or sets the pressed unchecked template.
            </summary>
            <value>The pressed unchecked template.</value>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckBoxField.m_checked">
            <summary>
            Internal variable to store value whether the check box is checked.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfCheckBoxField.#ctor(Syncfusion.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfCheckBoxField"/> class.
            </summary>
            <param name="page">The page where the fields should be placed.</param>
            <param name="name">The name of the check box field.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics graphics = page.Graphics;
            //Create a check box
            PdfCheckBoxField checkBox = new PdfCheckBoxField(page, "C#.NET");        
            checkBox.Bounds = new RectangleF(100, 290, 20, 20);
            document.Form.Fields.Add(checkBox);
            checkBox.HighlightMode = PdfHighlightMode.Push;
            checkBox.BorderStyle = PdfBorderStyle.Beveled;
            //Set the value for the check box
            checkBox.Checked = true;
            document.Form.Fields.Add(checkBox);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim graphics As PdfGraphics = page.Graphics
            'Create a check box
            Dim checkBox As PdfCheckBoxField = New PdfCheckBoxField(page, "C#.NET")      
            checkBox.Bounds = New RectangleF(100, 290, 20, 20)
            document.Form.Fields.Add(checkBox)
            checkBox.HighlightMode = PdfHighlightMode.Push
            checkBox.BorderStyle = PdfBorderStyle.Beveled
            'Set the value for the check box
            checkBox.Checked = True
            document.Form.Fields.Add(checkBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfCheckBoxField.Save">
            <summary>
            Saves an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfCheckBoxField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfCheckBoxField.DrawAppearance">
            <summary>
            Draws the appearance of the field.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfCheckBoxField.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfCheckBoxField"/> is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics graphics = page.Graphics;
            //Create a check box
            PdfCheckBoxField checkBox = new PdfCheckBoxField(page, "C#.NET");
            //Set the value for the check box
            checkBox.Checked = true;       
            checkBox.Bounds = new RectangleF(100, 290, 20, 20);
            document.Form.Fields.Add(checkBox);
            checkBox.HighlightMode = PdfHighlightMode.Push;
            checkBox.BorderStyle = PdfBorderStyle.Beveled;
            //Set the value for the check box
            checkBox.Checked = true;
            document.Form.Fields.Add(checkBox);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim graphics As PdfGraphics = page.Graphics
            'Create a check box
            Dim checkBox As PdfCheckBoxField = New PdfCheckBoxField(page, "C#.NET")
            'Set the value for the check box
            checkBox.Checked = True
            checkBox.Bounds = New RectangleF(100, 290, 20, 20)
            document.Form.Fields.Add(checkBox)
            checkBox.HighlightMode = PdfHighlightMode.Push
            checkBox.BorderStyle = PdfBorderStyle.Beveled
            'Set the value for the check box
            checkBox.Checked = True
            document.Form.Fields.Add(checkBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class       
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfComboBoxField">
            <summary>
            Represents combo box field in the PDF Form.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);          
            //Create a combo box
            PdfComboBoxField positionComboBox = new PdfComboBoxField(page, "positionComboBox");   
            positionComboBox.Bounds = new RectangleF(100, 115, 200, 20);
            positionComboBox.Font = font;
            positionComboBox.Editable = true;
            //Add it to document
            document.Form.Fields.Add(positionComboBox);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create a combo box
            Dim positionComboBox As PdfComboBoxField = New PdfComboBoxField(page, "positionComboBox") 
            positionComboBox.Bounds = New RectangleF(100, 115, 200, 20)
            positionComboBox.Font = font
            positionComboBox.Editable = True
            'Add it to document
            document.Form.Fields.Add(positionComboBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfListField"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfStyledField"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfListField">
            <summary>
            Represents base class form's list fields.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            //Add the field to listbox.
            document.Form.Fields.Add(listBox);
            //Set the properties.
            listBox.Bounds = new RectangleF(100, 350, 100, 50);
            listBox.HighlightMode = PdfHighlightMode.Outline;
            //Add the items to the list box
            listBox.Items.Add(new PdfListFieldItem("English", "English"));
            listBox.Items.Add(new PdfListFieldItem("French", "French"));
            listBox.Items.Add(new PdfListFieldItem("German", "German"));
            //Select the item
            listBox.SelectedIndex = 2;
            //Set the multiselect option
            listBox.MultiSelect = true;                    
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            'Add the field to listbox.
            document.Form.Fields.Add(listBox)
            'Set the properties.
            listBox.Bounds = New RectangleF(100, 350, 100, 50)
            listBox.HighlightMode = PdfHighlightMode.Outline
            'Add the items to the list box
            listBox.Items.Add(New PdfListFieldItem("English", "English"))
            listBox.Items.Add(New PdfListFieldItem("French", "French"))
            listBox.Items.Add(New PdfListFieldItem("German", "German"))
            'Select the item
            listBox.SelectedIndex = 2
            'Set the multiselect option
            listBox.MultiSelect = True
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfAppearanceField"/> Class  
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfListField.m_items">
            <summary>
            Internal variable to store collection of items.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfListField.m_selectedIndex">
            <summary>
            Internal variable to store selected item index.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListField.#ctor(Syncfusion.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfListField"/> class.
            </summary>
            <param name="page">Page which the field to be placed on.</param>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfListField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListField.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfListField.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
            <example>
            <code lang="C#">
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            // Creates list items
            PdfListFieldItemCollection itemCollection = listBox.Items;
            //Add the items to the list box
            itemCollection.Add(new PdfListFieldItem("English", "English"));
            itemCollection.Add(new PdfListFieldItem("French", "French"));
            itemCollection.Add(new PdfListFieldItem("German", "German"));
            </code>
            <code lang="VB">
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            ' Creates list items
            Dim itemCollection As PdfListFieldItemCollection = listBox.Items
            'Add the items to the list box
            itemCollection.Add(New PdfListFieldItem("English", "English"))
            itemCollection.Add(New PdfListFieldItem("French", "French"))
            itemCollection.Add(New PdfListFieldItem("German", "German"))
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfListField.SelectedIndex">
            <summary>
            Gets or sets the first selected item in the list. 
            </summary>
            <value>The index of the selected item.</value>
            <example>
            <code lang="C#">
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            // Creates list items
            PdfListFieldItemCollection itemCollection = listBox.Items;
            //Add the items to the list box
            itemCollection.Add(new PdfListFieldItem("English", "English"));
            itemCollection.Add(new PdfListFieldItem("French", "French"));
            itemCollection.Add(new PdfListFieldItem("German", "German"));
            //Select the item
            listBox.SelectedIndex = 2;
            </code>
            <code lang="VB">
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            ' Creates list items
            Dim itemCollection As PdfListFieldItemCollection = listBox.Items
            'Add the items to the list box
            itemCollection.Add(New PdfListFieldItem("English", "English"))
            itemCollection.Add(New PdfListFieldItem("French", "French"))
            itemCollection.Add(New PdfListFieldItem("German", "German"))
            'Select the item
            listBox.SelectedIndex = 2
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfListField.SelectedValue">
            <summary>
            Gets or sets the value of the first selected item in the list.
            </summary>
            <value>The selected value.</value>
            <example>
            <code lang="C#">
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            // Creates list items
            PdfListFieldItemCollection itemCollection = listBox.Items;
            //Add the items to the list box
            itemCollection.Add(new PdfListFieldItem("English", "English"));
            itemCollection.Add(new PdfListFieldItem("French", "French"));
            itemCollection.Add(new PdfListFieldItem("German", "German"));
            //Select the item
            listBox.SelectedValue = "English";
            </code>
            <code lang="VB">
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            ' Creates list items
            Dim itemCollection As PdfListFieldItemCollection = listBox.Items
            'Add the items to the list box
            itemCollection.Add(New PdfListFieldItem("English", "English"))
            itemCollection.Add(New PdfListFieldItem("French", "French"))
            itemCollection.Add(New PdfListFieldItem("German", "German"))
            'Select the item
            listBox.SelectedValue = "English"
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfListField.SelectedItem">
            <summary>
            Gets the first selected item in the list.
            </summary>
            <value>The selected item.</value>
            <example>
            <code lang="C#">
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            // Creates list items
            PdfListFieldItemCollection itemCollection = listBox.Items;
            //Add the items to the list box
            itemCollection.Add(new PdfListFieldItem("English", "English"));
            itemCollection.Add(new PdfListFieldItem("French", "French"));
            itemCollection.Add(new PdfListFieldItem("German", "German"));
            //Gets the selected item
            PdfListFieldItem selectedItem = listBox.SelectedItem;        
            </code>
            <code lang="VB">
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            ' Creates list items
            Dim itemCollection As PdfListFieldItemCollection = listBox.Items
            'Add the items to the list box
            itemCollection.Add(New PdfListFieldItem("English", "English"))
            itemCollection.Add(New PdfListFieldItem("French", "French"))
            itemCollection.Add(New PdfListFieldItem("German", "German"))
            'Gets the selected item
            Dim selectedItem As PdfListFieldItem = listBox.SelectedItem
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfComboBoxField.m_editable">
            <summary>
            Internal variable to store value whether the combobox is editable.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfComboBoxField.#ctor(Syncfusion.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfComboBoxField"/> class.
            </summary>
            <param name="page">Page the field to be placed on.</param>
            <param name="name">The name of the field.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);          
            //Create a combo box
            PdfComboBoxField positionComboBox = new PdfComboBoxField(page, "positionComboBox");    
            positionComboBox.Bounds = new RectangleF(100, 115, 200, 20);
            positionComboBox.Font = font;
            positionComboBox.Editable = true;
            //Add it to document
            document.Form.Fields.Add(positionComboBox);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create a combo box
            Dim positionComboBox As PdfComboBoxField = New PdfComboBoxField(page, "positionComboBox")     
            positionComboBox.Bounds = New RectangleF(100, 115, 200, 20)
            positionComboBox.Font = font
            positionComboBox.Editable = True
            'Add it to document
            document.Form.Fields.Add(positionComboBox)
            document.Save("Form.pdf")
            </code>
            </example>         
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfStyledField"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfComboBoxField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfComboBoxField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfComboBoxField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfComboBoxField.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfComboBoxField.DrawAppearance(Syncfusion.Pdf.Graphics.PdfTemplate)">
            <summary>
            Draws the appearance.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfComboBoxField.Editable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfComboBoxField"/> is editable.
            </summary>
            <value><c>true</c> if editable; otherwise, <c>false</c>.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);          
            //Create a combo box
            PdfComboBoxField positionComboBox = new PdfComboBoxField(page, "positionComboBox");
            positionComboBox.Editable = true
            positionComboBox.Bounds = new RectangleF(100, 115, 200, 20);
            positionComboBox.Font = font;
            positionComboBox.Editable = true;
            //Add it to document
            document.Form.Fields.Add(positionComboBox);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create a combo box
            Dim positionComboBox As PdfComboBoxField = New PdfComboBoxField(page, "positionComboBox")        
            positionComboBox.Editable = True
            positionComboBox.Bounds = New RectangleF(100, 115, 200, 20)
            positionComboBox.Font = font
            positionComboBox.Editable = True
            'Add it to document
            document.Form.Fields.Add(positionComboBox)
            document.Save("Form.pdf")
            </code>
            </example>         
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfStyledField"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class        
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Interactive.PdfFieldCollection" -->
        <member name="F:Syncfusion.Pdf.Interactive.PdfFieldCollection.c_exisingFieldException">
            <summary>
            Internal variable to store duplicate field exception message.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfFieldCollection.m_array">
            <summary>
            Internal variable to store array of fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfFieldCollection.m_fieldNames">
            <summary>
            Private variable to store the form field names and thier index
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfFieldCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.Add(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Adds the specified field.
            </summary>
            <param name="field">The field item which is added in the PDF form.</param>
            <returns>The field to be added on the page. </returns>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);                     
            PdfFieldCollection fieldCollection = document.Form.Fields;
            //Create a combo box
            PdfComboBoxField positionComboBox = new PdfComboBoxField(page, "positionComboBox");
            positionComboBox.Editable = true;        
            positionComboBox.Bounds = new RectangleF(100, 115, 200, 20);
            positionComboBox.Font = font;
            positionComboBox.Editable = true;
            fieldCollection.Add(positionComboBox as PdfField);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim fieldCollection As PdfFieldCollection = document.Form.Fields
            'Create a combo box
            Dim positionComboBox As PdfComboBoxField = New PdfComboBoxField(page, "positionComboBox")
            positionComboBox.Editable = True        
            positionComboBox.Bounds = New RectangleF(100, 115, 200, 20)
            positionComboBox.Font = font
            positionComboBox.Editable = True
            fieldCollection.Add(TryCast(positionComboBox, PdfField))
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="!:PdfFont"/> Class  
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.Insert(System.Int32,Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Inserts the the field at the specified index.
            </summary>
            <param name="index">The index of the field.</param>
            <param name="field">The field which should be inserted at the specified index.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create a check box
            PdfCheckBoxField checkBox = new PdfCheckBoxField(page, "C#.NET");
            checkBox.Bounds = new RectangleF(100, 290, 20, 20);
            document.Form.Fields.Add(checkBox);
            checkBox.HighlightMode = PdfHighlightMode.Push;
            checkBox.BorderStyle = PdfBorderStyle.Beveled;
            //Set the value for the check box
            checkBox.Checked = true;
            document.Form.Fields.Add(checkBox);
            PdfFieldCollection fieldCollection = document.Form.Fields;
            //Create a combo box
            PdfComboBoxField positionComboBox = new PdfComboBoxField(page, "positionComboBox");
            positionComboBox.Editable = true;
            positionComboBox.Bounds = new RectangleF(100, 115, 200, 20);
            positionComboBox.Font = font;
            positionComboBox.Editable = true;
            // Insert the field at first position in the collection
            fieldCollection.Insert(0, positionComboBox as PdfField);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create a check box
            Dim checkBox As PdfCheckBoxField = New PdfCheckBoxField(page, "C#.NET")
            checkBox.Bounds = New RectangleF(100, 290, 20, 20)
            document.Form.Fields.Add(checkBox)
            checkBox.HighlightMode = PdfHighlightMode.Push
            checkBox.BorderStyle = PdfBorderStyle.Beveled
            'Set the value for the check box
            checkBox.Checked = True
            document.Form.Fields.Add(checkBox)
            Dim fieldCollection As PdfFieldCollection = document.Form.Fields
            'Create a combo box
            Dim positionComboBox As PdfComboBoxField = New PdfComboBoxField(page, "positionComboBox")
            positionComboBox.Editable = True
            positionComboBox.Bounds = New RectangleF(100, 115, 200, 20)
            positionComboBox.Font = font
            positionComboBox.Editable = True
            ' Insert the field at first position in the collection
            fieldCollection.Insert(0, TryCast(positionComboBox, PdfField))
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="!:PdfFont"/> Class  
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.Contains(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Determines whether field is contained within the collection.
            </summary>
            <param name="field">Check whether <see cref="T:Syncfusion.Pdf.Interactive.PdfField"/> object is present in the field collection or not.</param>
            <returns>
            <c>true</c> if field is present in the collection, otherwise, <c>false</c>.
            </returns>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);                     
            PdfFieldCollection fieldCollection = document.Form.Fields;
            //Create a combo box
            PdfComboBoxField positionComboBox = new PdfComboBoxField(page, "positionComboBox");
            positionComboBox.Editable = true;        
            positionComboBox.Bounds = new RectangleF(100, 115, 200, 20);
            positionComboBox.Font = font;
            positionComboBox.Editable = true;
            if (fieldCollection.Contains(positionComboBox as PdfField))
             MessageBox.Show("Already added field");
            else
             fieldCollection.Add(positionComboBox as PdfField);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim fieldCollection As PdfFieldCollection = document.Form.Fields
            'Create a combo box
            Dim positionComboBox As PdfComboBoxField = New PdfComboBoxField(page, "positionComboBox")
            positionComboBox.Editable = True
            positionComboBox.Bounds = New RectangleF(100, 115, 200, 20)
            positionComboBox.Font = font
            positionComboBox.Editable = True
            If fieldCollection.Contains(TryCast(positionComboBox, PdfField)) Then
            MessageBox.Show("Already added field")
            Else
            fieldCollection.Add(TryCast(positionComboBox, PdfField))
            End If
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="!:PdfFont"/> Class  
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.IndexOf(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Gets the index of the field.
            </summary>
            <param name="field">The <see cref="T:Syncfusion.Pdf.Interactive.PdfField"/> object whose index is requested.</param>
            <returns>Index of the field in collection.</returns>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfFieldCollection fieldCollection = document.Form.Fields;
            //Create a combo box
            PdfComboBoxField positionComboBox = new PdfComboBoxField(page, "positionComboBox");
            positionComboBox.Editable = true;
            positionComboBox.Bounds = new RectangleF(100, 115, 200, 20);
            positionComboBox.Font = font;
            positionComboBox.Editable = true;
            document.Form.Fields.Add(positionComboBox);
            int index = fieldCollection.IndexOf(positionComboBox as PdfField);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim fieldCollection As PdfFieldCollection = document.Form.Fields
            'Create a combo box
            Dim positionComboBox As PdfComboBoxField = New PdfComboBoxField(page, "positionComboBox")
            positionComboBox.Editable = True
            positionComboBox.Bounds = New RectangleF(100, 115, 200, 20)
            positionComboBox.Font = font
            positionComboBox.Editable = True
            document.Form.Fields.Add(positionComboBox)
            Dim index As Integer = fieldCollection.IndexOf(TryCast(positionComboBox, PdfField))
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="!:PdfFont"/> Class  
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.Remove(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Removes the specified field in the collection.
            </summary>
            <param name="field">The <see cref="T:Syncfusion.Pdf.Interactive.PdfField"/> object to be removed from collection.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfFieldCollection fieldCollection = document.Form.Fields;
            //Create a combo box
            PdfComboBoxField positionComboBox = new PdfComboBoxField(page, "positionComboBox");
            document.Form.Fields.Add(positionComboBox);
            positionComboBox.Editable = true;      
            positionComboBox.Bounds = new RectangleF(100, 115, 200, 20);
            positionComboBox.Font = font;
            positionComboBox.Editable = true;          
            fieldCollection.Remove(positionComboBox as PdfField);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim fieldCollection As PdfFieldCollection = document.Form.Fields
            'Create a combo box
            Dim positionComboBox As PdfComboBoxField = New PdfComboBoxField(page, "positionComboBox")
            document.Form.Fields.Add(positionComboBox)
            positionComboBox.Editable = True
            positionComboBox.Bounds = New RectangleF(100, 115, 200, 20)
            positionComboBox.Font = font
            positionComboBox.Editable = True
            fieldCollection.Remove(TryCast(positionComboBox, PdfField))
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="!:PdfFont"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.RemoveAt(System.Int32)">
            <summary>
            Removes field at the specified position.
            </summary>
            <param name="index">The index where to remove the item.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfFieldCollection fieldCollection = document.Form.Fields;
            //Create a combo box
            PdfComboBoxField positionComboBox = new PdfComboBoxField(page, "positionComboBox");
            document.Form.Fields.Add(positionComboBox);
            positionComboBox.Editable = true;
            positionComboBox.Bounds = new RectangleF(100, 115, 200, 20);
            positionComboBox.Font = font;
            positionComboBox.Editable = true;
            // Remove the first element
            fieldCollection.RemoveAt(0);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim fieldCollection As PdfFieldCollection = document.Form.Fields
            'Create a combo box
            Dim positionComboBox As PdfComboBoxField = New PdfComboBoxField(page, "positionComboBox")
            document.Form.Fields.Add(positionComboBox)
            positionComboBox.Editable = True
            positionComboBox.Bounds = New RectangleF(100, 115, 200, 20)
            positionComboBox.Font = font
            positionComboBox.Editable = True
            ' Remove the first element
            fieldCollection.RemoveAt(0)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="!:PdfFont"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.Clear">
            <summary>
            Clears the form field collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.Add(Syncfusion.Pdf.Interactive.PdfField,Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Adds the specified field.
            </summary>
            <param name="field">The field.</param>
            <param name="newPage">The new page.</param>
            <returns>Index of added field.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.DoAdd(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Adds a field to collection.
            </summary>
            <param name="field">The field.</param>
            <returns>field.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.DoInsert(System.Int32,Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Inserts a filed into collection.
            </summary>
            <param name="index">The index.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.DoRemove(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Removes the field from collection.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.DoRemoveAt(System.Int32)">
            <summary>
            Removes the field at the specified position.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.DoClear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.InsertLoadedField(Syncfusion.Pdf.Parsing.PdfLoadedField,Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Inserts the loaded field.
            </summary>
            <param name="field">The field.</param>
            <param name="newPage">The new page.</param>
            <returns>field.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.UpdateReferences(Syncfusion.Pdf.Primitives.PdfArray,Syncfusion.Pdf.Primitives.PdfArray,Syncfusion.Pdf.Primitives.PdfArray,Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Updates the references.
            </summary>
            <param name="kidsArray">The kids array.</param>
            <param name="array">The array.</param>
            <param name="newArray">The new array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFieldCollection.GetFieldIndex(System.String)">
            <summary>
            Returns the form field index by validating the fieldnames
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Interactive.PdfFieldCollection.Item(System.Int32)" -->
        <member name="P:Syncfusion.Pdf.Interactive.PdfFieldCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Interactive.PdfField"/> with thier field name.
            </summary>   
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFieldCollection.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFieldCollection.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfForm">
            <summary>
            Represents interactive form of the Pdf document.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            // Creates a form
            PdfForm form = document.Form;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            //Add the field to listbox.
            form.Fields.Add(listBox);            
            //Set the properties.
            listBox.Bounds = new RectangleF(100, 350, 100, 50);
            listBox.HighlightMode = PdfHighlightMode.Outline;
            //Add the items to the list box
            listBox.Items.Add(new PdfListFieldItem("English", "English"));
            listBox.Items.Add(new PdfListFieldItem("French", "French"));
            listBox.Items.Add(new PdfListFieldItem("German", "German"));
            //Select the item
            listBox.SelectedIndex = 2;
            //Set the multiselect option
            listBox.MultiSelect = true;                    
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            ' Creates a form
            Dim form As PdfForm = document.Form
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            'Add the field to listbox.
            form.Fields.Add(listBox)
            'Set the properties.
            listBox.Bounds = New RectangleF(100, 350, 100, 50)
            listBox.HighlightMode = PdfHighlightMode.Outline
            'Add the items to the list box
            listBox.Items.Add(New PdfListFieldItem("English", "English"))
            listBox.Items.Add(New PdfListFieldItem("French", "French"))
            listBox.Items.Add(New PdfListFieldItem("German", "German"))
            'Select the item
            listBox.SelectedIndex = 2
            'Set the multiselect option
            listBox.MultiSelect = True
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.IPdfWrapper"/> Interface    
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfForm.m_fields">
            <summary>
            Internal variable to store form's collection of fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfForm.m_resources">
            <summary>
            Internal variable to store resources.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfForm.m_readOnly">
            <summary>
            Internal value indicating whether the form is read only.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfForm.m_signatureFlags">
            <summary>
            Internal variable to store signature flags.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfForm.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfForm.m_needAppearances">
            <summary>
            Internal variable to store value whether to generate default appearancesof the fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfForm.m_flatten">
            <summary>
            Indicates is form flatten or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfForm.m_changeName">
            <summary>
            Internal variable to store value whether to change the name of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfForm.m_fieldName">
            <summary>
            Holds the fields names of the form.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfForm.m_fieldNames">
            <summary>
            Internal values to hold form fields values.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfForm.m_isXFA">
            <summary>
            Internal variable to ensure the form is XFA or not
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfForm.m_disableAutoFormat">
            <summary>
            Indicates if AutoFormat has to be removed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfForm.m_pageMap">
            <summary>
            Holds the reference of the loaded page and the cloned page
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfForm.m_setAppearanceDictionary">
            <summary>
            Internal field to check whether any field is modified.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfForm"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfForm.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfForm.Clear">
            <summary>
            Clears PdfForm.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfForm.CheckFlatten">
            <summary>
            Checks for the flatten fields.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfForm.DeleteFromPages(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Deletes from pages.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfForm.DeleteAnnotation(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Deletes the annotation from the page dictionary.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfForm.GetCorrectName(System.String)">
            <summary>
            Gets the new name of the field.
            </summary>
            <param name="name">The name.</param>
            <returns>The field name.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfForm.SetDefaultAppearance(System.Boolean)">
            <summary>
            Specifies whether to set the default appearance for the form or not.
            </summary>
            <param name="applyDefault"></param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfForm.FieldNames">
            <summary>
            Gets the field names.
            </summary>
            <value>The field names.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfForm.IsXFA">
            <summary>
            Gets or sets a value indicating whether the form is XFA.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Interactive.PdfForm.Fields" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Interactive.PdfForm.Flatten" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Interactive.PdfForm.ReadOnly" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Interactive.PdfForm.FieldAutoNaming" -->
        <member name="P:Syncfusion.Pdf.Interactive.PdfForm.NeedAppearances">
            <summary>
            Gets or sets a value indicating whether the viewer must generate appearances for fields.
            </summary>
            <value><c>true</c> if viewer must generate appearance; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfForm.SignatureFlags">
            <summary>
            Gets or sets the signature flags.
            </summary>
            <value>The signature flags.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfForm.Resources">
            <summary>
            Gets or sets the resources.
            </summary>
            <value>The resources.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfForm.Dictionary">
            <summary>
            Gets or sets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfForm.SetAppearanceDictionary">
            <summary>
            Specifies if any formfield is changed since loading that would affect the appearance. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfForm.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Interactive.PdfFormFieldCollection" -->
        <member name="F:Syncfusion.Pdf.Interactive.PdfFormFieldCollection.m_form">
            <summary>
            Internal variable to store form.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFormFieldCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfFormFieldCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFormFieldCollection.DoAdd(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Adds a field to collection.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFormFieldCollection.DoInsert(System.Int32,Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Inserts a filed into collection.
            </summary>
            <param name="index">The index.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFormFieldCollection.DoRemove(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Removes the field from collection.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFormFieldCollection.DoRemoveAt(System.Int32)">
            <summary>
            Removes the field at the specified position.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFormFieldCollection.DoClear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfFormFieldCollection.IsValidName(System.String)">
            <summary>
            Check whether the field with the same name already exists.
            </summary>
            <param name="name">The name.</param>
            <returns>
            <c>true</c> if there are no fields with the same name within the collection; 
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfFormFieldCollection.Form">
            <summary>
            Gets or sets the form.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfListBoxField">
            <summary>
            Represents list box field of the PDF form.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            //Add the field to listbox.
            document.Form.Fields.Add(listBox);
            //Set the properties.
            listBox.Bounds = new RectangleF(100, 350, 100, 50);
            listBox.HighlightMode = PdfHighlightMode.Outline;
            //Add the items to the list box
            listBox.Items.Add(new PdfListFieldItem("English", "English"));
            listBox.Items.Add(new PdfListFieldItem("French", "French"));
            listBox.Items.Add(new PdfListFieldItem("German", "German"));
            //Select the item
            listBox.SelectedIndex = 2;
            //Set the multiselect option
            listBox.MultiSelect = true;                    
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            'Add the field to listbox.
            document.Form.Fields.Add(listBox)
            'Set the properties.
            listBox.Bounds = New RectangleF(100, 350, 100, 50)
            listBox.HighlightMode = PdfHighlightMode.Outline
            'Add the items to the list box
            listBox.Items.Add(New PdfListFieldItem("English", "English"))
            listBox.Items.Add(New PdfListFieldItem("French", "French"))
            listBox.Items.Add(New PdfListFieldItem("German", "German"))
            'Select the item
            listBox.SelectedIndex = 2
            'Set the multiselect option
            listBox.MultiSelect = True
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfListField"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfListFieldItem"/> Class    
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfListBoxField.m_multiselect">
            <summary>
            Internal variable to store value whether the fiels is multiselectable.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListBoxField.#ctor(Syncfusion.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfListBoxField"/> class.
            </summary>
            <param name="page">Page the field to be placed on.</param>
            <param name="name">The name of the field.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            //Add the field to listbox.
            document.Form.Fields.Add(listBox);
            //Set the properties.
            listBox.Bounds = new RectangleF(100, 350, 100, 50);
            listBox.HighlightMode = PdfHighlightMode.Outline;
            //Add the items to the list box
            listBox.Items.Add(new PdfListFieldItem("English", "English"));
            listBox.Items.Add(new PdfListFieldItem("French", "French"));
            listBox.Items.Add(new PdfListFieldItem("German", "German"));
            //Select the item
            listBox.SelectedIndex = 2;
            //Set the multiselect option
            listBox.MultiSelect = true;                    
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            'Add the field to listbox.
            document.Form.Fields.Add(listBox)
            'Set the properties.
            listBox.Bounds = New RectangleF(100, 350, 100, 50)
            listBox.HighlightMode = PdfHighlightMode.Outline
            'Add the items to the list box
            listBox.Items.Add(New PdfListFieldItem("English", "English"))
            listBox.Items.Add(New PdfListFieldItem("French", "French"))
            listBox.Items.Add(New PdfListFieldItem("German", "German"))
            'Select the item
            listBox.SelectedIndex = 2
            'Set the multiselect option
            listBox.MultiSelect = True
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfListField"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListBoxField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListBoxField.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListBoxField.DrawAppearance(Syncfusion.Pdf.Graphics.PdfTemplate)">
            <summary>
            Draws the appearance.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfListBoxField.MultiSelect">
            <summary>
            Gets or sets a value indicating whether the field is multiselectable.
            </summary>
            <value><c>true</c> if multiselectable; otherwise, <c>false</c>.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            //Add the field to listbox.
            document.Form.Fields.Add(listBox);
            //Set the properties.
            listBox.Bounds = new RectangleF(100, 350, 100, 50);
            listBox.HighlightMode = PdfHighlightMode.Outline;
            //Add the items to the list box
            listBox.Items.Add(new PdfListFieldItem("English", "English"));
            listBox.Items.Add(new PdfListFieldItem("French", "French"));
            listBox.Items.Add(new PdfListFieldItem("German", "German"));
            //Select the item
            listBox.SelectedIndex = 2;
            //Set the multiselect option
            listBox.MultiSelect = true;                    
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            'Add the field to listbox.
            document.Form.Fields.Add(listBox)
            'Set the properties.
            listBox.Bounds = New RectangleF(100, 350, 100, 50)
            listBox.HighlightMode = PdfHighlightMode.Outline
            'Add the items to the list box
            listBox.Items.Add(New PdfListFieldItem("English", "English"))
            listBox.Items.Add(New PdfListFieldItem("French", "French"))
            listBox.Items.Add(New PdfListFieldItem("German", "German"))
            'Select the item
            listBox.SelectedIndex = 2
            'Set the multiselect option
            listBox.MultiSelect = True
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfListField"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Interactive.PdfListFieldItem" -->
        <member name="F:Syncfusion.Pdf.Interactive.PdfListFieldItem.c_textIndex">
            <summary>
            Text position it the primitive array.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfListFieldItem.c_valueIndex">
            <summary>
            Value position in the primitive array.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfListFieldItem.m_text">
            <summary>
            Internal variable to store caption of the list item.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfListFieldItem.m_value">
            <summary>
            Internal variable to store value of the list item.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfListFieldItem.m_array">
            <summary>
            Internal variable to store array primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListFieldItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfListFieldItem"/> class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Interactive.PdfListFieldItem.#ctor(System.String,System.String)" -->
        <member name="M:Syncfusion.Pdf.Interactive.PdfListFieldItem.Initialize(System.String,System.String)">
            <summary>
            Initializes the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="value">The value.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Interactive.PdfListFieldItem.Text" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Interactive.PdfListFieldItem.Value" -->
        <member name="P:Syncfusion.Pdf.Interactive.PdfListFieldItem.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value>The primitive.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection">
            <summary>
            Represents list field item collection.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();                         
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            //Add the field to listbox.
            document.Form.Fields.Add(listBox);            
            //Set the properties.
            listBox.Bounds = new RectangleF(100, 350, 100, 50);
            listBox.HighlightMode = PdfHighlightMode.Outline;            
            // Creates list items
            PdfListFieldItemCollection itemCollection = listBox.Items;
            //Add the items to the list box
            itemCollection.Add(new PdfListFieldItem("English", "English"));
            itemCollection.Add(new PdfListFieldItem("French", "French"));
            itemCollection.Add(new PdfListFieldItem("German", "German"));
            listBox.SelectedIndex = 0;            
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            'Add the field to listbox.
            document.Form.Fields.Add(listBox)
            'Set the properties.
            listBox.Bounds = New RectangleF(100, 350, 100, 50)
            listBox.HighlightMode = PdfHighlightMode.Outline
            ' Creates list items
            Dim itemCollection As PdfListFieldItemCollection = listBox.Items
            'Add the items to the list box
            itemCollection.Add(New PdfListFieldItem("English", "English"))
            itemCollection.Add(New PdfListFieldItem("French", "French"))
            itemCollection.Add(New PdfListFieldItem("German", "German"))
            listBox.SelectedIndex = 0
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class  
            <seealso cref="T:Syncfusion.Pdf.IPdfWrapper"/> Interface 
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfListBoxField"/> Class 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.m_items">
            <summary>
            Internal variable to store array of 
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection"/> class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.Add(Syncfusion.Pdf.Interactive.PdfListFieldItem)" -->
        <member name="M:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.Insert(System.Int32,Syncfusion.Pdf.Interactive.PdfListFieldItem)">
            <summary>
            Inserts the list item field at the specified index.
            </summary>
            <param name="index">The index where to insert the new item.</param>
            <param name="item">The <see cref="T:Syncfusion.Pdf.Interactive.PdfListFieldItem"/> object to be added to collection.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();    
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            //Add the field to listbox.
            document.Form.Fields.Add(listBox);            
            //Set the properties.
            listBox.Bounds = new RectangleF(100, 350, 100, 50);
            listBox.HighlightMode = PdfHighlightMode.Outline;            
            // Creates list items
            PdfListFieldItemCollection itemCollection = listBox.Items;
            //Add the items to the list box
            itemCollection.Add(new PdfListFieldItem("English", "English"));
            itemCollection.Add(new PdfListFieldItem("French", "French"));
            itemCollection.Add(new PdfListFieldItem("German", "German"));
            PdfListFieldItem item = new PdfListFieldItem("Arabic", "Arabic");
            // Inserting an item at second position
            itemCollection.Insert(1, item);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            'Add the field to listbox.
            document.Form.Fields.Add(listBox)
            'Set the properties.
            listBox.Bounds = New RectangleF(100, 350, 100, 50)
            listBox.HighlightMode = PdfHighlightMode.Outline
            ' Creates list items
            Dim itemCollection As PdfListFieldItemCollection = listBox.Items
            'Add the items to the list box
            itemCollection.Add(New PdfListFieldItem("English", "English"))
            itemCollection.Add(New PdfListFieldItem("French", "French"))
            itemCollection.Add(New PdfListFieldItem("German", "German"))
            Dim item As PdfListFieldItem = New PdfListFieldItem("Arabic", "Arabic")
            ' Inserting an item at second position
            itemCollection.Insert(1, item)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfListBoxField"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.Remove(Syncfusion.Pdf.Interactive.PdfListFieldItem)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The <see cref="T:Syncfusion.Pdf.Interactive.PdfListFieldItem"/> object which to be removed in the collection.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();   
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            //Add the field to listbox.
            document.Form.Fields.Add(listBox);            
            //Set the properties.
            listBox.Bounds = new RectangleF(100, 350, 100, 50);            
            // Creates list items
            PdfListFieldItemCollection itemCollection = listBox.Items;
            //Add the items to the list box            
            PdfListFieldItem item = new PdfListFieldItem("English", "English");
            itemCollection.Add(item);
            itemCollection.Add(new PdfListFieldItem("French", "French"));
            itemCollection.Add(new PdfListFieldItem("German", "German"));
            // Remove an item from collection
            itemCollection.Remove(item);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            'Add the field to listbox.
            document.Form.Fields.Add(listBox)
            'Set the properties.
            listBox.Bounds = New RectangleF(100, 350, 100, 50)
            ' Creates list items
            Dim itemCollection As PdfListFieldItemCollection = listBox.Items
            'Add the items to the list box            
            Dim item As PdfListFieldItem = New PdfListFieldItem("English", "English")
            itemCollection.Add(item)
            itemCollection.Add(New PdfListFieldItem("French", "French"))
            itemCollection.Add(New PdfListFieldItem("German", "German"))
            ' Remove an item from collection
            itemCollection.Remove(item)
            document.Save("Form.pdf");
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfListBoxField"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified position.
            </summary>
            <param name="index">The index where to remove the item.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();   
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            //Add the field to listbox.
            document.Form.Fields.Add(listBox);            
            //Set the properties.
            listBox.Bounds = new RectangleF(100, 350, 100, 50);            
            // Creates list items
            PdfListFieldItemCollection itemCollection = listBox.Items;
            //Add the items to the list box            
            PdfListFieldItem item = new PdfListFieldItem("English", "English");
            itemCollection.Add(item);
            itemCollection.Add(new PdfListFieldItem("French", "French"));
            itemCollection.Add(new PdfListFieldItem("German", "German"));
            // Remove an item from collection
            itemCollection.RemoveAt(1);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            'Add the field to listbox.
            document.Form.Fields.Add(listBox)
            'Set the properties.
            listBox.Bounds = New RectangleF(100, 350, 100, 50)
            ' Creates list items
            Dim itemCollection As PdfListFieldItemCollection = listBox.Items
            'Add the items to the list box            
            Dim item As PdfListFieldItem = New PdfListFieldItem("English", "English")
            itemCollection.Add(item)
            itemCollection.Add(New PdfListFieldItem("French", "French"))
            itemCollection.Add(New PdfListFieldItem("German", "German"))
            ' Remove an item from collection
            itemCollection.RemoveAt(1)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfListBoxField"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.Contains(Syncfusion.Pdf.Interactive.PdfListFieldItem)">
            <summary>
            Determines whether the item is contained by the collection.
            </summary>
            <param name="item">Check whether <see cref="T:Syncfusion.Pdf.Interactive.PdfListFieldItem"/> object is exists in the collection or not.</param>
            <returns>
            <c>true</c> if the item is contained within the collection; otherwise, <c>false</c>.
            </returns>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();   
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            //Add the field to listbox.
            document.Form.Fields.Add(listBox);            
            //Set the properties.
            listBox.Bounds = new RectangleF(100, 350, 100, 50);            
            // Creates list items
            PdfListFieldItemCollection itemCollection = listBox.Items;
            //Add the items to the list box            
            PdfListFieldItem item = new PdfListFieldItem("English", "English");
            itemCollection.Add(item);
            itemCollection.Add(new PdfListFieldItem("French", "French"));
            itemCollection.Add(new PdfListFieldItem("German", "German"));
            if (itemCollection.Contains(item))
             MessageBox.Show("Already, item has added!");
            else
             itemCollection.Add(item);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            'Add the field to listbox.
            document.Form.Fields.Add(listBox)
            'Set the properties.
            listBox.Bounds = New RectangleF(100, 350, 100, 50)
            ' Creates list items
            Dim itemCollection As PdfListFieldItemCollection = listBox.Items
            'Add the items to the list box            
            Dim item As PdfListFieldItem = New PdfListFieldItem("English", "English")
            itemCollection.Add(item)
            itemCollection.Add(New PdfListFieldItem("French", "French"))
            itemCollection.Add(New PdfListFieldItem("German", "German"))
            If itemCollection.Contains(item) Then
             MessageBox.Show("Already, item has added!")
            Else
             itemCollection.Add(item)
            End If
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfListBoxField"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.IndexOf(Syncfusion.Pdf.Interactive.PdfListFieldItem)">
            <summary>
            Gets the index of the specified item.
            </summary>
            <param name="item">A <see cref="T:Syncfusion.Pdf.Interactive.PdfListFieldItem"/> object whose index is requested.</param>
            <returns>The index of the given item, -1 if the item does not exist.</returns>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();   
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            //Add the field to listbox.
            document.Form.Fields.Add(listBox);            
            //Set the properties.
            listBox.Bounds = new RectangleF(100, 350, 100, 50);            
            // Creates list items
            PdfListFieldItemCollection itemCollection = listBox.Items;
            //Add the items to the list box            
            PdfListFieldItem item = new PdfListFieldItem("English", "English");
            itemCollection.Add(item);
            itemCollection.Add(new PdfListFieldItem("French", "French"));
            itemCollection.Add(new PdfListFieldItem("German", "German"));
            // Gets the index of an item
            int index = itemCollection.IndexOf(item);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            'Add the field to listbox.
            document.Form.Fields.Add(listBox)
            'Set the properties.
            listBox.Bounds = New RectangleF(100, 350, 100, 50)
            ' Creates list items
            Dim itemCollection As PdfListFieldItemCollection = listBox.Items
            'Add the items to the list box            
            Dim item As PdfListFieldItem = New PdfListFieldItem("English", "English")
            itemCollection.Add(item)
            itemCollection.Add(New PdfListFieldItem("French", "French"))
            itemCollection.Add(New PdfListFieldItem("German", "German"))
            ' Gets the index of an item
            Dim index As Integer = itemCollection.IndexOf(item)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfListBoxField"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();   
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            //Add the field to listbox.
            document.Form.Fields.Add(listBox);            
            //Set the properties.
            listBox.Bounds = new RectangleF(100, 350, 100, 50);            
            // Creates list items
            PdfListFieldItemCollection itemCollection = listBox.Items;
            //Add the items to the list box            
            PdfListFieldItem item = new PdfListFieldItem("English", "English");
            itemCollection.Add(item);
            itemCollection.Add(new PdfListFieldItem("French", "French"));
            itemCollection.Add(new PdfListFieldItem("German", "German"));
            // Clear the collection
            itemCollection.Clear();
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            'Add the field to listbox.
            document.Form.Fields.Add(listBox)
            'Set the properties.
            listBox.Bounds = New RectangleF(100, 350, 100, 50)
            ' Creates list items
            Dim itemCollection As PdfListFieldItemCollection = listBox.Items
            'Add the items to the list box            
            Dim item As PdfListFieldItem = New PdfListFieldItem("English", "English")
            itemCollection.Add(item)
            itemCollection.Add(New PdfListFieldItem("French", "French"))
            itemCollection.Add(New PdfListFieldItem("German", "German"))
            ' Clear the collection
            itemCollection.Clear()
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfListBoxField"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.DoAdd(Syncfusion.Pdf.Interactive.PdfListFieldItem)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
            <returns>Index of the added item.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.DoInsert(System.Int32,Syncfusion.Pdf.Interactive.PdfListFieldItem)">
            <summary>
            Inserts the item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.DoRemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified position.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.DoRemove(Syncfusion.Pdf.Interactive.PdfListFieldItem)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Interactive.PdfListFieldItem"/> at the specified index.
            </summary>
            <value>The <see cref="T:Syncfusion.Pdf.Interactive.PdfListFieldItem"/> object.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();                       
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create list box
            PdfListBoxField listBox = new PdfListBoxField(page, "list1");
            //Add the field to listbox.
            document.Form.Fields.Add(listBox);            
            //Set the properties.
            listBox.Bounds = new RectangleF(100, 350, 100, 50);
            listBox.HighlightMode = PdfHighlightMode.Outline;            
            // Creates list items
            PdfListFieldItemCollection itemCollection = listBox.Items;
            //Add the items to the list box
            itemCollection.Add(new PdfListFieldItem("English", "English"));
            itemCollection.Add(new PdfListFieldItem("French", "French"));
            itemCollection.Add(new PdfListFieldItem("German", "German"));
            // Reading the second item in the collection and assigning new values
            PdfListFieldItem item = itemCollection[1];
            item.Text = "Arabic";
            item.Value = "Arabic";
            listBox.SelectedIndex = 0;            
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create list box
            Dim listBox As PdfListBoxField = New PdfListBoxField(page, "list1")
            'Add the field to listbox.
            document.Form.Fields.Add(listBox)
            'Set the properties.
            listBox.Bounds = New RectangleF(100, 350, 100, 50)
            listBox.HighlightMode = PdfHighlightMode.Outline
            ' Creates list items
            Dim itemCollection As PdfListFieldItemCollection = listBox.Items
            'Add the items to the list box
            itemCollection.Add(New PdfListFieldItem("English", "English"))
            itemCollection.Add(New PdfListFieldItem("French", "French"))
            itemCollection.Add(New PdfListFieldItem("German", "German"))
            ' Reading the second item in the collection and assigning new values
            Dim item As PdfListFieldItem = itemCollection(1)
            item.Text = "Arabic"
            item.Value = "Arabic"
            listBox.SelectedIndex = 0
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfListBoxField"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfListFieldItemCollection.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection">
            <summary>
            Represents collection of radio buttons items.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics g = page.Graphics;
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            PdfRadioButtonListItem radioItem2 = new PdfRadioButtonListItem("10-49");
            radioItem2.Bounds = new RectangleF(100, 170, 20, 20);
            g.DrawString("10-49", font, brush, new RectangleF(150, 175, 180, 20));
            PdfRadioButtonListItem radioItem3 = new PdfRadioButtonListItem("50-99");
            radioItem3.Bounds = new RectangleF(100, 200, 20, 20);
            g.DrawString("50-99", font, brush, new RectangleF(150, 205, 180, 20));
            PdfRadioButtonListItem radioItem4 = new PdfRadioButtonListItem("100-499");
            radioItem4.Bounds = new RectangleF(100, 230, 20, 20);
            g.DrawString("100-499", font, brush, new RectangleF(150, 235, 180, 20));
            PdfRadioButtonListItem radioItem5 = new PdfRadioButtonListItem("500-more");
            radioItem5.Bounds = new RectangleF(100, 260, 20, 20);
            g.DrawString("500-more", font, brush, new RectangleF(150, 265, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            employeesRadioList.Items.Add(radioItem2);
            employeesRadioList.Items.Add(radioItem3);
            employeesRadioList.Items.Add(radioItem4);
            employeesRadioList.Items.Add(radioItem5);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim g As PdfGraphics = page.Graphics
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            Dim radioItem2 As PdfRadioButtonListItem = New PdfRadioButtonListItem("10-49")
            radioItem2.Bounds = New RectangleF(100, 170, 20, 20)
            g.DrawString("10-49", font, brush, New RectangleF(150, 175, 180, 20))
            Dim radioItem3 As PdfRadioButtonListItem = New PdfRadioButtonListItem("50-99")
            radioItem3.Bounds = New RectangleF(100, 200, 20, 20)
            g.DrawString("50-99", font, brush, New RectangleF(150, 205, 180, 20))
            Dim radioItem4 As PdfRadioButtonListItem = New PdfRadioButtonListItem("100-499")
            radioItem4.Bounds = New RectangleF(100, 230, 20, 20)
            g.DrawString("100-499", font, brush, New RectangleF(150, 235, 180, 20))
            Dim radioItem5 As PdfRadioButtonListItem = New PdfRadioButtonListItem("500-more")
            radioItem5.Bounds = New RectangleF(100, 260, 20, 20)
            g.DrawString("500-more", font, brush, New RectangleF(150, 265, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            employeesRadioList.Items.Add(radioItem2)
            employeesRadioList.Items.Add(radioItem3)
            employeesRadioList.Items.Add(radioItem4)
            employeesRadioList.Items.Add(radioItem5)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.m_array">
            <summary>
            Internal variable to store array of item's primitives.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.m_field">
            <summary>
            Internal variable to store field.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.#ctor(Syncfusion.Pdf.Interactive.PdfRadioButtonListField)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection"/> class.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.Add(Syncfusion.Pdf.Interactive.PdfRadioButtonListItem)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The <see cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> object to be added to collection.</param>
            <returns>The index of the added field.</returns>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.Insert(System.Int32,Syncfusion.Pdf.Interactive.PdfRadioButtonListItem)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="index">The index where to insert the new item..</param>
            <param name="item">A <see cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> object to be added to collection.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            PdfRadioButtonListItem radioItem2 = new PdfRadioButtonListItem("10-49");
            radioItem2.Bounds = new RectangleF(100, 170, 20, 20);
            // Insert the item as first item
            employeesRadioList.Items.Insert(0, radioItem2);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            Dim radioItem2 As PdfRadioButtonListItem = New PdfRadioButtonListItem("10-49")
            radioItem2.Bounds = New RectangleF(100, 170, 20, 20)
            ' Insert the item as first item
            employeesRadioList.Items.Insert(0, radioItem2)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.Remove(Syncfusion.Pdf.Interactive.PdfRadioButtonListItem)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The <see cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> object which is to be removed from the collection.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            PdfRadioButtonListItem radioItem2 = new PdfRadioButtonListItem("10-49");
            radioItem2.Bounds = new RectangleF(100, 170, 20, 20);
            // Insert the item as first item
            employeesRadioList.Items.Add(radioItem2);
            // Remove the item
            employeesRadioList.Items.Remove(radioItem1);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            Dim radioItem2 As PdfRadioButtonListItem = New PdfRadioButtonListItem("10-49")
            radioItem2.Bounds = New RectangleF(100, 170, 20, 20)
            ' Insert the item as first item
            employeesRadioList.Items.Add(radioItem2)
            ' Remove the item
            employeesRadioList.Items.Remove(radioItem1)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified position.
            </summary>
            <param name="index">The index where to remove the item.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            PdfRadioButtonListItem radioItem2 = new PdfRadioButtonListItem("10-49");
            radioItem2.Bounds = new RectangleF(100, 170, 20, 20);
            // Insert the item as first item
            employeesRadioList.Items.Add(radioItem2);
            // Remove the item
            employeesRadioList.Items.RemoveAt(0);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            Dim radioItem2 As PdfRadioButtonListItem = New PdfRadioButtonListItem("10-49")
            radioItem2.Bounds = New RectangleF(100, 170, 20, 20)
            ' Insert the item as first item
            employeesRadioList.Items.Add(radioItem2)
            ' Remove the item
            employeesRadioList.Items.RemoveAt(0)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.IndexOf(Syncfusion.Pdf.Interactive.PdfRadioButtonListItem)">
            <summary>
            Gets the index of the item within the collection.
            </summary>
            <param name="item">A <see cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> object whose index is requested.</param>
            <returns>Index of the item with the collection.</returns>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            PdfRadioButtonListItem radioItem2 = new PdfRadioButtonListItem("10-49");
            radioItem2.Bounds = new RectangleF(100, 170, 20, 20);
            // Insert the item as first item
            employeesRadioList.Items.Add(radioItem2);
            // Find the index
            int index = employeesRadioList.Items.IndexOf(radioItem1);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            'Add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            Dim radioItem2 As PdfRadioButtonListItem = New PdfRadioButtonListItem("10-49")
            radioItem2.Bounds = New RectangleF(100, 170, 20, 20)
            ' Insert the item as first item
            employeesRadioList.Items.Add(radioItem2)
            ' Find the index
            Dim index As Integer = employeesRadioList.Items.IndexOf(radioItem1)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.Contains(Syncfusion.Pdf.Interactive.PdfRadioButtonListItem)">
            <summary>
            Determines whether the collection contains the specified item.
            </summary>
            <param name="item">Check whether <see cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> object is exists in the collection or not.</param>
            <returns>
            <c>true</c> if collection contains specified item; otherwise, <c>false</c>.
            </returns>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            PdfRadioButtonListItem radioItem2 = new PdfRadioButtonListItem("10-49");
            radioItem2.Bounds = new RectangleF(100, 170, 20, 20);
            // Insert the item as first item
            employeesRadioList.Items.Add(radioItem2);
            // Check whether the specified item is in Collection
            if (employeesRadioList.Items.Contains(radioItem1))
             MessageBox.Show("Item already added in the collection");
            else
             //add the items to radio button group
             employeesRadioList.Items.Add(radioItem1);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            Dim radioItem2 As PdfRadioButtonListItem = New PdfRadioButtonListItem("10-49")
            radioItem2.Bounds = New RectangleF(100, 170, 20, 20)
            ' Insert the item as first item
            employeesRadioList.Items.Add(radioItem2)
            ' Check whether the specified item is in Collection
            If employeesRadioList.Items.Contains(radioItem1) Then
             MessageBox.Show("Item already added in the collection")
            Else
              'add the items to radio button group
              employeesRadioList.Items.Add(radioItem1)
            End If
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.Clear">
            <summary>
            Clears the item collection.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            PdfRadioButtonListItem radioItem2 = new PdfRadioButtonListItem("10-49");
            radioItem2.Bounds = new RectangleF(100, 170, 20, 20);
            // Insert the item as first item
            employeesRadioList.Items.Add(radioItem2);
            // Clears the item
            employeesRadioList.Items.Clear();
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            Dim radioItem2 As PdfRadioButtonListItem = New PdfRadioButtonListItem("10-49")
            radioItem2.Bounds = New RectangleF(100, 170, 20, 20)
            ' Insert the item as first item
            employeesRadioList.Items.Add(radioItem2)
            ' Clears the item
            employeesRadioList.Items.Clear()
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.DoAdd(Syncfusion.Pdf.Interactive.PdfRadioButtonListItem)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
            <returns>Index of the inserted item.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.DoInsert(System.Int32,Syncfusion.Pdf.Interactive.PdfRadioButtonListItem)">
            <summary>
            Inserts the item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.DoRemove(Syncfusion.Pdf.Interactive.PdfRadioButtonListItem)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.DoClear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> at the specified index.
            </summary>
            <value>Returns item at the specified position.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            PdfRadioButtonListItem radioItem2 = new PdfRadioButtonListItem("10-49");
            radioItem2.Bounds = new RectangleF(100, 170, 20, 20);
            // Insert the item as first item
            employeesRadioList.Items.Add(radioItem2);
            // Gets the first item from the collection
            PdfRadioButtonListItem item = employeesRadioList.Items[0];
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create a Radiobutton 
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            Dim radioItem2 As PdfRadioButtonListItem = New PdfRadioButtonListItem("10-49")
            radioItem2.Bounds = New RectangleF(100, 170, 20, 20)
            ' Insert the item as first item
            employeesRadioList.Items.Add(radioItem2)
            ' Gets the first item from the collection
            Dim item As PdfRadioButtonListItem = employeesRadioList.Items(0)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfRadioButtonItemCollection.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListField">
            <summary>
            Represents radio button field in the PDF form.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics g = page.Graphics;
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            PdfRadioButtonListItem radioItem2 = new PdfRadioButtonListItem("10-49");
            radioItem2.Bounds = new RectangleF(100, 170, 20, 20);
            g.DrawString("10-49", font, brush, new RectangleF(150, 175, 180, 20));
            PdfRadioButtonListItem radioItem3 = new PdfRadioButtonListItem("50-99");
            radioItem3.Bounds = new RectangleF(100, 200, 20, 20);
            g.DrawString("50-99", font, brush, new RectangleF(150, 205, 180, 20));
            PdfRadioButtonListItem radioItem4 = new PdfRadioButtonListItem("100-499");
            radioItem4.Bounds = new RectangleF(100, 230, 20, 20);
            g.DrawString("100-499", font, brush, new RectangleF(150, 235, 180, 20));
            PdfRadioButtonListItem radioItem5 = new PdfRadioButtonListItem("500-more");
            radioItem5.Bounds = new RectangleF(100, 260, 20, 20);
            g.DrawString("500-more", font, brush, new RectangleF(150, 265, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            employeesRadioList.Items.Add(radioItem2);
            employeesRadioList.Items.Add(radioItem3);
            employeesRadioList.Items.Add(radioItem4);
            employeesRadioList.Items.Add(radioItem5);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim g As PdfGraphics = page.Graphics
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            Dim radioItem2 As PdfRadioButtonListItem = New PdfRadioButtonListItem("10-49")
            radioItem2.Bounds = New RectangleF(100, 170, 20, 20)
            g.DrawString("10-49", font, brush, New RectangleF(150, 175, 180, 20))
            Dim radioItem3 As PdfRadioButtonListItem = New PdfRadioButtonListItem("50-99")
            radioItem3.Bounds = New RectangleF(100, 200, 20, 20)
            g.DrawString("50-99", font, brush, New RectangleF(150, 205, 180, 20))
            Dim radioItem4 As PdfRadioButtonListItem = New PdfRadioButtonListItem("100-499")
            radioItem4.Bounds = New RectangleF(100, 230, 20, 20)
            g.DrawString("100-499", font, brush, New RectangleF(150, 235, 180, 20))
            Dim radioItem5 As PdfRadioButtonListItem = New PdfRadioButtonListItem("500-more")
            radioItem5.Bounds = New RectangleF(100, 260, 20, 20)
            g.DrawString("500-more", font, brush, New RectangleF(150, 265, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            employeesRadioList.Items.Add(radioItem2)
            employeesRadioList.Items.Add(radioItem3)
            employeesRadioList.Items.Add(radioItem4)
            employeesRadioList.Items.Add(radioItem5)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfField"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRadioButtonListField.m_items">
            <summary>
            Internal variable to store collection of items.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRadioButtonListField.m_selectedIndex">
            <summary>
            Internal variable to store selected item index.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonListField.#ctor(Syncfusion.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListField"/> class.
            </summary>
            <param name="page">Page which the field to be placed on.</param>
            <param name="name">The name of the field.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics g = page.Graphics;
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            PdfRadioButtonListItem radioItem2 = new PdfRadioButtonListItem("10-49");
            radioItem2.Bounds = new RectangleF(100, 170, 20, 20);
            g.DrawString("10-49", font, brush, new RectangleF(150, 175, 180, 20));
            PdfRadioButtonListItem radioItem3 = new PdfRadioButtonListItem("50-99");
            radioItem3.Bounds = new RectangleF(100, 200, 20, 20);
            g.DrawString("50-99", font, brush, new RectangleF(150, 205, 180, 20));
            PdfRadioButtonListItem radioItem4 = new PdfRadioButtonListItem("100-499");
            radioItem4.Bounds = new RectangleF(100, 230, 20, 20);
            g.DrawString("100-499", font, brush, new RectangleF(150, 235, 180, 20));
            PdfRadioButtonListItem radioItem5 = new PdfRadioButtonListItem("500-more");
            radioItem5.Bounds = new RectangleF(100, 260, 20, 20);
            g.DrawString("500-more", font, brush, new RectangleF(150, 265, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            employeesRadioList.Items.Add(radioItem2);
            employeesRadioList.Items.Add(radioItem3);
            employeesRadioList.Items.Add(radioItem4);
            employeesRadioList.Items.Add(radioItem5);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim g As PdfGraphics = page.Graphics
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            Dim radioItem2 As PdfRadioButtonListItem = New PdfRadioButtonListItem("10-49")
            radioItem2.Bounds = New RectangleF(100, 170, 20, 20)
            g.DrawString("10-49", font, brush, New RectangleF(150, 175, 180, 20))
            Dim radioItem3 As PdfRadioButtonListItem = New PdfRadioButtonListItem("50-99")
            radioItem3.Bounds = New RectangleF(100, 200, 20, 20)
            g.DrawString("50-99", font, brush, New RectangleF(150, 205, 180, 20))
            Dim radioItem4 As PdfRadioButtonListItem = New PdfRadioButtonListItem("100-499")
            radioItem4.Bounds = New RectangleF(100, 230, 20, 20)
            g.DrawString("100-499", font, brush, New RectangleF(150, 235, 180, 20))
            Dim radioItem5 As PdfRadioButtonListItem = New PdfRadioButtonListItem("500-more")
            radioItem5.Bounds = New RectangleF(100, 260, 20, 20)
            g.DrawString("500-more", font, brush, New RectangleF(150, 265, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            employeesRadioList.Items.Add(radioItem2)
            employeesRadioList.Items.Add(radioItem3)
            employeesRadioList.Items.Add(radioItem4)
            employeesRadioList.Items.Add(radioItem5)
            document.Save("Form.pdf")
            </code>
            </example>       
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonListField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfRadioButtonListField.SelectedIndex">
            <summary>
            Gets or sets the first selected item in the list. 
            </summary>
            <value>The index of the selected item.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics g = page.Graphics;
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");     
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            // Set the selected item index index
            employeesRadioList.SelectedIndex = 0;
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim g As PdfGraphics = page.Graphics
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            ' Set the selected item index index
            employeesRadioList.SelectedIndex = 0
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfRadioButtonListField.SelectedValue">
            <summary>
            Gets or sets the value of the first selected item in the list.
            </summary>
            <value>The selected value of the list field.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics g = page.Graphics;
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            PdfRadioButtonListItem radioItem2 = new PdfRadioButtonListItem("10-49");
            radioItem2.Bounds = new RectangleF(100, 170, 20, 20);
            // Insert the item as first item
            employeesRadioList.Items.Add(radioItem2);
            // Set the selected item value
            employeesRadioList.SelectedValue = "1-9";
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim g As PdfGraphics = page.Graphics
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            Dim radioItem2 As PdfRadioButtonListItem = New PdfRadioButtonListItem("10-49")
            radioItem2.Bounds = New RectangleF(100, 170, 20, 20)
            ' Insert the item as first item
            employeesRadioList.Items.Add(radioItem2)
            ' Set the selected item value
            employeesRadioList.SelectedValue = "1-9"
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfRadioButtonListField.SelectedItem">
            <summary>
            Gets the first selected item in the list.
            </summary>
            <value>The selected item of the field.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics g = page.Graphics;
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            PdfRadioButtonListItem radioItem2 = new PdfRadioButtonListItem("10-49");
            radioItem2.Bounds = new RectangleF(100, 170, 20, 20);
            // Insert the item as first item
            employeesRadioList.Items.Add(radioItem2);
            // Set the selected item
            employeesRadioList.SelectedItem = radioItem1;
            document.Save("Form.pdf")
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim g As PdfGraphics = page.Graphics
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            Dim radioItem2 As PdfRadioButtonListItem = New PdfRadioButtonListItem("10-49")
            radioItem2.Bounds = New RectangleF(100, 170, 20, 20)
            ' Insert the item as first item
            employeesRadioList.Items.Add(radioItem2)
            ' Set the selected item
            employeesRadioList.SelectedItem = radioItem1
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfRadioButtonListField.Items">
            <summary>
            Gets the items of the radio button field.
            </summary>
            <value>The radio button field item collection.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics g = page.Graphics;
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            PdfRadioButtonListItem radioItem2 = new PdfRadioButtonListItem("10-49");
            radioItem2.Bounds = new RectangleF(100, 170, 20, 20);
            // Insert the item as first item
            employeesRadioList.Items.Add(radioItem2);
            // Set the selected item value
            employeesRadioList.SelectedValue = "1-9";
            // Getting item collection
            PdfRadioButtonItemCollection itemCollection = employeesRadioList.Items; 
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim g As PdfGraphics = page.Graphics
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            Dim radioItem2 As PdfRadioButtonListItem = New PdfRadioButtonListItem("10-49")
            radioItem2.Bounds = New RectangleF(100, 170, 20, 20)
            ' Insert the item as first item			employeesRadioList.Items.Add(radioItem2)
            ' Set the selected item value
            employeesRadioList.SelectedValue = "1-9"
            ' Getting item collection
            Dim itemCollection As PdfRadioButtonItemCollection = employeesRadioList.Items
            document.Save("Form.pdf");
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem">
            <summary>
            Represents an item of a radio button list.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            PdfBrush brush = PdfBrushes.Black;
            PdfGraphics g = page.Graphics;
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);
            g.DrawString("1-9", font, brush, new RectangleF(150, 145, 180, 20));
            PdfRadioButtonListItem radioItem2 = new PdfRadioButtonListItem("10-49");
            radioItem2.Bounds = new RectangleF(100, 170, 20, 20);
            g.DrawString("10-49", font, brush, new RectangleF(150, 175, 180, 20));
            PdfRadioButtonListItem radioItem3 = new PdfRadioButtonListItem("50-99");
            radioItem3.Bounds = new RectangleF(100, 200, 20, 20);
            g.DrawString("50-99", font, brush, new RectangleF(150, 205, 180, 20));
            PdfRadioButtonListItem radioItem4 = new PdfRadioButtonListItem("100-499");
            radioItem4.Bounds = new RectangleF(100, 230, 20, 20);
            g.DrawString("100-499", font, brush, new RectangleF(150, 235, 180, 20));
            PdfRadioButtonListItem radioItem5 = new PdfRadioButtonListItem("500-more");
            radioItem5.Bounds = new RectangleF(100, 260, 20, 20);
            g.DrawString("500-more", font, brush, new RectangleF(150, 265, 180, 20));
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            employeesRadioList.Items.Add(radioItem2);
            employeesRadioList.Items.Add(radioItem3);
            employeesRadioList.Items.Add(radioItem4);
            employeesRadioList.Items.Add(radioItem5);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            Dim g As PdfGraphics = page.Graphics
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            g.DrawString("1-9", font, brush, New RectangleF(150, 145, 180, 20))
            Dim radioItem2 As PdfRadioButtonListItem = New PdfRadioButtonListItem("10-49")
            radioItem2.Bounds = New RectangleF(100, 170, 20, 20)
            g.DrawString("10-49", font, brush, New RectangleF(150, 175, 180, 20))
            Dim radioItem3 As PdfRadioButtonListItem = New PdfRadioButtonListItem("50-99")
            radioItem3.Bounds = New RectangleF(100, 200, 20, 20)
            g.DrawString("50-99", font, brush, New RectangleF(150, 205, 180, 20))
            Dim radioItem4 As PdfRadioButtonListItem = New PdfRadioButtonListItem("100-499")
            radioItem4.Bounds = New RectangleF(100, 230, 20, 20)
            g.DrawString("100-499", font, brush, New RectangleF(150, 235, 180, 20))
            Dim radioItem5 As PdfRadioButtonListItem = New PdfRadioButtonListItem("500-more")
            radioItem5.Bounds = New RectangleF(100, 260, 20, 20)
            g.DrawString("500-more", font, brush, New RectangleF(150, 265, 180, 20))
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            employeesRadioList.Items.Add(radioItem2)
            employeesRadioList.Items.Add(radioItem3)
            employeesRadioList.Items.Add(radioItem4)
            employeesRadioList.Items.Add(radioItem5)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfField"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListField"/> Class 
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.m_field">
            <summary>
            Internal variable to store field which this item belongs to.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.m_value">
            <summary>
            Internal variable to store item's value.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.SetField(Syncfusion.Pdf.Interactive.PdfRadioButtonListField)">
            <summary>
            Sets the field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.Widget_Save(System.Object,System.EventArgs)">
            <summary>
            Handles the Save event of the Widget control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.Save">
            <summary>
            Saves an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.DrawAppearance">
            <summary>
            Draws the appearance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns>m_value</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.Form" -->
        <member name="P:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem("1-9");
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);           
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem("1-9")
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfField"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListField"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a Radiobutton
            PdfRadioButtonListField employeesRadioList = new PdfRadioButtonListField(page, "employeesRadioList");
            //Add to document
            document.Form.Fields.Add(employeesRadioList);
            //Create radiobutton items 
            PdfRadioButtonListItem radioItem1 = new PdfRadioButtonListItem();
            radioItem1.Value = "1-9";
            radioItem1.Bounds = new RectangleF(100, 140, 20, 20);           
            //add the items to radio button group
            employeesRadioList.Items.Add(radioItem1);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create a Radiobutton
            Dim employeesRadioList As PdfRadioButtonListField = New PdfRadioButtonListField(page, "employeesRadioList")
            'Add to document
            document.Form.Fields.Add(employeesRadioList)
            'Create radiobutton items 
            Dim radioItem1 As PdfRadioButtonListItem = New PdfRadioButtonListItem()
            radioItem1.Value = "1-9"
            radioItem1.Bounds = New RectangleF(100, 140, 20, 20)
            'add the items to radio button group
            employeesRadioList.Items.Add(radioItem1)
            document.Save("Form.pdf")
            </code>
            </example>      
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfRadioButtonListField"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfRadioButtonListItem.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfSignatureAppearanceField">
            <summary>
            Represents form field with appearance custom support.
            </summary>   
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfSignatureStyledField"/> Class    
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfSignatureStyledField">
            <summary>
            Represents form's field with style parameters.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create signature field
            PdfSignatureField sign = new PdfSignatureField(page, "sign1");
            sign.Bounds = new RectangleF(100, 420, 100, 50);
            document.Form.Fields.Add(sign);           
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            'Create signature field
            Dim sign As PdfSignatureField = New PdfSignatureField(page, "sign1")
            sign.Bounds = New RectangleF(100, 420, 100, 50)
            document.Form.Fields.Add(sign)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfField"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfGraphics"/> Class
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.ShadowShift">
            <summary>
            Internal variable to store color shift value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.m_widget">
            <summary>
            Internal variable to store widget of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.m_actions">
            <summary>
            Internal variable to store actions of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.m_appearanceTemplate">
            <summary>
            Internal variable to store appearance template.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.m_backBrush">
            <summary>
            Internal variable to store back color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.m_borderPen">
            <summary>
            Internal variable to store border pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.m_shadowBrush">
            <summary>
            Internal variable to store shadow brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.m_visible">
            <summary>
            Internal variable to store visibility of the field.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.#ctor(Syncfusion.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfSignatureStyledField"/> class.
            </summary>
            <param name="page">The page where the field should be placed.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfSignatureStyledField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.RemoveAnnoationFromPage(Syncfusion.Pdf.PdfPageBase,Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Removes the annotation from page.
            </summary>
            <param name="page">The page.</param>
            <param name="widget">The widget.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.AddAnnotationToPage(Syncfusion.Pdf.PdfPageBase,Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Adds the annotation to page.
            </summary>
            <param name="page">The page.</param>
            <param name="widget">The widget.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.BoundsAtLoadedPage(Syncfusion.Pdf.PdfPageBase,System.Drawing.RectangleF)">
            <summary>
            Bounds at loaded page.
            </summary>
            <param name="page">The page.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.GetBoundsAtLoadedPage(Syncfusion.Pdf.PdfPageBase,System.Drawing.RectangleF)">
            <summary>
            Gets the bounds at loaded page.
            </summary>
            <param name="page">The page.</param>
            <param name="rect">The rect.</param>
            <returns>The bounds of field.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.CreateBorderPen">
            <summary>
            Creates the border pen.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.CreateBackBrush">
            <summary>
            Creates the back brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.BackColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.BorderWidth">
            <summary>
            Gets or sets the width of the border.
            </summary>
            <value>The width of the border.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.HighlightMode">
            <summary>
            Gets or sets the highlighting mode.
            </summary>
            <value>The highlighting mode.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.Actions">
            <summary>
            Gets the actions of the field.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.BorderStyle">
            <summary>
            Gets or sets the border style.
            </summary>
            <value>The border style.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfSignatureStyledField"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.ShadowBrush">
            <summary>
            Gets the right bottom beveled Shadow brush.
            </summary>
            <value>The right bottom beveled Shadow brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.Widget">
            <summary>
            Gets the widget.
            </summary>
            <value>The widget.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.AppearanceTemplate">
            <summary>
            Gets the appearance template.
            </summary>
            <value>The appearance template.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.BackBrush">
            <summary>
            Gets the back brush.
            </summary>
            <value>The back brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureStyledField.BorderPen">
            <summary>
            Gets the border pen.
            </summary>
            <value>The border pen.</value>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureAppearanceField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfSignatureAppearanceField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureAppearanceField.#ctor(Syncfusion.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfSignatureAppearanceField"/> class.
            </summary>
            <param name="page">page</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureAppearanceField.Save">
            <summary>
            Saves an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureAppearanceField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSignatureAppearanceField.DrawAppearance(Syncfusion.Pdf.Graphics.PdfTemplate)">
            <summary>
            Draws the appearance.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSignatureAppearanceField.Appearance">
            <summary>
            Gets the appearance.
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfTextBoxField">
            <summary>
            Represents text box field in the PDF form.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create a text box
            PdfTextBoxField firstNameTextBox = new PdfTextBoxField(page, "firstNameTextBox");  
            firstNameTextBox.Bounds = new RectangleF(100, 20, 200, 20);
            firstNameTextBox.Font = font;
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55);
            //Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox);                      
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create a text box
            Dim firstNameTextBox As PdfTextBoxField = New PdfTextBoxField(page, "firstNameTextBox")   
            firstNameTextBox.Bounds = New RectangleF(100, 20, 200, 20)
            firstNameTextBox.Font = font
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55)
            'Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfAppearanceField"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class  
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextBoxField.m_passwordValue">
            <summary>
            The password chrackter.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextBoxField.m_text">
            <summary>
            Internal variable to store value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextBoxField.m_defaultValue">
            <summary>
            Internal variable to store default value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextBoxField.m_spellCheck">
            <summary>
            Internal variable to store value whether to check spelling.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextBoxField.m_insertSpaces">
            <summary>
            Internal variable to store value whether the field has comb behavior.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextBoxField.m_multiline">
            <summary>
            Internal variable to store value whether the field should be multiline.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextBoxField.m_password">
            <summary>
            Internal variable to store value whether it is a password field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextBoxField.m_scrollable">
            <summary>
            Internal variable to store value whether the field is scrollable.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfTextBoxField.m_maxLength">
            <summary>
            Internal variable to store field's maximum length. in characters.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfTextBoxField.#ctor(Syncfusion.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfTextBoxField"/> class.
            </summary>
            <param name="page">Page which the field to be placed on.</param>
            <param name="name">The name of the text box field.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create a text box
            PdfTextBoxField firstNameTextBox = new PdfTextBoxField(page, "firstNameTextBox");  
            firstNameTextBox.Bounds = new RectangleF(100, 20, 200, 20);
            firstNameTextBox.Font = font;
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55);
            //Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox);                      
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create a text box
            Dim firstNameTextBox As PdfTextBoxField = New PdfTextBoxField(page, "firstNameTextBox")   
            firstNameTextBox.Bounds = New RectangleF(100, 20, 200, 20)
            firstNameTextBox.Font = font
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55)
            'Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox)
            document.Save("Form.pdf")
            </code>
            </example>         
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class  
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfTextBoxField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfTextBoxField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfTextBoxField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfTextBoxField.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfTextBoxField.DrawAppearance(Syncfusion.Pdf.Graphics.PdfTemplate)">
            <summary>
            Draws the appearance.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfTextBoxField.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text of the text box field.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create a text box
            PdfTextBoxField firstNameTextBox = new PdfTextBoxField(page, "firstNameTextBox");
            firstNameTextBox.Text = "Cris";
            firstNameTextBox.Bounds = new RectangleF(100, 20, 200, 20);
            firstNameTextBox.Font = font;
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55);
            //Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox);                      
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create a text box
            Dim firstNameTextBox As PdfTextBoxField = New PdfTextBoxField(page, "firstNameTextBox")
            firstNameTextBox.Text = "Cris"
            firstNameTextBox.Bounds = New RectangleF(100, 20, 200, 20)
            firstNameTextBox.Font = font
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55)
            'Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfTextBoxField.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value of the text box field.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create a text box
            PdfTextBoxField firstNameTextBox = new PdfTextBoxField(page, "firstNameTextBox");
            firstNameTextBox.DefaultValue = "Cris";
            firstNameTextBox.Bounds = new RectangleF(100, 20, 200, 20);
            firstNameTextBox.Font = font;
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55);
            //Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox);                      
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create a text box
            Dim firstNameTextBox As PdfTextBoxField = New PdfTextBoxField(page, "firstNameTextBox")
            firstNameTextBox.DefaultValue = "Cris"
            firstNameTextBox.Bounds = New RectangleF(100, 20, 200, 20)
            firstNameTextBox.Font = font
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55)
            'Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfTextBoxField.SpellCheck">
            <summary>
            Gets or sets a value indicating whether to check spelling.
            </summary>
            <value><c>true</c> if check spelling; otherwise, <c>false</c>.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create a text box
            PdfTextBoxField firstNameTextBox = new PdfTextBoxField(page, "firstNameTextBox");
            firstNameTextBox.SpellCheck = true;
            firstNameTextBox.Bounds = new RectangleF(100, 20, 200, 20);
            firstNameTextBox.Font = font;
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55);
            //Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox);                      
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create a text box
            Dim firstNameTextBox As PdfTextBoxField = New PdfTextBoxField(page, "firstNameTextBox")
            firstNameTextBox.SpellCheck = True
            firstNameTextBox.Bounds = New RectangleF(100, 20, 200, 20)
            firstNameTextBox.Font = font
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55)
            'Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfTextBoxField.InsertSpaces">
            <summary>
            Meaningful only if the MaxLength property is set and the Multiline, Password properties are false.
            If set, the field is automatically divided into as many equally spaced positions, or combs, 
            as the value of MaxLength, and the text is laid out into those combs.
            </summary>
            <value><c>true</c> if need to insert spaces; otherwise, <c>false</c>.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create a text box
            PdfTextBoxField firstNameTextBox = new PdfTextBoxField(page, "firstNameTextBox");
            firstNameTextBox.InsertSpaces = true;
            firstNameTextBox.Bounds = new RectangleF(100, 20, 200, 20);
            firstNameTextBox.Font = font;
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55);
            //Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox);                      
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create a text box
            Dim firstNameTextBox As PdfTextBoxField = New PdfTextBoxField(page, "firstNameTextBox")
            firstNameTextBox.InsertSpaces = True
            firstNameTextBox.Bounds = New RectangleF(100, 20, 200, 20)
            firstNameTextBox.Font = font
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55)
            'Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfTextBoxField.Multiline">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfTextBoxField"/> is multiline.
            </summary>
            <value><c>true</c> if multiline; otherwise, <c>false</c>.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create a text box
            PdfTextBoxField firstNameTextBox = new PdfTextBoxField(page, "firstNameTextBox");
            firstNameTextBox.Multiline = true;
            firstNameTextBox.Bounds = new RectangleF(100, 20, 200, 20);
            firstNameTextBox.Font = font;
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55);
            //Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox);                      
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create a text box
            Dim firstNameTextBox As PdfTextBoxField = New PdfTextBoxField(page, "firstNameTextBox")
            firstNameTextBox.Multiline = True
            firstNameTextBox.Bounds = New RectangleF(100, 20, 200, 20)
            firstNameTextBox.Font = font
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55)
            'Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfTextBoxField.Password">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfTextBoxField"/> is password field.
            </summary>
            <value><c>true</c> if password field; otherwise, <c>false</c>.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create a text box
            PdfTextBoxField firstNameTextBox = new PdfTextBoxField(page, "firstNameTextBox");
            firstNameTextBox.Password = true;
            firstNameTextBox.Bounds = new RectangleF(100, 20, 200, 20);
            firstNameTextBox.Font = font;
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55);
            //Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox);                      
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create a text box
            Dim firstNameTextBox As PdfTextBoxField = New PdfTextBoxField(page, "firstNameTextBox")
            firstNameTextBox.Password = True
            firstNameTextBox.Bounds = New RectangleF(100, 20, 200, 20)
            firstNameTextBox.Font = font
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55)
            'Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfTextBoxField.Scrollable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfTextBoxField"/> is scrollable.
            </summary>
            <value><c>true</c> if scrollable; otherwise, <c>false</c>.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create a text box
            PdfTextBoxField firstNameTextBox = new PdfTextBoxField(page, "firstNameTextBox");
            firstNameTextBox.Scrollable = true;
            firstNameTextBox.Bounds = new RectangleF(100, 20, 200, 20);
            firstNameTextBox.Font = font;
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55);
            //Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox);                      
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create a text box
            Dim firstNameTextBox As PdfTextBoxField = New PdfTextBoxField(page, "firstNameTextBox")
            firstNameTextBox.Scrollable = True
            firstNameTextBox.Bounds = New RectangleF(100, 20, 200, 20)
            firstNameTextBox.Font = font
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55)
            'Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfTextBoxField.MaxLength">
            <summary>
            Gets or sets the maximum number of characters that can be entered in the text box.
            </summary>
            <value>An integer value specifying the maximum number of characters that can be entered in the text box.</value>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12f);
            //Create a text box
            PdfTextBoxField firstNameTextBox = new PdfTextBoxField(page, "firstNameTextBox");
            firstNameTextBox.MaxLength = 8;
            firstNameTextBox.Bounds = new RectangleF(100, 20, 200, 20);
            firstNameTextBox.Font = font;
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55);
            //Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox);                      
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12f)
            'Create a text box
            Dim firstNameTextBox As PdfTextBoxField = New PdfTextBoxField(page, "firstNameTextBox")
            firstNameTextBox.MaxLength = 8
            firstNameTextBox.Bounds = New RectangleF(100, 20, 200, 20)
            firstNameTextBox.Font = font
            page.Graphics.DrawString("First Name", font, PdfBrushes.Black, 10, 55)
            'Add the textbox in document
            document.Form.Fields.Add(firstNameTextBox)
            document.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class 
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.FieldFlags">
            <summary>
            Represents fields flags enum.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.Default">
            <summary>
            Default field flag.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.ReadOnly">
            <summary>
            If set, the user may not change the value of the field. Any associated widget annotations 
            will not interact with the user; that is, they will not respond to mouse clicks or 
            change their appearance in response to mouse motions. This flag is useful 
            for fields whose values are computed or imported from a database.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.Required">
            <summary>
            If set, the field must have a value at the time it is exported by a submit-form action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.NoExport">
            <summary>
            If set, the field must not be exported by a submit-form action
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.Multiline">
            <summary>
            If set, the field can contain multiple lines of text; 
            if clear, the field�s text is restricted to a single line.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.Password">
            <summary>
            If set, the field is intended for entering a secure password that should not be 
            echoed visibly to the screen. Characters typed from the keyboard should instead 
            be echoed in some unreadable form, such as asterisks or bullet characters.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.FileSelect">
            <summary>
            If set, the text entered in the field represents the pathname of a file whose 
            contents are to be submitted as the value of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.DoNotSpellCheck">
            <summary>
            If set, text entered in the field is not spell-checked.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.DoNotScroll">
            <summary>
            If set, the field does not scroll (horizontally for single-line fields, vertically 
            for multiple-line fields) to accommodate more text than fits within its annotation 
            rectangle. Once the field is full, no further text is accepted.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.Comb">
            <summary>
            Meaningful only if the MaxLen entry is present in the text field dictionary and if 
            the Multiline, Password, and FileSelect flags are clear. If set, the field is 
            automatically divided into as many equally spaced positions, or combs, as the 
            value of MaxLen, and the text is laid out into those combs.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.RichText">
            <summary>
            If set, the value of this field should be represented as a rich text string.
            If the field has a value, the RVentry of the field dictionary specifies 
            the rich text string.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.NoToggleToOff">
            <summary>
            If set, exactly one radio button must be selected at all times; clicking 
            the currently selected button has no effect. If clear, clicking the selected 
            button reselects it, leaving no button selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.Radio">
            <summary>
            If set, the field is a set of radio buttons; if clear, the field is a check box. 
            This flag is meaningful only if the Pushbutton flag is clear.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.PushButton">
            <summary>
            If set, the field is a pushbutton that does not retain a permanent value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.RadiosInUnison">
            <summary>
            If set, a group of radio buttons within a radio button field that use the same value 
            for the on state will turn on and off in unison; that is if one is checked, they 
            are all checked. If clear, the buttons are mutually exclusive.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.Combo">
            <summary>
            If set, the field is a combo box; if clear, the field is a list box.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.Edit">
            <summary>
            If set, the combo box includes an editable text box as well as a drop-down 
            list; if clear, it includes only a drop-down list. This flag is meaningful only 
            if the Combo flag is set.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.Sort">
            <summary>
            If set, the field�s option items should be sorted alphabetically. This flag 
            is intended for use by form authoring tools, not by PDF viewer applications.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.MultiSelect">
            <summary>
            If set, more than one of the field�s option items may be selected simultaneously; 
            if clear, no more than one item at a time may be selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.FieldFlags.CommitOnSelChange">
            <summary>
            If set, the new value is committed as soon as a selection is made with the pointing 
            device. This option enables applications to perform an action once a selection is 
            made, without requiring the user to exit the field. If clear, the new value is not 
            committed until the user exits the field.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfBorderStyle">
            <summary>
            Specifies the available styles for a field border.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            // Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();  
            //Create submit button 
            PdfButtonField submitButton = new PdfButtonField(page, "submitButton");
            submitButton.Bounds = new RectangleF(100, 500, 90, 20);
            submitButton.Font = font;
            submitButton.Text = "Submit";
            // Set the border style for the button field
            submitButton.BorderStyle = PdfBorderStyle.Dashed;
            document.Form.Fields.Add(submitButton);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            ' Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create submit button 
            Dim submitButton As PdfButtonField = New PdfButtonField(page, "submitButton")
            submitButton.Bounds = New RectangleF(100, 500, 90, 20)
            submitButton.Font = font
            submitButton.Text = "Submit"
            ' Set the border style for the button field
            submitButton.BorderStyle = PdfBorderStyle.Dashed
            document.Form.Fields.Add(submitButton)
            document.Save("Form.pdf")
            </code>
            </example>
            <remarks>Defaule value is Solid.</remarks>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBorderStyle.Solid">
            <summary>
            A solid rectangle surrounding the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBorderStyle.Dashed">
            <summary>
            A dashed rectangle surrounding the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBorderStyle.Beveled">
            <summary>
            A simulated embossed rectangle that appears to be raised above the surface 
            of the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBorderStyle.Inset">
            <summary>
            A simulated engraved rectangle that appears to be recessed below the surface 
            of the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfBorderStyle.Underline">
            <summary>
            A single line along the bottom of the annotation rectangle.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfHighlightMode">
            <summary>
            Specifies the highlight mode for a field.
            </summary>
            <example>
            <code lang="C#">
            // Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create the signature field
            PdfSignatureField sign = new PdfSignatureField(page, "sign1");
            sign.Bounds = new RectangleF(100, 420, 100, 50);
            // Set the high light mode for a signature field
            sign.HighlightMode = PdfHighlightMode.Push;
            document.Form.Fields.Add(sign);
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            ' Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create the signature field
            Dim sign As PdfSignatureField = New PdfSignatureField(page, "sign1")
            sign.Bounds = New RectangleF(100, 420, 100, 50)
            ' Set the high light mode for a signature field
            sign.HighlightMode = PdfHighlightMode.Push
            document.Form.Fields.Add(sign)
            document.Save("Form.pdf")
            </code>
            </example>
            <remarks>Defaule value is Invert.</remarks>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfHighlightMode.NoHighlighting">
            <summary>
            No highlighting.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfHighlightMode.Invert">
            <summary>
            Invert the contents of the field rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfHighlightMode.Outline">
            <summary>
            Invert the field's border.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfHighlightMode.Push">
            <summary>
            Pushed highlighting.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfCheckBoxStyle">
            <summary>
            Specifies the style for a check box field.
            </summary>
            <remarks>The default value is Check.</remarks>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();         
            //Create a check box
            PdfCheckBoxField checkBox = new PdfCheckBoxField(page, "C#.NET");            
            checkBox.Bounds = new RectangleF(100, 290, 20, 20);            
            // Add the check box field in form`s field collection
            document.Form.Fields.Add(checkBox);
            checkBox.HighlightMode = PdfHighlightMode.Push;
            checkBox.BorderStyle = PdfBorderStyle.Beveled;
            // Set the check style
            checkBox.Style = PdfCheckBoxStyle.Star;            
            checkBox.Checked = true;
            document.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a check box
            Dim checkBox As PdfCheckBoxField = New PdfCheckBoxField(page, "C#.NET")
            checkBox.Bounds = New RectangleF(100, 290, 20, 20)
            ' Add the check box field in form`s field collection
            document.Form.Fields.Add(checkBox)
            checkBox.HighlightMode = PdfHighlightMode.Push
            checkBox.BorderStyle = PdfBorderStyle.Beveled
            ' Set the check style
            checkBox.Style = PdfCheckBoxStyle.Star
            checkBox.Checked = True
            document.Save("Form.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckBoxStyle.Check">
            <summary>
            A check mark is used for the checked state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckBoxStyle.Circle">
            <summary>
            A circle is used for the checked state. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckBoxStyle.Cross">
            <summary>
            A cross is used for the checked state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckBoxStyle.Diamond">
            <summary>
            A diamond symbol is used for the checked state. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckBoxStyle.Square">
            <summary>
            A square is used for the checked state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckBoxStyle.Star">
            <summary>
            A star is used for the checked state.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.HttpMethod">
            <summary>
            Specifies Http request method.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.HttpMethod.Get">
            <summary>
            Data submitted using Http Get method.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.HttpMethod.Post">
            <summary>
            Data submitted using Http Post method.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.SubmitDataFormat">
            <summary>
            Specifies the enumeration of submit data formats.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.SubmitDataFormat.Html">
            <summary>
            Data should be transmitted as Html.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.SubmitDataFormat.Pdf">
            <summary>
            Data should be transmitted as Pdf.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.SubmitDataFormat.Fdf">
            <summary>
            Data should be transmitted as Forms Data Format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.SubmitDataFormat.Xfdf">
            <summary>
            Data should be transmitted as XML Forms Data Format .
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfCheckFieldState">
            <summary>
            Represents states of the check field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckFieldState.Unchecked">
            <summary>
            Indicated unchecked/unpressed state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckFieldState.Checked">
            <summary>
            Indicated checked unpressed state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckFieldState.PressedUnchecked">
            <summary>
            Indicated pressed unchecked state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfCheckFieldState.PressedChecked">
            <summary>
            Indicated pressed checked state.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.EmbeddedFile">
            <summary>
            Class which represents embedded file into Pdf document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.EmbeddedFile.m_fileName">
            <summary>
            Internal variable to store file name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.EmbeddedFile.m_filePath">
            <summary>
            Internal variable to store file path.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.EmbeddedFile.m_mimeType">
            <summary>
            Internal variable to store mime type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.EmbeddedFile.m_data">
            <summary>
            Internal variable to store embedded data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.EmbeddedFile.m_params">
            <summary>
            Internal variable to store specification of the embedded file.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.EmbeddedFile.m_stream">
            <summary>
            Internal variable to store stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.EmbeddedFile.#ctor(System.String)">
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Syncfusion.Pdf.EmbeddedFile.#ctor(System.String,System.Byte[])">
            <param name="fileName">Name of the file.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.EmbeddedFile.#ctor(System.String,System.IO.Stream)">
            <param name="fileName">Name of the file.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Pdf.EmbeddedFile.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.EmbeddedFile.Save">
            <summary>
            Saves an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.EmbeddedFile.Stream_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Stream control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.EmbeddedFile.GetFileName(System.String)">
            <summary>
            Get attachment's name through names array.
            </summary>
            <returns>Attachment's file name.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.EmbeddedFile.FileName">
            <value>The name of the file.</value>
        </member>
        <member name="P:Syncfusion.Pdf.EmbeddedFile.FilePath">
            <summary>
            Gets or sets the path of the file.
            </summary>
            <value>The path of the file.</value>
        </member>
        <member name="P:Syncfusion.Pdf.EmbeddedFile.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Syncfusion.Pdf.EmbeddedFile.MimeType">
            <summary>
            Gets or sets the type of the MIME.
            </summary>
            <value>The type of the MIME.</value>
        </member>
        <member name="P:Syncfusion.Pdf.EmbeddedFile.Params">
            <summary>
            Gets the params.
            </summary>
            <value>The params.</value>
        </member>
        <member name="P:Syncfusion.Pdf.EmbeddedFile.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.EmbeddedFileParams">
            <summary>
            Defines additional parameters for the embedded file.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.EmbeddedFileParams.m_creationDate">
            <summary>
            Internal variable to store creation date.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.EmbeddedFileParams.m_modificationDate">
            <summary>
            Internal variable to store modification date.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.EmbeddedFileParams.m_size">
            <summary>
            Internal variable to store size of the embedded file.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.EmbeddedFileParams.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.EmbeddedFileParams.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.EmbeddedFileParams"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.EmbeddedFileParams.CreationDate">
            <summary>
            Gets or sets creation date.
            </summary>
            <value>Creation date.</value>
        </member>
        <member name="P:Syncfusion.Pdf.EmbeddedFileParams.ModificationDate">
            <summary>
            Gets or sets modification date.
            </summary>
            <value>Modification date.</value>
        </member>
        <member name="P:Syncfusion.Pdf.EmbeddedFileParams.Size">
            <summary>
            Gets or sets the size of the embedded file.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Syncfusion.Pdf.EmbeddedFileParams.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Functions.PdfExponentialInterpolationFunction">
            <summary>
            Implements PDF Exponential Interpolation Function.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Functions.PdfFunction">
            <summary>
            Implements the base class for all functions.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Functions.PdfFunction.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Functions.PdfFunction.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfFunction"/> class.
            </summary>
            <param name="dic">The internal dictionary.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Functions.PdfFunction.Domain">
            <summary>
            Gets or sets the domain of the function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Functions.PdfFunction.Range">
            <summary>
            Gets or sets the range.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Functions.PdfFunction.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Functions.PdfFunction.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="F:Syncfusion.Pdf.Functions.PdfExponentialInterpolationFunction.m_c0">
            <summary>
            Local variable to store the function result when x = 0.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Functions.PdfExponentialInterpolationFunction.m_c1">
            <summary>
            Local variable to store the function result when x = 1.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Functions.PdfExponentialInterpolationFunction.m_interpolationExp">
            <summary>
            Local variable to store the interpolation exponent.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Functions.PdfExponentialInterpolationFunction.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfExponentialInterpolationFunction"/> class.
            </summary>
            <param name="Init">init</param>
        </member>
        <member name="M:Syncfusion.Pdf.Functions.PdfExponentialInterpolationFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfExponentialInterpolationFunction"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Functions.PdfExponentialInterpolationFunction.InterpolationExponent(System.Single[])">
            <summary>
            TO calulate the interpolation exponent.
            </summary>
            <param name="singleArray1">singleArray1</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.Functions.PdfExponentialInterpolationFunction.C0">
            <summary>
            Gets or sets the function result when x = 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Functions.PdfExponentialInterpolationFunction.C1">
            <summary>
            Gets or sets the function result when x = 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Functions.PdfExponentialInterpolationFunction.Exponent">
            <summary>
            Gets or sets the Exponent.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Functions.PdfPostScriptCalculatorFunction">
            <summary>
            Implements PDF PostScript Calculator Function
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Functions.PdfPostScriptCalculatorFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPostScriptCalculatorFunction"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Functions.PdfSampledFunction">
            <summary>
            Implements PDF Sampled Function.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Functions.PdfSampledFunction.#ctor(System.Single[],System.Single[],System.Int32[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:PdfSampledFunction"/> class.
            </summary>
            <param name="domain">The domain.</param>
            <param name="range">The range.</param>
            <param name="sizes">The sizes.</param>
            <param name="samples">The samples.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Functions.PdfSampledFunction.#ctor(System.Single[],System.Single[],System.Int32[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:PdfSampledFunction"/> class.
            </summary>
            <param name="domain">The domain, which represents the range of the input values.</param>
            <param name="range">The range, which represents the range of the output values.</param>
            <param name="sizes">The sizes.</param>
            <param name="samples">The number of samples in each dimension.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Functions.PdfSampledFunction.#ctor(System.Single[],System.Single[],System.Int32[],System.Single[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfSampledFunction"/> class.
            </summary>
            <param name="domain">The domain of sampled function.</param>
            <param name="range">The range of sampled function.</param>
            <param name="sizes">The sizes.</param>
            <param name="samples">The samples of sampled function,
            which should be in the range.</param>
            <param name="bps">The bit-per-sample value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Functions.PdfSampledFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Functions.PdfSampledFunction"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Functions.PdfSampledFunction.CheckParams(System.Single[],System.Single[],System.Int32[],System.Array)">
            <summary>
            Checks the input parameters.
            </summary>
            <param name="domain">The domain.</param>
            <param name="range">The range.</param>
            <param name="sizes">The sizes.</param>
            <param name="samples">The samples.</param>
            <exception cref="T:System.ArgumentNullException">If one of the parameters is null.</exception>
            <exception cref="T:System.ArgumentException">If dimentions of the arrays don't agree.</exception>
        </member>
        <member name="M:Syncfusion.Pdf.Functions.PdfSampledFunction.SetDomainAndRange(System.Single[],System.Single[])">
            <summary>
            Sets the domain and range.
            </summary>
            <param name="domain">The domain.</param>
            <param name="range">The range.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Functions.PdfSampledFunction.SetSizeAndValues(System.Int32[],System.Byte[])">
            <summary>
            Sets the size and values.
            </summary>
            <param name="sizes">The sizes of the sample values.</param>
            <param name="samples">The sample values.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Functions.PdfSampledFunction.SetSizeAndValues(System.Int32[],System.Int32[])">
            <summary>
            Sets the size and values.
            </summary>
            <param name="sizes">The sizes of the sample values.</param>
            <param name="samples">The sample values.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Functions.PdfStitchingFunction">
            <summary>
            Implements PDF Stitching Function.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Functions.PdfStitchingFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfStitchingFunction"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfCacheCollection">
            <summary>
            Collection of the cached objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCacheCollection.m_referenceObjects">
            <summary>
            Stores the similar objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCacheCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfCacheCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCacheCollection.Search(Syncfusion.Pdf.IPdfCache)">
            <summary>
            Searches for the similar cached object. If is not found - adds the object to the cache.
            </summary>
            <param name="obj">Object to search for.</param>
            <returns>Cached similar object if found, null otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCacheCollection.Contains(Syncfusion.Pdf.IPdfCache)">
            <summary>
            Checks whether a cache contains a group of such objects.
            </summary>
            <param name="obj">The object.</param>
            <returns>true if contains, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCacheCollection.GroupCount(Syncfusion.Pdf.IPdfCache)">
            <summary>
            Returns number of cached object in a group.
            </summary>
            <param name="obj">The object.</param>
            <returns>Returns number of cached object in a group if found, 0 otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCacheCollection.Remove(Syncfusion.Pdf.IPdfCache)">
            <summary>
            Removes the object from a cache.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCacheCollection.Clear">
            <summary>
            Cleares cache.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCacheCollection.CreateNewGroup">
            <summary>
            Creates a new group.
            </summary>
            <returns>A created group.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCacheCollection.GetGroup(Syncfusion.Pdf.IPdfCache)">
            <summary>
            Searches for a corresponding group.
            </summary>
            <param name="result">A representative of a group.</param>
            <returns>A group if found, Null otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCacheCollection.RemoveGroup(System.Collections.Generic.List{System.Object})">
            <summary>
            Remove a group from the storage.
            </summary>
            <param name="group">A group of the objects.</param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCacheCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="!:System.Collections.ArrayList"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfDefaultAppearance">
            <summary>
            Represents default appearance string.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDefaultAppearance.m_foreColor">
            <summary>
            Internal variable to store fore color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDefaultAppearance.m_fontName">
            <summary>
            Internal variable to store font name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDefaultAppearance.m_fontSize">
            <summary>
            Internal variable to store font size.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfDefaultAppearance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfDefaultAppearance"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfDefaultAppearance.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDefaultAppearance.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
            <value>The name of the font.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDefaultAppearance.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>The size of the font.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDefaultAppearance.ForeColor">
            <summary>
            Gets or sets the color of the fore.
            </summary>
            <value>The color of the fore.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfDestination">
            <summary>
            Represents an anchor in the document where bookmarks or annotations can direct when clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDestination.m_destinationMode">
            <summary>
            Type of the destination.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDestination.m_zoom">
            <summary>
            Zoom factor.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDestination.m_location">
            <summary>
            Location of the destination.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDestination.m_page">
            <summary>
            Parent page reference.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDestination.m_array">
            <summary>
            Pdf primitive representing this object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDestination.m_isValid">
            <summary>
            Indicates whether destination is valid. 
            Destination is not valid if it has null location or zoom
            otherwise it is valid.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfDestination.#ctor(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfDestination"/> class.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfDestination.#ctor(Syncfusion.Pdf.PdfPageBase,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfDestination"/> class.
            </summary>
            <param name="page">The page.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfDestination.SetValidation(System.Boolean)">
            <summary>
            Sets the validation.
            </summary>
            <param name="valid">if it is valid, set to <c>true</c>.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfDestination.PointToNativePdf(Syncfusion.Pdf.PdfPage,System.Drawing.PointF)">
            <summary>
            Translates co-ordinates to PDF co-ordinate system (lower/left).
            </summary>
            <param name="page">The page.</param>
            <param name="point">Point in left/top co-ordinate system.</param>
            <returns>
            Co-ordinates to PDF co-ordinate system (lower/left).
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfDestination.InitializePrimitive">
            <summary>
            Infills array by correct values.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfDestination.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDestination.Zoom">
            <summary>
            Gets or sets zoom factor.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDestination.Page">
            <summary>
            Gets or sets a page where the destination is situated.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDestination.Mode">
            <summary>
            Gets or sets mode of the destination.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDestination.Location">
            <summary>
            Gets or sets a location of the destination.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDestination.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfDestination.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets pdf primitive representing this object.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfSound">
            <summary>
            Represents sound embedded into pdf document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSound.m_rate">
            <summary>
            Internal variable to store sampling rate.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSound.m_encoding">
            <summary>
            Internal variable to store encoding format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSound.m_channels">
            <summary>
            Internal variable to store number of sound channels.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSound.m_bits">
            <summary>
            Internal variable to store number of bits per sample value per channel.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSound.m_fileName">
            <summary>
            Internal variable to store sound file name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSound.m_stream">
            <summary>
            Internal variable to store stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSound.#ctor(System.String)">
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSound.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfSound"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="test">if set to <c>true</c> [test].</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSound.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfSound"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSound.Stream_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Stream control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfSound.Save">
            <summary>
            Saves an instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSound.Rate">
            <summary>
            Gets or sets the sampling rate, in samples per second (in Hz).
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSound.Bits">
            <summary>
            Gets or sets the number of bits per sample value per channel.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSound.Encoding">
            <summary>
            Gets or sets the encoding format for the sample data.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSound.Channels">
            <summary>
            Gets or sets the number of sound channels.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSound.FileName">
            <value>The name of the file.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfSound.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.ReferenceFileSpecification">
            <summary>
            Represents specification of the references file in pdf document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ReferenceFileSpecification.m_fileName">
            <summary>
            Internal variable to store file name.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ReferenceFileSpecification.#ctor(System.String,Syncfusion.Pdf.Interactive.PdfFilePathType)">
            <param name="fileName">File name.</param>
            <param name="path">Path Type.</param>
        </member>
        <member name="M:Syncfusion.Pdf.ReferenceFileSpecification.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.ReferenceFileSpecification"/> class.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Syncfusion.Pdf.ReferenceFileSpecification.Save">
            <summary>
            Saves object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.ReferenceFileSpecification.FileName">
            <value>The name of the file.</value>
        </member>
        <member name="T:Syncfusion.Pdf.SortedListEx">
            <summary>
            Optimized version of SortedList collection. Instead of keeping two
            arrays, one for keys and one for values, the values array on
            Hashtable collection are changed. Performance of this collection is better than that of SortedList.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx._defaultCapacity">
            <summary>
            Default capacity of internal buffers.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.keys">
            <summary>
            Array which store keys in sorted order.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.values">
            <summary>
            Collection stores values.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx._size">
            <summary>
            Size of collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.version">
            <summary>
            Version of collection data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.comparer">
            <summary>
            Default comparer for keys.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.keyList">
            <summary>
            List of keys.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.valueList">
            <summary>
            List of values.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.SortedListEx"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.SortedListEx"/> class.
            </summary>
            <param name="initialCapacity">The initial capacity.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.#ctor(System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.SortedListEx"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.#ctor(System.Collections.IComparer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.SortedListEx"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.SortedListEx"/> class.
            </summary>
            <param name="d">The d.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.#ctor(System.Collections.IDictionary,System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.SortedListEx"/> class.
            </summary>
            <param name="d">The d.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.Synchronized(Syncfusion.Pdf.SortedListEx)">
            <summary>
            Returns a synchronized (thread-safe) wrapper for the SortedList.
            </summary>
            <param name="list">The SortedList to synchronize.</param>
            <returns>A synchronized (thread-safe) wrapper for the SortedList.</returns>
            <exception cref="T:System.ArgumentNullException">
            When list is null.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the list.
            </summary>
            <param name="key">The Object to use as the key of the element to add.</param>
            <param name="value">The Object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            When key is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When list already contains specified key.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the current instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.CloneAll">
            <summary>
            Clone current instance.
            </summary>
            <returns>Returns clone of current object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.Contains(System.Object)">
            <summary>
            Determines whether the list contains an element with the specified key.
            </summary>
            <param name="key">Key of the element to search.</param>
            <returns>True if list contains specified key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.ContainsKey(System.Object)">
            <summary>
            Determines whether the list contains an element with the specified key.
            </summary>
            <param name="key">Key of the element to search.</param>
            <returns>True if list contains specified key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.ContainsValue(System.Object)">
            <summary>
            Determines whether the list contains the specified value.
            </summary>
            <param name="value">Value of the element to search.</param>
            <returns>True if list contains specified value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the SortedListEx to the specified one-dimensional Array
            starting at the specified destination Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the
            elements copied from the current list.</param>
            <param name="arrayIndex">The index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            If specified array is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If rank of the array is not 1 or there are not enough elements.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If specified arrayIndex is less than zero.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.GetByIndex(System.Int32)">
            <summary>
            Gets the value at the specified index of the SortedListEx.
            </summary>
            <param name="index">The zero-based index of the value to get.</param>
            <returns>The value at the specified index of the SortedListEx.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When index is less than zero or greater than size of the list.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.GetKey(System.Int32)">
            <summary>
            Gets the key at the specified index of the SortedListEx.
            </summary>
            <param name="index">The zero-based index of the key to get.</param>
            <returns>The key at the specified index of the SortedListEx.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When index is less than zero or greater than size of the list.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.GetKeyList">
            <summary>
            Gets the keys in the SortedListEx.
            </summary>
            <returns>An IList containing the keys in the SortedListEx.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.GetValueList">
            <summary>
            Gets the values in the SortedListEx.
            </summary>
            <returns>An IList containing the values in the SortedListEx.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.IndexOfKey(System.Object)">
            <summary>
            Returns the zero-based index of the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>The zero-based index of key, if key is found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            If specified key is null.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.IndexOfValue(System.Object)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified value.
            </summary>
            <param name="value">The value to locate (can be NULL).</param>
            <returns>
            The zero-based index of the first occurrence of value, if value is found;
            otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When index is less than zero or greater than size of the list.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.Remove(System.Object)">
             <summary>
            Removes the element with the specified key from SortedListEx.
             </summary>
             <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SetByIndex(System.Int32,System.Object)">
            <summary>
            Replaces the value at the specific index.
            </summary>
            <param name="index">The zero-based index at which to save value.</param>
            <param name="value">The Object to save into. Can be NULL.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When index is less than zero or greater than size of the list.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.GetEnumerator">
            <summary>
            Returns an IDictionaryEnumerator that can iterate through the SortedListEx.
            </summary>
            <returns>An IDictionaryEnumerator for the SortedListEx.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an IEnumerator that can iterate through the SortedListEx.
            </summary>
            <returns>An IEnumerator for the SortedListEx.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.Insert(System.Int32,System.Object,System.Object)">
            <summary>
            Inserts element with specified key and value at specified index.
            </summary>
            <param name="index">The zero-based index to insert element at.</param>
            <param name="key">The key of the element to insert.</param>
            <param name="value">The value of the element to insert.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the capacity of this instance is at least the specified value.
            </summary>
            <param name="min">The minimum capacity to ensure.</param>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.Capacity">
            <summary>
            Gets or sets the capacity.
            </summary>
            <value>The capacity.</value>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"/> object is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"/> object has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.SyncSortedListEx._list">
            <summary>
            Wrapped SortedListEx.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.SyncSortedListEx._root">
            <summary>
            Sync object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.#ctor(Syncfusion.Pdf.SortedListEx)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.SortedListEx.SyncSortedListEx"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the list.
            </summary>
            <param name="key">The Object to use as the key of the element to add.</param>
            <param name="value">The Object to use as the value of the element to add.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.Clear">
            <summary>
            Removes all the elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of the current instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.Contains(System.Object)">
            <summary>
            Determines whether the list contains an element with the specified key.
            </summary>
            <param name="key">Key of the element to search.</param>
            <returns>True if list contains specified key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.ContainsKey(System.Object)">
            <summary>
            Determines whether the list contains an element with the specified key.
            </summary>
            <param name="key">Key of the element to search.</param>
            <returns>True if list contains specified key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.ContainsValue(System.Object)">
            <summary>
            Determines whether the list contains the specified value.
            </summary>
            <param name="value">Value of the element to search.</param>
            <returns>True if list contains specified value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the list to the specified one-dimensional Array
            starting at the specified destination Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the
            elements copied from the current list.</param>
            <param name="index">The index in array at which copying begins.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.GetByIndex(System.Int32)">
            <summary>
            Gets the value at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the value to get.</param>
            <returns>The value at the specified index of the SortedListEx.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.GetEnumerator">
            <summary>
            Returns an IDictionaryEnumerator that can iterate through the list.
            </summary>
            <returns>An IDictionaryEnumerator for the list.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.GetKey(System.Int32)">
            <summary>
            Gets the key at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the key to get.</param>
            <returns>The key at the specified index of the list.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.GetKeyList">
            <summary>
            Gets the keys in the list.
            </summary>
            <returns>An IList containing the keys in the list.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.GetValueList">
            <summary>
            Gets the values in the list.
            </summary>
            <returns>An IList containing the values in the list.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.IndexOfKey(System.Object)">
            <summary>
            Returns the zero-based index of the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>The zero-based index of key, if key is found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.IndexOfValue(System.Object)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified value.
            </summary>
            <param name="value">The value to locate (can be NULL).</param>
            <returns>
            The zero-based index of the first occurrence of value, if value is found;
            otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.Remove(System.Object)">
             <summary>
            Removes the element with the specified key from list.
             </summary>
             <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.SetByIndex(System.Int32,System.Object)">
            <summary>
            Replaces the value at a specific index.
            </summary>
            <param name="index">The zero-based index at which to save value.</param>
            <param name="value">The Object to save into. Can be NULL.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.Capacity">
            <summary>
            Capacity of internal buffers.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.Count">
            <summary>
            Size of the collection. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.SyncRoot">
            <summary>
            Returns the object that can be used to synchronize access to the collection.
            Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.IsReadOnly">
            <summary>
            Returns True if list is readonly, False otherwise. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.IsFixedSize">
            <summary>
            Returns True if collection has fixed size, False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.IsSynchronized">
            <summary>
            Returns True if the collection is synchronized, False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.SyncSortedListEx.Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <value>key</value>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.Keys">
            <summary>
            If it is assumed to getObjectRetType, Current will return key
            of the current element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.Values">
            <summary>
            If it is assumed to getObjectRetType, Current will return value
            of the current element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.DictEntry">
            <summary>
            If it is assumed to getObjectRetType, Current will return both -
            key and value (as DictionaryEntry).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.SortedListEx">
            <summary>
            List for which is this enumerator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.key">
            <summary>
            Key of the current element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.value">
            <summary>
            Values of the current element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.index">
            <summary>
            Index of current element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.startIndex">
            <summary>
            Starting index for the enumerator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.endIndex">
            <summary>
            Ending index for this enumerator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.version">
            <summary>
            Version of collection data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.current">
            <summary>
            True if current element is correct, False otherwise
            (before beginning or after end).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.getObjectRetType">
            <summary>
            Specifies what should return method Current (Key, Value or both).
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.#ctor(Syncfusion.Pdf.SortedListEx,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates enumerator for specified list, starting from specified index
            and with specified count.
            </summary>
            <param name="SortedListEx">list for which to create enumerator.</param>
            <param name="index">Starting index.</param>
            <param name="count">Number of elements to enumerate.</param>
            <param name="getObjRetType">Type of enumerating values (keys, value, DicEntry).</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the current instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element;
            False if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            When the current version is not equal to the SortedListEx version.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            The key of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Collections.IDictionaryEnumerator"/> is positioned before the first entry of the dictionary or after the last entry.
            </exception>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            A <see cref="T:System.Collections.DictionaryEntry"/> containing both the key and the value of the current dictionary entry.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Collections.IDictionaryEnumerator"/> is positioned before the first entry of the dictionary or after the last entry.
            </exception>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.Current">
            <summary>
            Gets The current element in the collection. Read-only.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If current is false.
            </exception>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.SortedListExEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            The value of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Collections.IDictionaryEnumerator"/> is positioned before the first entry of the dictionary or after the last entry.
            </exception>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.KeyList.SortedListEx">
            <summary>
            List for which this collection was created.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.KeyList.#ctor(Syncfusion.Pdf.SortedListEx)">
            <summary>
            Creates KeyList for specified SortedListEx.
            </summary>
            <param name="SortedListEx">SortedListEx for which KeyList must be created.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.KeyList.Add(System.Object)">
            <summary>
            Adds an element with the provided key to the list.
            </summary>
            <param name="key">The Object to use as the key of the element to add.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.KeyList.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.KeyList.Contains(System.Object)">
            <summary>
            Determines whether the list contains an element with the specified key.
            </summary>
            <param name="key">Key of the element to search.</param>
            <returns>True if list contains specified key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.KeyList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the list to the specified one-dimensional Array
            starting at the specified destination Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the
            elements copied from the current list.</param>
            <param name="arrayIndex">The index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentException">
            If array is null or rank of the array is not 1.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.KeyList.Insert(System.Int32,System.Object)">
            <summary>
            Insert the value at the specific index.
            </summary>
            <param name="index">The zero-based index at which to save value.</param>
            <param name="value">The Object to save into. Can be NULL.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.KeyList.GetEnumerator">
            <summary>
            Returns an IEnumerator that can iterate through the list.
            </summary>
            <returns>An IEnumerator for the list.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.KeyList.IndexOf(System.Object)">
            <summary>
            Returns the zero-based index of the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>The zero-based index of the key, if the key is found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.KeyList.Remove(System.Object)">
             <summary>
            Removes the element with the specified key from list.
             </summary>
             <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.KeyList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index from the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.KeyList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.KeyList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.KeyList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.KeyList.IsSynchronized">
            <summary>
            Returns True if the collection is synchronized, False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.KeyList.SyncRoot">
            <summary>
            Returns the object that can be used to synchronize access to the collection.
            Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.KeyList.Item(System.Int32)">
            <summary>
            Gets or sets the key at the specified index.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.ValueList.SortedListEx">
            <summary>
            List for which this collection was created.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx.ValueList.vals">
            <summary>
            Array list that contain values.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.ValueList.#ctor(Syncfusion.Pdf.SortedListEx)">
            <summary>
            Creates ValueList for specified SortedListEx.
            </summary>
            <param name="SortedListEx">SortedListEx for which ValueList must be created.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.ValueList.UpdateValues">
            <summary>
            Re-read values from the list.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.ValueList.Add(System.Object)">
            <summary>
            Adds an element with the provided key to the list.
            </summary>
            <param name="key">The Object to use as the key of the element to add.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.ValueList.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.ValueList.Contains(System.Object)">
            <summary>
            Determines whether the list contains an element with the specified value.
            </summary>
            <param name="value">Value to search.</param>
            <returns>True if list contains specified value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.ValueList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the list to the specified one-dimensional Array
            starting at the specified destination Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the
            elements copied from the current list.</param>
            <param name="arrayIndex">The index in array at which copying begins.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.ValueList.Insert(System.Int32,System.Object)">
            <summary>
            Insert the value at the specific index.
            </summary>
            <param name="index">The zero-based index at which to save value.</param>
            <param name="value">The Object to save into. Can be NULL.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.ValueList.GetEnumerator">
            <summary>
            Returns an IEnumerator that can iterate through the list.
            </summary>
            <returns>An IEnumerator for the list.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.ValueList.IndexOf(System.Object)">
            <summary>
            Returns the zero-based index of the specified value.
            </summary>
            <param name="value">The value to locate.</param>
            <returns>The zero-based index of the value, if the value is found, otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.ValueList.Remove(System.Object)">
             <summary>
            Removes the specified value from list.
             </summary>
             <param name="value">The value to remove.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx.ValueList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index from the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.ValueList.Count">
            <summary>
            Gets the size of the collection. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.ValueList.IsReadOnly">
            <summary>
            Returns True if list is readonly, False otherwise. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.ValueList.IsFixedSize">
            <summary>
            Returns True if collection has fixed size, False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.ValueList.IsSynchronized">
            <summary>
            Returns True if the collection is synchronized, False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.ValueList.SyncRoot">
            <summary>
            Returns the object that can be used to synchronize access to the collection.
            Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx.ValueList.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.SortedListEx`2">
            <summary>
            Optimized version of SortedList collection. Instead of keeping two
            arrays, one for keys and one for values, the values array on
            Hashtable collection are changed. Performance of this collection is better than that of SortedList.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2._defaultCapacity">
            <summary>
            Default capacity of internal buffers.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.m_keys">
            <summary>
            Array which store keys in sorted order.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.m_values">
            <summary>
            Collection stores values.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.m_size">
            <summary>
            Size of collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.m_version">
            <summary>
            Version of collection data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.m_comparer">
            <summary>
            Default comparer for keys.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.m_keyList">
            <summary>
            List of keys.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.m_valueList">
            <summary>
            List of values.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.SortedListEx`2"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.SortedListEx`2"/> class.
            </summary>
            <param name="initialCapacity">The initial capacity.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.SortedListEx`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.#ctor(System.Collections.Generic.IComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.SortedListEx`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.SortedListEx`2"/> class.
            </summary>
            <param name="d">The d.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.SortedListEx`2"/> class.
            </summary>
            <param name="d">The d.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.Synchronized(Syncfusion.Pdf.SortedListEx{`0,`1})">
            <summary>
            Returns a synchronized (thread-safe) wrapper for the SortedList.
            </summary>
            <param name="list">The SortedList to synchronize.</param>
            <returns>A synchronized (thread-safe) wrapper for the SortedList.</returns>
            <exception cref="T:System.ArgumentNullException">
            When list is null.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the list.
            </summary>
            <param name="key">The Object to use as the key of the element to add.</param>
            <param name="value">The Object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            When key is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            When list already contains specified key.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified pair.
            </summary>
            <param name="pair">The pair.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the current instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.CloneAll">
            <summary>
            Clone current instance.
            </summary>
            <returns>Returns clone of current object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.Contains(`0)">
            <summary>
            Determines whether the list contains an element with the specified key.
            </summary>
            <param name="key">Key of the element to search.</param>
            <returns>True if list contains specified key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.ContainsKey(`0)">
            <summary>
            Determines whether the list contains an element with the specified key.
            </summary>
            <param name="key">Key of the element to search.</param>
            <returns>True if list contains specified key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.ContainsValue(`1)">
            <summary>
            Determines whether the list contains the specified value.
            </summary>
            <param name="value">Value of the element to search.</param>
            <returns>True if list contains specified value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether [contains] [the specified pair].
            </summary>
            <param name="pair">The pair.</param>
            <returns>
            	if it contains the specified pair, set to <c>true</c> .
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies all the elements of the SortedListEx to the specified one-dimensional Array
            starting at the specified destination Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the
            elements copied from the current list.</param>
            <param name="arrayIndex">The index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            If specified array is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If rank of the array is not 1 or there are not enough elements.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If specified arrayIndex is less than zero.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.GetByIndex(System.Int32)">
            <summary>
            Gets the value at the specified index of the SortedListEx.
            </summary>
            <param name="index">The zero-based index of the value to get.</param>
            <returns>The value at the specified index of the SortedListEx.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When index is less than zero or greater than size of the list.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.GetKey(System.Int32)">
            <summary>
            Gets the key at the specified index of the SortedListEx.
            </summary>
            <param name="index">The zero-based index of the key to get.</param>
            <returns>The key at the specified index of the SortedListEx.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When index is less than zero or greater than size of the list.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.GetKeyList">
            <summary>
            Gets the keys in the SortedListEx.
            </summary>
            <returns>An IList containing the keys in the SortedListEx.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.GetValueList">
            <summary>
            Gets the values in the SortedListEx.
            </summary>
            <returns>An IList containing the values in the SortedListEx.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.IndexOfKey(`0)">
            <summary>
            Returns the zero-based index of the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>The zero-based index of key, if key is found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            If specified key is null.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.IndexOfValue(`1)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified value.
            </summary>
            <param name="value">The value to locate (can be NULL).</param>
            <returns>
            The zero-based index of the first occurrence of value, if value is found;
            otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When index is less than zero or greater than size of the list.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.Remove(`0)">
             <summary>
            Removes the element with the specified key from SortedListEx.
             </summary>
             <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified pair.
            </summary>
            <param name="pair">The pair.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SetByIndex(System.Int32,`1)">
            <summary>
            Replaces the value at the specific index.
            </summary>
            <param name="index">The zero-based index at which to save value.</param>
            <param name="value">The Object to save into. Can be NULL.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When index is less than zero or greater than size of the list.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.GetEnumerator">
            <summary>
            Returns an IDictionaryEnumerator that can iterate through the SortedListEx.
            </summary>
            <returns>An IDictionaryEnumerator for the SortedListEx.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an IEnumerator that can iterate through the SortedListEx.
            </summary>
            <returns>An IEnumerator for the SortedListEx.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts element with specified key and value at specified index.
            </summary>
            <param name="index">The zero-based index to insert element at.</param>
            <param name="key">The key of the element to insert.</param>
            <param name="value">The value of the element to insert.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the capacity of this instance is at least the specified value.
            </summary>
            <param name="min">The minimum capacity to ensure.</param>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.Capacity">
            <summary>
            Capacity of internal buffers.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.Count">
            <summary>
            Size of the collection. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.Keys">
            <summary>
            List of keys. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
            <summary>
            List of keys. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.Values">
            <summary>
            List of values. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
            <summary>
            List of values. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.IsReadOnly">
            <summary>
            Returns True if list is readonly, False otherwise. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.IsFixedSize">
            <summary>
            Returns True if collection has fixed size, False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.IsSynchronized">
            <summary>
            Returns True if the collection is synchronized, False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.SyncRoot">
            <summary>
            Returns the object that can be used to synchronize access to the collection.
            Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.m_list">
            <summary>
            Wrapped SortedListEx.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.m_root">
            <summary>
            Sync object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.#ctor(Syncfusion.Pdf.SortedListEx{`0,`1})">
            <summary>
            Creates SyncSortedListEx for specified SortedListEx.
            </summary>
            <param name="list">SortedListEx that will be wrapped.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the list.
            </summary>
            <param name="key">The Object to use as the key of the element to add.</param>
            <param name="value">The Object to use as the value of the element to add.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.Clear">
            <summary>
            Removes all the elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of the current instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.Contains(`0)">
            <summary>
            Determines whether the list contains an element with the specified key.
            </summary>
            <param name="key">Key of the element to search.</param>
            <returns>True if list contains specified key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.ContainsKey(`0)">
            <summary>
            Determines whether the list contains an element with the specified key.
            </summary>
            <param name="key">Key of the element to search.</param>
            <returns>True if list contains specified key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.ContainsValue(`1)">
            <summary>
            Determines whether the list contains the specified value.
            </summary>
            <param name="value">Value of the element to search.</param>
            <returns>True if list contains specified value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies all the elements of the list to the specified one-dimensional Array
            starting at the specified destination Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the
            elements copied from the current list.</param>
            <param name="index">The index in array at which copying begins.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.GetByIndex(System.Int32)">
            <summary>
            Gets the value at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the value to get.</param>
            <returns>The value at the specified index of the SortedListEx.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.GetEnumerator">
            <summary>
            Returns an IDictionaryEnumerator that can iterate through the list.
            </summary>
            <returns>An IDictionaryEnumerator for the list.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.GetKey(System.Int32)">
            <summary>
            Gets the key at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the key to get.</param>
            <returns>The key at the specified index of the list.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.GetKeyList">
            <summary>
            Gets the keys in the list.
            </summary>
            <returns>An IList containing the keys in the list.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.GetValueList">
            <summary>
            Gets the values in the list.
            </summary>
            <returns>An IList containing the values in the list.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.IndexOfKey(`0)">
            <summary>
            Returns the zero-based index of the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>The zero-based index of key, if key is found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.IndexOfValue(`1)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified value.
            </summary>
            <param name="value">The value to locate (can be NULL).</param>
            <returns>
            The zero-based index of the first occurrence of value, if value is found;
            otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.Remove(`0)">
             <summary>
            Removes the element with the specified key from list.
             </summary>
             <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.SetByIndex(System.Int32,`1)">
            <summary>
            Replaces the value at a specific index.
            </summary>
            <param name="index">The zero-based index at which to save value.</param>
            <param name="value">The Object to save into. Can be NULL.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.Capacity">
            <summary>
            Capacity of internal buffers.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.Count">
            <summary>
            Size of the collection. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.SyncRoot">
            <summary>
            Returns the object that can be used to synchronize access to the collection.
            Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.IsReadOnly">
            <summary>
            Returns True if list is readonly, False otherwise. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.IsFixedSize">
            <summary>
            Returns True if collection has fixed size, False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.IsSynchronized">
            <summary>
            Returns True if the collection is synchronized, False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.SyncSortedListEx.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.m_sortedListEx">
            <summary>
            List for which is this enumerator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.m_key">
            <summary>
            Key of the current element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.m_value">
            <summary>
            Values of the current element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.m_index">
            <summary>
            Index of current element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.m_startIndex">
            <summary>
            Starting index for the enumerator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.m_endIndex">
            <summary>
            Ending index for this enumerator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.m_version">
            <summary>
            Version of collection data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.m_current">
            <summary>
            True if current element is correct, False otherwise
            (before beginning or after end).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.m_isDisposed">
            <summary>
            Shows if the object was disposed.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.#ctor(Syncfusion.Pdf.SortedListEx{`0,`1},System.Int32,System.Int32)">
            <summary>
            Creates enumerator for specified list, starting from specified index
            and with specified count.
            </summary>
            <param name="sortedListEx">list for which to create enumerator.</param>
            <param name="index">Starting index.</param>
            <param name="count">Number of elements to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the current instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element;
            False if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            When the current version is not equal to the SortedListEx version.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before
            the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            When the current version is not equal to the SortedListEx version.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.Key">
            <summary>
            Returns key of the current element. Read-only.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            When the current version is not equal to the SortedListEx version
            or if current is false.
            </exception>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.Current">
            <summary>
            The current element in the collection. Read-only.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If current is false.
            </exception>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.Value">
            <summary>
            Returns value for the current element.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            When the current version is not equal to the SortedListEx version
            or if current is false.
            </exception>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.SortedListExEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.KeyList.m_sortedListEx">
            <summary>
            List for which this collection was created.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.KeyList.#ctor(Syncfusion.Pdf.SortedListEx{`0,`1})">
            <summary>
            Creates KeyList for specified SortedListEx.
            </summary>
            <param name="sortedListEx">The sorted list ex.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.KeyList.Add(`0)">
            <summary>
            Adds an element with the provided key to the list.
            </summary>
            <param name="key">The Object to use as the key of the element to add.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.KeyList.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.KeyList.Contains(`0)">
            <summary>
            Determines whether the list contains an element with the specified key.
            </summary>
            <param name="key">Key of the element to search.</param>
            <returns>True if list contains specified key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.KeyList.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all the elements of the list to the specified one-dimensional Array
            starting at the specified destination Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the
            elements copied from the current list.</param>
            <param name="arrayIndex">The index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentException">
            If array is null or rank of the array is not 1.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.KeyList.Insert(System.Int32,`0)">
            <summary>
            Insert the value at the specific index.
            </summary>
            <param name="index">The zero-based index at which to save value.</param>
            <param name="value">The Object to save into. Can be NULL.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.KeyList.GetEnumerator">
            <summary>
            Returns an IEnumerator that can iterate through the list.
            </summary>
            <returns>An IEnumerator for the list.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.KeyList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an IEnumerator that can iterate through the list.
            </summary>
            <returns>An IEnumerator for the list.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.KeyList.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>The zero-based index of the key, if the key is found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.KeyList.Remove(`0)">
             <summary>
            Removes the element with the specified key from list.
             </summary>
             <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.KeyList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index from the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.KeyList.Count">
            <summary>
            Size of the collection. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.KeyList.IsReadOnly">
            <summary>
            Returns True if list is readonly, False otherwise. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.KeyList.IsFixedSize">
            <summary>
            Returns True if collection has fixed size, False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.KeyList.IsSynchronized">
            <summary>
            Returns True if the collection is synchronized, False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.KeyList.SyncRoot">
            <summary>
            Returns the object that can be used to synchronize access to the collection.
            Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.KeyList.Item(System.Int32)">
            <summary>
            Gets or sets the key at the specified index.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.ValueList.m_sortedListEx">
            <summary>
            List for which this collection was created.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.SortedListEx`2.ValueList.m_values">
            <summary>
            Array list that contain values.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.ValueList.#ctor(Syncfusion.Pdf.SortedListEx{`0,`1})">
            <summary>
            Creates ValueList for specified SortedListEx.
            </summary>
            <param name="sortedListEx">The sorted list ex.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.ValueList.UpdateValues">
            <summary>
            Re-read values from the list.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.ValueList.Add(`1)">
            <summary>
            Adds an element with the provided key to the list.
            </summary>
            <param name="value">The Object to use as the key of the element to add.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.ValueList.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.ValueList.Contains(`1)">
            <summary>
            Determines whether the list contains an element with the specified value.
            </summary>
            <param name="value">Value to search.</param>
            <returns>True if list contains specified value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.ValueList.CopyTo(`1[],System.Int32)">
            <summary>
            Copies all the elements of the list to the specified one-dimensional Array
            starting at the specified destination Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the
            elements copied from the current list.</param>
            <param name="arrayIndex">The index in array at which copying begins.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.ValueList.Insert(System.Int32,`1)">
            <summary>
            Insert the value at the specific index.
            </summary>
            <param name="index">The zero-based index at which to save value.</param>
            <param name="value">The Object to save into. Can be NULL.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.ValueList.GetEnumerator">
            <summary>
            Returns an IEnumerator that can iterate through the list.
            </summary>
            <returns>An IEnumerator for the list.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.ValueList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.ValueList.IndexOf(`1)">
            <summary>
            Returns the zero-based index of the specified value.
            </summary>
            <param name="value">The value to locate.</param>
            <returns>The zero-based index of the value, if the value is found, otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.ValueList.Remove(`1)">
             <summary>
            Removes the specified value from list.
             </summary>
             <param name="value">The value to remove.</param>
        </member>
        <member name="M:Syncfusion.Pdf.SortedListEx`2.ValueList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index from the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.ValueList.Count">
            <summary>
            Size of the collection. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.ValueList.IsReadOnly">
            <summary>
            Returns True if list is readonly, False otherwise. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.ValueList.IsFixedSize">
            <summary>
            Returns True if collection has fixed size, False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.ValueList.IsSynchronized">
            <summary>
            Returns True if the collection is synchronized, False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.ValueList.SyncRoot">
            <summary>
            Returns the object that can be used to synchronize access to the collection.
            Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.SortedListEx`2.ValueList.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.StringComparer">
            <summary>
            Comparer for strings.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.StringComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare two strings.
            </summary>
            <param name="x">String to compare.</param>
            <param name="y">String to compare.</param>
            <returns>Returns compared results.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.StringComparer.Compare(System.String,System.String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than,
            equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero. x is less than y.Zero x equals
            y.Greater than zero x is greater than y.
            </returns>
        </member>
        <member name="T:Syncfusion.Pdf.UrlFileSpecification">
            <summary>
            Represents Uri file specification.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.UrlFileSpecification.m_fileName">
            <summary>
            Internal variable to store file name.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.UrlFileSpecification.#ctor(System.String)">
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Syncfusion.Pdf.UrlFileSpecification.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.UrlFileSpecification.Save">
            <summary>
            Saves object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.UrlFileSpecification.FileName">
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Utils">
            <summary>
            Utility class.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Utils.c_roundDecimals">
            <summary>
            Number of decimals in float rounding.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Utils.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Utils"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfSoundEncoding">
            <summary>
            The encoding format for the sample data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundEncoding.Raw">
            <summary>
            Unspecified or unsigned values in the range 0 to 2^B - 1.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundEncoding.Signed">
            <summary>
            Twos-complement values.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundEncoding.MuLaw">
            <summary>
            M-law�encoded samples.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundEncoding.ALaw">
            <summary>
            A-law�encoded samples.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfSoundChannels">
            <summary>
            The number of sound channels.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundChannels.Mono">
            <summary>
            One channel.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfSoundChannels.Stereo">
            <summary>
            Two channels.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfDestinationMode">
            <summary>
            Enumeration that represents fit mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDestinationMode.Location">
            <summary>
            Display the page designated by page, with the coordinates (left, top) positioned
            at the top-left corner of the window and the contents of the page magnified
            by the factor zoom. A NULL value for any of the parameters left, top, or
            zoom specifies that the current value of that parameter is to be retained unchanged.
            A zoom value of 0 has the same meaning as a NULL value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfDestinationMode.FitToPage">
            <summary>
            Display the page designated by page, with its contents magnified just enough
            to fit the entire page within the window both horizontally and vertically. If
            the required horizontal and vertical magnification factors are different, use
            the smaller of the two, centering the page within the window in the other
            dimension.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfBlend">
            <summary>
            Implements blend brush setting and functions.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfBlendBase">
            <summary>
            Represents the base class for PdfBlend and PdfColorBlend classes.
            Implements basic routines needed by both classes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendBase.Precision">
            <summary>
            Precision of the GCD calculations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendBase.m_count">
            <summary>
            Local variable to store the count.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendBase.m_positions">
            <summary>
            Local variable to store the positions.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBlendBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfBlendBase"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBlendBase.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfBlendBase"/> class.
            </summary>
            <param name="count">The number of the elements.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBlendBase.Gcd(System.Single[])">
            <summary>
            Calculate the GCD of the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns>The calculated GCD value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBlendBase.Gcd(System.Single,System.Single)">
            <summary>
            Determines greatest common divisor of the specified u and v.
            </summary>
            <param name="u">The u.</param>
            <param name="v">The v.</param>
            <returns>The GCD value</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBlendBase.Gcd(System.Int32,System.Int32)">
            <summary>
            Determines greatest common divisor of the specified u and v.
            </summary>
            <param name="u">The u.</param>
            <param name="v">The v.</param>
            <returns>The GCD value</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBlendBase.IsEven(System.Int32,System.Int32)">
            <summary>
            Determines if both parameters are even numbers.
            </summary>
            <param name="u">The first value.</param>
            <param name="v">The second value.</param>
            <returns>result</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBlendBase.IsEven(System.Int32)">
            <summary>
            Determines if the u value is even.
            </summary>
            <param name="u">The u value.</param>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBlendBase.Interpolate(System.Double,Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Interpolates the specified colours according to the t value.
            </summary>
            <param name="t">The t value, which show the imagine position on a line from 0 to 1.</param>
            <param name="color1">The minimal colour.</param>
            <param name="color2">The maximal colour.</param>
            <param name="colorSpace">The color space.</param>
            <returns>color</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Graphics.PdfBlendBase.Interpolate(System.Double,System.Double,System.Double)" -->
        <member name="M:Syncfusion.Pdf.Graphics.PdfBlendBase.SetArray(System.Array)">
            <summary>
            Sets the array.
            </summary>
            <param name="array">The array, which has values.</param>
            <returns>The array if it's passed all tests.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBlendBase.Positions">
            <summary>
            Gets or sets the positions array.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBlendBase.Count">
            <summary>
            Gets the number of elements that specify the blend.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlend.m_factors">
            <summary>
            Local variable to store the factors.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBlend.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfBlend"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBlend.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfBlend"/> class.
            </summary>
            <param name="count">The number of elements in the Factors and Positions arrays.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBlend.GenerateColorBlend(Syncfusion.Pdf.Graphics.PdfColor[],Syncfusion.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Generates a correct color blend.
            </summary>
            <param name="colours">The colours.</param>
            <param name="colorSpace">The color space.</param>
            <returns>A well formed colour blend.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBlend.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The copy of this instance of PdfBlend.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBlend.Factors">
            <summary>
            Gets or sets the factors array.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfBrush">
            <summary>
            Represents the abstract brush, which containing a basic functionality of a brush.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectively.
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectively.
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <param name="check">check</param>
            <param name="iccbased">Indicates the IccBased Color Space.</param>
            <param name="indexed">Indicates the indexed Color Space.</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectively.
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <param name="check">check</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean,System.Boolean)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectively.
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <param name="check">check</param>
            <param name="iccbased">Indicates the IccBased Color Space.</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBrush.ResetChanges(Syncfusion.Pdf.IO.PdfStreamWriter)">
            <summary>
            Resets the changes, which were made by the brush.
            In other words resets the state to the initial one.
            </summary>
            <param name="streamWriter">The stream writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBrush.Syncfusion#Pdf#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBrush.Clone">
            <summary>
            Creates a new copy of a brush.
            </summary>
            <returns>A new instance of the Brush class.</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfBrushes">
            <summary>
            Represents the collection of immutable default brushes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBrushes.s_brushes">
            <summary>
            Local variable to store the brushes.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBrushes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfBrushes"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBrushes.GetBrush(System.Drawing.KnownColor)">
            <summary>
            Creates the default brush.
            </summary>
            <param name="color">The color.</param>
            <param name="colorName">Name of the color.</param>
            <returns>The proper PdfBrush instance.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.AliceBlue">
            <summary>
            Gets the AliceBlue brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.AntiqueWhite">
            <summary>
            Gets the antique white brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Aqua">
            <summary>
            Gets the Aqua default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Aquamarine">
            <summary>
            Gets the Aquamarine default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Azure">
            <summary>
            Gets the Azure default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Beige">
            <summary>
            Gets the Beige default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Bisque">
            <summary>
            Gets the Bisque default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Black">
            <summary>
            Gets the Black default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.BlanchedAlmond">
            <summary>
            Gets the BlanchedAlmond default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Blue">
            <summary>
            Gets the Blue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.BlueViolet">
            <summary>
            Gets the BlueViolet default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Brown">
            <summary>
            Gets the Brown default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.BurlyWood">
            <summary>
            Gets the BurlyWood default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.CadetBlue">
            <summary>
            Gets the CadetBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Chartreuse">
            <summary>
            Gets the Chartreuse default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Chocolate">
            <summary>
            Gets the Chocolate default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Coral">
            <summary>
            Gets the Coral default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.CornflowerBlue">
            <summary>
            Gets the CornflowerBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Cornsilk">
            <summary>
            Gets the Corn silk default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Crimson">
            <summary>
            Gets the Crimson default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Cyan">
            <summary>
            Gets the Cyan default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkBlue">
            <summary>
            Gets the DarkBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkCyan">
            <summary>
            Gets the DarkCyan default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkGoldenrod">
            <summary>
            Gets the DarkGoldenrod default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkGray">
            <summary>
            Gets the DarkGray default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkGreen">
            <summary>
            Gets the DarkGreen default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkKhaki">
            <summary>
            Gets the DarkKhaki default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkMagenta">
            <summary>
            Gets the DarkMagenta default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkOliveGreen">
            <summary>
            Gets the DarkOliveGreen default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkOrange">
            <summary>
            Gets the DarkOrange default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkOrchid">
            <summary>
            Gets the DarkOrchid default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkRed">
            <summary>
            Gets the DarkRed default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkSalmon">
            <summary>
            Gets the DarkSalmon default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkSeaGreen">
            <summary>
            Gets the DarkSeaGreen default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkSlateBlue">
            <summary>
            Gets the DarkSlateBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkSlateGray">
            <summary>
            Gets the DarkSlateGray default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkTurquoise">
            <summary>
            Gets the DarkTurquoise default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DarkViolet">
            <summary>
            Gets the DarkViolet default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DeepPink">
            <summary>
            Gets the DeepPink default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DeepSkyBlue">
            <summary>
            Gets the DeepSkyBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DimGray">
            <summary>
            Gets the DimGray default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.DodgerBlue">
            <summary>
            Gets the DodgerBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Firebrick">
            <summary>
            Gets the Firebrick default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.FloralWhite">
            <summary>
            Gets the FloralWhite default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.ForestGreen">
            <summary>
            Gets the ForestGreen default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Fuchsia">
            <summary>
            Gets the Fuchsia default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Gainsboro">
            <summary>
            Gets the Gainsborough default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.GhostWhite">
            <summary>
            Gets the GhostWhite default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Gold">
            <summary>
            Gets the Gold default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Goldenrod">
            <summary>
            Gets the Goldenrod default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Gray">
            <summary>
            Gets the Gray default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Green">
            <summary>
            Gets the Green default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.GreenYellow">
            <summary>
            Gets the GreenYellow default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Honeydew">
            <summary>
            Gets the Honeydew default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.HotPink">
            <summary>
            Gets the HotPink default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.IndianRed">
            <summary>
            Gets the IndianRed default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Indigo">
            <summary>
            Gets the Indigo default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Ivory">
            <summary>
            Gets the Ivory default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Khaki">
            <summary>
            Gets the Khaki default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Lavender">
            <summary>
            Gets the Lavender default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LavenderBlush">
            <summary>
            Gets the LavenderBlush default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LawnGreen">
            <summary>
            Gets the LawnGreen default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LemonChiffon">
            <summary>
            Gets the LemonChiffon default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LightBlue">
            <summary>
            Gets the LightBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LightCoral">
            <summary>
            Gets the LightCoral default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LightCyan">
            <summary>
            Gets the LightCyan default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LightGoldenrodYellow">
            <summary>
            Gets the LightGoldenrodYellow default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LightGray">
            <summary>
            Gets the LightGray default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LightGreen">
            <summary>
            Gets the LightGreen default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LightPink">
            <summary>
            Gets the LightPink default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LightSalmon">
            <summary>
            Gets the LightSalmon default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LightSeaGreen">
            <summary>
            Gets the LightSeaGreen default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LightSkyBlue">
            <summary>
            Gets the LightSkyBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LightSlateGray">
            <summary>
            Gets the LightSlateGray default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LightSteelBlue">
            <summary>
            Gets the LightSteelBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LightYellow">
            <summary>
            Gets the LightYellow default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Lime">
            <summary>
            Gets the Lime default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.LimeGreen">
            <summary>
            Gets the LimeGreen default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Linen">
            <summary>
            Gets the Linen default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Magenta">
            <summary>
            Gets the Magenta default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Maroon">
            <summary>
            Gets the Maroon default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.MediumAquamarine">
            <summary>
            Gets the MediumAquamarine default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.MediumBlue">
            <summary>
            Gets the MediumBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.MediumOrchid">
            <summary>
            Gets the MediumOrchid default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.MediumPurple">
            <summary>
            Gets the MediumPurple default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.MediumSeaGreen">
            <summary>
            Gets the MediumSeaGreen default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.MediumSlateBlue">
            <summary>
            Gets the MediumSlateBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.MediumSpringGreen">
            <summary>
            Gets the MediumSpringGreen default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.MediumTurquoise">
            <summary>
            Gets the MediumTurquoise default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.MediumVioletRed">
            <summary>
            Gets the MediumVioletRed default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.MidnightBlue">
            <summary>
            Gets the MidnightBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.MintCream">
            <summary>
            Gets the MintCream default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.MistyRose">
            <summary>
            Gets the MistyRose default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Moccasin">
            <summary>
            Gets the Moccasin default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.NavajoWhite">
            <summary>
            Gets the NavajoWhite default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Navy">
            <summary>
            Gets the Navy default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.OldLace">
            <summary>
            Gets the OldLace default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Olive">
            <summary>
            Gets the Olive default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.OliveDrab">
            <summary>
            Gets the OliveDrab default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Orange">
            <summary>
            Gets the Orange default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.OrangeRed">
            <summary>
            Gets the OrangeRed default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Orchid">
            <summary>
            Gets the Orchid default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.PaleGoldenrod">
            <summary>
            Gets the PaleGoldenrod default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.PaleGreen">
            <summary>
            Gets the PaleGreen default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.PaleTurquoise">
            <summary>
            Gets the PaleTurquoise default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.PaleVioletRed">
            <summary>
            Gets the PaleVioletRed default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.PapayaWhip">
            <summary>
            Gets the PapayaWhip default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.PeachPuff">
            <summary>
            Gets the PeachPuff default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Peru">
            <summary>
            Gets the Peru default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Pink">
            <summary>
            Gets the Pink default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Plum">
            <summary>
            Gets the Plum default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.PowderBlue">
            <summary>
            Gets the PowderBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Purple">
            <summary>
            Gets the Purple default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Red">
            <summary>
            Gets the Red default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.RosyBrown">
            <summary>
            Gets the RosyBrown default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.RoyalBlue">
            <summary>
            Gets the RoyalBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.SaddleBrown">
            <summary>
            Gets the SaddleBrown default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Salmon">
            <summary>
            Gets the Salmon default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.SandyBrown">
            <summary>
            Gets the SandyBrown default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.SeaGreen">
            <summary>
            Gets the SeaGreen default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.SeaShell">
            <summary>
            Gets the SeaShell default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Sienna">
            <summary>
            Gets the Sienna default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Silver">
            <summary>
            Gets the Silver default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.SkyBlue">
            <summary>
            Gets the SkyBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.SlateBlue">
            <summary>
            Gets the SlateBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.SlateGray">
            <summary>
            Gets the SlateGray default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Snow">
            <summary>
            Gets the Snow default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.SpringGreen">
            <summary>
            Gets the SpringGreen default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.SteelBlue">
            <summary>
            Gets the SteelBlue default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Tan">
            <summary>
            Gets the Tan default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Teal">
            <summary>
            Gets the Teal default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Thistle">
            <summary>
            Gets the Thistle default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Tomato">
            <summary>
            Gets the Tomato default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Transparent">
            <summary>
            Gets the Transparent default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Turquoise">
            <summary>
            Gets the Turquoise default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Violet">
            <summary>
            Gets the Violet default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Wheat">
            <summary>
            Gets the Wheat default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.White">
            <summary>
            Gets the White default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.WhiteSmoke">
            <summary>
            Gets the WhiteSmoke default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.Yellow">
            <summary>
            Gets the Yellow default brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBrushes.YellowGreen">
            <summary>
            Gets the YellowGreen default brush.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfColorBlend">
            <summary>
            Represents the arrays of colors and positions used for
            interpolating color blending in a multicolor gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColorBlend.m_colors">
            <summary>
            Array of colors.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorBlend.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfColorBlend"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorBlend.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfColorBlend"/> class.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorBlend.GetFunction(Syncfusion.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Gets the function.
            </summary>
            <param name="colorSpace">The color space.</param>
            <returns>The properly prepared sampled function.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorBlend.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The copy of this instance of the PdfColorBlend class.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorBlend.SetRange(System.Int32,System.Single)">
            <summary>
            Sets the range.
            </summary>
            <param name="colourComponents">The colour components.</param>
            <param name="maxValue">The max value.</param>
            <returns>The ranges array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorBlend.GetColorComponentsCount(Syncfusion.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Calculates the color components count according to colour space.
            </summary>
            <param name="colorSpace">The color space.</param>
            <returns>The number of colour components.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorBlend.GetSamplesValues(Syncfusion.Pdf.Graphics.PdfColorSpace,System.Int32,System.Int32,System.Single)">
            <summary>
            Gets samples values for specified colour space.
            </summary>
            <param name="colorSpace">The color space.</param>
            <param name="sampleCount">The sample count.</param>
            <param name="maxComponentValue">The max component value.</param>
            <param name="step">The step.</param>
            <returns>The byte array of the sample values.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorBlend.GetGrayscaleSamples(System.Int32,System.Int32,System.Single)">
            <summary>
            Gets the grayscale samples.
            </summary>
            <param name="sampleCount">The sample count.</param>
            <param name="maxComponentValue">The max component value.</param>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorBlend.GetCmykSamples(System.Int32,System.Int32,System.Single)">
            <summary>
            Gets the CMYK samples.
            </summary>
            <param name="sampleCount">The sample count.</param>
            <param name="maxComponentValue">The max component value.</param>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorBlend.GetRgbSamples(System.Int32,System.Int32,System.Single)">
            <summary>
            Gets the RGB samples.
            </summary>
            <param name="sampleCount">The sample count.</param>
            <param name="maxComponentValue">The max component value.</param>
            <param name="step">The step.</param>
            <returns>The values of RGB samples.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorBlend.GetNextColor(System.Int32,System.Single,Syncfusion.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Calculates the color that should be at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="step">The step.</param>
            <param name="colorSpace">The color space.</param>
            <returns>The colour obtained from the calculation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorBlend.GetIndices(System.Single,System.Int32@,System.Int32@)">
            <summary>
            Gets the indices.
            </summary>
            <param name="position">The position.</param>
            <param name="indexLow">The index low.</param>
            <param name="indexHi">The index hi.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorBlend.GetMaxComponentValue(Syncfusion.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Calculates the max component value.
            </summary>
            <param name="colorSpace">The color space.</param>
            <returns>The maximal component value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorBlend.GetIntervals(System.Single[])">
            <summary>
            Gets an intervals array from the positions array.
            </summary>
            <param name="positions">The positions array.</param>
            <returns>The intervals obtained from the positions.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColorBlend.Colors">
            <summary>
            Gets or sets the colours array.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfGradientBrush">
            <summary>
            Implements gradient brush capabilities.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGradientBrush.m_background">
            <summary>
            Local variable to store the background color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGradientBrush.m_bStroking">
            <summary>
            Local variable to store the background color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGradientBrush.m_patternDictionary">
            <summary>
            Local variable to store the dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGradientBrush.m_shading">
            <summary>
            Local variable to store the shading.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGradientBrush.m_matrix">
            <summary>
            Local variable to store the Transformation Matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGradientBrush.m_externalState">
            <summary>
            Local variable to store the external state.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGradientBrush.m_colorSpace">
            <summary>
            Local variable to store the colorSpace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGradientBrush.m_function">
            <summary>
            Local variable to store the function.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGradientBrush.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfGradientBrush"/> class.
            </summary>
            <param name="shading">The shading.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGradientBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectfully..
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGradientBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectfully..
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <param name="check">check</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGradientBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean,System.Boolean)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectfully..
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <param name="check">check</param>
            <param name="iccbased">Indicates the IccBased Color Space.</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGradientBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectfully..
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <param name="check">check</param>
            <param name="iccbased">Indicates the IccBased Color Space.</param>
            <param name="indexed">Indicates the indexed Color Space.</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGradientBrush.ResetChanges(Syncfusion.Pdf.IO.PdfStreamWriter)">
            <summary>
            Resets the changes, which were made by the brush.
            In other words resets the state to the initial one.
            </summary>
            <param name="streamWriter">The stream writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGradientBrush.ColorSpaceToDeviceName(Syncfusion.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Converts colorspace enum to a PDF name.
            </summary>
            <param name="colorSpace">The color space enum value.</param>
            <returns>The correct string value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGradientBrush.ResetPatternDictionary(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Resets the pattern dictionary.
            </summary>
            <param name="dictionary">A new pattern dictionary.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGradientBrush.ResetFunction">
            <summary>
            Resets the function.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGradientBrush.CloneAntiAliasingValue(Syncfusion.Pdf.Graphics.PdfGradientBrush)">
            <summary>
            Clones the anti aliasing value.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGradientBrush.CloneBackgroundValue(Syncfusion.Pdf.Graphics.PdfGradientBrush)">
            <summary>
            Clones the background value.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGradientBrush.Background">
            <summary>
            Gets or sets the background color of the brush.
            </summary>
            <remarks>This value is optional. If null is assigned to it,
            the associated entry is removed from the appropriate dictionary.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGradientBrush.AntiAlias">
            <summary>
            Gets or sets a value indicating whether use anti aliasing algorithm.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGradientBrush.Function">
            <summary>
            Gets or sets the function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGradientBrush.BBox">
            <summary>
            Gets or sets the Boundary box.
            </summary>
            <remarks>This value is optional. If null is assigned to it,
            the associated entry is removed from the appropriate dictionary.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGradientBrush.ColorSpace">
            <summary>
            Gets or sets the color space.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGradientBrush.Stroking">
            <summary>
            Gets or sets a value indicating whether
            this <see cref="T:PdfGradientBrush"/> is stroking.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGradientBrush.PatternDictionary">
            <summary>
            Gets the pattern dictionary.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGradientBrush.Shading">
            <summary>
            Gets or sets the shading dictionary.
            </summary>
            <remarks>It's obligatory to set this dictionary
            as soon as deriving class can.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGradientBrush.Matrix">
            <summary>
            Gets or sets the transformation matrix.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGradientBrush.ExternalState">
            <summary>
            Gets or sets the external graphics state,
            which would be set temporary while this brush is active.
            </summary>
            <value>The external graphics state.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGradientBrush.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush">
            <summary>
            Implements linear gradient brush by using PDF axial shading pattern.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.m_pointStart">
            <summary>
             Local variable to store the point start.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.m_pointEnd">
            <summary>
            Local variable to store the point end.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.m_colours">
            <summary>
            Local variable to store the colours.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.m_colourBlend">
            <summary>
            Local variable to store the colour Blend.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.m_blend">
            <summary>
            Local variable to store the blend.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.m_boundaries">
            <summary>
            Local variable to store the boundaries.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.#ctor(System.Drawing.PointF,System.Drawing.PointF,Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLinearGradientBrush"/> class.
            </summary>
            <param name="point1">The starting point of the gradient.</param>
            <param name="point2">The end point of the gradient.</param>
            <param name="color1">The starting color of the gradient.</param>
            <param name="color2">The end color of the gradient.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.#ctor(System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfLinearGradientMode)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLinearGradientBrush"/> class.
            </summary>
            <param name="rect">A RectangleF structure that specifies the bounds of the linear gradient. </param>
            <param name="color1">The starting color for the gradient.</param>
            <param name="color2">The ending color for the gradient.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.#ctor(System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColor,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLinearGradientBrush"/> class.
            </summary>
            <param name="rect">A RectangleF structure that specifies the bounds of the linear gradient.</param>
            <param name="color1">The starting color for the gradient.</param>
            <param name="color2">The ending color for the gradient.</param>
            <param name="angle">The angle, measured in degrees clockwise from the x-axis,
            of the gradient's orientation line.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.#ctor(Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLinearGradientBrush"/> class.
            </summary>
            <param name="color1">The color of the start point.</param>
            <param name="color2">The color of the end point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.AddPoints(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Adds two points to each other.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns>The resulting point.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.SubPoints(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Subs the second point from the first one.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns>The resulting point.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.MulPoints(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Makes scalar multiplication of two points.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.MulPoint(System.Drawing.PointF,System.Single)">
            <summary>
            Multiplies the point by the value specified.
            </summary>
            <param name="point">The point.</param>
            <param name="value">The value.</param>
            <returns>The result in point.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.ChoosePoint(System.Single)">
            <summary>
            Choosts the point according to the angle.
            </summary>
            <param name="angle">The angle.</param>
            <returns>The correct point.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.SetPoints(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Sets the start and end points.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.InitShading">
            <summary>
            Initializes the shading dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.Clone">
            <summary>
            Creates a new copy of a brush.
            </summary>
            <returns>A new instance of the Brush class.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.ResetFunction">
            <summary>
            Resets the function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.Blend">
            <summary>
            Gets or sets a PdfBlend that specifies positions
            and factors that define a custom falloff for the gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.InterpolationColors">
            <summary>
            Gets or sets a ColorBlend that defines a multicolor linear gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.LinearColors">
            <summary>
            Gets or sets the starting and ending colors of the gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.Rectangle">
            <summary>
            Gets a rectangular region that defines
            the boundaries of the gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLinearGradientBrush.Extend">
            <summary>
            Gets or sets the value indicating whether the gradient
            should extend starting and ending points.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush">
            <summary>
            Represent radial gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.m_pointStart">
            <summary>
            Local varaible to store the point start.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.m_radiusStart">
            <summary>
            Local varaible to store the point start.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.m_pointEnd">
            <summary>
            Local varaible to store the point End.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.m_radiusEnd">
            <summary>
            Local varaible to store the radius End.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.m_colours">
            <summary>
            Local varaible to store the colours.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.m_colourBlend">
            <summary>
            Local varaible to store the colour blend.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.m_blend">
            <summary>
            Local varaible to store the blend.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.m_boundaries">
            <summary>
            Local varaible to store the boundaries.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.#ctor(System.Drawing.PointF,System.Single,System.Drawing.PointF,System.Single,Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfRadialGradientBrush"/> class.
            </summary>
            <param name="centreStart">The start centre.</param>
            <param name="radiusStart">The start radius.</param>
            <param name="centreEnd">The end centre.</param>
            <param name="radiusEnd">The end radius.</param>
            <param name="colorStart">The start color.</param>
            <param name="colorEnd">The end color.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.#ctor(Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfRadialGradientBrush"/> class.
            </summary>
            <param name="color1">The color1.</param>
            <param name="color2">The color2.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.SetPoints(System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Sets the points.
            </summary>
            <param name="pointStart">The point start.</param>
            <param name="pointEnd">The point end.</param>
            <param name="radiusStart">The radius start.</param>
            <param name="radiusEnd">The radius end.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.InitShading">
            <summary>
            Initializess the shading dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.Clone">
            <summary>
            Creates a new copy of a brush.
            </summary>
            <returns>A new instance of the Brush class.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.ResetFunction">
            <summary>
            Resets the function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.Blend">
            <summary>
            Gets or sets a PdfBlend that specifies positions
            and factors that define a custom falloff for the gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.InterpolationColors">
            <summary>
            Gets or sets a ColorBlend that defines a multicolor linear gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.LinearColors">
            <summary>
            Gets or sets the starting and ending colors of the gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.Rectangle">
            <summary>
            Gets or sets the rectangle.
            </summary>
            <value>The rectangle.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfRadialGradientBrush.Extend">
            <summary>
            Gets or sets the value indicating whether the gradient
            should extend starting and ending points.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfSolidBrush">
            <summary>
            Represents a brush that fills any object with a solid colour.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfSolidBrush.m_color">
            <summary>
            The colour of the brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfSolidBrush.m_colorSpace">
            <summary>
            The color space of the brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfSolidBrush.m_bImmutable">
            <summary>
            Indicates if the brush is immutable.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfSolidBrush.m_colorspaces">
            <summary>
            Localvariable to store the Colorspace.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfSolidBrush.#ctor(Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfSolidBrush"/> class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfSolidBrush.#ctor(Syncfusion.Pdf.ColorSpace.PdfExtendedColor)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfSolidBrush"/> class.
            </summary>
            <param name="color">color</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfSolidBrush.#ctor(Syncfusion.Pdf.Graphics.PdfColor,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfSolidBrush"/> class.
            </summary>
            <param name="color">The color.</param>
            <param name="immutable">if set to <c>true</c> the brush is immutable.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfSolidBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfSolidBrush"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfSolidBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectively.
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfSolidBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectively.
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <param name="check">check</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfSolidBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean,System.Boolean)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectively.
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <param name="check">check</param>
            <param name="iccbased">Indicates the IccBased Color Space.</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfSolidBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectively.
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <param name="check">check</param>
            <param name="iccbased">Indicates the IccBased Color Space.</param>
            <param name="indexed">Indicates the indexed Color Space.</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfSolidBrush.ResetChanges(Syncfusion.Pdf.IO.PdfStreamWriter)">
            <summary>
            Resets the changes, which were made by the brush.
            In other words resets the state to the initial one.
            </summary>
            <param name="streamWriter">The stream writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfSolidBrush.Clone">
            <summary>
            Creates a new copy of a brush.
            </summary>
            <returns>A new instance of the Brush class.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfSolidBrush.Color">
            <summary>
            Gets or sets the color of the brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfSolidBrush.Colorspaces">
            <summary>
            Gets or sets the Colorspace.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfTilingBrush">
            <summary>
            Implements a colored tiling brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTilingBrush.m_box">
            <summary>
            Local variable to store rectanble box.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTilingBrush.m_graphics">
            <summary>
            Local variable to store graphics.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTilingBrush.m_brushStream">
            <summary>
            Local variable to store brush Stream.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTilingBrush.m_resources">
            <summary>
            Local variable to store resources .
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTilingBrush.m_bStroking">
            <summary>
            Local variable to store Stroking.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTilingBrush.m_page">
            <summary>
            Local variable to store the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTilingBrush.m_location">
            <summary>
            Local variable to store the tile start location.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTilingBrush.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfTilingBrush"/> class.
            </summary>
            <param name="rectangle">The boundaries of the smallest brush cell.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTilingBrush.#ctor(System.Drawing.RectangleF,Syncfusion.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfTilingBrush"/> class.
            </summary>
            <param name="rectangle">The boundaries of the smallest brush cell.</param>
            <param name="page">The Current Page Object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTilingBrush.#ctor(System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfTilingBrush"/> class.
            </summary>
            <param name="size">The size of the smallest brush cell.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTilingBrush.#ctor(System.Drawing.SizeF,Syncfusion.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfTilingBrush"/> class.
            </summary>
            <param name="size">The size of the smallest brush cell.</param>
            <param name="page">The Current Page Object.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Graphics.PdfTilingBrush.#ctor(System.Drawing.RectangleF,Syncfusion.Pdf.PdfPage,System.Drawing.PointF)" -->
        <member name="M:Syncfusion.Pdf.Graphics.PdfTilingBrush.SetObligatoryFields">
            <summary>
            Sets the obligatory fields.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTilingBrush.SetBox(System.Drawing.RectangleF)">
            <summary>
            Sets the BBox coordinates.
            </summary>
            <param name="box">The box.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTilingBrush.GetResources">
            <summary>
            Gets the resources.
            </summary>
            <returns>PDF resource dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTilingBrush.Clone">
            <summary>
            Creates a new copy of a brush.
            </summary>
            <returns>A new instance of the Brush class.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTilingBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectfully..
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <returns>True if the brush was different.</returns>
            <remarks>currentColorSpace parameter doesn't have any impact on the output result.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTilingBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectfully..
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <param name="check">check</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTilingBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean,System.Boolean)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectfully..
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <param name="check">check</param>
            <param name="iccbased">Indicates the IccBased Color Space.</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTilingBrush.MonitorChanges(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectfully..
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <param name="check">check</param>
            <param name="iccbased">Indicates the IccBased Color Space.</param>
            <param name="indexed">Indicates the indexed Color Space.</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTilingBrush.ResetChanges(Syncfusion.Pdf.IO.PdfStreamWriter)">
            <summary>
            Resets the changes, which were made by the brush.
            In other words resets the state to the initial one.
            </summary>
            <param name="streamWriter">The stream writer.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTilingBrush.Location">
            <summary>
            Location representing the start position of the tiles.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTilingBrush.Rectangle">
            <summary>
            Gets the boundary box of the smallest brush cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTilingBrush.Size">
            <summary>
            Gets the size of the smallest brush cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTilingBrush.Graphics">
            <summary>
            Gets Graphics context of the brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTilingBrush.Resources">
            <summary>
            Gets the resources dictionary.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTilingBrush.Stroking">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:PdfTilingBrush"/>
            is used for stroking operations.
            </summary>
            <value><c>true</c> if, the brush is for stroking operations; otherwise, <c>false</c>.</value>
            <remarks>This property allows to use tiling brush like a pen to draw lines.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTilingBrush.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfLinearGradientMode">
            <summary>
            Specifies the gradient direction of the linear gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLinearGradientMode.BackwardDiagonal">
            <summary>
            Specifies a gradient from upper right to lower left.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLinearGradientMode.ForwardDiagonal">
            <summary>
            Specifies a gradient from upper left to lower right.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLinearGradientMode.Horizontal">
            <summary>
            Specifies a gradient from left to right.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLinearGradientMode.Vertical">
            <summary>
            Specifies a gradient from top to bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfExtend">
            <summary>
            Specifies the constant values specifying whether to extend the shading
            beyond the starting and ending points of the axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfExtend.None">
            <summary>
            Do not extend any point.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfExtend.Start">
            <summary>
            Extend start point.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfExtend.End">
            <summary>
            Extend end point.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfExtend.Both">
            <summary>
            Extend both start and end points.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.ShadingType">
            <summary>
            Shading type constants.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ShadingType.Function">
            <summary>
            Function-based shading.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ShadingType.Axial">
            <summary>
            Axial shading.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ShadingType.Radial">
            <summary>
            Radial shading.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ShadingType.FreeForm">
            <summary>
            Free-form Gouraud-shaded triangle mesh
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ShadingType.LatticeForm">
            <summary>
            Lattice-form Gouraud-shaded triangle mesh.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ShadingType.Coons">
            <summary>
            Coons patch mesh.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ShadingType.Tensor">
            <summary>
            Tensor-product patch mesh.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfArc">
            <summary>
            Represents an arc shape.
            </summary>
            <remarks>It ignores brush setting.</remarks>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfEllipsePart">
            <summary>
            The base class of arc and pie shapes.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfRectangleArea">
            <summary>
            Represents an area bound by a rectangle.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfFillElement">
            <summary>
            Represents an element that could be drawn and/or filled.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfDrawElement">
            <summary>
            Describes a graphics element which can be drawn by a pen.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfShapeElement">
            <summary>
            Base class for the main shapes.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfShapeElement.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns>rect</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfShapeElement.GetBoundsInternal">
            <summary>
            Returns a rectangle that bounds this element.
            </summary>
            <returns>Returns a rectangle that bounds this element.</returns>
            <remarks>This method doesn't take into consideration a rotation of the element.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfShapeElement.Layout(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Returns lay outing results.</returns>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfDrawElement.m_pen">
            <summary>
            A pen object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfDrawElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfDrawElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfDrawElement.#ctor(Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfDrawElement"/> class.
            </summary>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfDrawElement.GetPen">
            <summary>
            Gets the pen. If both pen and brush are not explicitly defined, default pen will be used.
            </summary>
            <returns>Gets the pen for drawing.</returns>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfDrawElement.Pen">
            <summary>
            Gets or sets a pen that will be used to draw the element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFillElement.m_brush">
            <summary>
            Internal variable to store brush.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFillElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfFillElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFillElement.#ctor(Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfFillElement"/> class.
            </summary>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFillElement.#ctor(Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfFillElement"/> class.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFillElement.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfFillElement"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFillElement.GetPen">
            <summary>
            Gets the pen. If both pen and brush are not explicitly defined, default pen will be used.
            </summary>
            <exclude/>
            <returns> brush </returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfFillElement.Brush">
            <summary>
            Gets or sets the brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfRectangleArea.m_rect">
            <summary>
            Bounds of the element.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangleArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangleArea"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangleArea.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangleArea"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangleArea.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangleArea"/> class.
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangleArea.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangleArea"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangleArea.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangleArea"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangleArea.GetBoundsInternal">
            <summary>
            Overloaded. Returns a rectangle that bounds this element.
            </summary>
            <returns>Returns a rectangle that bounds this element.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfRectangleArea.X">
            <summary>
            Gets or sets the X co-ordinate of the upper-left corner of this the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfRectangleArea.Y">
            <summary>
            Gets or sets the Y co-ordinate of the upper-left corner of this the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfRectangleArea.Width">
            <summary>
            Gets or sets the width of this element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfRectangleArea.Height">
            <summary>
            Gets or sets the height of this element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfRectangleArea.Size">
            <summary>
            Gets or sets the size of this element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfRectangleArea.Bounds">
            <summary>
            Gets or sets bounds of this element.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipsePart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EllipsePart"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipsePart.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:EllipsePart"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipsePart.#ctor(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:EllipsePart"/> class.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipsePart.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:EllipsePart"/> class.
            </summary>
            <param name="pen">A pen for this element.</param>
            <param name="brush">A Brush for this element.</param>
            <param name="x">X co-ordinate of the element.</param>
            <param name="y">Y co-ordinate of the element.</param>
            <param name="width">Width of the element.</param>
            <param name="height">Height of the element.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipsePart.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:EllipsePart"/> class.
            </summary>
            <param name="pen">A pen for this element.</param>
            <param name="brush">A Brush for this element.</param>
            <param name="rectangle">Bounds of the element.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfEllipsePart.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfEllipsePart.SweepAngle">
            <summary>
            Gets or sets the sweep angle.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfArc.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfArc"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfArc.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfArc"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfArc.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfArc"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfArc.#ctor(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfArc"/> class.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfArc.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfArc"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfArc.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfArc"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfArc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfArc"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfArc.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.ElementLayouter">
            <summary>
            Base class for elements lay outing.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ElementLayouter.m_element">
            <summary>
            Layout the element.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ElementLayouter.#ctor(Syncfusion.Pdf.Graphics.PdfLayoutElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.ElementLayouter"/> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ElementLayouter.Layout(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ElementLayouter.GetNextPage(Syncfusion.Pdf.PdfPage)">
            <summary>
            Returns the next page.
            </summary>
            <param name="currentPage">Current page.</param>
            <returns>The next page.</returns>
            <remarks>The next page is taken from the same section the current one was.
            If there is not enough pages within the section, the new one is appended.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ElementLayouter.LayoutInternal(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ElementLayouter.GetPaginateBounds(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Gets paginate bounds.
            </summary>
            <param name="param">Layout parameters.</param>
            <returns>Gets paginate bounds.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.ElementLayouter.Element">
            <summary>
            Gets  element`s layout.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfLayoutFormat">
            <summary>
            Class that defines layouting settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLayoutFormat.m_boundsSet">
            <summary>
            Indicates whether PaginateBounds were set and should be used or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLayoutFormat.m_paginateBounds">
            <summary>
            Bounds for the paginating.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLayoutFormat.m_layout">
            <summary>
            Layout type of the element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLayoutFormat.m_break">
            <summary>
            Break type of the element.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLayoutFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLayoutFormat"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLayoutFormat.#ctor(Syncfusion.Pdf.Graphics.PdfLayoutFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLayoutFormat"/> class.
            </summary>
            <param name="baseFormat">The base format.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLayoutFormat.Layout">
            <summary>
            Gets or sets layout type of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLayoutFormat.Break">
            <summary>
            Gets or sets break type of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLayoutFormat.PaginateBounds">
            <summary>
            Gets or sets the bounds on the next page.
            </summary>
            <remarks>If this property is set, the element will use it for the layouting on the next pages,
            otherwise, the element will be layout according to the bounds, used on the first page.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLayoutFormat.UsePaginateBounds">
            <summary>
            Gets a value indicating whether [use paginate bounds].
            </summary>
            <value><c>true</c> if [use paginate bounds]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfLayoutResult">
            <summary>
            Represents the layouting result settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLayoutResult.m_page">
            <summary>
            The last page where the element was drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLayoutResult.m_bounds">
            <summary>
            The bounds of the element on the last page where it was drawn.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLayoutResult.#ctor(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF)">
            <summary>
            Creates a new object.
            </summary>
            <param name="page">The current page.</param>
            <param name="bounds">The current bounds.</param>
            <remarks>The page might be null, which means that
            lay outing was performed on PdfGraphics.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLayoutResult.Page">
            <summary>
            Gets the last page where the element was drawn.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLayoutResult.Bounds">
            <summary>
            Gets the bounds of the element on the last page where it was drawn.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfLayoutParams">
            <summary>
            Represents the layouting parameters.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLayoutParams.m_page">
            <summary>
            Start lay outing page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLayoutParams.m_bounds">
            <summary>
            Lay outing bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLayoutParams.m_format">
            <summary>
            Layout settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLayoutParams.Page">
            <summary>
            Gets or sets start layouting page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLayoutParams.Bounds">
            <summary>
            Gets or sets layouting bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLayoutParams.Format">
            <summary>
            Gets or sets layouting settings.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.ShapeLayouter">
            <summary>
            ShapeLayouter class.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ShapeLayouter.index">
            <summary>
            Initializes the offset index.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ShapeLayouter.splitDiff">
            <summary>
            Initializes the difference in page height.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ShapeLayouter.last">
            <summary>
            Determines the end of Vertical offset values.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ShapeLayouter.#ctor(Syncfusion.Pdf.Graphics.PdfShapeElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.ShapeLayouter"/> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ShapeLayouter.LayoutInternal(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ShapeLayouter.CheckCorrectCurrentBounds(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Corrects current bounds on the page.
            </summary>
            <param name="currentPage">Current page.</param>
            <param name="currentBounds">Current lay outing bounds.</param>
            <param name="shapeLayoutBounds">The current active shape bounds.</param>
            <param name="param">Layout parameters.</param>
            <returns>Corrected lay outing bounds.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ShapeLayouter.GetLayoutResult(Syncfusion.Pdf.Graphics.ShapeLayouter.ShapeLayoutResult)">
            <summary>
            Creates layout result.
            </summary>
            <param name="pageResult">Page layout result.</param>
            <returns>Layout result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ShapeLayouter.LayoutOnPage(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the element on the current page.
            </summary>
            <param name="currentPage">The current page.</param>
            <param name="currentBounds">The current bounds.</param>
            <param name="shapeLayoutBounds">Active shape bounds that aren't layouted.</param>
            <param name="param">Layout parameters.</param>
            <returns>Page lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ShapeLayouter.GetNextShapeBounds(System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.ShapeLayouter.ShapeLayoutResult)">
            <summary>
            Calculates the next active shape bounds.
            </summary>
            <param name="shapeLayoutBounds">The current active shape bounds.</param>
            <param name="pageResult">The current page layout result.</param>
            <returns>The next active shape bounds.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ShapeLayouter.FitsToBounds(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Checks whether shape rectangle fits to the lay outing bounds.
            </summary>
            <param name="currentBounds">Lay outing bounds.</param>
            <param name="shapeLayoutBounds">Shape bounds.</param>
            <returns>True - if the shape fits into lay outing bounds, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ShapeLayouter.GetDrawBounds(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Returns Rectangle for element drawing on the page.
            </summary>
            <param name="currentBounds">Lay outing bounds.</param>
            <param name="shapeLayoutBounds">Current shape bounds.</param>
            <returns>Returns Rectangle for element drawing on the page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ShapeLayouter.GetPageResultBounds(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Calculates bounds where the shape was layout on the page.
            </summary>
            <param name="currentBounds">Current lay outing bounds.</param>
            <param name="shapeLayoutBounds">Shape bounds.</param>
            <returns>Bounds where the shape was layout on the page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ShapeLayouter.DrawShape(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draws the shape.
            </summary>
            <param name="g">Current graphics.</param>
            <param name="currentBounds">Current page bounds.</param>
            <param name="drawRectangle">Draw rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ShapeLayouter.RaiseEndPageLayout(Syncfusion.Pdf.Graphics.ShapeLayouter.ShapeLayoutResult)">
            <summary>
            Raises PageLayout event if needed.
            </summary>
            <param name="pageResult">Page layout result.</param>
            <returns>Event arguments..</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ShapeLayouter.RaiseBeforePageLayout(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF@)">
            <summary>
            Raises BeforePageLayout event.
            </summary>
            <param name="currentPage">The current page.</param>
            <param name="currentBounds">The current bounds.</param>
            <returns>If true, stop lay outing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ShapeLayouter.ToCorrectBounds(System.Drawing.RectangleF,System.Drawing.RectangleF,Syncfusion.Pdf.PdfPage)">
            <summary>
            Corrects the bounds to avoid blank page.
            </summary>
            <param name="currentBounds">Current lay outing bounds.</param>
            <param name="shapeLayoutBounds">Shape bounds.</param>
            <param name="currentPage">Current Page.</param>
            <returns>Corrected bounds.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.ShapeLayouter.Element">
            <summary>
            Gets shape element.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.ShapeLayouter.ShapeLayoutResult">
            <summary>
            Contains lay outing result settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ShapeLayouter.ShapeLayoutResult.Page">
            <summary>
            The last page where the element was drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ShapeLayouter.ShapeLayoutResult.Bounds">
            <summary>
            The bounds of the element on the last page where it was drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ShapeLayouter.ShapeLayoutResult.End">
            <summary>
            Indicates whether the lay outing has been finished.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.TextLayouter">
            <summary>
            Class that layouts the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextLayouter.m_format">
            <summary>
            String format.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TextLayouter.#ctor(Syncfusion.Pdf.Graphics.PdfTextElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.TextLayouter"/> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TextLayouter.LayoutInternal(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TextLayouter.GetLayoutResult(Syncfusion.Pdf.Graphics.TextLayouter.TextPageLayoutResult)">
            <summary>
            Creates layout result.
            </summary>
            <param name="pageResult">Page layout result.</param>
            <returns>Layout result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TextLayouter.LayoutOnPage(System.String,Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the text on the page.
            </summary>
            <param name="text">The text that should be printed.</param>
            <param name="currentPage">Current page.</param>
            <param name="currentBounds">Current bounds.</param>
            <param name="param">Layout parameters.</param>
            <returns>Page layout result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TextLayouter.CheckCorrectBounds(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF)">
            <summary>
            Corrects current bounds on the page.
            </summary>
            <param name="currentPage">Current page.</param>
            <param name="currentBounds">Current lay outing bounds.</param>
            <returns>Corrected lay outing bounds.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TextLayouter.GetTextPageBounds(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfStringLayoutResult)">
            <summary>
            Returns a rectangle where the text was printed on the page.
            </summary>
            <param name="currentPage">Current page.</param>
            <param name="currentBounds">Current page text bounds.</param>
            <param name="stringResult">Layout result.</param>
            <returns>Returns a rectangle where the text was printed on the page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TextLayouter.RaisePageLayouted(Syncfusion.Pdf.Graphics.TextLayouter.TextPageLayoutResult)">
            <summary>
            Raises PageLayout event if needed.
            </summary>
            <param name="pageResult">Page layout result.</param>
            <returns>Event arguments.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TextLayouter.RaiseBeforePageLayout(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF@)">
            <summary>
            Raises BeforePageLayout event.
            </summary>
            <param name="currentPage">The current page.</param>
            <param name="currentBounds">The current bounds.</param>
            <returns>If true, stops the layout.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TextLayouter.CheckCorectStringFormat(Syncfusion.Pdf.Graphics.LineInfo)">
            <summary>
            Corrects string format.
            </summary>
            <param name="lineInfo">The last line infor layouted.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.TextLayouter.Element">
            <summary>
            Gets  element`s layout.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.TextLayouter.TextPageLayoutResult">
            <summary>
            Contains lay outing result settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextLayouter.TextPageLayoutResult.Page">
            <summary>
            The last page where the text was drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextLayouter.TextPageLayoutResult.Bounds">
            <summary>
            The bounds of the element on the last page where it was drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextLayouter.TextPageLayoutResult.End">
            <summary>
            Indicates whether the lay outing has been finished.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextLayouter.TextPageLayoutResult.Remainder">
            <summary>
            The text that was  not printed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextLayouter.TextPageLayoutResult.LastLineBounds">
            <summary>
            Gets or sets a bounds of the last text line that was printed.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfTextLayoutResult">
            <summary>
            Represents the text lay outing result settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTextLayoutResult.m_remainder">
            <summary>
            The text that was not printed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTextLayoutResult.m_lastLineBounds">
            <summary>
            The bounds of the last line that was printed.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTextLayoutResult.#ctor(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF,System.String,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTextLayoutResult"/> class.
            </summary>
            <param name="page">The page.</param>
            <param name="bounds">The bounds.</param>
            <param name="remainder">The remainder.</param>
            <param name="lastLineBounds">The last line bounds.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTextLayoutResult.Remainder">
            <summary>
            Gets a value that contains the text that was not printed.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTextLayoutResult.LastLineBounds">
            <summary>
            Gets a value that indicates the bounds of the last line that was printed on the page.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfBezierCurve">
            <summary>
            Implements Bezier curve shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBezierCurve.m_startPoint">
            <summary>
            Local variable to store the start Point.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBezierCurve.m_firstControlPoint">
            <summary>
            Local variable to store the firstC ontrol Point.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBezierCurve.m_secondControlPoint">
            <summary>
            Local variable to store the second Control Point.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBezierCurve.m_endPoint">
            <summary>
            Local variable to store the end Point.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBezierCurve.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfBezierCurve"/> class.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBezierCurve.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfBezierCurve"/> class.
            </summary>
            <param name="startPointX">The start point X.</param>
            <param name="startPointY">The start point Y.</param>
            <param name="firstControlPointX">The first control point X.</param>
            <param name="firstControlPointY">The first control point Y.</param>
            <param name="secondControlPointX">The second control point X.</param>
            <param name="secondControlPointY">The second control point Y.</param>
            <param name="endPointX">The end point X.</param>
            <param name="endPointY">The end point Y.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBezierCurve.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfBezierCurve"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="startPoint">The start point.</param>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBezierCurve.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfBezierCurve"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="startPointX">The start point X.</param>
            <param name="startPointY">The start point Y.</param>
            <param name="firstControlPointX">The first control point X.</param>
            <param name="firstControlPointY">The first control point Y.</param>
            <param name="secondControlPointX">The second control point X.</param>
            <param name="secondControlPointY">The second control point Y.</param>
            <param name="endPointX">The end point X.</param>
            <param name="endPointY">The end point Y.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBezierCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfBezierCurve"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBezierCurve.GetBoundsInternal">
            <summary>
            Overloaded. Returns a rectangle that bounds this element.
            </summary>
            <returns>Returns a rectangle that bounds this element.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBezierCurve.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBezierCurve.StartPoint">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBezierCurve.FirstControlPoint">
            <summary>
            Gets or sets the first control point.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBezierCurve.SecondControlPoint">
            <summary>
            Gets or sets the second control point.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfBezierCurve.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfEllipse">
            <summary>
            Describes an ellipse shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipse.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfEllipse"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipse.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfEllipse"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipse.#ctor(Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfEllipse"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipse.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfEllipse"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipse.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfEllipse"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipse.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfEllipse"/> class.
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipse.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfEllipse"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipse.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfEllipse"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipse.#ctor(Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfEllipse"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipse.#ctor(Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfEllipse"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipse.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfEllipse"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipse.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfEllipse"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfEllipse"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfEllipse.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfEllipse.RadiusX">
            <summary>
            Gets the radius X.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfEllipse.RadiusY">
            <summary>
            Gets the radius Y.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfEllipse.Center">
            <summary>
            Gets the center point.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfLine">
            <summary>
            Represents a line shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLine.m_x1">
            <summary>
            Local variable to store x2.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLine.m_y1">
            <summary>
            Local variable to store Y1.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLine.m_x2">
            <summary>
            Local variable to store x1.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLine.m_y2">
            <summary>
            Local variable to store Y2.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLine.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfLine"/> class.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLine.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfLine"/> class.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLine.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfLine"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLine.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfLine"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfLine"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLine.GetBoundsInternal">
            <summary>
            Overloaded. Returns a rectangle that bounds this element.
            </summary>
            <returns>Returns a rectangle that bounds this element.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfLine.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLine.X1">
            <summary>
            Gets or sets the x coordinate of the start point.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLine.Y1">
            <summary>
            Gets or sets the y coordinate of the start point.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLine.X2">
            <summary>
            Gets or sets the x coordinate of the end point.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfLine.Y2">
            <summary>
            Gets or sets the y coordinate of the end point.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfPath">
            <summary>
            Implements graphics path, which is a sequence of primitive graphics elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfPath.m_points">
            <summary>
            Local varaible to store the points.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfPath.m_pathTypes">
            <summary>
            Local varaible to store the path Types.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfPath.m_bStartFigure">
            <summary>
            Local varaible to store the Start Figure.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfPath.m_fillMode">
            <summary>
            Local varaible to store the fill Mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPath"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.#ctor(System.Drawing.PointF[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPath"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="pathTypes">The path types.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.#ctor(Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPath"/> class.
            </summary>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.#ctor(Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPath"/> class.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.#ctor(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfFillMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPath"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="fillMode">The fill mode.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.PointF[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPath"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
            <param name="pathTypes">The path types.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.#ctor(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfFillMode,System.Drawing.PointF[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPath"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="fillMode">The fill mode.</param>
            <param name="points">The points.</param>
            <param name="pathTypes">The path types.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfFillMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPath"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="fillMode">The fill mode.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddArc(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Adds an arc.
            </summary>
            <param name="rectangle">The boundaries of the arc.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an arc.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Adds a bezier curve.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a bezier curve.
            </summary>
            <param name="startPointX">The start point X.</param>
            <param name="startPointY">The start point Y.</param>
            <param name="firstControlPointX">The first control point X.</param>
            <param name="firstControlPointY">The first control point Y.</param>
            <param name="secondControlPointX">The second control point X.</param>
            <param name="secondControlPointY">The second control point Y.</param>
            <param name="endPointX">The end point X.</param>
            <param name="endPointY">The end point Y.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddEllipse(System.Drawing.RectangleF)">
            <summary>
            Adds an ellipse.
            </summary>
            <param name="rectangle">The boundaries of the ellipse.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an ellipse.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddLine(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Adds a line.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a line.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddPath(Syncfusion.Pdf.Graphics.PdfPath)">
            <summary>
            Appends the path specified to this one.
            </summary>
            <param name="path">The path, which should be appended.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddPath(System.Drawing.PointF[],System.Byte[])">
            <summary>
            Appends the path specified by the points and their types to this one.
            </summary>
            <param name="pathPoints">The points.</param>
            <param name="pathTypes">The path point types.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddPie(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Appends the pie to this path.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Appends the pie to this path.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddPolygon(System.Drawing.PointF[])">
            <summary>
            Append the closed polygon to this path.
            </summary>
            <param name="points">The points of the polygon.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddRectangle(System.Drawing.RectangleF)">
            <summary>
            Appends the rectangle to this path.
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddRectangle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Appends the rectangle to this path.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.StartFigure">
            <summary>
            Starts a new figure.
            </summary>
            <remarks>The next added primitive will start a new figure.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.CloseFigure">
            <summary>
            Closes the last figure.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.CloseAllFigures">
            <summary>
            Closes all non-closed figures.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.GetLastPoint">
            <summary>
            Gets the last point.
            </summary>
            <returns>The last point.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.GetBoundsInternal">
            <summary>
            Overloaded. Returns a rectangle that bounds this element.
            </summary>
            <returns>Returns a rectangle that bounds this element.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddPoints(System.Collections.Generic.List{System.Single},System.Drawing.Drawing2D.PathPointType)">
            <summary>
            Adds the points along with their type to the path.
            </summary>
            <param name="points">The points.</param>
            <param name="pointType">Type of the points.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddPoints(System.Collections.Generic.List{System.Single},System.Drawing.Drawing2D.PathPointType,System.Int32,System.Int32)">
            <summary>
            Adds the points along with their type to the path.
            </summary>
            <param name="points">The points.</param>
            <param name="pointType">Type of the points.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.AddPoint(System.Drawing.PointF,System.Drawing.Drawing2D.PathPointType)">
            <summary>
            Adds a point and its type.
            </summary>
            <param name="point">The point.</param>
            <param name="pointType">Type of the point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPath.CloseFigure(System.Int32)">
            <summary>
            Closes the figure.
            </summary>
            <param name="index">The index of the last figure point.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPath.FillMode">
            <summary>
            Gets or sets the fill mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPath.PathPoints">
            <summary>
            Gets the path points.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPath.PathTypes">
            <summary>
            Gets the path point types.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPath.PointCount">
            <summary>
            Gets the point count.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPath.LastPoint">
            <summary>
            Gets the last point.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPath.Points">
            <summary>
            Gets the points list.
            </summary>
            <value>The points.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPath.Types">
            <summary>
            Gets the types.
            </summary>
            <value>The types.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfTemplate">
            <summary>
            Represents Pdf Template object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTemplate.m_graphics">
            <summary>
            Graphics context of the template.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTemplate.m_content">
            <summary>
            Content of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTemplate.m_resources">
            <summary>
            Resources of the template.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTemplate.m_size">
            <summary>
            Size of the template.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTemplate.m_bIsReadonly">
            <summary>
            Indicates if the template is read-only.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.#ctor(System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTemplate"/> class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTemplate"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.#ctor(System.Drawing.PointF,System.Drawing.SizeF,System.IO.MemoryStream,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTemplate"/> class.
            </summary>
            <param name="origin">The origin points of the Pdf Page</param>
            <param name="size">The size of the new template.</param>
            <param name="stream">The data stream of the new template.</param>
            <param name="resources">The resources of the new template.</param>
            <remarks>The resulting template is read-only in order to avoid unexpected side effects
            caused by non-restored graphics state.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.#ctor(System.Drawing.SizeF,System.IO.MemoryStream,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTemplate"/> class.
            </summary>
            <param name="size">The size of the new template.</param>
            <param name="stream">The data stream of the new template.</param>
            <param name="resources">The resources of the new template.</param>
            <remarks>The resulting template is read-only in order to avoid unexpected side effects
            caused by non-restored graphics state.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.#ctor(Syncfusion.Pdf.Primitives.PdfStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTemplate"/> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.Reset(System.Drawing.SizeF)">
            <summary>
            Resets the template and sets the specified size.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.Reset">
            <summary>
            Resets an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.GetBoundsInternal">
            <summary>
            Returns a rectangle that bounds this element.
            </summary>
            <returns>Returns a rectangle that bounds this element.</returns>
            <remarks>This method doesn't take into consideration a rotation of the element.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.Initialize">
            <summary>
            Initializes object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.GetResources">
            <summary>
            Gets the resources and modifies the template dictionary.
            </summary>
            <returns>Pdf resources.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.AddType">
            <property name="flag" value="Finished" />
            <summary>
            Adds type key.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.AddSubType">
            <property name="flag" value="Finished" />
            <summary>
            Adds SubType key.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.SetSize(System.Drawing.SizeF)">
            <summary>
            Sets the size of the template.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.SetSize(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Sets the size of the template.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTemplate.CloneResources(Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Copies the resources from the template.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTemplate.Graphics">
            <summary>
            Gets graphics context of the template.
            </summary>
            <remarks>It will return null, if the template is read-only.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTemplate.Size">
            <summary>
            Gets the size of the template.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTemplate.Width">
            <summary>
            Gets the width of the template.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTemplate.Height">
            <summary>
            Gets the height of the template.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTemplate.ReadOnly">
            <summary>
            Gets a value indicating whether the template is read-only.
            </summary>
            <value><c>true</c> if the template is read-only; otherwise, <c>false</c>.</value>
            <remarks>Read-only templates does not expose graphics. They just return null.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTemplate.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfPie">
            <summary>
            Represents a pie shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPie.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPie"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPie.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPie"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPie.#ctor(Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPie"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPie.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPie"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPie.#ctor(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPie"/> class.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPie.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPie"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPie.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPie"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPie.#ctor(Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPie"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPie.#ctor(Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPie"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPie.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPie"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPie.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPie"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPie.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPie"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPie.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfPolygon">
            <summary>
            Represents a set of points connected with lines, could be drawn and filled.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfPolygon.m_points">
            <summary>
            Array of the points.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPolygon.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPolygon"/> class.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPolygon.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPolygon"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPolygon.#ctor(Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPolygon"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPolygon.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPolygon"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPolygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfPolygon"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPolygon.AddPoint(System.Drawing.PointF)">
            <summary>
            Adds a point to the polygon.
            </summary>
            <param name="point">The last point of the polygon.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPolygon.GetBoundsInternal">
            <summary>
            Overloaded. Returns a rectangle that bounds this element.
            </summary>
            <returns>Returns a rectangle that bounds this element.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPolygon.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPolygon.Points">
            <summary>
            Gets or sets the points of the polygon.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPolygon.Count">
            <summary>
            Gets a number of the points in the polygon.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfRectangle">
            <summary>
            Represents a simple rectangle that could be drawn and/or filled.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangle.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangle"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangle.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangle"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangle.#ctor(Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangle"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangle.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangle"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangle"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangle.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangle"/> class.
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangle.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangle"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangle.#ctor(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangle"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangle.#ctor(Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangle"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangle.#ctor(Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangle"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangle.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangle"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangle.#ctor(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangle"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfRectangle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfRectangle.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.TextAlign">
            <summary>
            Specifies how text in a <see cref="!:AdvRichTextBox"/> is
            horizontally aligned.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextAlign.Left">
            <summary>
            The text is aligned to the left.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextAlign.Right">
            <summary>
            The text is aligned to the right.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextAlign.Center">
            <summary>
            The text is aligned in the center.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextAlign.Justify">
            <summary>
            The text is justified.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.cbSize">
            <summary>
            internal variable to store Size.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.dwMask">
            <summary>
            internal variable to store Mask.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.wNumbering">
            <summary>
            internal variable to store Numbering.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.wReserved">
            <summary>
            internal variable to store Reserved.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.dxStartIndent">
            <summary>
            internal variable to store Start Indent.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.dxRightIndent">
            <summary>
            internal variable to store Right Indent.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.dxOffset">
            <summary>
            internal variable to store Offset.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.wAlignment">
            <summary>
            internal variable to store Alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.cTabCount">
            <summary>
            internal variable to store Tab Count.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.rgxTabs">
            <summary>
            internal variable to store rgxTabs.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.dySpaceBefore">
            <summary>
            internal variable to store Space Before.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.dySpaceAfter">
            <summary>
            internal variable to store Space After.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.dyLineSpacing">
            <summary>
            internal variable to store Line Spacing.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.sStyle">
            <summary>
            internal variable to store Style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.bLineSpacingRule">
            <summary>
            internal variable to store Line Spacing Rule.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.bOutlineLevel">
            <summary>
            internal variable to store Out line Level.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.wShadingWeight">
            <summary>
            internal variable to store Shading Weight.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.wShadingStyle">
            <summary>
            internal variable to store Shading Style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.wNumberingStart">
            <summary>
            internal variable to store Numbering Start.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.wNumberingStyle">
            <summary>
            internal variable to store Numbering Style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.wNumberingTab">
            <summary>
            internal variable to store Numbering Tab.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.wBorderSpace">
            <summary>
            internal variable to store Border Space.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.wBorderWidth">
            <summary>
            internal variable to store Border Width.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PARAFORMAT.wBorders">
            <summary>
            internal variable to store Borders.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.cbSize">
            <summary>
            internal variable to store size.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.dwMask">
            <summary>
            internal variable to store Mask.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.dwEffects">
            <summary>
            internal variable to store Effects.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.yHeight">
            <summary>
            internal variable to store Height.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.yOffset">
            <summary>
            internal variable to store Offset.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.crTextColor">
            <summary>
            internal variable to store Text Color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.bCharSet">
            <summary>
            internal variable to store CharSet.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.bPitchAndFamily">
            <summary>
            internal variable to store Pitch And Family.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.wWeight">
            <summary>
            internal variable to store Weight.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.sSpacing">
            <summary>
            internal variable to store Spacing.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.crBackColor">
            <summary>
            internal variable to store BackColor.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.lcid">
            <summary>
            internal variable to store lcid.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.dwReserved">
            <summary>
            internal variable to store Reserved.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.sStyle">
            <summary>
            internal variable to store Style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.wKerning">
            <summary>
            internal variable to store Kerning.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.bUnderlineType">
            <summary>
            internal variable to store Under line Type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.bAnimation">
            <summary>
            internal variable to store Animation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.bRevAuthor">
            <summary>
            internal variable to store RevAuthor.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CHARFORMAT.bReserved1">
            <summary>
            internal variable to store Reserved.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfCancelEventArgs">
            <summary>
            Represents the data for a cancelable event.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
            PdfPen pen = new PdfPen(Color.Black, 1f);
            //Creates a new  pdf font
            PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
            Font font = new Font("Calibri", 14f, FontStyle.Bold);
            PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
            string path = @"..\..\Data\Essential studio.txt";
            StreamReader reader = new StreamReader(path, Encoding.ASCII);
            string text = reader.ReadToEnd();
            reader.Close();
            RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
            //Create text element
            PdfTextElement element = new PdfTextElement(text, pdfFont);
            element.Brush = new PdfSolidBrush(Color.Black);
            PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
            layoutFormat.Break = PdfLayoutBreakType.FitPage;
            layoutFormat.Layout = PdfLayoutType.Paginate;
            //Raise the event when the text flows to next page.
            element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
            //Get the remaining text that flows beyond the boundary.
            PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
            //Saves the document.
            doc.Save("Sample.pdf");
            //Begin Page Layout Event Handler
            private void BeginPageLayout2(object sender, BeginPageLayoutEventArgs e)
            {
             e.Cancel=true;
            }
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim brush As New PdfSolidBrush(Color.Black)
            Dim pen As New PdfPen(Color.Black, 1f)
            'Creates a new  pdf font
            Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
            Dim font As New Font("Calibri", 14f, FontStyle.Bold)
            Dim trueTypeFont As New PdfTrueTypeFont(font, True)
            Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
            Dim reader As New StreamReader(path, Encoding.ASCII)
            Dim text As string = reader.ReadToEnd()
            reader.Close()
            Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            'Create text element
            Dim element As New PdfTextElement(text, pdfFont)
            element.Brush = New PdfSolidBrush(Color.Black)
            Dim layoutFormat As New PdfLayoutFormat()
            layoutFormat.Break = PdfLayoutBreakType.FitPage
            layoutFormat.Layout = PdfLayoutType.Paginate
            'Raise the event when the text flows to next page.
            element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            'Get the remaining text that flows beyond the boundary.
            Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            'Saves the document.
            doc.Save("Sample.pdf")
            End Sub
            'Begin Page Layout Event Handler
            Private Sub BeginPageLayout2(ByVal sender As object, ByVal e As BeginPageLayoutEventArgs)
             e.Cancel=True
            End Sub
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfCancelEventArgs.m_cancel">
            <summary>
            Indicates whether lay outing should be stopped.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfCancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Graphics.PdfCancelEventArgs"/> is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
            <example>
            <code lang="C#">
            // Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
            PdfPen pen = new PdfPen(Color.Black, 1f);
            //Creates a new  pdf font
            PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
            Font font = new Font("Calibri", 14f, FontStyle.Bold);
            PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
            string path = @"..\..\Data\Essential studio.txt";
            StreamReader reader = new StreamReader(path, Encoding.ASCII);
            string text = reader.ReadToEnd();
            reader.Close();
            RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
            bounds = column;
            //Create text element
            PdfTextElement element = new PdfTextElement(text, pdfFont);
            element.Brush = new PdfSolidBrush(Color.Black);
            PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
            layoutFormat.Break = PdfLayoutBreakType.FitPage;
            layoutFormat.Layout = PdfLayoutType.Paginate;
            //Raise the event when the text flows to next page.
            element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
            //Get the remaining text that flows beyond the boundary.
            PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
            //Saves the document.
            doc.Save("Sample.pdf");
            //Begin Page Layout Event Handler
            private void BeginPageLayout2(object sender, BeginPageLayoutEventArgs e)
            {
             e.Cancel=true;
            }
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim rect As New RectangleF(0, 0, page.GetClientSize().Width, 50)
            Dim brush As New PdfSolidBrush(Color.Black)
            Dim pen As New PdfPen(Color.Black, 1f)
            'Creates a new  pdf font
            Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
            Dim font As New Font("Calibri", 14f, FontStyle.Bold)
            Dim trueTypeFont As New PdfTrueTypeFont(font, True)
            Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
            Dim reader As New StreamReader(path, Encoding.ASCII)
            Dim text As string = reader.ReadToEnd()
            reader.Close()
            Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            'Create text element
            Dim element As New PdfTextElement(text, pdfFont)
            element.Brush = New PdfSolidBrush(Color.Black)
            Dim layoutFormat As New PdfLayoutFormat()
            layoutFormat.Break = PdfLayoutBreakType.FitPage
            layoutFormat.Layout = PdfLayoutType.Paginate
            'Raise the event when the text flows to next page.
            element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            'Get the remaining text that flows beyond the boundary.
            Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            'Saves the document.
            doc.Save("Sample.pdf")
            End Sub
            'Begin Page Layout Event Handler
            Private Sub BeginPageLayout2(ByVal sender As object, ByVal e As BeginPageLayoutEventArgs)
            e.Cancel=True
            End Sub
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.BeginPageLayoutEventArgs">
            <summary>
            Data for event before lay outing of the page.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
             private bool m_paginateStart = true;
            PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
            PdfPen pen = new PdfPen(Color.Black, 1f);
            //Creates a new  pdf font
            PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
            Font font = new Font("Calibri", 14f, FontStyle.Bold);
            PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
            string path = @"..\..\Data\Essential studio.txt";
            StreamReader reader = new StreamReader(path, Encoding.ASCII);
            string text = reader.ReadToEnd();
            reader.Close();
            RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
            //Create text element
            PdfTextElement element = new PdfTextElement(text, pdfFont);
            element.Brush = new PdfSolidBrush(Color.Black);
            PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
            layoutFormat.Break = PdfLayoutBreakType.FitPage;
            layoutFormat.Layout = PdfLayoutType.Paginate;
            //Raise the event when the text flows to next page.
            element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
            //Get the remaining text that flows beyond the boundary.
            PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
            //Saves the document.
            doc.Save("Sample.pdf");
            //Begin Page Layout Event Handler
            private void BeginPageLayout2(object sender, BeginPageLayoutEventArgs e)
            {
            RectangleF bounds = e.Bounds;
            // First column.
            if (!m_paginateStart)
            {
               bounds.X = bounds.Width + 20f;
               bounds.Y = 10f;
            }
            e.Bounds = bounds;
            }
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim m_paginateStart As Bool= True
            Dim brush As New PdfSolidBrush(Color.Black)
            Dim pen As New PdfPen(Color.Black, 1f)
            'Creates a new  pdf font
            Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
            Dim font As New Font("Calibri", 14f, FontStyle.Bold)
            Dim trueTypeFont As New PdfTrueTypeFont(font, True)
            Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
            Dim reader As New StreamReader(path, Encoding.ASCII)
            Dim text As string = reader.ReadToEnd()
            reader.Close()
            Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            'Create text element
            Dim element As New PdfTextElement(text, pdfFont)
            element.Brush = New PdfSolidBrush(Color.Black)
            Dim layoutFormat As New PdfLayoutFormat()
            layoutFormat.Break = PdfLayoutBreakType.FitPage
            layoutFormat.Layout = PdfLayoutType.Paginate
            'Raise the event when the text flows to next page.
            element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            'Get the remaining text that flows beyond the boundary.
            Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            'Saves the document.
            doc.Save("Sample.pdf")
            'Begin Page Layout Event Handler
            Private Sub BeginPageLayout2(ByVal sender As object, ByVal e As BeginPageLayoutEventArgs)
            Dim bounds As RectangleF = e.Bounds
            ' First column.
            If (Not m_paginateStart) Then
            bounds.X = bounds.Width + 20f
            bounds.Y = 10f
            End If
            e.Bounds = bounds
            End Sub
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.BeginPageLayoutEventArgs.m_bounds">
            <summary>
            The bounds of the lay outing on the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.BeginPageLayoutEventArgs.m_page">
            <summary>
            Page where the lay outing should start.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.BeginPageLayoutEventArgs.#ctor(System.Drawing.RectangleF,Syncfusion.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.BeginPageLayoutEventArgs"/> class.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="page">The page.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.BeginPageLayoutEventArgs.Bounds">
            <summary>
            Gets or sets value that indicates the lay outing bounds on the page.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
             private bool m_paginateStart = true;
            PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
            PdfPen pen = new PdfPen(Color.Black, 1f);
            //Creates a new  pdf font
            PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
            Font font = new Font("Calibri", 14f, FontStyle.Bold);
            PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
            string path = @"..\..\Data\Essential studio.txt";
            StreamReader reader = new StreamReader(path, Encoding.ASCII);
            string text = reader.ReadToEnd();
            reader.Close();
            RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
            //Create text element
            PdfTextElement element = new PdfTextElement(text, pdfFont);
            element.Brush = new PdfSolidBrush(Color.Black);
            PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
            layoutFormat.Break = PdfLayoutBreakType.FitPage;
            layoutFormat.Layout = PdfLayoutType.Paginate;
            //Raise the event when the text flows to next page.
            element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
            //Get the remaining text that flows beyond the boundary.
            PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
            //Saves the document.
            doc.Save("Sample.pdf");
            //Begin Page Layout Event Handler
            private void BeginPageLayout2(object sender, BeginPageLayoutEventArgs e)
            {
            RectangleF bounds = e.Bounds;
            // First column.
            if (!m_paginateStart)
            {
               bounds.X = bounds.Width + 20f;
               bounds.Y = 10f;
            }
            e.Bounds = bounds;
            }
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim m_paginateStart As Bool= True
            Dim brush As New PdfSolidBrush(Color.Black)
            Dim pen As New PdfPen(Color.Black, 1f)
            'Creates a new  pdf font
            Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
            Dim font As New Font("Calibri", 14f, FontStyle.Bold)
            Dim trueTypeFont As New PdfTrueTypeFont(font, True)
            Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
            Dim reader As New StreamReader(path, Encoding.ASCII)
            Dim text As string = reader.ReadToEnd()
            reader.Close()
            Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            'Create text element
            Dim element As New PdfTextElement(text, pdfFont)
            element.Brush = New PdfSolidBrush(Color.Black)
            Dim layoutFormat As New PdfLayoutFormat()
            layoutFormat.Break = PdfLayoutBreakType.FitPage
            layoutFormat.Layout = PdfLayoutType.Paginate
            'Raise the event when the text flows to next page.
            element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            'Get the remaining text that flows beyond the boundary.
            Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            'Saves the document.
            doc.Save("Sample.pdf")
            'Begin Page Layout Event Handler
            Private Sub BeginPageLayout2(ByVal sender As object, ByVal e As BeginPageLayoutEventArgs)
            Dim bounds As RectangleF = e.Bounds
            ' First column.
            If (Not m_paginateStart) Then
            bounds.X = bounds.Width + 20f
            bounds.Y = 10f
            End If
            e.Bounds = bounds
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.BeginPageLayoutEventArgs.Page">
            <summary>
            Gets the page where the lay outing should start.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
             private bool m_paginateStart = true;
            PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
            PdfPen pen = new PdfPen(Color.Black, 1f);
            //Creates a new  pdf font
            PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
            Font font = new Font("Calibri", 14f, FontStyle.Bold);
            PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
            string path = @"..\..\Data\Essential studio.txt";
            StreamReader reader = new StreamReader(path, Encoding.ASCII);
            string text = reader.ReadToEnd();
            reader.Close();
            RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
            //Create text element
            PdfTextElement element = new PdfTextElement(text, pdfFont);
            element.Brush = new PdfSolidBrush(Color.Black);
            PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
            layoutFormat.Break = PdfLayoutBreakType.FitPage;
            layoutFormat.Layout = PdfLayoutType.Paginate;
            //Raise the event when the text flows to next page.
            element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
            //Get the remaining text that flows beyond the boundary.
            PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
            //Saves the document.
            doc.Save("Sample.pdf");
            //Begin Page Layout Event Handler
            private void BeginPageLayout2(object sender, BeginPageLayoutEventArgs e)
            {
             PdfPage page = e.pAGE;
            }
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim m_paginateStart As Bool= True
            Dim brush As New PdfSolidBrush(Color.Black)
            Dim pen As New PdfPen(Color.Black, 1f)
            'Creates a new  pdf font
            Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
            Dim font As New Font("Calibri", 14f, FontStyle.Bold)
            Dim trueTypeFont As New PdfTrueTypeFont(font, True)
            Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
            Dim reader As New StreamReader(path, Encoding.ASCII)
            Dim text As string = reader.ReadToEnd()
            reader.Close()
            Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            'Create text element
            Dim element As New PdfTextElement(text, pdfFont)
            element.Brush = New PdfSolidBrush(Color.Black)
            Dim layoutFormat As New PdfLayoutFormat()
            layoutFormat.Break = PdfLayoutBreakType.FitPage
            layoutFormat.Layout = PdfLayoutType.Paginate
            'Raise the event when the text flows to next page.
            element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            'Get the remaining text that flows beyond the boundary.
            Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            'Saves the document.
            doc.Save("Sample.pdf")
            'Begin Page Layout Event Handler
            Private Sub BeginPageLayout2(ByVal sender As object, ByVal e As BeginPageLayoutEventArgs)
            Dim page As PdfPage = e.Page
            End Sub
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.EndPageLayoutEventArgs">
             <summary>
             Contains information about layout`s element .
             </summary>
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"..\..\Data\Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             m_columnBounds = column;
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Page Layout Event Handler
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 RectangleF bounds = tlr.Bounds;
                 args.NextPage = tlr.Page;   
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Page Layout Event Handler
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	Dim bounds As RectangleF = tlr.Bounds
            	args.NextPage = tlr.Page
            End Sub
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.EndPageLayoutEventArgs.m_result">
            <summary>
            Layout result.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.EndPageLayoutEventArgs.m_nextPage">
            <summary>
            The next page for lay outing.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.EndPageLayoutEventArgs.#ctor(Syncfusion.Pdf.Graphics.PdfLayoutResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.EndPageLayoutEventArgs"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.EndPageLayoutEventArgs.Result">
             <summary>
             Gets a result of the lay outing on the page.
             </summary>
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"..\..\Data\Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Page Layout Event Handler
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 RectangleF bounds = tlr.Bounds;
                 args.NextPage = tlr.Page;   
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Page Layout Event Handler
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	Dim bounds As RectangleF = tlr.Bounds
            	args.NextPage = tlr.Page
            End Sub
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.EndPageLayoutEventArgs.NextPage">
             <summary>
             Gets or sets a value indicating the next page where the element should be layout if the process is not finished or stopped.
             </summary>
             <remarks>The default value is null. In this case the element will be layout on the next page.</remarks>
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"..\..\Data\Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Page Layout Event Handler
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 args.NextPage = tlr.Page;   
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Page Layout Event Handler.
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	args.NextPage = tlr.Page
            End Sub
             </code>
             </example>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.EndTextPageLayoutEventArgs">
             <summary>
             Contains information about layout`s element .
             </summary>
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"..\..\Data\Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Text Page Layout Event
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 RectangleF bounds = tlr.Bounds;
                 args.NextPage = tlr.Page;   
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Text Page Layout Event
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	Dim bounds As RectangleF = tlr.Bounds
            	args.NextPage = tlr.Page
            End Sub
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.EndTextPageLayoutEventArgs.#ctor(Syncfusion.Pdf.Graphics.PdfTextLayoutResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.EndTextPageLayoutEventArgs"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.EndTextPageLayoutEventArgs.Result">
             <summary>
             Gets a result of the lay outing on the page.
             </summary>
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"..\..\Data\Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Text Page Layout Event
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 RectangleF bounds = tlr.Bounds;
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Text Page Layout Event
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	Dim bounds As RectangleF = tlr.Bounds
            End Sub
             </code>
             </example>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.BeginPageLayoutEventHandler">
            <summary>
            Delegate. Defines a type of the event before lay outing on the page.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.EndPageLayoutEventHandler">
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"..\..\Data\Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Page Layout Event Handler
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 RectangleF bounds = tlr.Bounds;
                 args.NextPage = tlr.Page;   
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Page Layout Event Handler
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	Dim bounds As RectangleF = tlr.Bounds
            	args.NextPage = tlr.Page
            End Sub
             </code>
             </example>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.EndTextPageLayoutEventHandler">
            <summary>
            Delegate. Defines a type of the event after the text lay outing on the page.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
             private bool m_paginateStart = true;
            PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
            PdfPen pen = new PdfPen(Color.Black, 1f);
            //Creates a new  pdf font
            PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
            Font font = new Font("Calibri", 14f, FontStyle.Bold);
            PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
            string path = @"..\..\Data\Essential studio.txt";
            StreamReader reader = new StreamReader(path, Encoding.ASCII);
            string text = reader.ReadToEnd();
            reader.Close();
            RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
            //Create text element
            PdfTextElement element = new PdfTextElement(text, pdfFont);
            element.Brush = new PdfSolidBrush(Color.Black);
            PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
            layoutFormat.Break = PdfLayoutBreakType.FitPage;
            layoutFormat.Layout = PdfLayoutType.Paginate;
            //Raise the event when the text flows to next page.
            element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
            //Get the remaining text that flows beyond the boundary.
            PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
            //Saves the document.
            doc.Save("Sample.pdf");
            //End Text Page Layout Event Handler
            private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
            {
                EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                PdfTextLayoutResult tlr = args.Result;
                RectangleF bounds = tlr.Bounds;
                args.NextPage = tlr.Page;   
             }
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim m_paginateStart As Bool= True
            Dim brush As New PdfSolidBrush(Color.Black)
            Dim pen As New PdfPen(Color.Black, 1f)
            'Creates a new  pdf font
            Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
            Dim font As New Font("Calibri", 14f, FontStyle.Bold)
            Dim trueTypeFont As New PdfTrueTypeFont(font, True)
            Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
            Dim reader As New StreamReader(path, Encoding.ASCII)
            Dim text As string = reader.ReadToEnd()
            reader.Close()
            Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            'Create text element
            Dim element As New PdfTextElement(text, pdfFont)
            element.Brush = New PdfSolidBrush(Color.Black)
            Dim layoutFormat As New PdfLayoutFormat()
            layoutFormat.Break = PdfLayoutBreakType.FitPage
            layoutFormat.Layout = PdfLayoutType.Paginate
            'Raise the event when the text flows to next page.
            element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            'Get the remaining text that flows beyond the boundary.
            Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            'Saves the document.
            doc.Save("Sample.pdf")
            'End Text Page Layout Event Handler
            Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            Dim tlr As PdfTextLayoutResult = args.Result
            Dim bounds As RectangleF = tlr.Bounds
            args.NextPage = tlr.Page
            End Sub
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfLayoutType">
            <summary>
            Specifies type of paginating.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLayoutType.Paginate">
            <summary>
            If the element exceeds the page, proceed it on the next page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLayoutType.OnePage">
            <summary>
            Draw the element on the one page only.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfLayoutBreakType">
            <summary>
            Specifies how the element should be contained on the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLayoutBreakType.FitPage">
            <summary>
            Fit the element according to the bounds specified or the page bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLayoutBreakType.FitElement">
            <summary>
            If the element doesn't fit at the first page, don't draw it on this page.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.PdfCidFont">
            <summary>
            A Class representing Pdf document which is used for Cid Font Descryptor Factory.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCidFont.#ctor(Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfCidFont"/> class.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="fontStyle">The font style.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCidFont.GetSystemInfo(Syncfusion.Pdf.Graphics.PdfCjkFontFamily)">
            <summary>
            Gets the system info.
            </summary>
            <param name="fontFamily">The font family.</param>
            <returns>The properly formed dictionary.</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.PdfCjkFontDescryptorFactory">
            <summary>
            A Class representing Pdf document which is used for Cjk Font Descryptor Factory.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkFontDescryptorFactory.GetFontDescryptor(Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics)">
            <summary>
            Gets the font descryptor.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="fontStyle">The font style.</param>
            <param name="fontMetrics">The font metrics.</param>
            <returns>font Descryptor</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkFontDescryptorFactory.FillMonotypeSungLight(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics)">
            <summary>
            Fills the monotype sung light font descryptor.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkFontDescryptorFactory.FillHeiseiKakuGothicW5(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Graphics.PdfFontStyle,Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics)">
            <summary>
            Fills the heisei kaku gothic w5 font descryptor.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontStyle">The font style.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkFontDescryptorFactory.FillHanyangSystemsShinMyeongJoMedium(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics)">
            <summary>
            Fills the hanyang systems shin myeong jo medium font descryptor.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkFontDescryptorFactory.FillHeiseiMinchoW3(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics)">
            <summary>
            Fills the heisei mincho w3 font descryptor.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkFontDescryptorFactory.FillSinoTypeSongLight(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics)">
            <summary>
            Fills the sino type song light font descryptor.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkFontDescryptorFactory.FillMonotypeHeiMedium(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics)">
            <summary>
            Fills the monotype hei medium font descryptor.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkFontDescryptorFactory.FillHanyangSystemsGothicMedium(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics)">
            <summary>
            Fills the hanyang systems gothic medium font descryptor.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkFontDescryptorFactory.FillKnownInfo(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics)">
            <summary>
            Fills the known info.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkFontDescryptorFactory.FillFlags(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Graphics.PdfCjkFontFamily)">
            <summary>
            Fills the flags.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkFontDescryptorFactory.FillFontBBox(Syncfusion.Pdf.Primitives.PdfDictionary,System.Drawing.Rectangle)">
            <summary>
            Fills the font BBox.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontBBox">The font BBox.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfCjkStandardFont">
            <summary>
            Represents the standard CJK fonts.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfFont">
            <summary>
            Represents the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFont.CharSizeMultiplier">
            <summary>
            Multiplier of the symbol width.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFont.s_syncObject">
            <summary>
            Synchronization object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFont.m_size">
            <summary>
            Size of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFont.m_style">
            <summary>
            Style of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFont.m_fontMetrics">
            <summary>
            Metrics of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFont.m_fontInternals">
            <summary>
            PDf primitive of the font.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.#ctor(System.Single,Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> class.
            </summary>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.MeasureString(System.String)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.MeasureString(System.String,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.MeasureString(System.String,Syncfusion.Pdf.Graphics.PdfStringFormat,System.Int32@,System.Int32@)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <param name="charactersFitted">Number of characters in the string.</param>
            <param name="linesFilled">Number of text lines in the string.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.MeasureString(System.String,System.Single)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="width">Maximum width of the string in points.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.MeasureString(System.String,System.Single,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="width">Maximum width of the string in points.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.MeasureString(System.String,System.Single,Syncfusion.Pdf.Graphics.PdfStringFormat,System.Int32@,System.Int32@)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="width">Maximum width of the string in points.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <param name="charactersFitted">Number of characters in the string.</param>
            <param name="linesFilled">Number of text lines in the string.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.MeasureString(System.String,System.Drawing.SizeF)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="layoutArea">SizeF structure that specifies the maximum layout area for the text in points.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.MeasureString(System.String,System.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="layoutArea">SizeF structure that specifies the maximum layout area for the text in points.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.MeasureString(System.String,System.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfStringFormat,System.Int32@,System.Int32@)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="layoutArea">SizeF structure that specifies the maximum layout area for the text in points.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <param name="charactersFitted">Number of characters in the string.</param>
            <param name="linesFilled">Number of text lines in the string.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.Syncfusion#Pdf#IPdfCache#EqualsTo(Syncfusion.Pdf.IPdfCache)">
            <summary>
            Checks whether the object is similar to another object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True - if the objects have equal internals and can share them, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.Syncfusion#Pdf#IPdfCache#GetInternals">
            <summary>
            Returns internals of the object.
            </summary>
            <returns>Returns internals of the object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.Syncfusion#Pdf#IPdfCache#SetInternals(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Sets internals to the object.
            </summary>
            <param name="internals">Internals of the object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.EqualsToFont(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Checks whether fonts are equals.
            </summary>
            <param name="font">Font to compare.</param>
            <returns>True if fonts are equal, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.GetCharWidth(System.Char,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Returns width of the char.
            </summary>
            <param name="charCode">Char symbol.</param>
            <param name="format">String format.</param>
            <returns>Width of the symbol.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.GetLineWidth(System.String,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Returns width of the line.
            </summary>
            <param name="line">Text line.</param>
            <param name="format">String format.</param>
            <returns>Width of the line.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.SetStyle(Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Sets the style.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfFont.ApplyFormatSettings(System.String,Syncfusion.Pdf.Graphics.PdfStringFormat,System.Single)">
            <summary>
            Applies settings to the default line width.
            </summary>
            <param name="line">Text line.</param>
            <param name="format">String format.</param>
            <param name="width">Default line width.</param>
            <returns>Line width with settings applied.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfFont.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfFont.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfFont.Height">
            <summary>
            Gets the height of the font in points.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfFont.Style">
            <summary>
            Gets the style information for this font.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfFont.Bold">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> is bold.
            </summary>
            <value><c>true</c> if bold; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfFont.Italic">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> is italic.
            </summary>
            <value><c>true</c> if italic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfFont.Strikeout">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> is strikeout.
            </summary>
            <value><c>true</c> if strikeout; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfFont.Underline">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> is underline.
            </summary>
            <value><c>true</c> if underline; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfFont.Metrics">
            <summary>
            Gets or sets the Metrics of the font.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfFont.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets Pdf primitive representing the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.c_charOffset">
            <summary>
            First character position.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.m_fontFamily">
            <summary>
            Font family
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.#ctor(Syncfusion.Pdf.Graphics.PdfCjkFontFamily,System.Single,Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfCjkStandardFont"/> class.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.#ctor(Syncfusion.Pdf.Graphics.PdfCjkFontFamily,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfCjkStandardFont"/> class.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.#ctor(Syncfusion.Pdf.Graphics.PdfCjkStandardFont,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfCjkStandardFont"/> class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.#ctor(Syncfusion.Pdf.Graphics.PdfCjkStandardFont,System.Single,Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfCjkStandardFont"/> class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.EqualsToFont(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Checks whether fonts are equals.
            </summary>
            <param name="font">Font to compare.</param>
            <returns>
            True if fonts are equal, False otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.GetCharWidth(System.Char,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Returns width of the char.
            </summary>
            <param name="charCode">Char symbol.</param>
            <param name="format">String format.</param>
            <returns>Width of the symbol.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.GetLineWidth(System.String,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Returns width of the line.
            </summary>
            <param name="line">Text line.</param>
            <param name="format">String format.</param>
            <returns>Width of the line.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.InitializeInternals">
            <summary>
            Initializes the internals.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.CreateInternals">
            <summary>
            Creates font's dictionary.
            </summary>
            <returns>font's dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.GetDescendantFont">
            <summary>
            Returns descendant font.
            </summary>
            <returns>Returns descendant font.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.GetEncoding(Syncfusion.Pdf.Graphics.PdfCjkFontFamily)">
            <summary>
            Gets the prope CJK encoding.
            </summary>
            <param name="fontFamily">The font family.</param>
            <returns>Proper PDF name for the encoding.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.CheckStyle">
            <summary>
            Checks the style.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.GetCharWidthInternal(System.Char,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Gets the char width internal.
            </summary>
            <param name="charCode">The character code.</param>
            <param name="format">The format.</param>
            <returns>The width of the character.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfCjkStandardFont.FontFamily">
            <summary>
            Gets the font family.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.PdfCjkStandardFontMetricsFactory">
            <summary>
            A Class representing Pdf document which is used for Cjk Font Metrics Factory.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfCjkStandardFontMetricsFactory.c_subSuperScriptFactor">
            <summary>
            Multiplier of subscript superscript.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkStandardFontMetricsFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.Fonts.PdfCjkStandardFontMetricsFactory"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkStandardFontMetricsFactory.GetMetrics(Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Single)">
            <summary>
            Returns font metrics depending on the font settings.
            </summary>
            <param name="fontFamily">Font family.</param>
            <param name="fontStyle">Font style.</param>
            <param name="size">Size of the font.</param>
            <returns>Returns font metrics depending on the font settings.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkStandardFontMetricsFactory.GetHanyangSystemsGothicMediumMetrix(Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Single)">
            <summary>
            Gets the hanyang systems gothic medium font metrix.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="fontStyle">The font style.</param>
            <param name="size">The size.</param>
            <returns>The filled font metrix.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkStandardFontMetricsFactory.GetMonotypeHeiMedium(Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Single)">
            <summary>
            Gets the monotype hei medium metrix.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="fontStyle">The font style.</param>
            <param name="size">The size.</param>
            <returns>The proper PdfFontMetrics class instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkStandardFontMetricsFactory.GetMonotypeSungLightMetrix(Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Single)">
            <summary>
            Gets the monotype sung light metrix.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="fontStyle">The font style.</param>
            <param name="size">The size.</param>
            <returns>The proper PdfFontMetrics class instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkStandardFontMetricsFactory.GetSinoTypeSongLight(Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Single)">
            <summary>
            Gets the sino type song light font metrics.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="fontStyle">The font style.</param>
            <param name="size">The size.</param>
            <returns>PdfFontMetrics instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkStandardFontMetricsFactory.GetHeiseiMinchoW3(Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Single)">
            <summary>
            Gets the heisei mincho w3.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="fontStyle">The font style.</param>
            <param name="size">The size.</param>
            <returns>The proper PdfFontMetrics class instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkStandardFontMetricsFactory.GetHeiseiKakuGothicW5Metrix(Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Single)">
            <summary>
            Gets the heisei kaku gothic w5 metrix.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="fontStyle">The font style.</param>
            <param name="size">The size.</param>
            <returns>The proper PdfFontMetrics class instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfCjkStandardFontMetricsFactory.GetHanyangSystemsShinMyeongJoMediumMetrix(Syncfusion.Pdf.Graphics.PdfCjkFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Single)">
            <summary>
            Gets the hanyang systems shin myeong jo medium metrix.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="fontStyle">The font style.</param>
            <param name="size">The size.</param>
            <returns>The proper PdfFontMetrics class instance.</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics">
            <summary>
            Metrics of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.Ascent">
            <summary>
            Gets ascent of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.Descent">
            <summary>
            Gets descent of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.Name">
            <summary>
            Name of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.PostScriptName">
            <summary>
            Gets PostScript Name of the  font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.Size">
            <summary>
            Gets size of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.Height">
            <summary>
            Gets height of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.FirstChar">
            <summary>
            First char of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.LastChar">
            <summary>
            Last char of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.LineGap">
            <summary>
            Line gap.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.SubScriptSizeFactor">
            <summary>
            Subscript size factor.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.SuperscriptSizeFactor">
            <summary>
            Superscript size factor.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.m_widthTable">
            <summary>
            Gets table of glyphs' width.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.GetAscent(Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Returns ascent taking into consideration font's size.
            </summary>
            <param name="format">Text format settings.</param>
            <returns>Returns ascent taking into consideration font's size.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.GetDescent(Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Returns descent taking into consideration font's size.
            </summary>
            <param name="format">Text format settings.</param>
            <returns>Returns descent taking into consideration font's size.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.GetLineGap(Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Returns Line gap taking into consideration font's size.
            </summary>
            <param name="format">Text format settings.</param>
            <returns>Returns line gap taking into consideration font's size.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.GetHeight(Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Returns height taking into consideration font's size.
            </summary>
            <param name="format">Text format settings.</param>
            <returns>Returns height taking into consideration font's size.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.GetSize(Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Calculates size of the font depending on the subscript/superscript value.
            </summary>
            <param name="format">Text format settings.</param>
            <returns>Size of the font depending on the subscript/superscript value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.Clone">
            <summary>
            Clones the metrics.
            </summary>
            <returns>Cloned metrics.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.PdfFontMetrics.WidthTable">
            <summary>
            Gets or sets the width table.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.WidthTable">
            <summary>
            The base class for a width table.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.WidthTable.Clone">
            <summary>
            Clones this instance of the WidthTable class.
            </summary>
            <returns>A copy of this WidthTable instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.WidthTable.Syncfusion#Pdf#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.WidthTable.ToArray">
            <summary>
            Toes the array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.WidthTable.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Int32"/> at the specified index.
            </summary>
            <value>index</value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.StandardWidthTable">
            <summary>
            Implements a width table for standard fonts.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.StandardWidthTable.m_widths">
            <summary>
            The widths of the supported characters.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.StandardWidthTable.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:StandardWidthTable"/> class.
            </summary>
            <param name="widths">The widths table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.StandardWidthTable.Clone">
            <summary>
            Clones this instance of the WidthTable class.
            </summary>
            <returns>A copy of this WidthTable instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.StandardWidthTable.ToArray">
            <summary>
            Converts width table to a PDF array.
            </summary>
            <returns>The properly formed pdf array.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.StandardWidthTable.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Int32"/> at the specified index.
            </summary>
            <value>index</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.StandardWidthTable.Length">
            <summary>
            Gets the length of the internal array.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.CjkWidthTable">
            <summary>
            Implements CJK width table, which is quite complex.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.CjkWidthTable.m_width">
            <summary>
            Local variable to store the width.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.CjkWidthTable.m_defaultWidth">
            <summary>
            Local variable to store the default width.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.CjkWidthTable.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CjkWidthTable"/> class.
            </summary>
            <param name="defaultWidth">The default width of the CJK characters.
            This value will be returned if there is no width information for a character.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.CjkWidthTable.Add(Syncfusion.Pdf.Graphics.Fonts.CjkWidth)">
            <summary>
            Adds the specified widths.
            </summary>
            <param name="widths">The CJK widths.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.CjkWidthTable.Clone">
            <summary>
            Clones this instance of the WidthTable class.
            </summary>
            <returns>A copy of this WidthTable instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.CjkWidthTable.ToArray">
            <summary>
            Converts width table to a PDF array.
            </summary>
            <returns>A well formed PDF array.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.CjkWidthTable.DefaultWidth">
            <summary>
            Gets the default character width.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.CjkWidthTable.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Int32"/> at the specified index.
            </summary>
            <value>index</value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.CjkWidth">
            <summary>
            The base class of CJK widths types.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.CjkWidth.AppendToArray(Syncfusion.Pdf.Primitives.PdfArray)">
            <summary>
            Appends internal data to a PDF array.
            </summary>
            <param name="arr">The pdf array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.CjkWidth.Syncfusion#Pdf#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.CjkWidth.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The proper copy of this instance.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.CjkWidth.From">
            <summary>
            Gets the starting character.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.CjkWidth.To">
            <summary>
            Gets the ending character.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.CjkWidth.Item(System.Int32)">
            <summary>
            Gets the width of the specified character.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.CjkSameWidth">
            <summary>
            Implements capabilities to control a range of character with the same width.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.CjkSameWidth.m_from">
            <summary>
            The Form
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.CjkSameWidth.m_to">
            <summary>
            The to
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.CjkSameWidth.m_width">
            <summary>
            The Width
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.CjkSameWidth.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.Fonts.CjkSameWidth"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.CjkSameWidth.AppendToArray(Syncfusion.Pdf.Primitives.PdfArray)">
            <summary>
            Appends internal data to a PDF array.
            </summary>
            <param name="arr">The pdf array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.CjkSameWidth.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The proper copy of this instance.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.CjkSameWidth.From">
            <summary>
            Gets the starting character.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.CjkSameWidth.To">
            <summary>
            Gets the ending character.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.CjkSameWidth.Item(System.Int32)">
            <summary>
            Gets the width of the specified character.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.CjkDifferentWidth">
            <summary>
            Implements capabilities to control a sequent range of characters with different width.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.CjkDifferentWidth.m_from">
            <summary>
            The form
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.CjkDifferentWidth.m_width">
            <summary>
            The width
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.CjkDifferentWidth.#ctor(System.Int32,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:CjkDifferentWidth"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="widths">The widths.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.CjkDifferentWidth.AppendToArray(Syncfusion.Pdf.Primitives.PdfArray)">
            <summary>
            Appends internal data to a PDF array.
            </summary>
            <param name="arr">The pdf array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.CjkDifferentWidth.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The proper copy of this instance.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.CjkDifferentWidth.From">
            <summary>
            Gets the starting character.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.CjkDifferentWidth.To">
            <summary>
            Gets the ending character.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.CjkDifferentWidth.Item(System.Int32)">
            <summary>
            Gets the width of the specified character.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfStandardFont">
            <summary>
            Represents one of the 14 standard PDF fonts.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStandardFont.c_charOffset">
            <summary>
            First character position.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStandardFont.m_fontFamily">
            <summary>
            FontFamily of the font.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStandardFont.#ctor(Syncfusion.Pdf.Graphics.PdfFontFamily,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfStandardFont"/> class.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStandardFont.#ctor(Syncfusion.Pdf.Graphics.PdfFontFamily,System.Single,Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfStandardFont"/> class.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStandardFont.#ctor(Syncfusion.Pdf.Graphics.PdfStandardFont,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfStandardFont"/> class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStandardFont.#ctor(Syncfusion.Pdf.Graphics.PdfStandardFont,System.Single,Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfStandardFont"/> class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStandardFont.GetCharWidth(System.Char,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Returns the width of the char.
            </summary>
            <param name="charCode">Char symbol.</param>
            <param name="format">String format.</param>
            <returns>Width of the symbol.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStandardFont.GetLineWidth(System.String,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Returns width of the line.
            </summary>
            <param name="line">Text line.</param>
            <param name="format">String format.</param>
            <returns>Width of the line.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStandardFont.EqualsToFont(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Checks whether fonts are equals.
            </summary>
            <param name="font">Font to compare.</param>
            <returns>True if fonts are equal, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStandardFont.InitializeInternals">
            <summary>
            Initializes font internals.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStandardFont.CreateInternals">
            <summary>
            Creates font's dictionary.
            </summary>
            <returns>font's dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStandardFont.CheckStyle">
            <summary>
            Checks font style of the font.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStandardFont.GetCharWidthInternal(System.Char,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Returns width of the char. This methods doesn't takes into consideration font's size.
            </summary>
            <param name="charCode">Char symbol.</param>
            <param name="format">String format.</param>
            <returns>Width of the symbol.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStandardFont.Convert(System.String)">
            <summary>
            Converts the specified text.
            </summary>
            <param name="text">The unicode text.</param>
            <returns>The ANSI string.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStandardFont.FontFamily">
            <summary>
            Gets the FontFamily.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory">
            <summary>
            Factory of the standard fonts metrics.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_subSuperScriptFactor">
            <summary>
            Multiplier os subscript superscript.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_HelveticaAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_HelveticaDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_HelveticaName">
            <summary>
            Font type
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_HelveticaBoldAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_HelveticaBoldDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_HelveticaBoldName">
            <summary>
            Font type
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_HelveticaItalicAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_HelveticaItalicDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_HelveticaItalicName">
            <summary>
            Font type
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_HelveticaBoldItalicAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_HelveticaBoldItalicDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_HelveticaBoldItalicName">
            <summary>
            Font type
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_CourierAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_CourierDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_CourierName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_CourierBoldAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_CourierBoldDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_CourierBoldName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_CourierItalicAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_CourierItalicDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_CourierItalicName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_CourierBoldItalicAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_CourierBoldItalicDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_CourierBoldItalicName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_TimesAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_TimesDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_TimesName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_TimesBoldAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_TimesBoldDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_TimesBoldName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_TimesItalicAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_TimesItalicDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_TimesItalicName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_TimesBoldItalicAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_TimesBoldItalicDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_TimesBoldItalicName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_symbolAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_symbolDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_symbolName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_zapfDingbatsAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_zapfDingbatsDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_zapfDingbatsName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_arialWidth">
            <summary>
            Arial widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_arialBoldWidth">
            <summary>
            Arial bold widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_fixedWidth">
            <summary>
            Fixed widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_timesRomanWidth">
            <summary>
            Times widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_timesRomanBoldWidth">
            <summary>
            Times bold widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_timesRomanItalicWidth">
            <summary>
            Times italic widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_timesRomanBoldItalicWidth">
            <summary>
            Times bold italic widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_symbolWidth">
            <summary>
            Symbol widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.c_zapfDingbatsWidth">
            <summary>
            Zip dingbats widths table.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.GetMetrics(Syncfusion.Pdf.Graphics.PdfFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Single)">
            <summary>
            Returns metrics of the font.
            </summary>
            <param name="fontFamily">Family of the font.</param>
            <param name="fontStyle">Style of the font.</param>
            <param name="size">Size of the font.</param>
            <returns>Returns metrics of the font.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.GetHelveticaMetrics(Syncfusion.Pdf.Graphics.PdfFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Single)">
            <summary>
            Creates Helvetica font metrics.
            </summary>
            <param name="fontFamily">FontFamily of the font.</param>
            <param name="fontStyle">Style of the font.</param>
            <param name="size">Size of the font.</param>
            <returns>Helvetica font metrics.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.GetCourierMetrics(Syncfusion.Pdf.Graphics.PdfFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Single)">
            <summary>
            Creates Courier font metrics.
            </summary>
            <param name="fontFamily">FontFamily of the font.</param>
            <param name="fontStyle">Style of the font.</param>
            <param name="size">Size of the font.</param>
            <returns>Helvetica font metrics.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.GetTimesMetrics(Syncfusion.Pdf.Graphics.PdfFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Single)">
            <summary>
            Creates Times font metrics.
            </summary>
            <param name="fontFamily">FontFamily of the font.</param>
            <param name="fontStyle">Style of the font.</param>
            <param name="size">Size of the font.</param>
            <returns>Helvetica font metrics.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.GetSymbolMetrics(Syncfusion.Pdf.Graphics.PdfFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Single)">
            <summary>
            Creates Symbol font metrics.
            </summary>
            <param name="fontFamily">FontFamily of the font.</param>
            <param name="fontStyle">Style of the font.</param>
            <param name="size">Size of the font.</param>
            <returns>Helvetica font metrics.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.PdfStandardFontMetricsFactory.GetZapfDingbatsMetrics(Syncfusion.Pdf.Graphics.PdfFontFamily,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Single)">
            <summary>
            Creates ZapfDingbats font metrics.
            </summary>
            <param name="fontFamily">FontFamily of the font.</param>
            <param name="fontStyle">Style of the font.</param>
            <param name="size">Size of the font.</param>
            <returns>Helvetica font metrics.</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfStringFormat">
            <summary>
            Represents the text layout information.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_alignment">
            <summary>
            Horizontal text alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_lineAlignment">
            <summary>
            Vertical text alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_rightToLeft">
            <summary>
            Indicates whether RTL should be checked.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_characterSpacing">
            <summary>
            Character spacing value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_wordSpacing">
            <summary>
            Word spacing value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_leading">
            <summary>
            Text leading.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_clip">
            <summary>
            Shows if the text should be a part of the current clipping path.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_subSuperScript">
            <summary>
            Indicates whether the text is in subscript or superscript mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_scalingFactor">
            <summary>
            The scaling factor of the text being drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_firstLineIndent">
            <summary>
            Indent of the first line in the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_paragraphIndent">
            <summary>
            Indent of the first line in the paragraph.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_lineLimit">
            <summary>
            Indicates whether entire lines are laid out in the formatting rectangle only or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_measureTrailingSpaces">
            <summary>
            Indicates whether spaces at the end of the line should be left or removed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_noClip">
            <summary>
            Indicates whether the text region should be clipped or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringFormat.m_wrapType">
            <summary>
            Indicates text wrapping type.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfStringFormat"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringFormat.#ctor(Syncfusion.Pdf.Graphics.PdfTextAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfStringFormat"/> class.
            </summary>
            <param name="alignment">The alignment.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfStringFormat"/> class.
            </summary>
            <param name="columnFormat">The column format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringFormat.#ctor(Syncfusion.Pdf.Graphics.PdfTextAlignment,Syncfusion.Pdf.Graphics.PdfVerticalAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfStringFormat"/> class.
            </summary>
            <param name="alignment">The alignment.</param>
            <param name="lineAlignment">The vertical alignment.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringFormat.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>The new created object.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.LineAlignment">
            <summary>
            Gets or sets the vertical text alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.RightToLeft">
            <summary>
            Gets or sets the value that indicates text direction mode.
            </summary>
            <remarks>Note, that this property doesn't change any alignment of the text. 
            <see cref="P:Syncfusion.Pdf.Graphics.PdfStringFormat.Alignment"/> property should be set manually to align the text. This property just enables or disables
            support of right to left approach. 
            If the value is False, the text won't be checked for right to left symbols occurrence.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.CharacterSpacing">
            <summary>
            Gets or sets value that indicates a size among the characters in the text.
            When the glyph for each character in the string is rendered, this value is
            added to the the glyph�s displacement.
            </summary>
            <remarks>
            Default value is 0.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.WordSpacing">
            <summary>
            Gets or sets value that indicates a size among the words in the text.
            Word spacing works the same way as character spacing but applies only to the
            space character, code 32.
            </summary>
            <remarks>Default value is 0.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.LineSpacing">
            <summary>
            Gets or sets value that indicates the vertical distance between the baselines of adjacent lines of text.
            </summary>
            <remarks>Default value is 0.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.ClipPath">
            <summary>
            Gets or sets a value indicating whether the text
            should be a part of the clipping path.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.SubSuperScript">
            <summary>
            Gets or sets value indicating whether the text is in subscript or superscript mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.ParagraphIndent">
            <summary>
            Gets or sets the indent of the first line in the paragraph.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.LineLimit">
            <summary>
            Gets or sets a value indicating whether [line limit].
            </summary>
            <value><c>true</c> if [line limit]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.MeasureTrailingSpaces">
            <summary>
            Gets or sets a value indicating whether [measure trailing spaces].
            </summary>
            <value>
            	<c>true</c> if [measure trailing spaces]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.NoClip">
            <summary>
            Gets or sets a value indicating whether [no clip].
            </summary>
            <value><c>true</c> if [no clip]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.WordWrap">
            <summary>
            Gets or sets value indicating type of the text wrapping.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.HorizontalScalingFactor">
            <summary>
            Gets or sets the scaling factor.
            </summary>
            <remarks>The default scaling factor is 100, which means 100% and original size.
            It's used to make PDF font looking smaller when metafile is rendered into PDF.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringFormat.FirstLineIndent">
            <summary>
            Gets or sets the indent of the first line in the text.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfTrueTypeFont">
             <summary>
             Represents TrueType font.
             </summary>
            [System.Security.Permissions.PermissionSet( System.Security.Permissions.SecurityAction.Assert, Name = "FullTrust" )]
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.c_codePage">
            <summary>
            Code page for the encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.Encoding">
            <summary>
            Encoding for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.m_embed">
            <summary>
            Indicates whether the font should be embeded.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.m_unicode">
            <summary>
            Indicates whether the font should use unicode symbols.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.m_fontInternal">
            <summary>
            Internal font object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.m_bUseTrueType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.#ctor(System.IO.Stream,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTrueTypeFont"/> class.
            </summary>
            <param name="fontFile">The font file.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.#ctor(System.IO.Stream,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTrueTypeFont"/> class.
            </summary>
            <param name="fontFile">The font file.</param>
            <param name="size">The size.</param>
            <param name="isTrueType">Type of the is true.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.#ctor(System.IO.Stream,System.Single,Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTrueTypeFont"/> class.
            </summary>
            <param name="fontFile">The font file.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.#ctor(System.IO.Stream,System.Single,Syncfusion.Pdf.Graphics.PdfFontStyle,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTrueTypeFont"/> class.
            </summary>
            <param name="fontFile">The font file.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.#ctor(Syncfusion.Pdf.Graphics.PdfTrueTypeFont,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfTrueTypeFont"/> class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.Pdf.Graphics.PdfTrueTypeFont"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.Dispose">
            <summary>
            Releases all resources of the font.
            </summary>
            <remarks>The font can be disposed when the document where this font was used is already closed.
            Don't dispose the font until the corresponding document is closed.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.GetCharWidth(System.Char,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Returns width of the char.
            </summary>
            <param name="charCode">Char symbol.</param>
            <param name="format">String format.</param>
            <returns>Width of the symbol.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.GetLineWidth(System.String,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Returns width of the line.
            </summary>
            <param name="line">Text line.</param>
            <param name="format">String format.</param>
            <returns>Width of the line.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.EqualsToFont(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Checks whether fonts are equals.
            </summary>
            <param name="font">Font to compare.</param>
            <returns>True if fonts are equal, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.SetSymbols(System.String)">
            <summary>
            Stores used symbols.
            </summary>
            <param name="text">String text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.SetSymbols(System.UInt16[])">
            <summary>
            Stores used symbols.
            </summary>
            <param name="glyphs">Glyphs, used by the line of the text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.CreateFontInternal(Syncfusion.Pdf.Graphics.PdfTrueTypeFont)">
            <summary>
            Creates a new font from a prototype font.
            </summary>
            <param name="prototype">Prototype object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.CreateFontInternal(System.IO.Stream,Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Creates internal font object.
            </summary>
            <param name="fontFile">Font file.</param>
            <param name="style">Suggested style of the font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.InitializeInternals">
            <summary>
            Initializes font internals.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.CalculateStyle(Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Sets the style of the font.
            </summary>
            <param name="style">Suggested style of the font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.GetSymbolSize(System.Char,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Calculates size of the symbol.
            </summary>
            <param name="ch">Symbol.</param>
            <param name="format">String format.</param>
            <returns>Symbol size.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.Unicode">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Pdf.Graphics.PdfTrueTypeFont"/> is unicode.
            </summary>
            <value><c>true</c> if unicode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.Embed">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Pdf.Graphics.PdfTrueTypeFont"/> is embeded.
            </summary>
            <value><c>true</c> if embeded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.InternalFont">
            <summary>
            Gets internals of the font.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTrueTypeFont.FontFile">
            <summary>
            Gets path to the font file if the font was created from a file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfStringLayouter">
            <summary>
            Class lay outing the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringLayouter.m_text">
            <summary>
            Text data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringLayouter.m_font">
            <summary>
            Pdf font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringLayouter.m_format">
            <summary>
            String format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringLayouter.m_size">
            <summary>
            Bounds of the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringLayouter.m_reader">
            <summary>
            String tokenizer.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringLayouter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:StringLayouter"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringLayouter.Layout(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat,System.Drawing.RectangleF,System.Single)">
            <summary>
            Layouts the text.
            </summary>
            <param name="text">String text.</param>
            <param name="font">Font for the text.</param>
            <param name="format">String format.</param>
            <param name="size">Bounds of the text.</param>
            <returns>Layout result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringLayouter.Initialize(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat,System.Drawing.RectangleF,System.Single)">
            <summary>
            Initializes internal data.
            </summary>
            <param name="text">String text.</param>
            <param name="font">Font for the text.</param>
            <param name="format">String format.</param>
            <param name="size">Bounds of the text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringLayouter.DoLayout">
            <summary>
            Layouts the text.
            </summary>
            <returns>Lay outing data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringLayouter.CopyToResult(Syncfusion.Pdf.Graphics.PdfStringLayoutResult,Syncfusion.Pdf.Graphics.PdfStringLayoutResult,System.Collections.Generic.List{Syncfusion.Pdf.Graphics.LineInfo},System.Int32@)">
            <summary>
            Copies layout result from line result to entire result. Checks whether we can proceed lay outing or not.
            </summary>
            <param name="result">Final result.</param>
            <param name="lineResult">Line result.</param>
            <param name="lines">Lines array.</param>
            <param name="numInserted">Number of symbols inserted.</param>
            <returns>True if we can proceed, False - to stop lay outing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringLayouter.FinalizeResult(Syncfusion.Pdf.Graphics.PdfStringLayoutResult,System.Collections.Generic.List{Syncfusion.Pdf.Graphics.LineInfo})">
            <summary>
            Finalizes final result.
            </summary>
            <param name="result">Final result.</param>
            <param name="lines">Lines array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringLayouter.Clear">
            <summary>
            Cleares all resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringLayouter.GetLineHeight">
            <summary>
            Calculates height of the line.
            </summary>
            <returns>Height of the line.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringLayouter.LayoutLine(System.String,System.Single)">
            <summary>
            Layouts line.
            </summary>
            <param name="line">Text line.</param>
            <param name="lineIndent">Line indent.</param>
            <returns>Layout result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringLayouter.AddToLineResult(Syncfusion.Pdf.Graphics.PdfStringLayoutResult,System.Collections.Generic.List{Syncfusion.Pdf.Graphics.LineInfo},System.String,System.Single,Syncfusion.Pdf.Graphics.LineType)">
            <summary>
            Adds line to line result.
            </summary>
            <param name="lineResult">Line resut.</param>
            <param name="lines">Array of the lines.</param>
            <param name="line">Text line.</param>
            <param name="lineWidth">Line width.</param>
            <param name="breakType">Line break type.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringLayouter.TrimLine(Syncfusion.Pdf.Graphics.LineInfo,System.Boolean)">
            <summary>
            Trims whitespaces at the line.
            </summary>
            <param name="info">Line info.</param>
            <param name="firstLine">Indicates whether the line is the first in the text.</param>
            <returns>Trimed line info.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringLayouter.GetLineWidth(System.String)">
            <summary>
            Calculates width of the line.
            </summary>
            <param name="line">String line.</param>
            <returns>Width of the line.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringLayouter.GetLineIndent(System.Boolean)">
            <summary>
            Returns line indent for the line.
            </summary>
            <param name="firstLine">If true - the line is the first in the text.</param>
            <returns>Line indent for the line.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfStringLayouter.GetWrapType">
            <summary>
            Returns wrap type.
            </summary>
            <returns>Returns wrap type.</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfStringLayoutResult">
            <summary>
            Layouter result.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringLayoutResult.m_lines">
            <summary>
            Layouted lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringLayoutResult.m_remainder">
            <summary>
            The text wasn't lay outed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringLayoutResult.m_actualSize">
            <summary>
            Actual layouted text bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfStringLayoutResult.m_lineHeight">
            <summary>
            Height of the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringLayoutResult.Remainder">
            <summary>
            Gets the text which is not lay outed
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringLayoutResult.ActualSize">
            <summary>
            Gets the actual layouted text bounds
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringLayoutResult.Lines">
            <summary>
            Gets layouted lines information.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringLayoutResult.LineHeight">
            <summary>
            Gets the height of the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringLayoutResult.Empty">
            <summary>
            Gets value that indicates whether any text was layouted.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfStringLayoutResult.LineCount">
            <summary>
            Gets number of the lines layouted.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.LineInfo">
            <summary>
            Contains information about the line.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.LineInfo.m_text">
            <summary>
            Line text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.LineInfo.m_width">
            <summary>
            Width of the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.LineInfo.m_lineType">
            <summary>
            Breaking type of the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.LineInfo.LineType">
            <summary>
            Gets width of the line text.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.LineInfo.Text">
            <summary>
            Gets line text.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.LineInfo.Width">
            <summary>
            Gets width of the line text.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.LineType">
            <summary>
            Break type of the line.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.LineType.None">
            <summary>
            Unknown type line.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.LineType.NewLineBreak">
            <summary>
            The line has new line symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.LineType.LayoutBreak">
            <summary>
            layout break.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.LineType.FirstParagraphLine">
            <summary>
            The line is the first in the paragraph.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.LineType.LastParagraphLine">
            <summary>
            The line is the last in the paragraph.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.StringTokenizer">
            <summary>
            Utility class for working with strings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.StringTokenizer.WhiteSpace">
            <summary>
            Whitespace symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.StringTokenizer.Tab">
            <summary>
            Whitespace symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.StringTokenizer.c_regexOptions">
            <summary>
            Default RegEx checks object's options.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.StringTokenizer.c_whiteSpacePatterm">
            <summary>
            Pattern for WhiteSpace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.StringTokenizer.Spaces">
            <summary>
            Array of spaces.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.StringTokenizer.s_whiteSpaceRegex">
            <summary>
            Whitespace regex.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.StringTokenizer.m_text">
            <summary>
            Text data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.StringTokenizer.m_position">
            <summary>
            Current position.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.StringTokenizer"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.GetCharsCount(System.String,System.Char)">
            <property name="flag" value="Finished" />
            <summary>
            Returns number of symbols occurred in the text.
            </summary>
            <param name="text">Text data.</param>
            <param name="symbol">Symbol to be searched.</param>
            <returns>
            Number of symbols occurred in the text.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.GetCharsCount(System.String,System.Char[])">
            <property name="flag" value="Finished" />
            <summary>
            Returns number of symbols occurred in the text.
            </summary>
            <param name="text">Text data.</param>
            <param name="symbols"> Array of symbols to be searched.</param>
            <returns>
            Number of symbols occurred in the text.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.ReadLine">
            <summary>
            Reads line of the text.
            </summary>
            <returns>Text line.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.PeekLine">
            <summary>
            Reads line of the text.
            </summary>
            <returns>Text line.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.ReadWord">
            <summary>
            reads a word from the text.
            </summary>
            <returns>A word from the data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.PeekWord">
            <summary>
            Peeks a word from the text.
            </summary>
            <returns>A word from the data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.Read">
            <summary>
            Reads char form the data.
            </summary>
            <returns>Char symbol.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.Read(System.Int32)">
            <summary>
            Reads count of the symbols.
            </summary>
            <param name="count">Number of symbols.</param>
            <returns>String text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.ReadToSymbol(System.Char,System.Boolean)">
            <summary>
            Reads data till the symbol.
            </summary>
            <param name="symbol">Specified symbol.</param>
            <param name="readSymbol">If true - to read the symbol.</param>
            <returns>The data read.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.Peek">
            <summary>
            Peeks char form the data.
            </summary>
            <returns>Char symbol.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.Close">
            <summary>
            Closes a reader.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.ReadToEnd">
            <summary>
            Reads text to the end.
            </summary>
            <returns>Reads text to the end.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.IsWhitespace(System.String)">
            <summary>
            Indicates whether user specified token is whitespace symbols or not.
            </summary>
            <param name="token">Token to check.</param>
            <returns>True if token is whitespace; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.IsSpace(System.Char)">
            <summary>
            Indicates whether user specified token is whitespace symbols or not.
            </summary>
            <param name="token">Token to check.</param>
            <returns>True if token is whitespace; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.IsTab(System.Char)">
            <summary>
            Indicates whether user specified token is tab symbols or not.
            </summary>
            <param name="token">Token to check.</param>
            <returns>True if token is whitespace; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.GetWhitespaceCount(System.String,System.Boolean)">
            <summary>
            Calculates number of the whitespace symbols at the start or at the end of the line.
            </summary>
            <param name="line">String line.</param>
            <param name="start">If true - check start of the line, end of the line otherwise.</param>
            <returns>Number of the whitespace symbols at the start or at the end of the line.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.StringTokenizer.Contains(System.Char[],System.Char)">
            <summary>
            Checks whether array contains a symbol.
            </summary>
            <param name="array">Array of symbols.</param>
            <param name="symbol">Char symbol.</param>
            <returns>True - if comtains, False otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.StringTokenizer.EOF">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Pdf.Graphics.StringTokenizer"/> is EOF.
            </summary>
            <value><c>true</c> if EOF; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.StringTokenizer.Length">
            <summary>
            Gets text length.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.StringTokenizer.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.TtfReader">
            <summary>
            Reader of the TTF data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.WidthMultiplier">
            <summary>
            Width multiplier.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.c_ttfVersion1">
            <summary>
            Version of Ttf file.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.c_ttfVersion2">
            <summary>
            Version of Ttf file.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.c_fp">
            <summary>
            FP.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.Encoding">
            <summary>
            Encoding class.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.s_tableNames">
            <summary>
            Aray of table names.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.m_tableNames">
            <summary>
            Array of table names.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.s_entrySelectors">
            <summary>
            Integer's table. One of this integer would be used as a key
            for writing some info in the header of the font program.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.m_reader">
            <summary>
            Binary reader object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.m_tableDirectory">
            <summary>
            The whole list of tables loaded from Ttf.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.m_metrics">
            <summary>
            Ttf metrics.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.m_width">
            <summary>
            Width table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.m_macintosh">
            <summary>
            Glyphs for Macintosh or Symbol fonts (char - key, glyph - value).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.m_microsoft">
            <summary>
            Glyphs for Microsoft Unicode fonts (char - key, glyph - value)..
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.m_macintoshGlyphs">
            <summary>
            Glyphs for Macintosh or Symbol fonts (glyph index - key, glyph - value).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.m_microsoftGlyphs">
            <summary>
            Glyphs for Microsoft Unicode fonts (glyph index - key, glyph - value).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.m_bIsLocaShort">
            <summary>
            Indicates whether loca table is short.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfReader.m_subset">
            <summary>
            Indicates whether font is truetype subset
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Creates a new object.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.Close">
            <summary>
            Closes all the resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.GetGlyph(System.Char)">
            <summary>
            Gets glyph's info by char code.
            </summary>
            <param name="charCode">Char symbol.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.GetGlyph(System.Int32)">
            <summary>
            Gets glyph's info by glyph index..
            </summary>
            <param name="glyphIndex">Glyph index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.CreateInternals">
            <summary>
            Creates fonts internals.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadFontProgram(System.Collections.Generic.Dictionary{System.Char,System.Char})">
            <summary>
            Reads a font's program.
            </summary>
            <param name="chars">Array of used chars.</param>
            <returns>Binary font data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ConvertString(System.String)">
            <summary>
            Reconverts string to be in proper format saved into PDF file.
            Return value would be in string.
            </summary>
            <param name="text">String to be reconverted.</param>
            <returns>Reconverted string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.GetCharWidth(System.Char)">
            <summary>
            Gets char width.
            </summary>
            <param name="code">Char for which to measure the width.</param>
            <returns>Char width.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.GetGlyphChars(System.Collections.Generic.Dictionary{System.Char,System.Char})">
            <summary>
            Gets hashtable with chars indexed by glyph index.
            </summary>
            <param name="chars">Chars that are used in destination output.</param>
            <returns>Hashtable with chars indexed by glyph index.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.Initialize">
            <summary>
            Provides basic parsing required for font comparing (FontFamily and MacStyle).
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadFontDirectory">
            <summary>
            Reads font directory.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.FixOffsets">
            <summary>
            Fixes the offsets of the font tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadMetrics">
            <summary>
            Reads font metrics.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.InitializeMetrics(Syncfusion.Pdf.Graphics.Fonts.TtfNameTable,Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable,Syncfusion.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable,Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table,Syncfusion.Pdf.Graphics.Fonts.TtfPostTable,Syncfusion.Pdf.Graphics.Fonts.TtfCmapSubTable[])">
            <summary>
            Initializes metrics.
            </summary>
            <param name="nameTable">Name table.</param>
            <param name="headTable">Head table.</param>
            <param name="horizontalHeadTable">Horizontal head table.</param>
            <param name="os2Table">OS/2 table.</param>
            <param name="postTable">Post table.</param>
            <param name="cmapTables">Cmap subtables.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadNameTable">
            <summary>
            Reads name table.
            </summary>
            <returns>Name table.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadHeadTable">
            <summary>
            Reads head table.
            </summary>
            <returns>Head table.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadHorizontalHeaderTable">
            <summary>
            Reads horizontal header table.
            </summary>
            <returns>Horizontal header table.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadOS2Table">
            <summary>
            Reads OS2 table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadPostTable">
            <summary>
            Reads post table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadWidthTable(System.Int32,System.Int32)">
            <summary>
            Reads Width of the glyphs.
            </summary>
            <param name="glyphCount">Number of glyphs.</param>
            <param name="unitsPerEm">Power of 2.</param>
            <returns>Width of the glyphs.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadCmapTable">
            <summary>
            Reads cmap table.
            </summary>
            <returns>Array of subtables.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadCmapSubTable(Syncfusion.Pdf.Graphics.Fonts.TtfCmapSubTable)">
            <summary>
            Reads cmap subtables.
            </summary>
            <param name="subTable">Cmap subtable.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadAppleCmapTable(Syncfusion.Pdf.Graphics.Fonts.TtfCmapSubTable,Syncfusion.Pdf.Graphics.TtfCmapEncoding)">
            <summary>
            Reads Symbol cmap table.
            </summary>
            <param name="subTable">Cmap subtable.</param>
            <param name="encoding">Encoding ID.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadMicrosoftCmapTable(Syncfusion.Pdf.Graphics.Fonts.TtfCmapSubTable,Syncfusion.Pdf.Graphics.TtfCmapEncoding)">
            <summary>
            Reads Symbol cmap table.
            </summary>
            <param name="subTable">Cmap subtable.</param>
            <param name="encoding">Encoding ID.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadTrimmedCmapTable(Syncfusion.Pdf.Graphics.Fonts.TtfCmapSubTable,Syncfusion.Pdf.Graphics.TtfCmapEncoding)">
            <summary>
            Reads Trimed cmap table.
            </summary>
            <param name="subTable">Cmap subtable.</param>
            <param name="encoding">Encoding ID.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadLocaTable(System.Boolean)">
            <summary>
            Reads loca table.
            </summary>
            <param name="bShort">If True - table is int16, int32 otherwise.</param>
            <returns>Loca table.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadUshortArray(System.Int32)">
            <summary>
            Reads ushort array.
            </summary>
            <param name="len">Length of the array.</param>
            <returns>Ushort array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ReadUintArray(System.Int32)">
            <summary>
            Reads uint array.
            </summary>
            <param name="len">Length of the array.</param>
            <returns>Uint array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.AddGlyph(Syncfusion.Pdf.Graphics.Fonts.TtfGlyphInfo,Syncfusion.Pdf.Graphics.TtfCmapEncoding)">
            <summary>
            Adds glyph to the collection.
            </summary>
            <param name="glyph">Glyph info.</param>
            <param name="encoding">Encoding ID.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.GetWidth(System.Int32)">
            <summary>
            Returns width of the glyph.
            </summary>
            <param name="glyphCode">Code of the glyph.</param>
            <returns>Returns width of the glyph.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.UpdateWidth">
            <summary>
            Updates chars structure which is used in the case
            of ansi encoding (256 bytes).
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.CheckPreambula">
            <summary>
            Indicates whether code is right Ttf preambula code:
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.GetCmapEncoding(System.Int32,System.Int32)">
            <summary>
            Gets CMAP encoding based on platform ID and encoding ID.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.GetTable(System.String)">
            <summary>
            Returns table.
            </summary>
            <param name="name">Name of the table.</param>
            <returns>Returns table.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.UpdateGlyphChars(System.Collections.Generic.Dictionary{System.Int32,System.Int32},Syncfusion.Pdf.Graphics.Fonts.TtfLocaTable)">
            <summary>
            Updates hashtable of used glyphs.
            </summary>
            <param name="glyphChars">Dictionary of used glyphs.</param>
            <param name="locaTable">Loca table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.ProcessCompositeGlyph(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32,Syncfusion.Pdf.Graphics.Fonts.TtfLocaTable)">
            <summary>
            Checks if glyph is composite or not.
            If True, it provides additional work.
            </summary>
            <param name="glyphChars">Dictionary of glyphs.</param>
            <param name="glyph">Glyph index.</param>
            <param name="locaTable">Loca table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.GenerateGlyphTable(System.Collections.Generic.Dictionary{System.Int32,System.Int32},Syncfusion.Pdf.Graphics.Fonts.TtfLocaTable,System.Int32[]@,System.Byte[]@)">
            <summary>
            Creates new glyph tables based on chars that are used for output.
            </summary>
            <param name="glyphChars">dictionary of glyphs.</param>
            <param name="locaTable">Loca table.</param>
            <param name="newLocaTable">The updated table that stores the offsets to the
            locations of the glyphs in the font.</param>
            <param name="newGlyphTable">The updated glyph table that holds only the glyphs that
            are used for destination output.</param>
            <returns>Glyph table size.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.UpdateLocaTable(System.Int32[],System.Boolean,System.Byte[]@)">
            <summary>
            Updates new Loca table.
            </summary>
            <param name="newLocaTable">New Loca table.</param>
            <param name="bLocaIsShort">Indicates whether loca is short.</param>
            <param name="newLocaTableOut">Updated new loca table.</param>
            <returns>Updated loca table size.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.GetFontProgram(System.Byte[],System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Returns font program data.
            </summary>
            <param name="newLocaTableOut">New updated loca table.</param>
            <param name="newGlyphTable">New glyph table.</param>
            <param name="glyphTableSize">Size of glyph table.</param>
            <param name="locaTableSize">Size of loca table.</param>
            <returns>Font program data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.GetFontProgramLength(System.Byte[],System.Byte[],System.Int16@)">
            <summary>
            Calculate size of the font program.
            </summary>
            <param name="newLocaTableOut">Updated new loca table.</param>
            <param name="newGlyphTable">New glyph table.</param>
            <param name="numTables">Number of tables used.</param>
            <returns>Size of the font program.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.CalculateCheckSum(System.Byte[])">
            <summary>
            Gets checksum from source buffer.
            </summary>
            <param name="bytes">Byte array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.WriteCheckSums(Syncfusion.Pdf.IO.BigEndianWriter,System.Int16,System.Byte[],System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Writing to destination buffer - checksums and sizes of used tables.
            </summary>
            <param name="writer">Writer object.</param>
            <param name="numTables">Number of tables.</param>
            <param name="newLocaTableOut">New updated loca table.</param>
            <param name="newGlyphTable">New glyph table.</param>
            <param name="glyphTableSize">Size of glyph table.</param>
            <param name="locaTableSize">Size of loca table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.WriteGlyphs(Syncfusion.Pdf.IO.BigEndianWriter,System.Byte[],System.Byte[])">
            <summary>
            // Writing to destination buffer - used glyphs.
            </summary>
            <param name="writer">Writer object.</param>
            <param name="newLocaTableOut">New updated loca table.</param>
            <param name="newGlyphTable">New glyph table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.InitializeFontName(Syncfusion.Pdf.Graphics.Fonts.TtfNameTable)">
            <summary>
            Initializes font name.
            </summary>
            <param name="nameTable">Name table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.Align(System.UInt32)">
            <summary>
            Aligns number to be divisible on 4.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.GetDefaultGlyph">
            <summary>
            Returns default glyph.
            </summary>
            <returns>Returns default glyph.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.CompareArrays(System.Byte[],System.Byte[])">
            <summary>
            Checks whether two arrays are equal.
            </summary>
            <param name="buff1">The first array.</param>
            <param name="buff2">The second array.</param>
            <returns>True if arrays are equal.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.TtfReader.FormatTableName(System.String)">
            <summary>
            Formats name of the table to int value.
            </summary>
            <param name="name">Name of the table.</param>
            <returns>Code of the table name.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.TtfReader.Reader">
            <summary>
            Gets or sets binary reader.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.TtfReader.InternalReader">
            <summary>
            Gets BigEndian internal reader.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.TtfReader.Metrics">
            <summary>
            Gets metrics of the font.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.TtfReader.TableDirectory">
            <summary>
            The whole list of tables loaded from Ttf.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.TtfReader.Macintosh">
            <summary>
            Gets glyphs for Macintosh or Symbol fonts (char - key, glyph - value).
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.TtfReader.Microsoft">
            <summary>
            Gets glyphs for Microsoft Unicode fonts (char - key, glyph - value)..
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.TtfReader.MacintoshGlyphs">
            <summary>
            Gets glyphs for Macintosh or Symbol fonts (glyph index - key, glyph - value).
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.TtfReader.MicrosoftGlyphs">
            <summary>
            Gets glyphs for Microsoft Unicode fonts (glyph index - key, glyph - value).
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.TtfReader.TableNames">
            /// <summary>
            Array of table names.
            </summary>
            <value>Table names</value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont">
            <summary>
            Creator of Unicode TrueType type font.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.ITrueTypeFont">
            <summary>
            Base interface for true type internal fonts.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ITrueTypeFont.GetInternals">
            <summary>
            Gets the pdf primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ITrueTypeFont.EqualsToFont(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Checks whether fonts are equals.
            </summary>
            <param name="font">Font to compare.</param>
            <returns>True if fonts are equal, False ofhtrwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ITrueTypeFont.CreateInternals">
            <summary>
            Creates font internals.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ITrueTypeFont.GetCharWidth(System.Char)">
            <summary>
            Returns width of the char symbol.
            </summary>
            <param name="charCode">Char symbol.</param>
            <returns>Width of the char symbol in universal units.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ITrueTypeFont.GetLineWidth(System.String)">
            <summary>
            Returns width of the text line.
            </summary>
            <param name="line">String line.</param>
            <returns>Width of the char symbol in universal units.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.ITrueTypeFont.Close">
            <summary>
            Releases all resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.ITrueTypeFont.Size">
            <summary>
            Gets size of the font.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.ITrueTypeFont.Metrics">
            <summary>
            Gets font metrics.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.c_driverName">
            <summary>
            Display driver name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.c_nameString">
            <summary>
            String for generating font name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.c_cmapPrefix">
            <summary>
            Cmap table's start prefix.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.c_cmapEndCodespaceRange">
            <summary>
            Cmap table's start suffix.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.c_cmapSuffix">
            <summary>
            Cmap table's end
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.c_cmapBeginRange">
            <summary>
            Cmap's begin range marker.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.c_cmapEndRange">
            <summary>
            Cmap's end range marker.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.c_cmapNextRangeValue">
            <summary>
            Cmap's next range default value
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.c_registry">
            <summary>
            Default registry's value
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.c_defWidthIndex">
            <summary>
            Index of the default symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.c_cidStreamLength">
            <summary>
            Length of Cid Stream
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.m_fontStream">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.m_filePath">
            <summary>
            Path to ttf file.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.m_size">
            <summary>
            Size of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.m_metrics">
            <summary>
            Font metrics.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.m_fontDictionary">
            <summary>
            Pdf primitive describing the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.m_descendantFont">
            <summary>
            Descendant font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.m_fontProgram">
            <summary>
            Font program.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.m_cmap">
            <summary>
            Cmap stream.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.m_ttfReader">
            <summary>
            ttf reader object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.m_usedChars">
            <summary>
            Array of used chars.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.m_subsetName">
            <summary>
            Name of the font subset.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.m_ttfMetrics">
            <summary>
            Ttf metrics structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.m_type">
            <summary>
            Specifies the composite font types.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.#ctor(System.IO.Stream,System.Single,Syncfusion.Pdf.Graphics.CompositeFontType)">
            <summary>
            creates a new object.
            </summary>
            <param name="font">Font object.</param>
            <param name="size">Font size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.#ctor(Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont)">
            <summary>
            Creates a new object from a prototype object.
            </summary>
            <param name="prototype">Prototype object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.SetSymbols(System.String)">
            <summary>
            Stores used symbols.
            </summary>
            <param name="text">String text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.SetSymbols(System.UInt16[])">
            <summary>
            Stores used symbols.
            </summary>
            <param name="glyphs">Glyphs, used by the line of the text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.Syncfusion#Pdf#Graphics#ITrueTypeFont#GetInternals">
            <summary>
            Gets Pdf primitive reprsenting font.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.Syncfusion#Pdf#Graphics#ITrueTypeFont#EqualsToFont(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Checks whether fonts are equals.
            </summary>
            <param name="font">Font to compare.</param>
            <returns>True if fonts are equal, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.Syncfusion#Pdf#Graphics#ITrueTypeFont#CreateInternals">
            <summary>
            Creates font internals.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.Syncfusion#Pdf#Graphics#ITrueTypeFont#GetCharWidth(System.Char)">
            <summary>
            Returns width of the char symbol.
            </summary>
            <param name="charCode">Char symbol.</param>
            <returns>Width of the char symbol in universal units.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.Syncfusion#Pdf#Graphics#ITrueTypeFont#GetLineWidth(System.String)">
            <summary>
            Returns width of the text line.
            </summary>
            <param name="line">String line.</param>
            <returns>Width of the char symbol in universal units.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.Syncfusion#Pdf#Graphics#ITrueTypeFont#Close">
            <summary>
            All resources are being to be closed.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.Initialize(System.IO.Stream)">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.InitializeMetrics">
            <summary>
            Initializes metrics.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.CreateFontProgram">
            <summary>
            Creates font program.
            </summary>
            <returns>Font program.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.GenerateFontProgram">
            <summary>
            Generates font program.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.CreateFontDictionary">
            <summary>
            Generates font dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.CreateDescendantFont">
            <summary>
            Creates descendant font.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.CreateCmap">
            <summary>
            Creates cmap.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.GenerateCmap">
            <summary>
            Creates cmap.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.CreateSystemInfo">
            <summary>
            Creates system info dictionary for CID font.
            </summary>
            <returns>Pdf primitive.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.CreateFontDescriptor">
            <summary>
            Creates font descriptor.
            </summary>
            <returns>Pdf primitive.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.FormatName(System.String)">
            <summary>
            Generates name of the font.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.GetFontName">
            <summary>
            Gets random string.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.GetDescendantWidth">
            <summary>
            Gets width description pad array for cid font.
            </summary>
            <returns>Width description pad array for cid font.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.ToHexString(System.Int32)">
            <summary>
            Converts integer of decimal system to hex integer.
            </summary>
            <param name="n">Integer to be converted.</param>
            <returns>Hex string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.GetDescriptorFlags">
            <summary>
            Calculates flags for the font descriptor.
            </summary>
            <returns>Flags for the font descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.GetBoundBox">
            <summary>
            Calculates BoundBox of the descriptor.
            </summary>
            <returns>BoundBox of the descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.FontDictionaryBeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Runs before font Dictionary will be saved.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="ars">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.FontProgramBeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Runs before font program stream save.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="ars">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.CmapBeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Runs before cmap will be saved.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="ars">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.DescendantFontBeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Runs before font Dictionary will be saved.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="ars">Event arguments.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.Syncfusion#Pdf#Graphics#ITrueTypeFont#Size">
            <summary>
            Gets size of the font.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.Syncfusion#Pdf#Graphics#ITrueTypeFont#Metrics">
            <summary>
            Gets font metrics.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.TtfReader">
            <summary>
            Gets ttf reader.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.FontFile">
            <summary>
            Gets path to the font file if the font was created from a file.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.TtfMetrics">
            <summary>
            Gets TtfMetrics structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.UnicodeTrueTypeFont.FontType">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfFontStyle">
            <summary>
            Specifies style information applied to text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFontStyle.Regular">
            <summary>
            Normal text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFontStyle.Bold">
            <summary>
            Bold text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFontStyle.Italic">
            <summary>
            Italic text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFontStyle.Underline">
            <summary>
            Represents the underline text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFontStyle.Strikeout">
            <summary>
            Strikeout text.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfFontFamily">
            <summary>
            Indicates type of standard PDF fonts.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFontFamily.Helvetica">
            <summary>
            Represents the Helvetica font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFontFamily.Courier">
            <summary>
            Represents the Courier font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFontFamily.TimesRoman">
            <summary>
            Represents the Times Roman font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFontFamily.Symbol">
            <summary>
            Represents the Symbol font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFontFamily.ZapfDingbats">
            <summary>
            Represents the ZapfDingbats font.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfCjkFontFamily">
            <summary>
            Specifies the type of CJK font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfCjkFontFamily.HanyangSystemsGothicMedium">
            <summary>
            Represents the Hanyang Systems Gothic Medium font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfCjkFontFamily.HanyangSystemsShinMyeongJoMedium">
            <summary>
            Represents the Hanyang Systems shin myeong Jo Medium font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfCjkFontFamily.HeiseiKakuGothicW5">
            <summary>
            Represents the Heisei kaku GothicW5 font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfCjkFontFamily.HeiseiMinchoW3">
            <summary>
            Represents the Heisei MinchoW3 font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfCjkFontFamily.MonotypeHeiMedium">
            <summary>
            Represents the Monotype Hei Medium font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfCjkFontFamily.MonotypeSungLight">
            <summary>
            Represents the monotype sung Light font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfCjkFontFamily.SinoTypeSongLight">
            <summary>
            Represents the sinotype song light font.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfFontType">
            <summary>
            Specifies the type of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFontType.Standard">
            <summary>
            Indicates the standard Adobe fonts.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFontType.TrueType">
            <summary>
            Indicates the non-embedded TrueType fonts.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFontType.TrueTypeEmbedded">
            <summary>
            Indicates the Embedded TrueType fonts.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfWordWrapType">
            <summary>
            Specifies the types of text wrapping.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfWordWrapType.None">
            <summary>
            Text wrapping between lines when formatting within a rectangle is disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfWordWrapType.Word">
            <summary>
            Text is wrapped by words. If there is a word that is longer than bounds' width, this word is wrapped by characters.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfWordWrapType.WordOnly">
            <summary>
            Text is wrapped by words. If there is a word that is longer than bounds' width, it won't be wrapped at all
            and the process will be finished.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfWordWrapType.Character">
            <summary>
            Text is wrapped by characters. In this case the word at the end of the text line can be split.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfSubSuperScript">
            <summary>
            Specifies type of the SubSuperScript.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfSubSuperScript.None">
            <summary>
            Specifies no subscript or superscript.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfSubSuperScript.SuperScript">
            <summary>
            Specifies superscript format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfSubSuperScript.SubScript">
            <summary>
            Specifies subscript format.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.TtfPlatformID">
            <summary>
            Ttf platform ID.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfPlatformID.AppleUnicode">
            <summary>
            Apple platform.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfPlatformID.Macintosh">
            <summary>
            Macintosh platform.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfPlatformID.Iso">
            <summary>
            Iso platform.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfPlatformID.Microsoft">
            <summary>
            Microsoft platform.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.TtfNameID">
            <summary>
            Ttf Name ID.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfNameID.Copyright">
            <summary>
            The Copyright
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfNameID.FontFamily">
            <summary>
            The Font Family
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfNameID.FontSubFamily">
            <summary>
            The Font Sub Family
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfNameID.FontIdentifier">
            <summary>
            The Font Identifier
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfNameID.FontName">
            <summary>
            The Font Name
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfNameID.Version">
            <summary>
            The Version
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfNameID.PostScriptName">
            <summary>
            The PostScriptName
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfNameID.Trademark">
            <summary>
            The Trademark
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.TtfCmapEncoding">
            <summary>
            Enumerator that implements CMAP encodings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCmapEncoding.Unknown">
            <summary>
            Unknown encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCmapEncoding.Symbol">
            <summary>
            When building a symbol font for Windows.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCmapEncoding.Unicode">
            <summary>
            When building a Unicode font for Windows.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCmapEncoding.Macintosh">
            <summary>
            For font that will be used on a Macintosh.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.TtfMicrosoftEncodingID">
            <summary>
            Microsoft encoding ID
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfMicrosoftEncodingID.Undefined">
            <summary>
            Undefined encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfMicrosoftEncodingID.Unicode">
            <summary>
            Unicode encoding.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.TtfMacintoshEncodingID">
            <summary>
            Macintosh encoding ID.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfMacintoshEncodingID.Roman">
            <summary>
            Roman encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfMacintoshEncodingID.Japanese">
            <summary>
            Japanese encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfMacintoshEncodingID.Chinese">
            <summary>
            Chinese encoding.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.TtfCmapFormat">
            <summary>
            Enumerator that implements CMAP formats.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCmapFormat.Apple">
            <summary>
            This is the Apple standard character to glyph index mapping table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCmapFormat.Microsoft">
            <summary>
            This is the Microsoft standard character to glyph index mapping table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCmapFormat.Trimmed">
            <summary>
            Format 6: Trimmed table mapping.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.TtfCompositeGlyphFlags">
            <summary>
            ttf composite glyph flags.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCompositeGlyphFlags.ARG_1_AND_2_ARE_WORDS">
            <summary>
            The ARG_1_AND_2_ARE_WORDS.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCompositeGlyphFlags.ARGS_ARE_XY_VALUES">
            <summary>
            The ARGS_ARE_XY_VALUES.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCompositeGlyphFlags.ROUND_XY_TO_GRID">
            <summary>
            The ROUND_XY_TO_GRID.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCompositeGlyphFlags.WE_HAVE_A_SCALE">
            <summary>
            The WE_HAVE_A_SCALE.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCompositeGlyphFlags.RESERVED">
            <summary>
            The RESERVED.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCompositeGlyphFlags.MORE_COMPONENTS">
            <summary>
            The MORE_COMPONENTS.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCompositeGlyphFlags.WE_HAVE_AN_X_AND_Y_SCALE">
            <summary>
            The WE_HAVE_AN_X_AND_Y_SCALE.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCompositeGlyphFlags.WE_HAVE_A_TWO_BY_TWO">
            <summary>
            The WE_HAVE_A_TWO_BY_TWO.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCompositeGlyphFlags.WE_HAVE_INSTRUCTIONS">
            <summary>
            The WE_HAVE_INSTRUCTIONS.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TtfCompositeGlyphFlags.USE_MY_METRICS">
            <summary>
            The USE_MY_METRICS.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.FontEncoding">
            <summary>
            Character set encoding type of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontEncoding.Unknown">
            <summary>
            Unknown encoding
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontEncoding.StandardEncoding">
            <summary>
            Adobe standard Latin-text encoding
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontEncoding.MacRomanEncoding">
            <summary>
            Mac OS standard encoding
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontEncoding.MacExpertEncoding">
            <summary>
            An encoding for use with expert fonts
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontEncoding.WinAnsiEncoding">
            <summary>
            Windows Code Page 1252
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontEncoding.PDFDocEncoding">
            <summary>
            Encoding for text strings in a PDF document outside the document's content streams.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontEncoding.IdentityH">
            <summary>
            The horizontal identity mapping for 2-byte CIDs; may be used with CIDFonts using any
            Registry, Ordering, and Supplement values. It maps 2-byte character codes ranging from
            0 to 65,535 to the same 2-byte CID value, interpreted high-order byte first.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.FontDescriptorFlags">
            <summary>
            Enumerator that implements font descriptor flags.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontDescriptorFlags.FixedPitch">
            <summary>
            All glyphs have the same width (as opposed to proportional or variable-pitch
            fonts, which have different widths).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontDescriptorFlags.Serif">
            <summary>
            Glyphs have serifs, which are short strokes drawn at an angle on the top and
            bottom of glyph stems (as opposed to sans serif fonts, which do not).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontDescriptorFlags.Symbolic">
            <summary>
            Font contains glyphs outside the Adobe standard Latin character set. The
            flag and the nonsymbolic flag cannot both be set or both be clear.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontDescriptorFlags.Script">
            <summary>
            Glyphs resemble cursive handwriting.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontDescriptorFlags.Nonsymbolic">
            <summary>
            Font uses the Adobe standard Latin character set or a subset of it.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontDescriptorFlags.Italic">
            <summary>
            Glyphs have dominant vertical strokes that are slanted.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontDescriptorFlags.ForceBold">
            <summary>
            Bold font.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.CompositeFontType">
            <summary>
            Specifies the composite font types.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CompositeFontType.Type0">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.CompositeFontType.TrueType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfTableInfo">
            <summary>
            Holds offset for TTF table from beginning of TrueType font file.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableInfo.Offset">
            <summary>
            Gets or sets ofset from beginning of TrueType font file.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableInfo.Length">
            <summary>
            Gets or sets length of this table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableInfo.Checksum">
            <summary>
            Gets or sets table checksum.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.TtfTableInfo.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Pdf.Graphics.Fonts.TtfTableInfo"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics">
            <summary>
            ttf metrics.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.LineGap">
            <summary>
            Typographic line gap.
            Negative LineGap values are treated as DEF_TABLE_CHECKSUM.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.ContainsCFF">
            <summary>
            Gets or sets contains CFF.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.IsSymbol">
            <summary>
            Gets or sets value indicating if Symbol font is used.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.FontBox">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.IsFixedPitch">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.ItalicAngle">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.PostScriptName">
            <summary>
            Gets or sets post-script font name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.FontFamily">
            <summary>
            Gets or sets font family name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.CapHeight">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.Leading">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.MacAscent">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.MacDescent">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.WinDescent">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.WinAscent">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.StemV">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.WidthTable">
            <summary>
            Gets or sets widths table for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.MacStyle">
            <summary>
            Regular: 0
            Bold: 1
            Italic: 2
            Bold Italic: 3
            Bit 0- bold (if set to 1)
            Bit 1- italic (if set to 1)
            Bits 2-15- reserved (set to 0).
            NOTE:
            Note that macStyle bits must agree with the 'OS/2' table fsSelection bits.
            The fsSelection bits are used over the macStyle bits in Microsoft Windows.
            The PANOSE values and 'post' table values are ignored for determining bold or italic fonts.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.SubScriptSizeFactor">
            <summary>
            Subscript size factor.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.SuperscriptSizeFactor">
            <summary>
            Superscript size factor.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.IsItalic">
            <summary>
            Gets a value indicating whether this instance is italic.
            </summary>
            <value><c>true</c> if this instance is italic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.TtfMetrics.IsBold">
            <summary>
            Gets a value indicating whether this instance is bold.
            </summary>
            <value><c>true</c> if this instance is bold; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfNameTable">
            <summary>
            name ttf table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfNameTable.FormatSelector">
            <summary>
            Local variable to store Format Selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfNameTable.RecordsCount">
            <summary>
            Local variable to store Records Count.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfNameTable.Offset">
            <summary>
            Local variable to store Offset.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfNameTable.NameRecords">
            <summary>
            Local variable to store Name Records.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfNameRecord">
            <summary>
            Name record.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfNameRecord.PlatformID">
            <summary>
            The PlatformID.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfNameRecord.EncodingID">
            <summary>
            The EncodingID.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfNameRecord.LanguageID">
            <summary>
            The PlatformIDLanguageID
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfNameRecord.NameID">
            <summary>
            The NameID.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfNameRecord.Length">
            <summary>
            The Length.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfNameRecord.Offset">
            <summary>
            The Offset.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfNameRecord.Name">
            <summary>
            The Name.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames">
            <summary>
            Names of the tables.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames.cmap">
            <summary>
            The cmap.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames.glyf">
            <summary>
            The glyf.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames.head">
            <summary>
            The head.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames.hhea">
            <summary>
            The hhea.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames.hmtx">
            <summary>
            The cmap.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames.loca">
            <summary>
            The loca.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames.maxp">
            <summary>
            The maxp.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames.name">
            <summary>
            The cmap.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames.post">
            <summary>
            The post.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames.OS2">
            <summary>
            The OS2.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames.CFF">
            <summary>
            The CFF.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames.cvt">
            <summary>
            The cvt.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames.fpgm">
            <summary>
            The fpgm.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTableNames.prep">
            <summary>
            The prep.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable">
            <summary>
            Head table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.Modified">
            <summary>
            Modified: International date (8-byte field).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.Created">
            <summary>
            Created: International date (8-byte field).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.MagicNumber">
            <summary>
            MagicNumber: Set to 0x5F0F3CF5.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.CheckSumAdjustment">
            <summary>
            CheckSumAdjustment: To compute: set it to 0, sum the entire font as ULONG,
            then store 0xB1B0AFBA - sum.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.FontRevision">
            <summary>
            FontRevision: Set by font manufacturer.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.Version">
            <summary>
            Table version number: 0x00010000 for version 1.0.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.XMin">
            <summary>
            Minimum x for all glyph bounding boxes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.YMin">
            <summary>
            Minimum y for all glyph bounding boxes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.UnitsPerEm">
            <summary>
            Valid range is from 16 to 16384.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.YMax">
            <summary>
            Maximum y for all glyph bounding boxes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.XMax">
            <summary>
            Maximum x for all glyph bounding boxes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.MacStyle">
            <summary>
            Regular: 0
            Bold: 1
            Italic: 2
            Bold Italic: 3
            Bit 0 - bold (if set to 1)
            Bit 1 - italic (if set to 1)
            Bits 2-15 - reserved (set to 0)
            NOTE:
            Note that macStyle bits must agree with the 'OS/2' table fsSelection bits.
            The fsSelection bits are used over the macStyle bits in Microsoft Windows.
            The PANOSE values and 'post' table values are ignored for determining bold or italic fonts.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.Flags">
            <summary>
            Bit 0 - baseline for font at y=0
            Bit 1 - left SideBearing at x=0
            Bit 2 - instructions may depend on point size
            Bit 3 - force ppem to integer values for all private scaler math; may use fractional ppem sizes if this bit is clear
            Bit 4 - instructions may alter advance width (the advance widths might not scale linearly)
            Note: All other bits must be zero.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.LowestRecPPEM">
            <summary>
            LowestRecPPEM: Smallest readable size in pixels.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.FontDirectionHint">
            <summary>
            FontDirectionHint:
            0   Fully mixed directional glyphs
            1   Only strongly left to right
            2   Like 1 but also contains neutrals
            -1   Only strongly right to left
            -2   Like -1 but also contains neutrals.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.IndexToLocFormat">
            <summary>
            0 for short offsets, 1 for long.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHeadTable.GlyphDataFormat">
            <summary>
            0 for current format.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable">
            <summary>
            This table contains information for horizontal layout.
            The values in the minRightSidebearing, minLeftSideBearing, and xMaxExtent should be computed
            using only glyphs that have contours.
            Glyphs with no contours should be ignored for the purpose of these calculations.
            All reserved areas must be set to 0.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.Version">
            <summary>
            Version.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.Ascender">
            <summary>
            Typographic ascent.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.AdvanceWidthMax">
            <summary>
            Maximum advance width value in HTML table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.Descender">
            <summary>
            Typographic descent.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.NumberOfHMetrics">
            <summary>
            Number of hMetric entries in HTML table;
            may be smaller than the total number of glyphs in the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.LineGap">
            <summary>
            Typographic line gap. Negative LineGap values are treated as DEF_TABLE_CHECKSUM
            in Windows 3.1, System 6, and System 7.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.MinLeftSideBearing">
            <summary>
            Minimum left SideBearing value in HTML table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.MinRightSideBearing">
            <summary>
            Minimum right SideBearing value; calculated as Min(aw - lsb - (xMax - xMin)).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.XMaxExtent">
            <summary>
            Max(lsb + (xMax - xMin)).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.CaretSlopeRise">
            <summary>
            Used to calculate the slope of the cursor (rise/run); 1 for vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.CaretSlopeRun">
            <summary>
            0 for vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.MetricDataFormat">
            <summary>
            0 for current format.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table">
            <summary>
            The OS/2 table consists of a set of metrics that are required by Windows and OS/2.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.Version">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.XAvgCharWidth">
            <summary>
            The Average Character Width parameter specifies
            the arithmetic average of the escapement (width)
            of all of the 26 lowercase letters a through z of the Latin alphabet
            and the space character. If any of the 26 lowercase letters are not present,
            this parameter should equal the weighted average of all glyphs in the font.
            For non-UGL (platform 3, encoding 0) fonts, use the unweighted average.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UsWeightClass">
            <summary>
            Indicates the visual weight (degree of blackness or thickness of strokes)
            of the characters in the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UsWidthClass">
            <summary>
            Indicates a relative change from the normal aspect ratio (width to height ratio)
            as specified by a font designer for the glyphs in a font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.FsType">
            <summary>
            Indicates font embedding licensing rights for the font.
            Embeddable fonts may be stored in a document.
            When a document with embedded fonts is opened on a system that does not have the font installed
            (the remote system), the embedded font may be loaded for temporary (and in some cases, permanent)
            use on that system by an embedding-aware application.
            Embedding licensing rights are granted by the vendor of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.YSubscriptXSize">
            <summary>
            The recommended horizontal size in font design units for subscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.YSubscriptYSize">
            <summary>
            The recommended vertical size in font design units for subscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.YSubscriptXOffset">
            <summary>
            The recommended horizontal offset in font design units for subscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.YSubscriptYOffset">
            <summary>
            The recommended vertical offset in font design units from the baseline for subscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.ySuperscriptXSize">
            <summary>
            The recommended horizontal size in font design units for superscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.YSuperscriptYSize">
            <summary>
            The recommended vertical size in font design units for superscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.YSuperscriptXOffset">
            <summary>
            The recommended horizontal offset in font design units for superscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.YSuperscriptYOffset">
            <summary>
            The recommended vertical offset in font design units from the baseline for superscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.YStrikeoutSize">
            <summary>
            Width of the strikeout stroke in font design units.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.YStrikeoutPosition">
            <summary>
            The position of the strikeout stroke relative to the baseline in font design units.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.SFamilyClass">
            <summary>
            This parameter is a classification of font-family design.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.Panose">
            <summary>
            This 10 byte series of numbers are used to describe the visual characteristics
            of a given typeface.  These characteristics are then used to associate the font with
            other fonts of similar appearance having different names. The variables for each digit are listed below.
            The specifications for each variable can be obtained in the specification
            PANOSE v2.0 Numerical Evaluation from Microsoft or Elseware Corporation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UlUnicodeRange1">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UlUnicodeRange2">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UlUnicodeRange3">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UlUnicodeRange4">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.AchVendID">
            <summary>
            The four character identifier for the vendor of the given type face.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.FsSelection">
            <summary>
            Information concerning the nature of the font patterns.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UsFirstCharIndex">
            <summary>
            The minimum Unicode index (character code) in this font,
            according to the cmap subtable for platform ID 3 and encoding ID 0 or 1.
            For most fonts supporting Win-ANSI or other character sets, this value would be 0x0020.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UsLastCharIndex">
            <summary>
            usLastCharIndex: The maximum Unicode index (character code) in this font,
            according to the cmap subtable for platform ID 3 and encoding ID 0 or 1.
            This value depends on which character sets the font supports.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.STypoAscender">
            <summary>
            The typographic ascender for this font.
            Remember that this is not the same as the Ascender value in the 'hhea' table,
            which Apple defines in a far different manner.
            DEF_TABLE_OFFSET good source for usTypoAscender is the Ascender value from an AFM file.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.STypoDescender">
            <summary>
            The typographic descender for this font.
            Remember that this is not the same as the Descender value in the 'hhea' table,
            which Apple defines in a far different manner.
            DEF_TABLE_OFFSET good source for usTypoDescender is the Descender value from an AFM file.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.STypoLineGap">
            <summary>
            The typographic line gap for this font.
            Remember that this is not the same as the LineGap value in the 'hhea' table,
            which Apple defines in a far different manner.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UsWinAscent">
            <summary>
            The ascender metric for Windows.
            This too is distinct from Apple's Ascender value and from the usTypoAscender values.
            usWinAscent is computed as the yMax for all characters in the Windows ANSI character set.
            usTypoAscent is used to compute the Windows font height and default line spacing.
            For platform 3 encoding 0 fonts, it is the same as yMax.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UsWinDescent">
            <summary>
            The descender metric for Windows.
            This too is distinct from Apple's Descender value and from the usTypoDescender values.
            usWinDescent is computed as the -yMin for all characters in the Windows ANSI character set.
            usTypoAscent is used to compute the Windows font height and default line spacing.
            For platform 3 encoding 0 fonts, it is the same as -yMin.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UlCodePageRange1">
            <summary>
            This field is used to specify the code pages encompassed
            by the font file in the 'cmap' subtable for platform 3, encoding ID 1 (Microsoft platform).
            If the font file is encoding ID 0, then the Symbol Character Set bit should be set.
            If the bit is set (1) then the code page is considered functional.
            If the bit is clear (0) then the code page is not considered functional.
            Each of the bits is treated as an independent flag and the bits can be set in any combination.
            The determination of "functional" is left up to the font designer,
            although character set selection should attempt to be functional by code pages if at all possible.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UlCodePageRange2">
            <summary>
            This field is used to specify the code pages encompassed
            by the font file in the 'cmap' subtable for platform 3, encoding ID 1 (Microsoft platform).
            If the font file is encoding ID 0, then the Symbol Character Set bit should be set.
            If the bit is set (1) then the code page is considered functional.
            If the bit is clear (0) then the code page is not considered functional.
            Each of the bits is treated as an independent flag and the bits can be set in any combination.
            The determination of "functional" is left up to the font designer,
            although character set selection should attempt to be functional by code pages if at all possible.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.SxHeight">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.SCapHeight">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UsDefaultChar">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UsBreakChar">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfOS2Table.UsMaxContext">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfPostTable">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfPostTable.FormatType">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfPostTable.ItalicAngle">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfPostTable.UnderlinePosition">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfPostTable.UnderlineThickness">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfPostTable.IsFixedPitch">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfPostTable.MinMemType42">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfPostTable.MaxMemType42">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfPostTable.MinMemType1">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfPostTable.MaxMemType1">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfLongHorMertric">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfLongHorMertric.AdvanceWidth">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfLongHorMertric.Lsb">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfCmapTable">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfCmapTable.Version">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfCmapTable.TablesCount">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfCmapSubTable">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfCmapSubTable.PlatformID">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfCmapSubTable.EncodingID">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfCmapSubTable.Offset">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfAppleCmapSubTable">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfAppleCmapSubTable.Format">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfAppleCmapSubTable.Length">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfAppleCmapSubTable.Version">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfTrimmedCmapSubTable">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTrimmedCmapSubTable.Format">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTrimmedCmapSubTable.Length">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTrimmedCmapSubTable.Version">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTrimmedCmapSubTable.FirstCode">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfTrimmedCmapSubTable.EntryCount">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.Format">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.Length">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.Version">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.SegCountX2">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.SearchRange">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.EntrySelector">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.RangeShift">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.EndCount">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.ReservedPad">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.StartCount">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.IdDelta">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.IdRangeOffset">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.GlyphID">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfGlyphInfo">
            <summary>
            Holds glyph info and its width of character.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfGlyphInfo.Index">
            <summary>
            Holds glyph index.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfGlyphInfo.Width">
            <summary>
            Holds character's width.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfGlyphInfo.CharCode">
            <summary>
            Code of the char symbol.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Fonts.TtfGlyphInfo.CompareTo(System.Object)">
            <summary>
            Compares two WidthDescriptor objects.
            </summary>
            <param name="obj">Another object for comparing.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Fonts.TtfGlyphInfo.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Pdf.Graphics.Fonts.TtfGlyphInfo"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfLocaTable">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfLocaTable.Offsets">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Fonts.TtfGlyphHeader">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfGlyphHeader.numberOfContours">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfGlyphHeader.XMin">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfGlyphHeader.YMin">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfGlyphHeader.XMax">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Fonts.TtfGlyphHeader.YMax">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Images.Decoder.BmpDecoder.DecodeRGBImage">
            <summary>
            Decodes the un-compressed RGB image.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Images.Decoder.JpegDecoder.c_SoiMarker">
            <summary>
            Start of image marker.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Images.Decoder.JpegDecoder.c_JfifMarker">
            <summary>
            JFIF marker.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Images.Decoder.JpegDecoder.c_SosMarker">
            <summary>
            Start of scan marker.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Images.Decoder.JpegDecoder.c_EoiMarker">
            <summary>
            End of image marker.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Images.Decoder.PngDecoder.PngHeader.Width">
            <summary>
            Indicates the width of the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Images.Decoder.PngDecoder.PngHeader.Height">
            <summary>
            Indicates the height of the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Images.Decoder.PngDecoder.PngHeader.ColorType">
            <summary>
            Indicates the Png image type.
            <remarks>Possible values : 0,2,3,4 and 6.</remarks>
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Images.Decoder.PngDecoder.PngHeader.Compression">
            <summary>
            Indicates the type of compression.
            <remarks>
            0 - Zlib Compression
            </remarks>
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Images.Decoder.PngDecoder.PngHeader.BitDepth">
            <summary>
            Indicates the number of bits per sample or per palette index.
            <remarks>Valid values are : 1,2,4,8 and 16.</remarks>
            |-----------------------------------------|
            | ColorType | BitDepth   | ImageType      |
            |-----------------------------------------|
            |     0     | 1,2,4,8,16 | GrayScale      |
            |     2     | 8,16       | TrueColor      |
            |     3     | 1,2,4,8    | Indexed PLTE   |
            |     4     | 8,16       | GrayScaleAlpha |
            |     6     | 8,16       | TrueColorAlpha |
            |------------------------------------------
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Images.Decoder.PngDecoder.PngHeader.Filter">
            <summary>
            Indicates the preprocessing method applied to the image data before compression.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Images.Decoder.PngDecoder.PngHeader.Interlace">
            <summary>
            Indicates the transmission order of the image data.
            <remarks>Possible values : 0 and 1</remarks>
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfBitmap">
            <summary>
            Represents the bitmap images.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfImage">
            <summary>
            Represents the base class for images.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfImage.FromStream(System.IO.Stream)">
            <summary>
            Creates PdfImage from stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Returns a created PdfImage object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfImage.CheckStreamExistance(System.IO.Stream)">
            <summary>
            Checks the stream existence.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The stream if it exists.</returns>
            <exception cref="T:System.ArgumentNullException">It's thrown if the stream is null.</exception>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfImage.GetPixelSize(System.Single,System.Single)">
            <summary>
            Calculates the width and height of the image.
            </summary>
            <param name="width">Width of the image in points.</param>
            <param name="height">Height of the image in points.</param>
            <returns> Calculates the width and height of the image.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfImage.Save">
            <summary>
            Saves the image into stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfImage.SetContent(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Sets the content stream.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfImage.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfImage.GetBoundsInternal">
            <summary>
            Gets bounds of image.
            </summary>
            <remarks>The DPI is standard, not image DPI.</remarks>
            <returns>Bounds of image.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfImage.GetPointSize(System.Single,System.Single)">
            <summary>
            Calculates size of the image in points.
            </summary>
            <param name="width">Width in pixels.</param>
            <param name="height">Height in pixels.</param>
            <returns>size of the image in points.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfImage.GetPointSize(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates size of the image in points.
            </summary>
            <param name="width">Width in pixels.</param>
            <param name="height">Height in pixels.</param>
            <param name="horizontalResolution">Horizontal resolution.</param>
            <param name="verticalResolution">Vertical resolution.</param>
            <returns>size of the image in points.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfImage.SetResolution(System.Single,System.Single)">
            <summary>
            Sets resolution of the image.
            </summary>
            <param name="horizontalResolution">Horizontal resolution of the image.</param>
            <param name="verticalResolution">Vertical resolution of the image.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfImage.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBitmap.#ctor(System.IO.Stream)">
            <summary>
            Creates new PdfBitmap instance.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBitmap.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.Pdf.Graphics.PdfBitmap"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBitmap.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBitmap.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.
            </summary>
            <param name="disposing">if it is disposing, set to <c>true</c>.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBitmap.Save">
            <summary>
            Saves the image into stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBitmap.SaveAsJpg">
            <summary>
            Saves the image as JPG.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBitmap.SaveAsRawImage">
            <summary>
            Saves the current image as pixel matrix.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBitmap.SetMask">
            <summary>
            Sets the mask for image.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBitmap.SaveRequiredItems">
            <summary>
            Saves the required items.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBitmap.SaveImageByFormat">
            <summary>
            Saves the image by pixel format.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBitmap.SaveImage(Syncfusion.Pdf.Primitives.PdfArray)">
            <summary>
            Saves the image.
            </summary>
            <param name="filters">The image filters.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBitmap.SetColorSpace">
            <summary>
            Sets the color space.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBitmap.SaveAddtionalItems">
            <summary>
            Saves the additional items.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfColorMask">
            <summary>
            Represents the color mask for bitmaps.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfMask">
            <summary>
            Base class for bitmap masking objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColorMask.m_startColor">
            <summary>
            Holds start color of color mask.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColorMask.m_endColor">
            <summary>
            Holds end color of color mask.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColorMask.#ctor(Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Creates new PdfColorMask object.
            </summary>
            <param name="startColor">The start color.</param>
            <param name="endColor">The end color.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColorMask.StartColor">
            <summary>
            Gets or sets the start color.
            </summary>
            <value>The start color.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColorMask.EndColor">
            <summary>
            Gets or sets the end color.
            </summary>
            <value>The end color.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfColor">
            <summary>
            Implements structures and routines working with color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.MaxColourChannelValue">
             <property name="flag" value="Finished" />
            
             <summary>
             Max value of color channel.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.s_rgbStrings">
             <property name="flag" value="Finished" />
            
             <summary>
             Holds RGB colors converted into strings.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.s_grayStringsSroke">
             <property name="flag" value="Finished" />
            
             <summary>
             Holds Grayscale colors converted into strings for stroking.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.s_grayStringsFill">
             <property name="flag" value="Finished" />
            
             <summary>
             Holds Grayscale colors converted into strings for filling.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.s_emptyColor">
             <property name="flag" value="Finished" />
            
             <summary>
             Holds the system-wide empty PDF color.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.m_red">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Red channel.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.m_cyan">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Cyan channel.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.m_green">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Green channel.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.m_magenta">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Magenta channel.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.m_blue">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Blue channel.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.m_yellow">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Yellow channel.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.m_black">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Black channel.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.m_gray">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Gray channel.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.m_alpha">
             <property name="flag" value="Finished" />
            
             <summary>
             Alpha channel.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColor.m_isFilled">
             <property name="flag" value="Finished" />
            
             <summary>
             Shows if the color is empty.
             </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.#ctor(Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfColor"/> class.
            </summary>
            <param name="color">Source color object.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfColor"/> class.
            </summary>
            <param name="color">Source color object.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfColor"/> class.
            </summary>
            <param name="gray">Gray value.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfColor"/> class.
            </summary>
            <param name="red">Red channel value.</param>
            <param name="green">Green channel value.</param>
            <param name="blue">Blue channel value.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfColor"/> class.
            </summary>
            <param name="red">The red colour value in the range from 0.0 to 1.0.</param>
            <param name="green">The green value in the range from 0.0 to 1.0.</param>
            <param name="blue">The blue value in the range from 0.0 to 1.0.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfColor"/> class.
            </summary>
            <param name="cyan">Cyan channel value.</param>
            <param name="magenta">Magenta channel value.</param>
            <param name="yellow">Yellow channel value.</param>
            <param name="black">Black channel value.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
             <property name="flag" value="Finished" />
            
             <summary>
             Creates new object.
             </summary>
             <param name="a">Alpha channel.</param>
             <param name="red">Red channel value.</param>
             <param name="green">Green channel value.</param>
             <param name="blue">Blue channel value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.ToArgb">
            <summary>
            Creates the Alpha ,Red ,Green, and Blue value of this PDFColor structure.
            </summary>
            <returns>ARGB value.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.op_Implicit(System.Drawing.Color)~Syncfusion.Pdf.Graphics.PdfColor">
            <summary>
            Implicit operator.
            </summary>
            <param name="color">System.Drawing.Color.</param>
            <returns>PDFColor.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.op_Implicit(Syncfusion.Pdf.Graphics.PdfColor)~System.Drawing.Color">
            <summary>
            Implicit operator.
            </summary>
            <param name="color">System.Drawing.Color.</param>
            <returns>PDFColor.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.op_Equality(Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Operator ==.
            </summary>
            <param name="colour1">The color 1.</param>
            <param name="colour2">The color 2.</param>
            <returns>
            True if color 1 is equal to color 2; otherwise False.
            </returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.op_Inequality(Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Operator !=.
            </summary>
            <param name="colour1">The color 1.</param>
            <param name="colour2">The color 2.</param>
            <returns>
            True if color 1 is not equal to color 2; otherwise False.
            </returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>
            is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to
            compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal
            to the current <see cref="T:System.Object"/>; otherwise -
            False.
            </returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.Equals(Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Determines if the specified color is equal to this one.
            </summary>
            <param name="colour">The color.</param>
            <returns>
            True if the color is equal; otherwise - False.
            </returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for
            use in hashing algorithms and data structures like a hash
            table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.RGBToString(System.Boolean)">
             <property name="flag" value="Finished" />
            
             <summary>
             Sets RGB color.
             </summary>
             <param name="ifStroking">If color stroking.</param>
             <returns>
             Result string.
             </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.CalRGBToString(System.Boolean)">
            <summary>
            Sets Calibrated RGB color.
            </summary>
            <param name="ifStroking"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.CalLabToString(System.Boolean)">
            <summary>
            Sets Calibrated Lab color.
            </summary>
            <param name="ifStroking"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.CalGrayscaleToString(System.Boolean)">
            <summary>
            Sets Calibrated Gray color.
            </summary>
            <param name="ifStroking"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.IccRGBToString(System.Boolean)">
            <summary>
            Sets Calibrated RGB color.
            </summary>
            <param name="ifStroking"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.CalCMYKToString(System.Boolean)">
            <summary>
            Sets Calibrated CMYK color.
            </summary>
            <param name="ifStroking"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.IccLabToString(System.Boolean)">
            <summary>
            Sets Calibrated Lab color.
            </summary>
            <param name="ifStroking"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.IccGrayscaleToString(System.Boolean)">
            <summary>
            Sets Calibrated Gray color.
            </summary>
            <param name="ifStroking"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.GrayscaleToString(System.Boolean)">
             <property name="flag" value="Finished" />
            
             <summary>
             Sets gray color.
             </summary>
             <param name="ifStroking">If color stroking.</param>
             <returns>
             Result string.
             </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.CMYKToString(System.Boolean)">
             <property name="flag" value="Finished" />
            
             <summary>
             Sets CMYK color.
             </summary>
             <param name="ifStroking">If color stroking.</param>
             <returns>
             Result string.
             </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.RGBToStringBuilder(System.Text.StringBuilder,System.Boolean)">
             <property name="flag" value="Finished" />
            
             <summary>
             Writes RGB colour to string builder.
             </summary>
             <param name="sb">The string builder.</param>
             <param name="stroke">If set to True stroke.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.CMYKToStringBuilder(System.Text.StringBuilder,System.Boolean)">
             <property name="flag" value="Finished" />
            
             <summary>
             Writes CMYK color to string builder.
             </summary>
             <param name="sb">The string builder.</param>
             <param name="stroke">If set to true stroke; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.GrayscaleToStringBuilder(System.Text.StringBuilder,System.Boolean)">
             <property name="flag" value="Finished" />
            
             <summary>
             Writes grayscale color to string builder.
             </summary>
             <param name="sb">The string builder.</param>
             <param name="stroke">If set to True stroke.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.ToString(Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean)">
             <property name="flag" value="Finished" />
            
             <summary>
             Converts PDFColor to PDF string representation.
             </summary>
             <param name="colorSpace">Color space.</param>
             <param name="stroke">If color stroking.</param>
             <returns>
             Result string.
             </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.CalToString(Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean)">
            <summary>
            Converts PDFColor to PDF string representation.
            </summary>
            <param name="colorSpace"></param>
            <param name="stroke"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.WriteToStringBuilder(System.Text.StringBuilder,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean)">
             <property name="flag" value="Finished" />
            
             <summary>
             Writes color value to a string builder.
             </summary>
             <param name="sb">The string builder.</param>
             <param name="colorSpace">The color space.</param>
             <param name="stroke">If set to True stroke.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.AssignCMYK(System.Byte,System.Byte,System.Byte)">
             <property name="flag" value="Finished" />
            
             <summary>
             Converts RGB to CMYK.
             </summary>
             <param name="r">Red channel value.</param>
             <param name="g">Green channel value.</param>
             <param name="b">Blue channel value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.AssignRGB(System.Single,System.Single,System.Single,System.Single)">
             <property name="flag" value="Finished" />
            
             <summary>
             Converts CMYK to RGB.
             </summary>
             <param name="cyan">Cyan channel value.</param>
             <param name="magenta">Magenta channel value.</param>
             <param name="yellow">Yellow channel value.</param>
             <param name="black">Black channel value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.CompareColours(System.Drawing.Color,System.Drawing.Color)">
             <property name="flag" value="Finished" />
            
             <summary>
             Compares colors.
             </summary>
             <param name="color1">The color 1.</param>
             <param name="color2">The color 2.</param>
             <returns>
             True if colors are identical; otherwise - False.
             </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.ToArray">
            <summary>
            Converts colour to a PDF array of R, G and B float values.
            </summary>
            <returns>Filled PdfArray object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfColor.ToArray(Syncfusion.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Converts colour to a PDF array.
            </summary>
            <param name="colorSpace">The color space.</param>
            <returns>The well filled PdfArray object.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColor.Empty">
            <summary>
            Gets a null color.
            </summary>
            <value>The empty.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColor.IsEmpty">
            <summary>
            Gets whether the PDFColor is Empty or not.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColor.B">
            <summary>
            Gets or sets Blue channel value.
            </summary>
            <value>The B.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColor.Blue">
            <summary>
            Gets the blue.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColor.C">
            <summary>
            Gets or sets Cyan channel value.
            </summary>
            <value>The C.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColor.G">
            <summary>
            Gets or sets Green channel value.
            </summary>
            <value>The G.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColor.Green">
            <summary>
            Gets the green.
            </summary>
            <value>The green.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColor.Gray">
            <summary>
            Gets or sets Gray channel value.
            </summary>
            <value>The gray.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColor.K">
            <summary>
            Gets or sets Black channel value.
            </summary>
            <value>The K.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColor.M">
            <summary>
            Gets or sets Magenta channel value.
            </summary>
            <value>The M.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColor.R">
            <summary>
            Gets or sets Red channel value.
            </summary>
            <value>The R.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColor.Red">
            <summary>
            Gets the red.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColor.Y">
            <summary>
            Gets or sets Yellow channel value.
            </summary>
            <value>The Y.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfColor.A">
             <property name="flag" value="Finished" />
            
             <summary>
             Gets or sets Alpha channel value.
             </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfExternalGraphicsState">
            <summary>
            This class helps to fill correctly
            External graphics state dictionary.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfExternalGraphicsState.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfGraphics">
            <summary>
            The class representing a graphics context of the objects.
            It's used for performing simple graphics operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.PathTypesValuesMask">
            <summary>
            Specifies the mask of path type values.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_isEMF">
            <summary>
            Check whether it is an emf call
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_isEMFPlus">
            <summary>
            Check whether it is an emf plus call
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_isUseFontSize">
            <summary>
            check whether to use font size to calculate the shift
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_isBaselineFormat">
            <summary>
            Check whether it is an emf call
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Pdf.Graphics.PdfGraphics.m_DpiY" -->
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_streamWriter">
            <summary>
            Represents the Stream writer object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_getResources">
            <summary>
            Represents the Resource container for the graphics.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_canvasSize">
            <summary>
            Represents the Size of the canvas.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_clipBounds">
            <summary>
            Represents the size of the canvas reduced by margins and templates.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_bStateSaved">
            <summary>
            Represents the state, whether it is saved or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_currentPen">
            <summary>
            Represents the Current pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_currentBrush">
            <summary>
            Represents the Current brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_currentFont">
            <summary>
            Represents the Current font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_currentColorSpace">
            <summary>
            Represents the Current color space.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_bCSInitialized">
            <summary>
            Indicates whether color space was initialized.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_graphicsState">
            <summary>
            Stack of the graphics states.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_matrix">
            <summary>
            The transformation matrix monitoring all changes with CTM.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_previousTextRenderingMode">
            <summary>
            Stores previous rendering mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_previousCharacterSpacing">
            <summary>
            Previous character spacing value or 0.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_previousWordSpacing">
            <summary>
            Previous word spacing value or 0.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_previousTextScaling">
            <summary>
            The previously used text scaling value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_trasparencies">
            <summary>
            Holds transparencies used in the graphics.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_currentStringFormat">
            <summary>
            Current string format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_layer">
            <summary>
            Internal variable to store layer on which this graphics lays.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_automaticFields">
            <summary>
            Internal variable to store collection of automatic fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_stringLayoutResult">
            <summary>
            Internal variable to store layout result after drawing string.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_split">
            <summary>
            Internal variable to store position of split.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.m_transparencyObject">
            <summary>
            Indicates whether the object had trasparency.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphics.s_transparencyLock">
            <summary>
            Helps to lock s_mask to avoid race conditions.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.#ctor(System.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,Syncfusion.Pdf.IO.PdfStreamWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfGraphics"/> class.
            </summary>
            <param name="size">The size.</param>
            <param name="resources">The resources.</param>
            <param name="writer">The stream writer of the current layer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.#ctor(System.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,Syncfusion.Pdf.Primitives.PdfStream)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfGraphics"/> class.
            </summary>
            <param name="size">The size.</param>
            <param name="resources">The resources.</param>
            <param name="stream">The stream of the current layer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawLine(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a line.
            </summary>
            <param name="pen">The pen.</param>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawLine(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a line.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawRectangle(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawRectangle(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawRectangle(Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawRectangle(Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawRectangle(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawRectangle(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawEllipse(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawEllipse(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawEllipse(Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawEllipse(Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawEllipse(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawEllipse(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawArc(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws an arc.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawArc(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an arc.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPie(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPie(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a pie.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPie(Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPie(Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a pie.
            </summary>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPie(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPie(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a pie.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPolygon(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.PointF[])">
            <summary>
            Draws a polygon.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPolygon(Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.PointF[])">
            <summary>
            Draws a polygon.
            </summary>
            <param name="brush">The brush.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPolygon(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.PointF[])">
            <summary>
            Draws a polygon.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawBezier(Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a bezier curve.
            </summary>
            <param name="pen">The pen.</param>
            <param name="startPoint">The start point.</param>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawBezier(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a bezier curve.
            </summary>
            <param name="pen">The pen.</param>
            <param name="startPointX">The start point X.</param>
            <param name="startPointY">The start point Y.</param>
            <param name="firstControlPointX">The first control point X.</param>
            <param name="firstControlPointY">The first control point Y.</param>
            <param name="secondControlPointX">The second control point X.</param>
            <param name="secondControlPointY">The second control point Y.</param>
            <param name="endPointX">The end point X.</param>
            <param name="endPointY">The end point Y.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPath(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfPath)">
            <summary>
            Draws a path.
            </summary>
            <param name="pen">The pen.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPath(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfPath)">
            <summary>
            Draws a path.
            </summary>
            <param name="brush">The brush.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPath(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfPath)">
            <summary>
            Draws a path.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawImage(Syncfusion.Pdf.Graphics.PdfImage,System.Drawing.PointF)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawImage(Syncfusion.Pdf.Graphics.PdfImage,System.Single,System.Single)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawImage(Syncfusion.Pdf.Graphics.PdfImage,System.Drawing.RectangleF)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawImage(Syncfusion.Pdf.Graphics.PdfImage,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawImage(Syncfusion.Pdf.Graphics.PdfImage,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.PointF)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The location point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.PointF,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.PointF)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="point">The location point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.PointF,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="point">The point.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.PointF)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="point">The location point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.PointF,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Pen and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Pen and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Pen, Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.TranslateTransform(System.Single,System.Single)">
            <summary>
            Translates the coordinates by specified coordinates.
            </summary>
            <param name="offsetX">The X value by which to translate
            coordinate system.</param>
            <param name="offsetY">The Y value by which to translate
            coordinate system.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.ScaleTransform(System.Single,System.Single)">
            <summary>
            Scales the coordinates by specified coordinates.
            </summary>
            <param name="scaleX">The value by which to scale coordinate
            system in the X axis direction.</param>
            <param name="scaleY">The value by which to scale coordinate
            system in the Y axis direction.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.RotateTransform(System.Single)">
            <summary>
            Rotates the coordinate system in counterclockwise direction.
            </summary>
            <param name="angle">The angle of the rotation (in degrees).</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.SkewTransform(System.Single,System.Single)">
            <summary>
            Skews the coordinate system axes.
            </summary>
            <param name="angleX">Skews the X axis by this angle (in
            degrees).</param>
            <param name="angleY">Skews the Y axis by this angle (in
            degrees).</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.MultiplyTransform(Syncfusion.Pdf.Graphics.PdfTransformationMatrix)">
            <summary>
            Multiplies the world transformation of this Graphics and specified the Matrix. 
            </summary>
            <param name="matrix">The matrix that multiplies the world transformation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPdfTemplate(Syncfusion.Pdf.Graphics.PdfTemplate,System.Drawing.PointF)">
            <summary>
            Draws a template using its original size, at the specified location.
            </summary>
            <param name="template"><see cref="T:Syncfusion.Pdf.Graphics.PdfTemplate"/> object.</param>
            <param name="location">Location of the template.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPdfTemplate(Syncfusion.Pdf.Graphics.PdfTemplate,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Draws a template at the specified location and size.
            </summary>
            <param name="template"><see cref="T:Syncfusion.Pdf.Graphics.PdfTemplate"/> object.</param>
            <param name="location">Location of the template.</param>
            <param name="size">Size of the template.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.Flush">
            <summary>
            Flashes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.Save">
            <summary>
            Saves the current state of this Graphics and identifies the saved state with a GraphicsState.
            </summary>
            <returns>This method returns a GraphicsState that represents the saved state of this Graphics. </returns>
            <remarks>This method works similar to <see cref="!:System.Drawing.Graphics.Save"/> method.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.Restore">
            <summary>
            Restores the last state of this Graphics.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.Restore(Syncfusion.Pdf.Graphics.PdfGraphicsState)">
            <summary>
            Restores the state of this Graphics to the state represented by a GraphicsState.
            </summary>
            <param name="state">GraphicsState that represents the state to which to restore this Graphics.</param>
            <remarks>This method works similar to <see cref="!:System.Drawing.Graphics.Restore"/> method.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.SetClip(System.Drawing.RectangleF)">
            <summary>
            Modifying the current clipping path by intersecting it with the current path.
            </summary>
            <param name="rectangle">Clip rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.SetClip(System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfFillMode)">
            <summary>
            Modifying the current clipping path by intersecting it with the current path.
            </summary>
            <param name="rectangle">Clip rectangle.</param>
            <param name="mode">The fill mode to determine which regions lie inside the clipping	path.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.SetClip(Syncfusion.Pdf.Graphics.PdfPath)">
            <summary>
            Modifying the current clipping path by intersecting it with the current path.
            </summary>
            <param name="path">Clip path.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.SetClip(Syncfusion.Pdf.Graphics.PdfPath,Syncfusion.Pdf.Graphics.PdfFillMode)">
            <summary>
            Modifying the current clipping path by intersecting it with the current path.
            </summary>
            <param name="path">Clip path.</param>
            <param name="mode">The fill mode to determine which regions lie inside the clipping	path.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.SetTransparency(System.Single)">
            <summary>
            Sets the transparency.
            </summary>
            <param name="alpha">The alpha value for both pen
            and brush operations.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.SetTransparency(System.Single,System.Single)">
            <summary>
            Sets the transparency.
            </summary>
            <param name="alphaPen">The alpha value for pen operations.</param>
            <param name="alphaBrush">The alpha value for brush operations.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.SetTransparency(System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfBlendMode)">
            <summary>
            Sets the transparency.
            </summary>
            <param name="alphaPen">The alpha value for pen operations.</param>
            <param name="alphaBrush">The alpha value for brush operations.</param>
            <param name="blendMode">The blend mode.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.NormalizeText(Syncfusion.Pdf.Graphics.PdfFont,System.String)">
            <summary>
            Normalizes the text.
            </summary>
            <param name="font">The font.</param>
            <param name="text">The text.</param>
            <returns>The normalized string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.SetLayer(Syncfusion.Pdf.PdfPageLayer)">
            <summary>
            Sets the layer for the graphics.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.PageSave(System.Object,System.EventArgs)">
            <summary>
            Handles the Save event of the Page control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.UpdateY(System.Single)">
            <summary>
            Updates y co-ordinate.
            </summary>
            <param name="y">Y co-ordinate.</param>
            <returns>Updated y co-ordinate.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.PutComment(System.String)">
            <summary>
            Writes a comment line.
            </summary>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.Reset(System.Drawing.SizeF)">
            <summary>
            Clears an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DoRestoreState">
            <summary>
            Restores graphics state.
            </summary>
            <returns>The restored graphics state.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.StateControl(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Controls all state modifications and react repectively.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.StateControl(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Controls all state modifications and react respectively.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="font">The font.</param>
            <param name="format">Text settings.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.FontControl(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat,System.Boolean)">
            <summary>
            Saves the font and other font settings.
            </summary>
            <param name="font">Current font.</param>
            <param name="format">Current format.</param>
            <param name="saveState">If set to <c>true</c> the state's been changed.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.ColorSpaceControl(Syncfusion.Pdf.ColorSpace.PdfColorSpaces)">
            <summary>
            Saves the ColorSpace and other ColorSpace settings.
            </summary>
            <param name="colorspace"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.BrushControl(Syncfusion.Pdf.Graphics.PdfBrush,System.Boolean)">
            <summary>
            Controls the brush state.
            </summary>
            <param name="brush">The brush.</param>
            <param name="saveState">if set to <c>true</c> the state's been changed.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.InitCurrentColorSpace">
            <summary>
            Initializes the current color space.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.InitCurrentColorSpace(Syncfusion.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Initializes the current color space.
            </summary>
            <param name="colorspace"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.PenControl(Syncfusion.Pdf.Graphics.PdfPen,System.Boolean)">
            <summary>
            Controls the pen state.
            </summary>
            <param name="pen">The pen.</param>
            <param name="saveState">if set to <c>true</c> the state's been changed.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.CapControl(Syncfusion.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws custom or sets predefined line cap style.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPath(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Boolean)">
            <summary>
            Draws the path.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="needClosing">if it is need to close, set to <c>true</c>.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawPath(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfFillMode,System.Boolean)">
            <summary>
            Draws the path.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="fillMode">The fill mode.</param>
            <param name="needClosing">if it is need to close, set to <c>true</c>.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetBezierArcPoints(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets the bezier points for arc constructing.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <param name="startAng">The start angle.</param>
            <param name="extent">The extent.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.ConstructArcPath(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs the arc path using Bezier curves.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <param name="startAng">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.BuildUpPath(Syncfusion.Pdf.Graphics.PdfPath)">
            <summary>
            Builds up the path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetBezierPoints(System.Drawing.PointF[],System.Byte[],System.Int32@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Gets the bezier points from respective arrays.
            </summary>
            <param name="points">The points.</param>
            <param name="types">The types.</param>
            <param name="i">The i.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.BuildUpPath(System.Drawing.PointF[],System.Byte[])">
            <summary>
            Builds up the path.
            </summary>
            <param name="points">The points.</param>
            <param name="types">The types.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.CheckFlags(System.Byte)">
            <summary>
            Checks path point type flags.
            </summary>
            <param name="type">The path point type.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetTextRenderingMode(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Gets the text rendering mode.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="format">The format.</param>
            <returns>Proper TextRenderingMode value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.ClipTranslateMargins(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the drawing area and translates origin.
            </summary>
            <param name="x">X co-ordinate of the co-ordinate system.</param>
            <param name="y">Y co-ordinate of the co-ordinate system.</param>
            <param name="left">Left margin value.</param>
            <param name="top">Top margin value.</param>
            <param name="right">Right margin value.</param>
            <param name="bottom">Bottom margin value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.ClipTranslateMargins(System.Drawing.RectangleF)">
            <summary>
            Sets the drawing area and translates origin.
            </summary>
            <param name="clipBounds">Clip bounds of the graphics.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.InitializeCoordinates">
            <summary>
            Initializes coordinate system.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.InitializeCoordinates(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Initializes coordinate system.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.FlipHorizontal">
            <summary>
            Flips the hirizontally.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.FlipVertical">
            <summary>
            Flips the coordinates vertically.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetTranslateTransform(System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfTransformationMatrix)">
            <summary>
            Translates coordinates of the input matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="input">Input matrix.</param>
            <returns>Output matrix.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetScaleTransform(System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfTransformationMatrix)">
            <summary>
            Scales coordinates of the input matrix.
            </summary>
            <param name="x">X scaling.</param>
            <param name="y">Y scaling.</param>
            <param name="input">Input matrix.</param>
            <returns>Output matrix.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetRotateTransform(System.Single,Syncfusion.Pdf.Graphics.PdfTransformationMatrix)">
            <summary>
            Rotates coordinates of the input matrix.
            </summary>
            <param name="angle">Rotation angle.</param>
            <param name="input">Input matrix.</param>
            <returns>Output matrix.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetSkewTransform(System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfTransformationMatrix)">
            <summary>
            Skews coordinates of the input matrix.
            </summary>
            <param name="angleX">X skewing.</param>
            <param name="angleY">Y skewing.</param>
            <param name="input">Input matrix.</param>
            <returns>Output matrix.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawCjkString(Syncfusion.Pdf.Graphics.LineInfo,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws a CJK string.
            </summary>
            <param name="lineInfo">The line info.</param>
            <param name="layoutRectangle">The layout rectangle.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetCjkString(System.String)">
            <summary>
            Gets a CJK string.
            </summary>
            <param name="line">The line.</param>
            <returns>A proper PdfString class instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawAsciiLine(Syncfusion.Pdf.Graphics.LineInfo,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws Ascii line.
            </summary>
            <param name="lineInfo">Text line.</param>
            <param name="layoutRectangle">Lay outing rectangle.</param>
            <param name="font">Font object.</param>
            <param name="format">Text format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetAsciiString(System.String)">
            <summary>
            Creates PdfString from ASCII string. 
            </summary>
            <param name="token">String line.</param>
            <returns>PdfString object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawUnicodeLine(Syncfusion.Pdf.Graphics.LineInfo,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws unicode line.
            </summary>
            <param name="lineInfo">Text line.</param>
            <param name="layoutRectangle">Lay outing rectangle.</param>
            <param name="font">Font object.</param>
            <param name="format">Text format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetUnicodeString(System.String)">
            <summary>
            Creates PdfString from the unicode text.
            </summary>
            <param name="token">Unicode text.</param>
            <returns>PdfString object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.BreakUnicodeLine(System.String,Syncfusion.Pdf.Graphics.PdfTrueTypeFont,System.String[]@)">
            <summary>
            Breakes the unicode line to the words and converts symbols to glyphs.
            </summary>
            <param name="line">String text.</param>
            <param name="ttfFont">TTF font.</param>
            <param name="words">Array of real words.</param>
            <returns>Array of text in glyphs.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.ConvertToUnicode(System.String,Syncfusion.Pdf.Graphics.PdfTrueTypeFont)">
            <summary>
            Converts to unicode format.
            </summary>
            <param name="text">Unicode text.</param>
            <param name="ttfFont">The TTF font.</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawUnicodeBlocks(System.String[],System.String[],Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat,System.Single)">
            <summary>
            Draws array of unicode tokens.
            </summary>
            <param name="blocks">Unicode tokens.</param>
            <param name="words">Array of the real words.</param>
            <param name="font">Font object.</param>
            <param name="format">Text formatting.</param>
            <param name="wordSpacing">Word spacing value if need to be justified.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetTextLines(System.String)">
            <summary>
            Gets the text lines from the text.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.ApplyStringSettings(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfStringFormat,System.Drawing.RectangleF)">
            <summary>
            Applies all the text settings.
            </summary>
            <param name="font">Font object.</param>
            <param name="pen">Pen object.</param>
            <param name="brush">Brush object.</param>
            <param name="format">Text format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetHorizontalAlignShift(System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Calculates shift value if the line is horizontaly aligned.
            </summary>
            <param name="lineWidth">Line width.</param>
            <param name="boundsWidth">Bounds width.</param>
            <param name="format">Text format.</param>
            <returns>Shift value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetTextVerticalAlignShift(System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Calculates shift value if the text is vertically aligned.
            </summary>
            <param name="textHeight">Text height.</param>
            <param name="boundsHeight">Bounds height.</param>
            <param name="format">Text format.</param>
            <returns>Shift value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.JustifyLine(Syncfusion.Pdf.Graphics.LineInfo,System.Single,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Justifies the line if needed.
            </summary>
            <param name="lineInfo">String text.</param>
            <param name="boundsWidth">Width of the bounds.</param>
            <param name="format">Text format.</param>
            <returns>Space width for justifying.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.ShouldJustify(Syncfusion.Pdf.Graphics.LineInfo,System.Single,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Checks whether the line should be justified.
            </summary>
            <param name="lineInfo">String text.</param>
            <param name="boundsWidth">Width of the bounds.</param>
            <param name="format">Text format.</param>
            <returns>True if the line should be justified.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.CheckCorrectLayoutRectangle(System.Drawing.RectangleF@)">
            <summary>
            Checks and corrects layoutRectangle for text lay outing.
            </summary>
            <param name="layoutRectangle">Text bounds.</param>
            <returns>True - if some part of the layoutRectangle fits the canvas ClipBounds, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.CheckCorrectLayoutRectangle(System.Drawing.SizeF,System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Creates lay outed rectangle depending on the text settings.
            </summary>
            <param name="textSize">Size of the text.</param>
            <param name="x">X co-ordinate of the text.</param>
            <param name="y">Y co-ordinate of the text.</param>
            <param name="format">Text format settings.</param>
            <returns>layout rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.UnderlineStrikeoutText(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfStringLayoutResult,Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Emulates Underline, Strikeout of the text if needed.
            </summary>
            <param name="pen">Current pen.</param>
            <param name="brush">Current brush.</param>
            <param name="result">Lay outing result.</param>
            <param name="font">Font object.</param>
            <param name="layoutRectangle">Lay outing rectangle.</param>
            <param name="format">Text format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.CreateUnderlineStikeoutPen(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Creates a pen for drawing lines in the text.
            </summary>
            <param name="pen">Current pen.</param>
            <param name="brush">Current brush.</param>
            <param name="font">Current font.</param>
            <param name="format">Text format.</param>
            <returns>Pen for the lines.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawLayoutResult(Syncfusion.Pdf.Graphics.PdfStringLayoutResult,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat,System.Drawing.RectangleF)">
            <summary>
            Draws layout result.
            </summary>
            <param name="result">Layout result.</param>
            <param name="font">Text font.</param>
            <param name="format">Text format.</param>
            <param name="layoutRectangle">Layout rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.DrawStringLayoutResult(Syncfusion.Pdf.Graphics.PdfStringLayoutResult,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws a layout result.
            </summary>
            <param name="result">Layout result.</param>
            <param name="font">Text font.</param>
            <param name="pen">The pen object.</param>
            <param name="brush">The brush object.</param>
            <param name="layoutRectangle">Layout rectangle.</param>
            <param name="format">Text format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetLineIndent(Syncfusion.Pdf.Graphics.LineInfo,Syncfusion.Pdf.Graphics.PdfStringFormat,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Returns line indent for the line.
            </summary>
            <param name="lineInfo">Line info.</param>
            <param name="format">Text settings.</param>
            <param name="layoutBounds">Layout Bounds.</param>
            <param name="firstLine">Indicates whether the line is the first in the text.</param>
            <returns>Returns line indent for the line.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.RightToLeft(Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Checks whether RTL is enabled.
            </summary>
            <param name="format">Text settings.</param>
            <returns>Tre if RTL is enabled.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.GetLineBounds(System.Int32,Syncfusion.Pdf.Graphics.PdfStringLayoutResult,Syncfusion.Pdf.Graphics.PdfFont,System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Returns bounds of the line info.
            </summary>
            <param name="lineIndex">index of the line in the result.</param>
            <param name="result">Layout result.</param>
            <param name="font">Font used for this text.</param>
            <param name="layoutRectangle">Layout rectangle.</param>
            <param name="format">Text settings.</param>
            <returns>Returns bounds of the line info.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.SetBBox(System.Drawing.RectangleF)">
            <summary>
            Sets the BBox entry of the graphics dictionary.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphics.Size">
            <summary>
            Gets the size of the canvas.
            </summary>
            <remarks>Usually, this value is equal to the size of the object this graphics belongs to.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphics.ClientSize">
            <summary>
            Gets the size of the canvas reduced by margins and page templates.
            </summary>
            <remarks>It indicates a size of the canvas reduced by margins and template dimensions.
            This value doesn't change when any custom clip is set.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphics.ColorSpace">
            <summary>
            Gets or sets the current color space.
            </summary>
            <remarks>The value change of this property has impact on the objects
            which will be drawn after the change.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphics.StreamWriter">
            <summary>
            Gets the stream writer.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphics.Matrix">
            <summary>
            Gets the transformation matrix reflecting current transformation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphics.Layer">
            <summary>
            Gets the layer for the graphics, if exists.
            </summary>
            <value>The layer.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphics.Page">
            <summary>
            Gets the page for this graphics, if exists.
            </summary>
            <value>The page.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphics.AutomaticFields">
            <summary>
            Gets the automatic fields.
            </summary>
            <value>The automatic fields.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphics.StringLayoutResult">
            <summary>
            Returns the result after drawing string.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphics.Split">
            <summary>
            Gets or sets the split before being processed by Text and Image region managers.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphics.TransparencyObject">
            <summary>
            Gets the transparency object value
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfGraphics.GetResources">
            <summary>
            Delegate declaring a method returning resources.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfGraphics.TransparencyData">
            <summary>
            Holds info about transparency.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.TransparencyData.#ctor(System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfBlendMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TransparencyData"/> class.
            </summary>
            <param name="alphaPen">The alpha pen.</param>
            <param name="alphaBrush">The alpha brush.</param>
            <param name="blendMode">The blend mode.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.TransparencyData.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and
            represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphics.TransparencyData.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfGraphicsState">
            <summary>
            Represents the state of a Graphics object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsState.m_graphics">
            <summary>
            Parent graphics object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsState.m_matrix">
            <summary>
            The current transformation matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsState.m_textRenderingMode">
            <summary>
            Stores previous rendering mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsState.m_characterSpacing">
            <summary>
            Previous character spacing value or 0.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsState.m_wordSpacing">
            <summary>
            Previous word spacing value or 0.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsState.m_textScaling">
            <summary>
            The previously used text scaling value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsState.m_pen">
            <summary>
            Current pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsState.m_brush">
            <summary>
            Current brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsState.m_font">
            <summary>
            Current font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsState.m_colorSpace">
            <summary>
            Current color space.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphicsState.#ctor">
            <summary>
            default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphicsState.#ctor(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PdfTransformationMatrix)">
            <summary>
            Creates new object.
            </summary>
            <param name="graphics">Parent graphics state.</param>
            <param name="matrix">The current transformation matrix.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphicsState.Graphics">
            <summary>
            Gets the parent graphics object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphicsState.Matrix">
            <summary>
            Gets the current matrix.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphicsState.CharacterSpacing">
            <summary>
            Gets or sets the current character spacing.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphicsState.WordSpacing">
            <summary>
            Gets or sets the word spacing value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphicsState.TextScaling">
            <summary>
            Gets or sets the text scaling value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphicsState.Pen">
            <summary>
            Gets or sets the current pen object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphicsState.Brush">
            <summary>
            Gets or sets the brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphicsState.Font">
            <summary>
            Gets or sets the current font object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphicsState.ColorSpace">
            <summary>
            Gets or sets the current color space value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfGraphicsState.TextRenderingMode">
            <summary>
            Gets or sets the text rendering mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfMargins">
            <summary>
            A class representing page margins.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfMargins.PageMargin">
            <summary>
            Represents the Default Page Margin value.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfMargins.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfMargins"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfMargins.SetMargins(System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="margin">The margin size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfMargins.SetMargins(System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="leftRight">The left right.</param>
            <param name="topBottom">The top bottom.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfMargins.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfMargins.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfMargins.Left">
            <summary>
            Gets or sets the left margin size.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfMargins.Top">
            <summary>
            Gets or sets the top margin size.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfMargins.Right">
            <summary>
            Gets or sets the right margin size.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfMargins.Bottom">
            <summary>
            Gets or sets the bottom margin size.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfMargins.All">
            <summary>
            Sets margin of each side.
            </summary>
            <value>Margin of each side.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfPen">
            <summary>
            A class defining settings for drawing operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfPen.m_bImmutable">
            <summary>
            Indicates if the pen is immutable.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPen"/> class.
            </summary>
            <remarks>Doesn't change current colour.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.#ctor(Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPen"/> class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.#ctor(Syncfusion.Pdf.Graphics.PdfColor,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPen"/> class.
            </summary>
            <param name="color">Color of the pen.</param>
            <param name="width">Width of the pen's line.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.#ctor(Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPen"/> class.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.#ctor(Syncfusion.Pdf.Graphics.PdfBrush,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPen"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="width">Width of the pen's line.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.#ctor(Syncfusion.Pdf.Graphics.PdfColor,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPen"/> class.
            </summary>
            <param name="color">The color.</param>
            <param name="immutable">if set to <c>true</c> the pen is immutable.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.#ctor(Syncfusion.Pdf.ColorSpace.PdfExtendedColor)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPen"/> class.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.Syncfusion#Pdf#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A new pen with the same properties.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.SetBrush(Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Sets the brush.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.SetStrokingToBrush(Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Sets the stroking flag to brush.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.ResetStroking(Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Resets the stroking.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.MonitorChanges(Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.IO.PdfStreamWriter,Syncfusion.Pdf.Graphics.PdfGraphics.GetResources,System.Boolean,Syncfusion.Pdf.Graphics.PdfColorSpace,Syncfusion.Pdf.Graphics.PdfTransformationMatrix)">
            <summary>
            Monitors the changes.
            </summary>
            <param name="currentPen">The current pen.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources.</param>
            <param name="saveState">if it is save state, set to <c>true</c>.</param>
            <param name="currentColorSpace">The current color space.</param>
            <param name="matrix">The current transformation matrix.</param>
            <returns>True if the pen was different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.GetPattern">
            <summary>
            Gets the pattern.
            </summary>
            <returns>The initialized pattern.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.DashControl(Syncfusion.Pdf.Graphics.PdfPen,System.Boolean,Syncfusion.Pdf.IO.PdfStreamWriter)">
            <summary>
            Controls the dash style and behaviour of each line.
            </summary>
            <param name="pen">The pen.</param>
            <param name="saveState">if set to <c>true</c> the state should be changed anyway.</param>
            <param name="streamWriter">The stream writer.</param>
            <returns>True if the dash is different.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPen.CheckImmutability(System.String)">
            <summary>
            Checks the immutability.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPen.Colorspaces">
            <summary>
            Get or set the Colorspace.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPen.Brush">
            <summary>
            Gets or sets the brush, which specifies the pen behaviour.
            </summary>
            <remarks>If the brush is set, the color values are ignored,
            except for PdfSolidBrush.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPen.Color">
            <summary>
            Gets or sets the color of the pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPen.DashOffset">
            <summary>
            Gets or sets the dash offset of the pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPen.DashPattern">
            <summary>
            Gets or sets the dash pattern of the pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPen.DashStyle">
            <summary>
            Gets or sets the dash style of the pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPen.LineCap">
            <summary>
            Gets or sets the line cap of the pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPen.LineJoin">
            <summary>
            Gets or sets the line join style of the pen.
            </summary>
            <value>The line join.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPen.Width">
            <summary>
            Gets or sets the width of the pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPen.MiterLimit">
            <summary>
            Gets or sets the miter limit.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfPens">
            <summary>
            The collection of the default pens.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPens.GetPen(System.Drawing.KnownColor)">
            <summary>
            Creates the default pen.
            </summary>
            <param name="color">The color.</param>
            <param name="colorName">Name of the color.</param>
            <returns>The proper PdfPen instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfPens.#ctor">
            <summary>
            Disallows to create an instance of PDfPens class.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.AliceBlue">
            <summary>
            Gets the AliceBlue pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.AntiqueWhite">
            <summary>
            Gets the antique white pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Aqua">
            <summary>
            Gets the Aqua default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Aquamarine">
            <summary>
            Gets the Aquamarine default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Azure">
            <summary>
            Gets the Azure default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Beige">
            <summary>
            Gets the Beige default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Bisque">
            <summary>
            Gets the Bisque default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Black">
            <summary>
            Gets the Black default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.BlanchedAlmond">
            <summary>
            Gets the BlanchedAlmond default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Blue">
            <summary>
            Gets the Blue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.BlueViolet">
            <summary>
            Gets the BlueViolet default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Brown">
            <summary>
            Gets the Brown default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.BurlyWood">
            <summary>
            Gets the BurlyWood default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.CadetBlue">
            <summary>
            Gets the CadetBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Chartreuse">
            <summary>
            Gets the Chartreuse default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Chocolate">
            <summary>
            Gets the Chocolate default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Coral">
            <summary>
            Gets the Coral default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.CornflowerBlue">
            <summary>
            Gets the CornflowerBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Cornsilk">
            <summary>
            Gets the Corn silk default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Crimson">
            <summary>
            Gets the Crimson default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Cyan">
            <summary>
            Gets the Cyan default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkBlue">
            <summary>
            Gets the DarkBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkCyan">
            <summary>
            Gets the DarkCyan default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkGoldenrod">
            <summary>
            Gets the DarkGoldenrod default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkGray">
            <summary>
            Gets the DarkGray default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkGreen">
            <summary>
            Gets the DarkGreen default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkKhaki">
            <summary>
            Gets the DarkKhaki default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkMagenta">
            <summary>
            Gets the DarkMagenta default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkOliveGreen">
            <summary>
            Gets the DarkOliveGreen default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkOrange">
            <summary>
            Gets the DarkOrange default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkOrchid">
            <summary>
            Gets the DarkOrchid default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkRed">
            <summary>
            Gets the DarkRed default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkSalmon">
            <summary>
            Gets the DarkSalmon default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkSeaGreen">
            <summary>
            Gets the DarkSeaGreen default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkSlateBlue">
            <summary>
            Gets the DarkSlateBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkSlateGray">
            <summary>
            Gets the DarkSlateGray default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkTurquoise">
            <summary>
            Gets the DarkTurquoise default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DarkViolet">
            <summary>
            Gets the DarkViolet default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DeepPink">
            <summary>
            Gets the DeepPink default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DeepSkyBlue">
            <summary>
            Gets the DeepSkyBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DimGray">
            <summary>
            Gets the DimGray default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.DodgerBlue">
            <summary>
            Gets the DodgerBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Firebrick">
            <summary>
            Gets the Firebrick default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.FloralWhite">
            <summary>
            Gets the FloralWhite default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.ForestGreen">
            <summary>
            Gets the ForestGreen default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Fuchsia">
            <summary>
            Gets the Fuchsia default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Gainsboro">
            <summary>
            Gets the Gainsborough default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.GhostWhite">
            <summary>
            Gets the GhostWhite default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Gold">
            <summary>
            Gets the Gold default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Goldenrod">
            <summary>
            Gets the Goldenrod default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Gray">
            <summary>
            Gets the Gray default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Green">
            <summary>
            Gets the Green default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.GreenYellow">
            <summary>
            Gets the GreenYellow default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Honeydew">
            <summary>
            Gets the Honeydew default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.HotPink">
            <summary>
            Gets the HotPink default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.IndianRed">
            <summary>
            Gets the IndianRed default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Indigo">
            <summary>
            Gets the Indigo default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Ivory">
            <summary>
            Gets the Ivory default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Khaki">
            <summary>
            Gets the Khaki default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Lavender">
            <summary>
            Gets the Lavender default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LavenderBlush">
            <summary>
            Gets the LavenderBlush default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LawnGreen">
            <summary>
            Gets the LawnGreen default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LemonChiffon">
            <summary>
            Gets the LemonChiffon default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LightBlue">
            <summary>
            Gets the LightBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LightCoral">
            <summary>
            Gets the LightCoral default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LightCyan">
            <summary>
            Gets the LightCyan default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LightGoldenrodYellow">
            <summary>
            Gets the LightGoldenrodYellow default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LightGray">
            <summary>
            Gets the LightGray default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LightGreen">
            <summary>
            Gets the LightGreen default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LightPink">
            <summary>
            Gets the LightPink default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LightSalmon">
            <summary>
            Gets the LightSalmon default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LightSeaGreen">
            <summary>
            Gets the LightSeaGreen default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LightSkyBlue">
            <summary>
            Gets the LightSkyBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LightSlateGray">
            <summary>
            Gets the LightSlateGray default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LightSteelBlue">
            <summary>
            Gets the LightSteelBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LightYellow">
            <summary>
            Gets the LightYellow default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Lime">
            <summary>
            Gets the Lime default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.LimeGreen">
            <summary>
            Gets the LimeGreen default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Linen">
            <summary>
            Gets the Linen default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Magenta">
            <summary>
            Gets the Magenta default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Maroon">
            <summary>
            Gets the Maroon default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.MediumAquamarine">
            <summary>
            Gets the MediumAquamarine default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.MediumBlue">
            <summary>
            Gets the MediumBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.MediumOrchid">
            <summary>
            Gets the MediumOrchid default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.MediumPurple">
            <summary>
            Gets the MediumPurple default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.MediumSeaGreen">
            <summary>
            Gets the MediumSeaGreen default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.MediumSlateBlue">
            <summary>
            Gets the MediumSlateBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.MediumSpringGreen">
            <summary>
            Gets the MediumSpringGreen default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.MediumTurquoise">
            <summary>
            Gets the MediumTurquoise default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.MediumVioletRed">
            <summary>
            Gets the MediumVioletRed default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.MidnightBlue">
            <summary>
            Gets the MidnightBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.MintCream">
            <summary>
            Gets the MintCream default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.MistyRose">
            <summary>
            Gets the MistyRose default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Moccasin">
            <summary>
            Gets the Moccasin default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.NavajoWhite">
            <summary>
            Gets the NavajoWhite default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Navy">
            <summary>
            Gets the Navy default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.OldLace">
            <summary>
            Gets the OldLace default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Olive">
            <summary>
            Gets the Olive default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.OliveDrab">
            <summary>
            Gets the OliveDrab default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Orange">
            <summary>
            Gets the Orange default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.OrangeRed">
            <summary>
            Gets the OrangeRed default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Orchid">
            <summary>
            Gets the Orchid default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.PaleGoldenrod">
            <summary>
            Gets the PaleGoldenrod default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.PaleGreen">
            <summary>
            Gets the PaleGreen default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.PaleTurquoise">
            <summary>
            Gets the PaleTurquoise default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.PaleVioletRed">
            <summary>
            Gets the PaleVioletRed default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.PapayaWhip">
            <summary>
            Gets the PapayaWhip default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.PeachPuff">
            <summary>
            Gets the PeachPuff default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Peru">
            <summary>
            Gets the Peru default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Pink">
            <summary>
            Gets the Pink default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Plum">
            <summary>
            Gets the Plum default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.PowderBlue">
            <summary>
            Gets the PowderBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Purple">
            <summary>
            Gets the Purple default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Red">
            <summary>
            Gets the Red default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.RosyBrown">
            <summary>
            Gets the RosyBrown default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.RoyalBlue">
            <summary>
            Gets the RoyalBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.SaddleBrown">
            <summary>
            Gets the SaddleBrown default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Salmon">
            <summary>
            Gets the Salmon default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.SandyBrown">
            <summary>
            Gets the SandyBrown default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.SeaGreen">
            <summary>
            Gets the SeaGreen default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.SeaShell">
            <summary>
            Gets the SeaShell default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Sienna">
            <summary>
            Gets the Sienna default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Silver">
            <summary>
            Gets the Silver default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.SkyBlue">
            <summary>
            Gets the SkyBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.SlateBlue">
            <summary>
            Gets the SlateBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.SlateGray">
            <summary>
            Gets the SlateGray default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Snow">
            <summary>
            Gets the Snow default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.SpringGreen">
            <summary>
            Gets the SpringGreen default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.SteelBlue">
            <summary>
            Gets the SteelBlue default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Tan">
            <summary>
            Gets the Tan default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Teal">
            <summary>
            Gets the Teal default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Thistle">
            <summary>
            Gets the Thistle default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Tomato">
            <summary>
            Gets the Tomato default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Transparent">
            <summary>
            Gets the Transparent default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Turquoise">
            <summary>
            Gets the Turquoise default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Violet">
            <summary>
            Gets the Violet default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Wheat">
            <summary>
            Gets the Wheat default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.White">
            <summary>
            Gets the White default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.WhiteSmoke">
            <summary>
            Gets the WhiteSmoke default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.Yellow">
            <summary>
            Gets the Yellow default pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfPens.YellowGreen">
            <summary>
            Gets the YellowGreen default pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfResources.m_names">
            <summary>
            Dictionary of the objects names.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfResources.m_properties">
            <summary>
            Dictionary of the properties names.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfResources"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfResources"/> class.
            </summary>
            <param name="baseDictionary">The base dictionary.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.GetName(Syncfusion.Pdf.IPdfWrapper)">
            <summary>
            Generates name for the object and adds to the resource if the object is new. Otherwise
            returns object's name in the context of the resources.
            </summary>
            <param name="obj">Object contained by a resource.</param>
            <returns>Returns object's name in the context of the resources.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.GetNames">
            <summary>
            Gets resource names to font dictionaries.
            </summary>
            <returns>The names to font dictionaries.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.RequireProcSet(System.String)">
            <summary>
            Requires the proc set.
            </summary>
            <param name="procSetName">Name of the proc set.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.GenerateName">
            <summary>
            Generates Unique string name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.Add(Syncfusion.Pdf.IPdfWrapper,Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Adds object to the resources.
            </summary>
            <param name="obj">Object to be added to resources.</param>
            <param name="name">Name of the object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.Add(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Adds the font to the "Fonts" sub dictionary.
            </summary>
            <param name="font">The font to add.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.AddProperties(System.String,Syncfusion.Pdf.Primitives.PdfReferenceHolder)">
            <summary>
            Adds the Layer Properties to the "Properties"  dictionary.
            </summary>
            <param name="layerid">The layer properties to add.</param>
            <param name="reff">The reference.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.Add(Syncfusion.Pdf.Graphics.PdfTemplate,Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Adds the template to the "XObject" sub dictionary.
            </summary>
            <param name="template">The template to add.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.Add(Syncfusion.Pdf.Graphics.PdfImage,Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Adds the image to the "XObject" sub dictionary.
            </summary>
            <param name="image">The image to add.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.Add(Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Adds the specified brush to the resources.
            </summary>
            <param name="brush">The brush.</param>
            <param name="name">The name of the brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.Add(Syncfusion.Pdf.Graphics.PdfTransparency,Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Adds the specified transparancy to the resources.
            </summary>
            <param name="transparancy">The transparancy.</param>
            <param name="name">The name of the brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.Add(Syncfusion.Pdf.ColorSpace.PdfColorSpaces,Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Adds the specified ColorSpaces to the resources.
            </summary>
            <param name="color"></param>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfResources.Add(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Adds the specified Dictionary to the resources.
            </summary>
            <param name="color"></param>
            <param name="name"></param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfResources.Names">
            <summary>
            Gets the font names.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfTransformationMatrix">
            <summary>
            Class for representing Root transformation matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.DegRadFactor">
             <property name="flag" value="Finished" />
            
             <summary>
             Value for angle converting.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.RadDegFactor">
             <property name="flag" value="Finished" />
            
             <summary>
             Value for angle converting.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.m_matrix">
             <property name="flag" value="Finished" />
            
             <summary>
             Transformation matrix.
             </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.#ctor">
            <summary>
            Initializes object.
            </summary>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.#ctor(System.Boolean)">
            <summary>
            Initializes object.
            </summary>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.Translate(System.Drawing.SizeF)">
            <summary>
            Translates coordinates by specified coordinates.
            </summary>
            <param name="offsets">Offsets for translation.</param>
            <property name="flag" value="Finished"/>
            <remarks>
            Order of transformation sequence is significant.
            </remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.Translate(System.Single,System.Single)">
            <summary>
            Translates coordinates by specified coordinates.
            </summary>
            <param name="offsetX">The X value by which to translate
            coordinate system.</param>
            <param name="offsetY">The Y value by which to translate
            coordinate system.</param>
            <property name="flag" value="Finished"/>
            <remarks>
            Order of transformation sequence is significant.
            </remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.Scale(System.Drawing.SizeF)">
             <property name="flag" value="Finished" />
            
             <summary>
             Scales coordinates by specified coordinates.
             </summary>
             <param name="scales">Scaling values.</param>
             <remarks>
             Order of transformation sequence is significant.
             </remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.Scale(System.Single,System.Single)">
            <summary>
            Scales coordinates by specified coordinates.
            </summary>
            <param name="scaleX">The value by which to scale coordinate
            system in the X axis direction.</param>
            <param name="scaleY">The value by which to scale coordinate
            system in the Y axis direction.</param>
            <property name="flag" value="Finished"/>
            <remarks>
            Order of transformation sequence is significant.
            </remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.Rotate(System.Single)">
            <summary>
            Rotates coordinate system in counterclockwise direction.
            </summary>
            <param name="angle">The angle of the rotation (in degrees).</param>
            <property name="flag" value="Finished"/>
            <remarks>
            Order of transformation sequence is significant.
            </remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.Skew(System.Drawing.SizeF)">
            <summary>
            Skews coordinate system axes.
            </summary>
            <param name="angles">Skew angles.</param>
            <property name="flag" value="Finished"/>
            <remarks>
            Order of transformation sequence is significant.
            </remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.Skew(System.Single,System.Single)">
            <summary>
            Skews coordinate system axes.
            </summary>
            <param name="angleX">Skews the X axis by this angle (in
            degrees).</param>
            <param name="angleY">Skews the Y axis by this angle (in
            degrees).</param>
            <property name="flag" value="Finished"/>
            <remarks>
            Order of transformation sequence is significant.
            </remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.Shear(System.Single,System.Single)">
            <summary>
            Applies the specified shear vector to this Matrix
            by prepending the shear transformation.
            </summary>
            <param name="shearX">The shear X factor.</param>
            <param name="shearY">The shear Y factor.</param>
            <remarks>The transformation applied in this method
            is a pure shear only if one of the parameters is 0.
            Applied to a rectangle at the origin, when the shearY
            factor is 0, the transformation moves the bottom edge
            horizontally by shearX times the height of the rectangle.
            When the shearX factor is 0, it moves the right edge
            vertically by shearY times the width of the rectangle.
            Caution is in order when both parameters are nonzero,
            because the results are hard to predict. For example,
            if both factors are 1, the transformation is singular
            (hence noninvertible), squeezing the entire plane to
            a single line.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.RotateAt(System.Single,System.Drawing.PointF)">
            <summary>
            Applies a clockwise rotation about the specified point.
            </summary>
            <param name="angle">The angle.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.ToString">
             <property name="flag" value="Finished" />
            
             <summary>
             Gets PDF representation.
             </summary>
             <returns>
             PDF representation.
             </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.Multiply(Syncfusion.Pdf.Graphics.PdfTransformationMatrix)">
             <property name="flag" value="Finished" />
            
             <summary>
             Multiplies matrixes (changes coordinate system.)
             </summary>
             <param name="matrix">Matrix to be multiplied.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.DegressToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degreesX">The degrees X.</param>
            <returns>The value in radians.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.RadiansToDegress(System.Single)">
            <summary>
            Converts radians to degress.
            </summary>
            <param name="radians">The radians.</param>
            <returns>The value in degress.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.Syncfusion#Pdf#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.OffsetX">
            <summary>
            Gets the X translation value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.OffsetY">
            <summary>
            Gets the Y translation value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTransformationMatrix.Matrix">
             <property name="flag" value="Finished" />
            
             <summary>
             Gets or sets the internal matrix object.
             </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Matrix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.Matrix"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.Matrix"/> class.
            </summary>
            <param name="m11">The M11.</param>
            <param name="m12">The M12.</param>
            <param name="m21">The M21.</param>
            <param name="m22">The M22.</param>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Matrix.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.Matrix"/> class.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Matrix.Translate(System.Single,System.Single)">
            <summary>
            Translates the specified offset X.
            </summary>
            <param name="offsetX">The offset X.</param>
            <param name="offsetY">The offset Y.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Matrix.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Matrix.Elements">
            <summary>
            Gets the elements.
            </summary>
            <value>The elements.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Matrix.OffsetX">
            <summary>
            Gets the off set X.
            </summary>
            <value>The off set X.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Matrix.OffsetY">
            <summary>
            Gets the off set Y.
            </summary>
            <value>The off set Y.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfTransparency">
            <summary>
            Represents a simple transparency.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTransparency.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransparency.#ctor(System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfBlendMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Transparency"/> class.
            </summary>
            <param name="stroke">The stroke operation alpha value.</param>
            <param name="fill">The fill operation alpha value.</param>
            <param name="mode">The blend mode.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransparency.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see>
            is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see>
            to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see>
            is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransparency.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            <see cref="M:System.Object.GetHashCode"></see> is suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransparency.GetNumber(System.String)">
            <summary>
            Gets the number value.
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns>The value of the number specified by the string key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTransparency.GetName(System.String)">
            <summary>
            Gets the name value.
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns>The name value specified by the key.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTransparency.Stroke">
            <summary>
            Gets the stroke operation alpha value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTransparency.Fill">
            <summary>
            Gets the fill operation alpha value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTransparency.Mode">
            <summary>
            Gets the blend mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTransparency.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfUnitConvertor">
            <summary>
            Class allowing to convert different unit metrics. Converting is 
            based on Graphics object DPI settings that is why for differ
            graphics settings must be created new instance. For example:
            printers often has 300 and greater dpi resolution, for compare
            default display screen dpi is 96.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfUnitConvertor.HorizontalResolution">
            <summary>
            Indicates default horizontal resolution.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfUnitConvertor.VerticalResolution">
            <summary>
            Indicates default vertical resolution.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfUnitConvertor.HorizontalSize">
            <summary>
            Width, in millimeters, of the physical screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfUnitConvertor.VerticalSize">
            <summary>
            Height, in millimeters, of the physical screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfUnitConvertor.PxHorizontalResolution">
            <summary>
            Width, in pixels, of the screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfUnitConvertor.PxVerticalResolution">
            <summary>
            Height, in pixels, of the screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfUnitConvertor.m_proportions">
            <summary>
            Matrix for conversations between different numeric systems
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfUnitConvertor.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfUnitConvertor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Graphics.PdfUnitConvertor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfUnitConvertor.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitConvertor"/> class.
            </summary>
            <param name="dpi">The dpi.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfUnitConvertor.ConvertUnits(System.Single,Syncfusion.Pdf.Graphics.PdfGraphicsUnit,Syncfusion.Pdf.Graphics.PdfGraphicsUnit)">
            <summary>
            Converts the value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfUnitConvertor.ConvertToPixels(System.Single,Syncfusion.Pdf.Graphics.PdfGraphicsUnit)">
            <summary>
            Converts the value, stored in "from" units, to pixels
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <returns>Value stored in pixels</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfUnitConvertor.ConvertToPixels(System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfGraphicsUnit)">
            <summary>
            Converts the rectangle location and size to Pixels from specified 
            measure units
            </summary>
            <param name="rect">source rectangle</param>
            <param name="from">source rectangle measure units</param>
            <returns>Rectangle with Pixels</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfUnitConvertor.ConvertToPixels(System.Drawing.PointF,Syncfusion.Pdf.Graphics.PdfGraphicsUnit)">
            <summary>
            Converts point from specified measure units to pixels
            </summary>
            <param name="point">source point for convert</param>
            <param name="from">measure units</param>
            <returns>point in pixels coordinates</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfUnitConvertor.ConvertToPixels(System.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfGraphicsUnit)">
            <summary>
            Converts size from specified measure units to pixels
            </summary>
            <param name="size">source size</param>
            <param name="from">measure units</param>
            <returns>size in pixels</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfUnitConvertor.ConvertFromPixels(System.Single,Syncfusion.Pdf.Graphics.PdfGraphicsUnit)">
            <summary>
            Converts value, stored in pixels, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfUnitConvertor.ConvertFromPixels(System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfGraphicsUnit)">
            <summary>
            Converts rectangle in Pixels into rectangle with specified 
            measure units
            </summary>
            <param name="rect">source rectangle in pixels units</param>
            <param name="to">convert to units</param>
            <returns>output Rectangle in specified units</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfUnitConvertor.ConvertFromPixels(System.Drawing.PointF,Syncfusion.Pdf.Graphics.PdfGraphicsUnit)">
            <summary>
            Converts rectangle from pixels to specified units
            </summary>
            <param name="point">point in pixels units</param>
            <param name="to">convert to units</param>
            <returns>output Point in specified units</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfUnitConvertor.ConvertFromPixels(System.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfGraphicsUnit)">
            <summary>
            Converts Size in pixels to size in specified measure units
            </summary>
            <param name="size">source size</param>
            <param name="to">convert to units</param>
            <returns>output size in specified measure units</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfUnitConvertor.UpdateProportions(System.Single)">
            <summary>
            Update proportions matrix according to Graphics settings
            </summary>
            <param name="pixelPerInch">The pixel per inch value.</param>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ProcedureSets.PDF">
            <summary>
            Represents the Painting and graphics state
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ProcedureSets.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ProcedureSets.ImageB">
            <summary>
            Grayscale images or image masks
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ProcedureSets.ImageC">
            <summary>
            Color images
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ProcedureSets.ImageI">
            <summary>
            Indexed (color-table) images
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfHorizontalAlignment">
            <summary>
            Specifies the type of Horizontal alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfHorizontalAlignment.Left">
            <summary>
            Specifies the element is aligned to Left.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfHorizontalAlignment.Center">
            <summary>
            Specifies the element is aligned to Center.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfHorizontalAlignment.Right">
            <summary>
            Specifies the element is aligned to Right.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfVerticalAlignment">
            <summary>
            Specifies the type of Vertical alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfVerticalAlignment.Top">
            <summary>
            Specifies the element is aligned to Top.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfVerticalAlignment.Middle">
            <summary>
            Specifies the element is aligned to Middle.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfVerticalAlignment.Bottom">
            <summary>
            Specifies the element is aligned to Bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfTextAlignment">
            <summary>
            Specifies the type of horizontal text alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTextAlignment.Left">
            <summary>
            Specifies the text is aligned to Left.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTextAlignment.Center">
            <summary>
            Specifies the text is aligned to Center.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTextAlignment.Right">
            <summary>
            Specifies the text is aligned to Right.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfTextAlignment.Justify">
            <summary>
            Specifies the text as Justified text.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.TextRenderingMode">
            <summary>
            Specifies the text rendering mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextRenderingMode.Fill">
            <summary>
            Fill text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextRenderingMode.Stroke">
            <summary>
            Stroke text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextRenderingMode.FillStroke">
            <summary>
            Fill, then stroke text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextRenderingMode.None">
            <summary>
            Neither fill nor stroke text (invisible).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextRenderingMode.ClipFlag">
            <summary>
            The flag showing that the text should be a part of a clipping path.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextRenderingMode.ClipFill">
            <summary>
            Fill text and add to path for clipping (see above).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextRenderingMode.ClipStroke">
            <summary>
            Stroke text and add to path for clipping.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextRenderingMode.ClipFillStroke">
            <summary>
            Fill, then stroke text and add to path for clipping.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.TextRenderingMode.Clip">
            <summary>
            Add text to path for clipping.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfLineJoin">
            <summary>
            Specifies the corner style of the shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLineJoin.Miter">
            <summary>
            The outer edges for the two segments are extended
            until they meet at an angle.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLineJoin.Round">
            <summary>
            An arc of a circle with a diameter equal to the line width is drawn
            around the point where the two segments meet, connecting the outer edges for the two segments.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLineJoin.Bevel">
            <summary>
            The two segments are finished with caps
            and the resulting notch beyond the ends of the segments is filled
            with a triangle.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfLineCap">
             <summary>
            Specifies the line cap style to be used at the ends of the lines.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLineCap.Flat">
            <summary>
            The stroke is squared off at the endpoint of the path. There is no
            projection beyond the end of the path.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLineCap.Round">
            <summary>
            A semicircular arc with a diameter equal to the line width is
            drawn around the endpoint and filled in.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfLineCap.Square">
            <summary>
             The stroke continues beyond the endpoint of the path
            for a distance equal to half the line width and is squared off.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfDashStyle">
            <summary>
            Possible dash styles of the pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfDashStyle.Solid">
            <summary>
            Solid line.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfDashStyle.Dash">
            <summary>
            Dashed line.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfDashStyle.Dot">
            <summary>
            Dotted line.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfDashStyle.DashDot">
            <summary>
            Dash-dot line.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfDashStyle.DashDotDot">
            <summary>
            Dash-dot-dot line.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfDashStyle.Custom">
            <summary>
            User defined dash style.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfFillMode">
             <property name="flag" value="Finished" />
            
             <summary>
             Specifies how the shapes are filled. 
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFillMode.Winding">
             <property name="flag" value="Finished" />
            
             <summary>
             Nonzero winding number rule of determining &quot;insideness&quot;
             of point.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfFillMode.Alternate">
             <property name="flag" value="Finished" />
            
             <summary>
             Even odd rule of determining &quot;insideness&quot; of point.
             </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfColorSpace">
             <property name="flag" value="Finished" />
            
             <summary>
             Defines set of color spaces.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColorSpace.RGB">
             <property name="flag" value="Finished" />
            
             <summary>
             RGB color space.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColorSpace.CMYK">
             <property name="flag" value="Finished" />
            
             <summary>
             CMYK color space.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColorSpace.GrayScale">
             <property name="flag" value="Finished" />
            
             <summary>
             GrayScale color space.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfColorSpace.Indexed">
            <summary>
            Indexed color space used internally.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.ColorIntent">
            <summary>
            Describes the Color intents.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ColorIntent.AbsoluteColorimetric">
            <summary>
            Colors are represented solely with respect to the light source;
            no correction is made for the output medium�s white point
            (such as the color of unprinted paper).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ColorIntent.RelativeColorimetric">
            <summary>
            Colors are represented with respect to the combination of
            the light source and the output medium�s white point
            (such as the color of unprinted paper).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ColorIntent.Saturation">
            <summary>
            Colors are represented in a manner that preserves
            or emphasizes saturation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.ColorIntent.Perceptual">
            <summary>
            Colors are represented in a manner that provides a pleasing
            perceptual appearance.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfBlendMode">
            <summary>
            Specifies the blend mode for transparency.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.Normal">
            <summary>
            Selects the source color, ignoring the backdrop.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.Multiply">
            <summary>
            Multiplies the backdrop and source color values.
            The result color is always at least as dark as either
            of the two constituent colors. Multiplying
            any color with black produces black; multiplying
            with white leaves the original color unchanged.
            Painting successive overlapping objects with a color
            other than black or white produces progressively darker colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.Screen">
            <summary>
            Multiplies the complements of the backdrop and source
            color values, then complements the result. The result
            color is always at least as light as either of the two
            constituent colors. Screening any color with white
            produces white; screening with black leaves the original
            color unchanged. The effect is similar to projecting
            multiple photographic slides simultaneously onto a single screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.Overlay">
            <summary>
            Multiplies or screens the colors, depending on
            the backdrop color value. Source colors overlay
            the backdrop while preserving its highlights and
            shadows. The backdrop color is not replaced but
            is mixed with the source color to reflect the
            lightness or darkness of the backdrop.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.Darken">
            <summary>
            Selects the darker of the backdrop and source colors.
            The backdrop is replaced with the source where the source
            is darker; otherwise, it is left unchanged.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.Lighten">
            <summary>
            Selects the lighter of the backdrop and source colors.
            The backdrop is replaced with the source where the source
            is lighter; otherwise, it is left unchanged.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.ColorDodge">
            <summary>
            Brightens the backdrop color to reflect the source color.
            Painting with black produces no changes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.ColorBurn">
            <summary>
            Darkens the backdrop color to reflect the source color.
            Painting with white produces no change.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.HardLight">
            <summary>
            Multiplies or screens the colors, depending on the source color value.
            The effect is similar to shining a harsh spotlight on the backdrop.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.SoftLight">
            <summary>
            Darkens or lightens the colors, depending on the source color value.
            The effect is similar to shining a diffused spotlight on the backdrop.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.Difference">
            <summary>
            Subtracts the darker of the two constituent colors from the lighter color.
            Painting with white inverts the backdrop color; painting with black produces no change.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.Exclusion">
            <summary>
            Produces an effect similar to that of the Difference mode
            but lower in contrast. Painting with white inverts 
            the backdrop color; painting with black produces no change.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.Hue">
            <summary>
            Creates a color with the hue of the source color and 
            the saturation and luminosity of the backdrop color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.Saturation">
            <summary>
            Creates a color with the saturation of the source color
            and the hue and luminosity of the backdrop color. Painting
            with this mode in an area of the backdrop that is a pure
            gray (no saturation) produces no change.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.Color">
            <summary>
            Creates a color with the hue and saturation of
            the source color and the luminosity of the backdrop
            color. This preserves the gray levels of the backdrop
            and is useful for coloring monochrome images or tinting color images.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfBlendMode.Luminosity">
            <summary>
            Creates a color with the luminosity of the source color
            and the hue and saturation of the backdrop color. This
            produces an inverse effect to that of the Color mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfImageType">
            <summary>
            Specifies the type of the PdfImage.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfImageType.Bitmap">
            <summary>
            Specifies the image is bitmap.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfImageType.Metafile">
            <summary>
            Specifies the image is metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfGraphicsUnit">
            <summary>
            Specifies the types of the page's logical units.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsUnit.Centimeter">
            <summary>
            Specifies the Measurement is in centimeters.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsUnit.Pica">
            <summary>
            Specifies the Measurement is in picas. A pica represents 12 points.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsUnit.Pixel">
            <summary>
            Specifies the unit of measurement is 1 pixel.
            </summary>
            <remarks>Pixel unit is device dependent unit. The result depends on the default Dpi on the machine.</remarks>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsUnit.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsUnit.Inch">
            <summary>
            Specifies the inch as the unit of measure. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsUnit.Document">
            <summary>
            Specifies the document unit (1/300 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfGraphicsUnit.Millimeter">
            <summary>
            Specifies the Measurement is in millimeters.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfGridImagePosition">
            <summary>
            Specifies the alignment type.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.BigEndianReader">
            <summary>
            Reader of the big endian data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.BigEndianReader.Int32Size">
            <summary>
            Size of Int32 type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.BigEndianReader.Int16Size">
            <summary>
            Size of Int16 type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.BigEndianReader.Int64Size">
            <summary>
            Size of long type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.BigEndianReader.c_fraction">
            <summary>
            Fraction coefficient for getting fixed type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.BigEndianReader.c_encoding">
            <summary>
            Reader encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.BigEndianReader.m_reader">
            <summary>
            Binary reader.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.IO.BigEndianReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.Close">
            <summary>
            Closes all resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.Seek(System.Int64)">
            <summary>
            Seeks reader to the sepcified position.
            </summary>
            <param name="position">Position of the reader.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.Skip(System.Int64)">
            <summary>
            Skips number of bytes.
            </summary>
            <param name="numBytes">Number of bytes to skip.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.Reverse(System.Byte[])">
            <summary>
            Reverts array elements.
            </summary>
            <param name="buffer">Byte array.</param>
            <returns>Reverted array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.ReadInt64">
            <summary>
            Reads 64 bit integer.
            </summary>
            <returns>64 bit integer.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.ReadUInt64">
            <summary>
            Reads 64 bit integer.
            </summary>
            <returns>64 bit integer.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.ReadInt32">
            <summary>
            Reads 32 bit integer.
            </summary>
            <returns>32 bit integer.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.ReadUInt32">
            <summary>
            Reads 32 bit integer.
            </summary>
            <returns>32 bit integer.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.ReadInt16">
            <summary>
            Reads 16 bit integer.
            </summary>
            <returns>16 bit integer.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.ReadUInt16">
            <summary>
            Reads 16 bit integer.
            </summary>
            <returns>16 bit integer.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.ReadByte">
            <summary>
            Reads one byte.
            </summary>
            <returns>One byte.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.ReadFixed">
            <summary>
            Reads FIXED data type (16.16) fixed point number.
            </summary>
            <returns>FIXED data type (16.16) fixed point number.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.ReadBytes(System.Int32)">
            <summary>
            Reads bytes from the reader.
            </summary>
            <param name="count">Number of bytes.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.ReadString(System.Int32)">
            <summary>
            Reads string.
            </summary>
            <param name="len">Size of the string in bytes.</param>
            <returns>String data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.ReadString(System.Int32,System.Boolean)">
            <summary>
            Reads string.
            </summary>
            <param name="len">Size of the string in bytes.</param>
            <param name="unicode">Indicates whethere string is unicode or not.</param>
            <returns>String data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes to array in BigEndian order.
            </summary>
            <param name="buffer">Byte array.</param>
            <param name="index">Start index.</param>
            <param name="count">Number bytes to read.</param>
            <returns>Number bytes that was read.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.IO.BigEndianReader.Reader">
            <summary>
            Gets or sets binary reader.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.BigEndianReader.BaseStream">
            <summary>
            Gets base stream.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.BigEndianWriter">
            <summary>
            Writes data in BigEndian order.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.BigEndianWriter.Int32Size">
            <summary>
            Size of Int32 type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.BigEndianWriter.Int16Size">
            <summary>
            Size of Int16 type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.BigEndianWriter.Int64Size">
            <summary>
            Size of long type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.BigEndianWriter.c_fraction">
            <summary>
            Fraction coefficient for getting fixed type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.BigEndianWriter.c_encoding">
            <summary>
            Reader encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.BigEndianWriter.m_buffer">
            <summary>
            Internal buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.BigEndianWriter.m_position">
            <summary>
            Current position.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianWriter.#ctor(System.Int32)">
            <summary>
            Creates a new writer.
            </summary>
            <param name="capacity">Capacity of the data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianWriter.Write(System.Int16)">
            <summary>
            Writes short value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianWriter.Write(System.UInt16)">
            <summary>
            Writes ushort value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianWriter.Write(System.Int32)">
            <summary>
            Writes int value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianWriter.Write(System.UInt32)">
            <summary>
            Writes uint value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianWriter.Write(System.String)">
            <summary>
            Writes string value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianWriter.Write(System.Byte[])">
            <summary>
            Writes byte[] value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.BigEndianWriter.Flush(System.Byte[])">
            <summary>
            Writes array to the buffer.
            </summary>
            <param name="buff">Byte data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.IO.BigEndianWriter.Data">
            <summary>
            Gets data written to the writter.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.BigEndianWriter.Position">
            <summary>
            Gets position of the internal buffer.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.CrossTable">
            <summary>
            CrossTable is a class that performs low-level I/O
            for parsing a PDF cross reference table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.m_stream">
            <summary>
            Holds the stream.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.m_reader">
            <summary>
            Holds the stream reader.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.m_parser">
            <summary>
            The parser of the reader.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.m_objects">
            <summary>
            A container of all object offsets.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.m_trailer">
            <summary>
            The document trailer.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.m_documentCatalog">
            <summary>
            A chache variable for chaching the document catalog offset.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.m_startXRef">
            <summary>
            The last cross-reference table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.m_readersTable">
            <summary>
            The storage for stream object readers.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.m_archives">
            <summary>
            The table of the archives within the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.m_encryptor">
            <summary>
            The document encryptor.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.m_crossTable">
            <summary>
            The high level cross-table. It's required for convertion
            PDFReferences into PDFReferenceHolders.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Pdf.IO.CrossTable.m_initialNumberOfSubsection" -->
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Pdf.IO.CrossTable.m_totalNumberOfSubsection" -->
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Pdf.IO.CrossTable.m_isStructureAltered" -->
        <member name="M:Syncfusion.Pdf.IO.CrossTable.#ctor(System.IO.Stream,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Searches for all instances of reference tables and parses them.
            </summary>
            <param name="docStream">The stream with the document.</param>
            <param name="crossTable">The high-level cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.GetObject(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Retrieves an object by its reference.
            </summary>
            <param name="pointer">The reference of the object.</param>
            <returns>The object read from its reference.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.GetStream(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Retrieves a PDF stream from a PDF document.
            </summary>
            <param name="streamRef">The reference object to the stream.</param>
            <returns>The array of bytes taken from the PDF stream.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.ParseNewTable(Syncfusion.Pdf.Primitives.PdfStream,System.Collections.Generic.Dictionary{System.Int64,Syncfusion.Pdf.IO.CrossTable.ObjectInformation})">
            <summary>
            Parses the new table.
            </summary>
            <param name="stream">The cross-reference table stream.</param>
            <param name="hashTable">The hash table of the objects.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.ParseSubsection(Syncfusion.Pdf.IO.PdfParser,System.Collections.Generic.Dictionary{System.Int64,Syncfusion.Pdf.IO.CrossTable.ObjectInformation})">
            <summary>
            Parses current subsection.
            </summary>
            <param name="parser">The PDF stream reader with the file in.</param>
            <param name="table">The table with the offsets foud.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.RetrieveParser(Syncfusion.Pdf.IO.CrossTable.ArchiveInformation)">
            <summary>
            Retrieves a PDF reader by the archive information.
            </summary>
            <param name="archive"></param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.RetrieveArchive(System.Int64)">
            <summary>
            Retrieves an archive by its number.
            </summary>
            <returns>The archive.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.GetSections(Syncfusion.Pdf.Primitives.PdfStream)">
            <summary>
            Parses the dictionary and retrieves the subsection information
            in the ArrayList.
            </summary>
            <param name="stream">A PDF stream representing a cross-reference
            stream dictionary.</param>
            <returns>The information about subsections.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.ParseSubsection(Syncfusion.Pdf.Primitives.PdfStream,Syncfusion.Pdf.IO.CrossTable.SubSection,System.Collections.Generic.Dictionary{System.Int64,Syncfusion.Pdf.IO.CrossTable.ObjectInformation},System.Int32)">
            <summary>
            Parses a subsection within a cros-reference stream.
            </summary>
            <param name="stream">A cross-reference stream.</param>
            <param name="subsection">A structure that specifies a subsection.</param>
            <param name="table">The table with the offsets foud.</param>
            <param name="startIndex">The start position within the stream data.</param>
            <returns>The start position of the next subsection.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.GetObject(Syncfusion.Pdf.IO.PdfParser,System.Int64)">
            <summary>
            Retrieves an object by its reference.
            </summary>
            <param name="parser">The PDF parser.</param>
            <param name="position">The position within the reader's stream.</param>
            <returns>The object read from its reference.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.CheckJunk">
            <summary>
            Skip junk string from the PDF
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.Item(System.Int64)">
            <summary>
            Returns the offset of an obkect specified.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.Count">
            <summary>
            Returns the number of the objects which have been found.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.DocumentCatalog">
            <summary>
            Gets the document catalog address.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.Stream">
            <summary>
            Returns the stream.
            </summary>
            <remarks>Use with caution.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.XRefOffset">
            <summary>
            Returns the offset of the last cross-reference table.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.Reader">
            <summary>
            Returns the steream reader.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.Parser">
            <summary>
            Gets the parser.
            </summary>
            <value>The parser.</value>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.Trailer">
            <summary>
            Returns the document's trailer.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.IO.CrossTable.IsStructureAltered" -->
        <member name="P:Syncfusion.Pdf.IO.CrossTable.Encryptor">
            <summary>
            Gets or sets the encryptor.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.CrossTable.ObjectType">
            <summary>
            Represents a type of an object.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.CrossTable.ArchiveInformation">
            <summary>
            Stores information about a PDF packed object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.ArchiveInformation.m_archiveNumber">
            <summary>
            A number of an object stream that holds the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.ArchiveInformation.m_index">
            <summary>
            The index of the object within the archive.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.ArchiveInformation.m_archive">
            <summary>
            The archive.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.ArchiveInformation.m_getArchive">
            <summary>
            Delegate that retrieves an archive by its number.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.ArchiveInformation.#ctor(System.Int64,System.Int64,Syncfusion.Pdf.IO.CrossTable.GetArchive)">
            <summary>
            Initialize the archive information class with the archive number and
            the index within the archive.
            </summary>
            <param name="arcNum">The archive number.</param>
            <param name="index">The index within the archive.</param>
            <param name="getArchive">The GetArchive delegade.</param>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.ArchiveInformation.Archive">
            <summary>
            Gets a number of an object stream that holds the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.ArchiveInformation.Index">
            <summary>
            Gets the index of the object within the archive.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.ArchiveInformation.ArchiveNumber">
            <summary>
            Gets the archive number.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.CrossTable.ObjectInformation">
            <summary>
            Stores information about an PDF indirect object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.ObjectInformation.m_type">
            <summary>
            The type of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.ObjectInformation.m_archive">
            <summary>
            The archive information.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.ObjectInformation.m_parser">
            <summary>
            The PDF reader wich can read from the archive.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.ObjectInformation.m_offset">
            <summary>
            The offset of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.ObjectInformation.m_crossTable">
            <summary>
            The CrossTable class instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.ObjectInformation.op_Implicit(Syncfusion.Pdf.IO.CrossTable.ObjectInformation)~System.Int64">
            <summary>
            Converts an Object information into the offset.
            </summary>
            <param name="oi">An ObjectInformation class instance.</param>
            <returns>The offset of zero.</returns>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.ObjectInformation.Obj">
            <summary>
            Holds the parsed object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.ObjectInformation.#ctor(Syncfusion.Pdf.IO.CrossTable.ObjectType,System.Int64,Syncfusion.Pdf.IO.CrossTable.ArchiveInformation,Syncfusion.Pdf.IO.CrossTable)">
            <summary>
            Initialize the object information object.
            </summary>
            <param name="type">The object's type.</param>
            <param name="offset">The object's offset or <b>zero</b>.</param>
            <param name="arciveInfo">The archive info or <b>null</b>.</param>
            <param name="crossTable">The low-level reading cross table.</param>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.ObjectInformation.Type">
            <summary>
            Gets the type of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.ObjectInformation.Parser">
            <summary>
            The PDF reader wich can read from the archive.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.ObjectInformation.Offset">
            <summary>
            The offset of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.CrossTable.ObjectInformation.Archive">
            <summary>
            Gets the archive information.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.CrossTable.SubSection">
            <summary>
            Represents a subsection in a cross-reference stream.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.SubSection.StartNumber">
            <summary>
            The first object number in the subsection.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.CrossTable.SubSection.Count">
            <summary>
            The total number of the objects within the subsection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.SubSection.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize the subsection with start number and count.
            </summary>
            <param name="start">The first object number in the subsection.</param>
            <param name="count">The total number of the objects within the subsection.
            </param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.CrossTable.SubSection.#ctor(System.Int32)">
            <summary>
            Initialize the subsection with count.
            </summary>
            <param name="count">The total number of the objects within the subsection.
            </param>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PdfArchiveStream">
             <property name="flag" value="Finished" />
            
             <summary>
             Implements functionality of PDF object stream (or PDF
             archive).
             </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Security.IPdfDecryptable">
            <summary>
            Interface of the objects that support Decryptable of their internals.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Security.IPdfDecryptable.Decrypt(Syncfusion.Pdf.Security.PdfEncryptor,System.Int64)">
            <summary>
            Decrypts the specified encryptor.
            </summary>
            <param name="encryptor">The encryptor.</param>
            <param name="currObjNumber">The curr obj number.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Security.IPdfDecryptable.WasEncrypted">
            <summary>
            Gets a value indicating whether [was encrypted].
            </summary>
            <value><c>true</c> if [was encrypted]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Security.IPdfDecryptable.Decrypted">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Pdf.Security.IPdfDecryptable"/> is decrypted.
            </summary>
            <value><c>true</c> if decrypted; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfStream.m_clonedObject">
            <summary>
            Internal variable to hold cloned object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfStream"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:PdfStream"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.StreamToBytes(System.IO.Stream)">
            <summary>
            Gets bytes of the stream.
            </summary>
            <param name="stream">Stream to be converted.</param>
            <returns>Destination bytes.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.StreamToBytes(System.IO.Stream,System.Boolean)">
            <summary>
            Gets bytes of the stream.
            </summary>
            <param name="stream">Stream to be converted.</param>
            <param name="writeWholeStream">Indicates whether to write the whole stream.</param>
            <returns>Destination bytes.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.StreamToBigEndian(System.IO.Stream)">
            <summary>
            Converts a stream to bigendian format.
            </summary>
            <param name="stream">A stream containing data.</param>
            <returns>A stream in bigendian format.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.Write(System.Char)">
            <summary>
            Writes the specified symbol.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.Write(System.String)">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.Write(System.Byte[])">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.BlockEncryption">
            <summary>
            Blocks the encryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.Decompress">
            <summary>
            Decompresses this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.Clear">
            <summary>
            Cleares a stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.Save(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Saves the object using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.Clone(Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates a copy of PdfStream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.Decrypt(Syncfusion.Pdf.Security.PdfEncryptor,System.Int64)">
            <summary>
            Decrypts the data using the specified encryptor.
            </summary>
            <param name="encryptor">The encryptor.</param>
            <param name="currObjNumber">The current object number.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.Decompress(System.Byte[],System.String)">
            <summary>
            Decompresses the stream data.
            </summary>
            <param name="data">The data to decompress.</param>
            <param name="filter">The filter name.</param>
            <returns>Uncompressed byte array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.DetermineCompressor(System.String)">
            <summary>
            Returnes a compressor by its name.
            </summary>
            <param name="filter">The name of the compressor.</param>
            <returns>IPDFCompressor interface.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.PostProcess(System.Byte[],System.String)">
            <summary>
            Performs postprocessing of the data for the filter specified.
            </summary>
            <param name="data">The data to process.</param>
            <param name="filter">The filter.</param>
            <returns>Restored data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.NormalizeFilter">
            <summary>
            Normalizes the filter. If the filter array has only one element store that element
            instead of entire array.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.CompressContent(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Compresses the content if it's required.
            </summary>
            <param name="writer">The writer.</param>
            <returns>The compressed data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.AddFilter(System.String)">
            <summary>
            Adds a filter to the filter array.
            </summary>
            <param name="filterName">Name of the filter.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfStream.EncryptContent(System.Byte[],Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Encrypts the stream content.
            </summary>
            <param name="data">The data.</param>
            <param name="writer">The writer.</param>
            <returns>The encrypted content.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfStream.InternalStream">
            <summary>
            Gets the internal stream.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfStream.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <remarks>The modifications of the returned stream
            have no impact on the real data.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfStream.Compress">
            <summary>
            Gets or sets compression flag.
            </summary>
            <value><c>true</c> if compress; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfStream.ClonedObject">
            <summary>
            Returns cloned object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfStream.WasEncrypted">
            <summary>
            Gets a value indicating whether the object was encrypted.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfStream.Decrypted">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Pdf.Primitives.PdfStream"/> is decrypted.
            </summary>
            <value><c>true</c> if decrypted; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfArchiveStream.m_indices">
             <property name="flag" value="Finished" />
            
             <summary>
             Holds sorted indices.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfArchiveStream.m_objects">
             <property name="flag" value="Finished" />
            
             <summary>
             Holds the objects.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfArchiveStream.m_writer">
             <property name="flag" value="Finished" />
            
             <summary>
             PDF stream writer.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfArchiveStream.m_objectWriter">
             <property name="flag" value="Finished" />
            
             <summary>
             PDF stream writer.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfArchiveStream.m_document">
             <property name="flag" value="Finished" />
            
             <summary>
             The current document.
             </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfArchiveStream.#ctor(Syncfusion.Pdf.PdfDocumentBase)">
             <property name="flag" value="Finished" />
            
             <summary>
             Initializes a new instance of the <see cref="T:PDFArchiveStream" />
             class.
             </summary>
             <param name="document">The document.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfArchiveStream.SaveObject(Syncfusion.Pdf.Primitives.IPdfPrimitive,Syncfusion.Pdf.Primitives.PdfReference)">
             <property name="flag" value="Finished" />
            
             <summary>
             Saves the object.
             </summary>
             <param name="obj">The object.</param>
             <param name="reference">The reference.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfArchiveStream.GetIndex(System.Int64)">
             <property name="flag" value="Finished" />
            
             <summary>
             Gets the index of the object referenced by its number.
             </summary>
             <param name="objNum">The object number.</param>
             <returns>
             The index of the object.
             </returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfArchiveStream.Save(Syncfusion.Pdf.IO.IPdfWriter)">
             <property name="flag" value="Finished" />
            
             <summary>
             Writes object to defined writer.
             </summary>
             <param name="writer">Writer for object saving.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfArchiveStream.Clear">
            <summary>
            Clears the PdfArchiveStream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfArchiveStream.SaveObjects">
             <property name="flag" value="Finished" />
            
             <summary>
             Saves objects.
             </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfArchiveStream.SaveIndices">
             <property name="flag" value="Finished" />
            
             <summary>
             Saves indices.
             </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfArchiveStream.ObjCount">
             <property name="flag" value="Finished" />
            
             <summary>
             Gets the count of objects.
             </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PdfArchiveStream.ObjInfo">
             <property name="flag" value="Finished" />
            
             <summary>
             Stores information about current object and index.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfArchiveStream.ObjInfo.Obj">
             <property name="flag" value="Finished" />
            
             <summary>
             Current object.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfArchiveStream.ObjInfo.Index">
             <property name="flag" value="Finished" />
            
             <summary>
             The current index within the object.
             </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfArchiveStream.ObjInfo.#ctor(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
             <property name="flag" value="Finished" />
            
             <summary>
             Initializes a new instance of the <see cref="T:ObjInfo" />
             class.
             </summary>
             <param name="obj">The object.</param>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PdfCrossTable">
            <summary>
            PDFCrossTable is responsible for intermediate level parsing
            and savingof a PDF document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_crossTable">
            <summary>
            The low level implementation of the cross-reference table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_documentCatalog">
            <summary>
            The document catalog.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_stream">
            <summary>
            The stream the file within.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_objects">
            <summary>
            The modified objects that should be saved.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_count">
            <summary>
            The number of the objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_bDisposed">
            <summary>
            Shows if the class have been dicposed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_trailer">
            <summary>
            The trailer for a new document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_document">
            <summary>
            The main PdfDocument class instance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_bForceNew">
            <summary>
            Flag that forces an object to be 'a new'.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_objNumbers">
            <summary>
            The obj number stack. Holds object numbers
            that are used to decode strings and streams.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_maxGenNumIndex">
            <summary>
            Holds maximal generation number or offset to object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_archive">
            <summary>
            The current object archive.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_mappedReferences">
            <summary>
            The mapped references.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_storedCount">
            <summary>
            The value of the count stored
            before count was wiped out.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_archives">
            <summary>
            The list of the completed archives.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_bEncrypt">
            <summary>
            Internal variable to identify the current object is PdfEncryptor or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_pageCorrespondance">
            <summary>
            Internal variable to store pages.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_preReference">
            <summary>
            Internal variable to store reference.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_isMerging">
            <summary>
            Internal variable to store if document is being merged.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.m_isColorSpace">
            <summary>
            internal varible to conform colorspace
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.#ctor(System.IO.Stream)">
            <summary>
            The costructor of the table.
            </summary>
            <param name="docStream">A stream which contains the document.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.#ctor">
            <summary>
            A costructor thar initialize a new cross table.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.#ctor(System.Int32,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.IO.PdfCrossTable"/> class.
            </summary>
            <param name="count">The count.</param>
            <param name="encryptionDictionary">The encryption dictionary.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.Pdf.IO.PdfCrossTable"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.Dereference(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Dereferences the specified primitive object.
            </summary>
            <param name="obj">The primitive object.</param>
            <returns>Dereferenced object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.GetObject(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Retrieves an object by its reference.
            </summary>
            <param name="pointer">The reference of the object.</param>
            <returns>The object read from its reference.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.Decrypt(Syncfusion.Pdf.Security.IPdfDecryptable)">
            <summary>
            Decrypt a decryptable object. Should be called during Prepare().
            </summary>
            <param name="obj">The decrypted object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.Decrypt(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Decrypts the specified obj.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.GetStream(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Retrieves a PDF stream from a PDF document.
            </summary>
            <param name="streamRef">The reference object to the stream.</param>
            <returns>The array of bytes taken from the PDF stream.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.RegisterObject(System.Int64,Syncfusion.Pdf.Primitives.PdfReference)">
            <summary>
            Registers the object in the cross reference table.
            </summary>
            <param name="offset">The offset of the object within the file</param>
            <param name="reference">The representation of the reference to the object.
            </param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.RegisterObject(Syncfusion.Pdf.IO.PdfArchiveStream,Syncfusion.Pdf.Primitives.PdfReference)">
            <summary>
            Registers an archived object.
            </summary>
            <param name="archive">The archive.</param>
            <param name="reference">The reference to the object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.RegisterObject(System.Int64,Syncfusion.Pdf.Primitives.PdfReference,System.Boolean)">
            <summary>
            Registers the object in the cross reference table.
            </summary>
            <param name="offset">The offset of the object within the file</param>
            <param name="reference">The representation of the reference to the object.
            </param>
            <param name="free">True if object is free.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.Save(Syncfusion.Pdf.IO.PdfWriter)">
            <summary>
            Saves the cross-reference table into the stream.
            </summary>
            <param name="writer">The stream writer to save the cross-reference table into.
            </param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.GetReference(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Retrieves the reference of the object given.
            </summary>
            <param name="obj">The object.</param>
            <returns>The reference.</returns>
            <remarks>If there is no registered reference, create a new one and register
            it.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.GetReference(Syncfusion.Pdf.Primitives.IPdfPrimitive,System.Boolean@)">
            <summary>
            Retrieves the reference of the object given.
            </summary>
            <param name="obj">The object.</param>
            <param name="bNew">The output flag, which shows if the object is new.</param>
            <returns>The reference.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.ForceNew">
            <summary>
            Forces all object to be 'a new'.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.MarkTrailerReferences">
            <summary>
            Marks the trailer references being saved.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.PageProceed(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Checks if an object is a page and convert it into a loaded page if necessary.
            </summary>
            <param name="obj">The object, which should be checked.</param>
            <returns>The checked and modified object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.PrepareXRefStream(System.Int64,System.Int64,Syncfusion.Pdf.Primitives.PdfReference@)">
            <summary>
            Prepares the cross-reference stream.
            </summary>
            <param name="prevXRef">The offset to the previous cross-reference stream.</param>
            <param name="position">The current position.</param>
            <param name="reference">The reference.</param>
            <returns>Prepared cross-reference stream.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.GetSize(System.UInt64)">
            <summary>
            Gets the minimal number of bytes required to save the number.
            </summary>
            <param name="number">The number.</param>
            <returns>How much bytes required.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.SaveSubsection(System.IO.BinaryWriter,System.Int64,System.Int64,System.Int32[])">
            <summary>
            Saves the subsection.
            </summary>
            <param name="xRefStream">The binary writer of cross-reference stream.</param>
            <param name="objectNum">The object number.</param>
            <param name="count">The count.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.SaveLong(System.IO.BinaryWriter,System.Int64,System.Int32)">
            <summary>
            Saves the long.
            </summary>
            <param name="xRefStream">The xref stream.</param>
            <param name="number">The number.</param>
            <param name="count">The count of bytes.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.SetSecurity">
             <property name="flag" value="Finished" />
            
             <summary>
             Sets the security to the document.
             </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.SaveObjects(Syncfusion.Pdf.IO.PdfWriter)">
             <property name="flag" value="Finished" />
            
             <summary>
             Saves all objects in the collection.
             </summary>
             <param name="writer">Writer object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.SaveArchives(Syncfusion.Pdf.IO.PdfWriter)">
            <summary>
            Saves the archives.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.GetMappedReference(Syncfusion.Pdf.Primitives.PdfReference)">
            <summary>
            Gets the mapped reference.
            </summary>
            <param name="reference">The reference.</param>
            <returns>The mapped reference.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.FindArchiveReference(Syncfusion.Pdf.IO.PdfArchiveStream)">
            <summary>
            Finds the archive reference.
            </summary>
            <param name="archive">The archive.</param>
            <returns>The reference found.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.SaveIndirectObject(Syncfusion.Pdf.Primitives.IPdfPrimitive,Syncfusion.Pdf.IO.PdfWriter)">
             <property name="flag" value="Finished" />
            
             <summary>
             Saves indirect object.
             </summary>
             <param name="obj">Indirect object that should be saved.</param>
             <param name="writer">Writer object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.DoArchiveObject(Syncfusion.Pdf.Primitives.IPdfPrimitive,Syncfusion.Pdf.Primitives.PdfReference,Syncfusion.Pdf.IO.PdfWriter)">
            <summary>
            Retrieves the reference of the given object.
            </summary>
            <param name="obj">The object.</param>
            <param name="reference">The reference.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.SaveArchive(Syncfusion.Pdf.IO.PdfWriter)">
            <summary>
            Saves the current archive.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.DoSaveObject(Syncfusion.Pdf.Primitives.IPdfPrimitive,Syncfusion.Pdf.Primitives.PdfReference,Syncfusion.Pdf.IO.PdfWriter)">
            <summary>
            Performs real saving of the save object.
            </summary>
            <param name="obj">The object.</param>
            <param name="reference">The reference.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.GeneratePagesRoot">
            <summary>
            Generates the document page root dictionary object.
            </summary>
            <returns>The document page root dictionary object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.SaveSections(Syncfusion.Pdf.IO.PdfWriter)">
            <summary>
            Saves the xref section.
            </summary>
            <param name="writer">The stream writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.PrepareSubsection(System.Int64@)">
            <summary>
            Prepares a subsection of the current section within the cross-reference table.
            </summary>
            <param name="objectNum">The first object in the subsection.</param>
            <returns>The number of the entries in the section.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.SaveSubsection(Syncfusion.Pdf.IO.PdfWriter,System.Int64,System.Int64)">
            <summary>
            Saves a subsection.
            </summary>
            <param name="writer">A PDF writer.</param>
            <param name="objectNum">The firs object in the subsection.</param>
            <param name="count">The number of the indirect objects in the subsection.
            </param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.GetItem(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Generates string for xref table item.
            </summary>
            <param name="offset">Offset of the object in the file.</param>
            <param name="genNumber">The generation number of the object.</param>
            <param name="isFree">Indicates whether object is free.</param>
            <returns>String representation of the item.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.SaveTrailer(Syncfusion.Pdf.IO.PdfWriter,System.Int64,System.Int64)">
            <summary>
            Saves the new trailer dictionary.
            </summary>
            <param name="writer">A PDF writer.</param>
            <param name="count">The total number of the objects.</param>
            <param name="prevXRef">The PrevXRef value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.ForceIDHex(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Forces the ID to be in hex.
            </summary>
            <param name="trailer">The trailer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.SaveTheEndess(Syncfusion.Pdf.IO.PdfWriter,System.Int64)">
            <summary>
            Saves the endess of the file.
            </summary>
            <param name="writer">A PDF writer.</param>
            <param name="xrefPos">The xref position.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.SaveHead(Syncfusion.Pdf.IO.PdfWriter)">
            <summary>
            Saves the head.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.GenerateFileVersion(Syncfusion.Pdf.PdfDocumentBase)">
            <summary>
            Generates the version of the file.
            </summary>
            <param name="document">the parent document.</param>
            <returns>The version of the file.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.IsCrossReferenceStream(Syncfusion.Pdf.PdfDocumentBase)">
            <summary>
            Checks the cross-reference type in the document.
            </summary>
            <param name="document">The parent document.</param>
            <returns>True if cross-reference is a stream, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.Dispose">
            <summary>
            Frees all resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="completely"><c>true</c> to release both managed and
            unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.Encrypted">
            <summary>
            Gets or sets the current object is PdfEncryptor or not. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.DocumentCatalog">
            <summary>
            Returns the document catalog.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.Stream">
            <summary>
            Returns the source stream.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.NextObjNumber">
            <summary>
            Returns next available object number.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.CrossTable">
            <summary>
            Returns a low-level cross-reference table parser.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.Count">
            <summary>
            Gets or sets the number of the objects within the document.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.Document">
            <summary>
            Gets or sets the main PdfDocument class instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.PdfObjects">
            <summary>
            Gets the chached PDF object main collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.Trailer">
            <summary>
            Gets the trailer.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.IsMerging">
            <summary>
            Gets or sets if the document is merged.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.Encryptor">
            <summary>
            Gets or sets the encryptor.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.ObjectCollection">
            <summary>
            Gets the object collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.EncryptorDictionary">
            <summary>
            Gets the security dictionary.
            </summary>
            <value>The security dictionary.</value>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.PageCorrespondance">
            <summary>
            Gets or sets page correspondance up on each page import.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.PrevReference">
            <summary>
            Gets or sets the PdfReference of latest processed object.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PdfCrossTable.RegisteredObject">
            <summary>
            Represents a registered object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.RegisteredObject.m_objectNumber">
            <summary>
            The object number of the indirect object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.RegisteredObject.GenerationNumber">
            <summary>
            The generation number of the indirect object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.RegisteredObject.m_offset">
            <summary>
            The offset of the indirect object within the file.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.RegisteredObject.m_archive">
            <summary>
            Archive.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.RegisteredObject.Type">
            <summary>
            Shows if the object is free.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.RegisteredObject.m_xrefTable">
            <summary>
            Holds the current cross-reference table.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.RegisteredObject.#ctor(System.Int64,Syncfusion.Pdf.Primitives.PdfReference)">
            <summary>
            Initialize the structure with the proper values.
            </summary>
            <param name="offset">The offset of the object.</param>
            <param name="reference">The reference representing the object number and
            the generation number of the indirect object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.RegisteredObject.#ctor(System.Int64,Syncfusion.Pdf.Primitives.PdfReference,System.Boolean)">
            <summary>
            Initialize the structure with the proper values.
            </summary>
            <param name="offset">The offset of the object.</param>
            <param name="reference">The reference representing the object number and
            the generation number of the indirect object.</param>
            <param name="free">Shows if the object is free.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.RegisteredObject.#ctor(Syncfusion.Pdf.IO.PdfCrossTable,Syncfusion.Pdf.IO.PdfArchiveStream,Syncfusion.Pdf.Primitives.PdfReference)">
            <summary>
            Initializes a new instance of the <see cref="T:RegisteredObject"/> class.
            </summary>
            <param name="xrefTable">The xref table.</param>
            <param name="archive">The archive.</param>
            <param name="reference">The reference.</param>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.RegisteredObject.ObjectNumber">
            <summary>
            Gets the object number.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfCrossTable.RegisteredObject.Offset">
            <summary>
            Gets the offset.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PdfCrossTable.ArchiveInfo">
            <summary>
            Stores information about an archive.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.ArchiveInfo.Reference">
            <summary>
            The object number of the archive.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfCrossTable.ArchiveInfo.Archive">
            <summary>
            The archive stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfCrossTable.ArchiveInfo.#ctor(Syncfusion.Pdf.Primitives.PdfReference,Syncfusion.Pdf.IO.PdfArchiveStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.IO.PdfCrossTable.ArchiveInfo"/> class.
            </summary>
            <param name="reference">The reference.</param>
            <param name="archive">The archive.</param>
        </member>
        <member name="T:Syncfusion.Pdf.IO.DictionaryProperties">
            <summary>
            PDF dictionary properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfLexer.Prefix">
            <summary>
            Start marker for dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfLexer.m_string">
            <summary>
            Holds the current string being read.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfLexer.m_paren">
            <summary>
            Holds the current parentessis index.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfLexer.m_bSkip">
            <summary>
            Holds the current dictionary  is structured or unstructured.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfLexer.Reset">
            <summary>
            Resets the lexer.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfLexer.Read(System.Int32)">
            <summary>
            Reads the count bytes from the stream.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>
            The data which were read from the stream.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfLexer.SkipNewLine">
            <summary>
            Skips the new line.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfLexer.SkipToken">
            <summary>
            Skips the token.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfLexer.GetNextToken">
            <summary>
            Gets the next token.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfLexer.Text">
            <summary>
            Returns the current text value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfLexer.Line">
            <summary>
            Gets current line number.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfLexer.StringText">
            <summary>
            Gets the current string being read.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfLexer.Position">
            <summary>
            Returns file position.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfLexer.Skip">
            <summary>
            Gets or sets the current dictionary is structured or unstructured.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PdfMainObjectCollection">
            <summary>
            The collection of all objects within a PDF document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMainObjectCollection.m_objectCollection">
            <summary>
            The collection of the indirect objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMainObjectCollection.m_index">
            <summary>
            Holds the index of the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:PdfMainObjectCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.Add(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.Add(Syncfusion.Pdf.Primitives.IPdfPrimitive,Syncfusion.Pdf.Primitives.PdfReference)">
            <summary>
            Adds the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.Remove(System.Int32)">
            <summary>
            Removes the entry using index.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.Contains(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Determines whether the specified element is within the collection.
            </summary>
            <param name="element">The element.</param>
            <returns>
            	<c>true</c> if the specified element is within the collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.ContainsReference(Syncfusion.Pdf.Primitives.PdfReference)">
            <summary>
            Determines whether the collection contains the specified reference.
            </summary>
            <param name="reference">The reference.</param>
            <returns>
            	<c>true</c> if there is the specified reference; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.GetReference(System.Int32)">
            <summary>
            Gets the reference of the object.
            </summary>
            <param name="index">The index.</param>
            <returns>The reference of the object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.GetReference(Syncfusion.Pdf.Primitives.IPdfPrimitive,System.Boolean@)">
            <summary>
            Gets the reference of the object.
            </summary>
            <param name="obj">The object.</param>
            <param name="isNew">if set to <c>true</c> the object hasn't been found in the collection.</param>
            <returns>The reference of the object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.GetObject(System.Int32)">
            <summary>
            Gets the object specified by the index.
            </summary>
            <param name="index">The index.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.GetObjectIndex(Syncfusion.Pdf.Primitives.PdfReference)">
            <summary>
            Gets the index of the object.
            </summary>
            <param name="reference">The reference.</param>
            <returns>The index of the object within the general object collection.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.TrySetReference(Syncfusion.Pdf.Primitives.IPdfPrimitive,Syncfusion.Pdf.Primitives.PdfReference,System.Boolean@)">
            <summary>
            Tries to set the reference to the object.
            </summary>
            <param name="obj">The object.</param>
            <param name="reference">The reference.</param>
            <param name="found">if set to <c>true</c> the object was found.</param>
            <returns>
            True if the reference have been set successfully.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.IndexOf(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Determines the index of the element within the collection.
            </summary>
            <param name="element">The element.</param>
            <returns>The index of the element.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.ReregisterReference(System.Int32,Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Reregisters the reference.
            </summary>
            <param name="oldObjIndex">Old index of the obj.</param>
            <param name="newObj">The new object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.ReregisterReference(Syncfusion.Pdf.Primitives.IPdfPrimitive,Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Reregisters reference from one object to another.
            </summary>
            <param name="oldObj">The old (primitive) object.</param>
            <param name="newObj">The new (complex) object.</param>
            <remarks>This method is useful when PDF primitives are converted into
            More complex objects.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.LookFor(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Looks through the collection for the object specified.
            </summary>
            <param name="obj">The object to look for.</param>
            <returns>The index of the object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.LookForReference(Syncfusion.Pdf.Primitives.PdfReference)">
            <summary>
            Looks through the collection for the object specified by the reference.
            </summary>
            <param name="reference">The reference.</param>
            <returns>The index of the objec.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfMainObjectCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ObjectInfo"/> at the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfMainObjectCollection.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo">
            <summary>
            Stores info about objects in the PDF document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo.m_bModified">
            <summary>
            Shows if the object was modified and requires saving.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo.m_object">
            <summary>
            The PDF object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo.m_reference">
            <summary>
            Object number and generation number of the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo.#ctor(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Initializes a new instance of the <see cref="T:ObjectInfo"/> class.
            </summary>
            <param name="obj">The PDF object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo.#ctor(Syncfusion.Pdf.Primitives.IPdfPrimitive,Syncfusion.Pdf.Primitives.PdfReference)">
            <summary>
            Initializes a new instance of the <see cref="T:ObjectInfo"/> class.
            </summary>
            <param name="obj">The PDF object.</param>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo.SetModified">
            <summary>
            Marks the object modified.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo.SetReference(Syncfusion.Pdf.Primitives.PdfReference)">
            <summary>
            Sets the reference.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo.op_Equality(Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo,System.Object)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="oi">The object information.</param>
            <param name="obj">The object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo.op_Inequality(Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo,System.Object)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="oi">The oi.</param>
            <param name="obj">The obj.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see>
            is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see>
            to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see>
            is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo.Modified">
            <summary>
            Gets a value indicating whether the object has been modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo.Reference">
            <summary>
            Gets the reference.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfMainObjectCollection.ObjectInfo.Object">
            <summary>
            Gets the object.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PdfMatrix">
            <summary>
            Utility class to store information about Image transaction or scale matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_contentStream">
            <summary>
            Local variable to store content stream.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_key">
            <summary>
            Local variable to store the key value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_width">
            <summary>
            Local variable to store the width.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_height">
            <summary>
            Local variable to store the height.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_x">
            <summary>
            Local variable to store the X co-ordinate value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_y">
            <summary>
            Local variable to store the Y co-ordinate value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_translationMatrix">
            <summary>
            Local variable to store the transaction matrix value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_scaleMatrix">
            <summary>
            Local variable to store the scale matrix value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_pageSize">
            <summary>
            Local variable to store the page size.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_token">
            <summary>
            Local variable to store the cm entries.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_marginToken">
            <summary>
            Local variable to store the page margin cm.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_rectToken">
            <summary>
            Local variable to store current Rectangle cm..
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_prevRectToken">
            <summary>
            Local variable to store Previous Rectangle cm.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_leftMargin">
            <summary>
            Local variable to store eftMargin.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfMatrix.m_topMargin">
            <summary>
            Local variable to store topMargin.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMatrix.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:PdfMatrix"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMatrix.#ctor(Syncfusion.Pdf.IO.PdfReader,System.String,System.Drawing.SizeF)">
            <summary>
             Initializes a new instance of the <see cref="T:PdfMatrix"/> class.
            </summary>
            <param name="ContentStream">Content Stream.</param>
            <param name="key">Key Value.</param>
            <param name="pageSize">Page Size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMatrix.MatrixCalculation">
            <summary>
            Calculate the matrix value from the content stream.
            </summary>
            <returns>The matrix value in the form of array list.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMatrix.SetScaleMatrix(System.Drawing.SizeF)">
            <summary>
            Calculate the scale matrix value.
            </summary>
            <param name="pageSize">Page size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMatrix.SetTranslationMatrix">
            <summary>
            Calculate the translation matrix value.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfMatrix.ConvertToArray(System.Collections.Generic.List{System.String})">
            <summary>
            Convert the matrix value as array.
            </summary>
            <param name="matrixString">Matrix value.</param>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfMatrix.GetScaleX">
            <summary>
            Gets the X co-ordinate value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfMatrix.GetScaleY">
            <summary>
            Gets the Y co-ordinate value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfMatrix.GetHeight">
            <summary>
            Gets the image height
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfMatrix.GetWidth">
            <summary>
            Gets the image width value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfMatrix.LeftMargin">
            <summary>
            gets the image leftmargin
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfMatrix.TopMargin">
            <summary>
            Gets the top margin
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PdfMessages">
            <summary>
            A class of string messages.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.Operators">
            <summary>
            Class of string PDF common operators.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.obj">
            <summary>
            Operator for starting indirect object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.endobj">
            <summary>
            Operator for ending indirect object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.R">
            <summary>
            Operator for reference on indirect object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.WhiteSpace">
            <summary>
            Whitespace symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.Slash">
            <summary>
            Slash symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.LessThan">
            <summary>
            Less than symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.GreaterThan">
            <summary>
            Greater than symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.NewLine">
            <summary>
            New Line symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.RegexNewLine">
            <summary>
            Regex New Line symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.stream">
            <summary>
            Operator for starting stream object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.endstream">
            <summary>
            Operator for ending indirect object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.xref">
            <summary>
            Operator for starting cross-reference table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.f">
            <summary>
            Operator in cross-reference table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.n">
            <summary>
            Operator in cross-reference table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.trailer">
            <summary>
            Trailer begining.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.startxref">
            <summary>
            Operator in trailer object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.EOF">
            <summary>
            End of File (trailer) operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.header">
            <summary>
            Start of File (trailer) operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.BeginText">
            <summary>
            Begin text operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.EndText">
            <summary>
            End text operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.BeginPath">
            <summary>
            Begin path operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.AppendLineSegment">
            <summary>
            Append line segment operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.Stroke">
            <summary>
            Stroke operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.Fill">
            <summary>
            Fill by nonzero winding rule operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.Fill_EvenOdd">
            <summary>
            Fill by even-odd rule operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.FillStroke">
            <summary>
            Fill &amp;&amp; Stroke operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.FillStroke_EvenOdd">
            <summary>
            Fill &amp;&amp; Stroke operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.AppendBezierCurve">
            <summary>
            Append a cubic Bezier curve to the current path.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.AppendRectangle">
            <summary>
            Append a rectangle to the current path as a complete subpath.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SaveState">
            <summary>
            Save graphics state operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.RestoreState">
            <summary>
            Restore graphics state operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.PaintXObject">
            <summary>
            Paint XObject operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.ModifyCTM">
            <summary>
            Modifies CTM (current transformation matrix).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.ModifyTM">
            <summary>
            Modifies CTM (current transformation matrix).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetLineWidth">
            <summary>
            Sets line width.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetLineCapStyle">
            <summary>
            Sets line cap style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetLineJoinStyle">
            <summary>
            Sets line join style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetDashPattern">
            <summary>
            Sets dash pattern.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetFlatnessTolerance">
            <summary>
            Sets flatness tolerance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.ClosePath">
            <summary>
            Closes path.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.CloseStrokePath">
            <summary>
            Closes and strokes path.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.CloseFillStrokePath">
            <summary>
            Operator for closing then filling and stroking a path.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetCharacterSpace">
            <summary>
            Sets character space.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetWordSpace">
            <summary>
            Sets word space.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetHorizontalScaling">
            <summary>
            Sets horizontal scaling.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetTextLeading">
            <summary>
            Sets text leading.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetFont">
            <summary>
            Sets font operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetRenderingMode">
            <summary>
            Sets rendering mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetTextRise">
            <summary>
            Sets text rise.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetTextScaling">
            <summary>
            Sets text horizontal scaling.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetCoords">
            <summary>
            Set coordinates operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetCoordsAndLeading">
            <summary>
            Operator that sets the start of the new line and leading simultaneously.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.GoToNextLine">
            <summary>
            Sets text pointer to next line.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetText">
            <summary>
            Set text operator
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetTextWithFormatting">
            <summary>
            Operator to set text with formatting.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetTextOnNewLine">
            <summary>
            Operator that writes text on the new line.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetTextOnNewLineWithSpacings">
            <summary>
            Operator that writes text on the new line and set spacings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SelectColorSpaceForStroking">
            <summary>
            Selects a color space for the stroking color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SelectColorSpaceForNonStroking">
            <summary>
            Selects a color space for the nonstroking color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetRGBColorForStroking">
            <summary>
            Sets RGB color for stroking operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetRGBColorForNonStroking">
            <summary>
            Same as RGB but for nonstroking operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetCMYKColorForStroking">
            <summary>
            Sets CMYK color for stroking operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetCMYKColorForNonstroking">
            <summary>
            Same as CMYK but for nonstroking operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetGrayColorForStroking">
            <summary>
            Sets gray color for stroking operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetGrayColorForNonstroking">
            <summary>
            Same as RGB but for nonstroking operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.Pattern">
            <summary>
            Set pattern operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetColorAndPattern">
            <summary>
            Same as SC, but also supports Pattern, Separation, DeviceN, and ICCBased
            color spaces. For non-stroking operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetColorAndPatternStroking">
            <summary>
            Same as SC, but also supports Pattern, Separation, DeviceN, and ICCBased
            color spaces. For stroking.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.ClipPath">
            <summary>
            Modify the current clipping path by intersecting it with the current path, using the
            nonzero winding number rule to determine which regions lie inside the clipping path.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.ClipPath_EvenOdd">
            <summary>
            Modify the current clipping path by intersecting it with the current path, using the
            odd-even rule to determine which regions lie inside the clipping path.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.EndPath">
            <summary>
            End the path object without filling or stroking it. This operator is a "path-painting
            no-op," used primarily for the side effect of changing the current clipping path (see
            "Clipping Path Operators").
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetGraphicsState">
            <summary>
            Graphics state operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.Comment">
            <summary>
            Symbol of commenting.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.AnyRegexSymbol">
            <summary>
            Indicates any symbol (regex syntax).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.BeginMarkedSequence">
            <summary>
            Begins a marked-content sequence.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.EndMarkedSequence">
            <summary>
            Ends a marked-content sequence.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.EvenOdd">
            <summary>
            Even-odd filling method marker.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.AppendBezierCurve2">
            <summary>
            The operator to apped bezier curve with x2 y2 x3 y3 set.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.AppendBezierCurve1">
            <summary>
            The operator to apped bezier curve with x1 y1 x3 y3 set.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetMiterLimit">
            <summary>
            Set miter limit operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetColorRenderingIntent">
            <summary>
            Set color rendering intent operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetColorStroking">
            <summary>
            Set colour of the current colour space for stroking.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.Operators.SetColorNonStroking">
            <summary>
            Set colour of the current colour space for non-stroking operations.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.Operators.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfParser.m_cTable">
            <summary>
            The cross-reference table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfParser.m_reader">
            <summary>
            The reader.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfParser.m_lexer">
            <summary>
            PDF lexer.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfParser.m_next">
            <summary>
            The next token.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfParser.m_integerQueue">
            <summary>
            Holds all integers that have been read ahead.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfParser.m_crossTable">
            <summary>
            he high level cross-table. It's required for convertion
            PDFReferences into PDFReferenceHolders.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfParser.m_bEncrypt">
            <summary>
            Internal variable to identify the current object is PdfEncryptor or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfParser.m_colorSpace">
            <summary>
            To identify whether the dictionary contains colorspace
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.#ctor(Syncfusion.Pdf.IO.CrossTable,Syncfusion.Pdf.IO.PdfReader,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:PDFParser"/> class.
            </summary>
            <param name="cTable">The cross-reference table.</param>
            <param name="reader">The reader.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Parse(System.Int64)">
            <summary>
            Parses a PDF object.
            </summary>
            <param name="offset">The offset to the object.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Parse">
            <summary>
            Parses a PDF object.
            </summary>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Trailer(System.Int64)">
            <summary>
            Reads a trailer from the stream at the offset.
            </summary>
            <param name="offset">The offset.</param>
            <returns>The trailer dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Trailer">
            <summary>
            Reads a trailer from the stream at the offset.
            </summary>
            <returns>The trailer dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.StartXRef">
            <summary>
            Reads startxref entry.
            </summary>
            <returns>The offset to the XRef table.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.SetOffset(System.Int64)">
            <summary>
            Sets the offset.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.ParseXRefTable(System.Collections.Generic.Dictionary{System.Int64,Syncfusion.Pdf.IO.CrossTable.ObjectInformation},Syncfusion.Pdf.IO.CrossTable)">
            <summary>
            Parses the XRef table.
            </summary>
            <param name="objects">The objects.</param>
            <param name="cTable">The cross-reference table.</param>
            <returns>The trailer dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.RebuildXrefTable(System.Collections.Generic.Dictionary{System.Int64,Syncfusion.Pdf.IO.CrossTable.ObjectInformation},Syncfusion.Pdf.IO.CrossTable)">
            <summary>
            Rebuild the xref table for corrupted PDF Documents
            </summary>
            <param name="newObjects"></param>
            <param name="crosstable"></param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Simple">
            <summary>
            Reads a simple object from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.GetObjectFlag">
            <summary>
            Reads the object flag.
            </summary>
            <returns>A string that holds the flag.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.StartFrom(System.Int64)">
            <summary>
            Starts from the offset specified.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.ParseOldXRef(Syncfusion.Pdf.IO.CrossTable,System.Collections.Generic.Dictionary{System.Int64,Syncfusion.Pdf.IO.CrossTable.ObjectInformation})">
            <summary>
            Parses old xref table.
            </summary>
            <param name="cTable">Cross table object.</param>
            <param name="objects">A collection of the objects.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.IsSubsection">
            <summary>
            Determines whether there is a subsection.
            </summary>
            <returns>
            	<c>true</c> if there is subsection; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Error(Syncfusion.Pdf.IO.PdfParser.ErrorType,System.String)">
            <summary>
            Reacts on an error.
            </summary>
            <param name="error">The error.</param>
            <param name="additional">The additional information.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Match(Syncfusion.Pdf.IO.TokenType,Syncfusion.Pdf.IO.TokenType)">
            <summary>
            Matches the specified token.
            </summary>
            <param name="token">The token.</param>
            <param name="match">The match.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Advance">
            <summary>
            Reads the next token.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.ReadName">
            <summary>
            Reads the name.
            </summary>
            <returns>The PDFName.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.ReadBoolean">
            <summary>
            Reads the boolean.
            </summary>
            <returns>The PDF boolean object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.ReadUnicodeString">
            <summary>
            Reads the unicode string.
            </summary>
            <returns>The PDF string object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.ProcessUnicodeEscapes(System.String)">
            <summary>
            Processes the unicode escapes.
            </summary>
            <param name="text">The text.</param>
            <returns>A nornal string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.ReadString">
            <summary>
            Reads the string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.CheckForPreamble(System.String)">
            <summary>
            Checks if the string is Big Endian Encoded
            </summary>
            <param name="text">Encoded string</param>
            <returns>True if the string is Big Endian Encoded</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.ProcessEscapes(System.String)">
            <summary>
            Processes escapes.
            </summary>
            <param name="text">A text string.</param>
            <returns>A string without escape sequences.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.ProcessOctal(System.String,System.Int32@)">
            <summary>
            Processes the octal number.
            </summary>
            <param name="text">The text.</param>
            <param name="i">The index.</param>
            <returns>The caracter which value is equal to the octal number.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.HexString">
            <summary>
            Read a string coded in hexadecimal digits.
            </summary>
            <returns>A string object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Number">
            <summary>
            Reads an integer number.
            </summary>
            <returns>A PDF integer.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.ParseInteger">
            <summary>
            Parses the integer.
            </summary>
            <returns>The integer.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Real">
            <summary>
            Read a real number.
            </summary>
            <returns>A PDF real.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Array">
            <summary>
            Reads an array.
            </summary>
            <returns>The well formed array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Dictionary">
            <summary>
            Reads a dictionary from the stream.
            </summary>
            <returns>The filled PDF dictionary object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.ReadStream(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Reads the stream.
            </summary>
            <param name="dic">The stream dictionary.</param>
            <returns>The PDFStream.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.CheckStreamLength(System.Int32,System.Int32)">
            <summary>
            Checks the given stream length is correct or not.
            </summary>
            <param name="lexPosition"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.ReadPair">
            <summary>
            Reads the pair.
            </summary>
            <returns>The well filled pair on success or Pair.Emty on failure.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfParser.Encrypted">
            <summary>
            Gets or sets the current object is PdfEncryptor or not. 
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PdfParser.ErrorType">
            <summary>
            Contains constants of errors.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PdfParser.Pair">
            <summary>
            Holds the name-value pair.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfParser.Pair.Empty">
            <summary>
            Holds the empty pair.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Pair.op_Equality(Syncfusion.Pdf.IO.PdfParser.Pair,System.Object)">
            <summary>
            Compares an object and a pair.
            </summary>
            <param name="pair">The pair.</param>
            <param name="obj">The obj.</param>
            <returns>True if the object is equal to the pair.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Pair.op_Inequality(Syncfusion.Pdf.IO.PdfParser.Pair,System.Object)">
            <summary>
            Compares an object and a pair.
            </summary>
            <param name="pair">The pair.</param>
            <param name="obj">The obj.</param>
            <returns>True if the object is not equal to the pair.</returns>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfParser.Pair.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfParser.Pair.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Pair.#ctor(Syncfusion.Pdf.Primitives.PdfName,Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Initializes a new instance of the <see cref="T:Pair"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Pair.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfParser.Pair.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PdfReader">
            <summary>
            Summary description for PDFReader.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfReader.m_stream">
            <summary>
            The stream our reader works with.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfReader.m_delimiters">
            <summary>
            A string with all delimeter characters except whitespaces,
            which are listed elsewhere.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfReader.m_peekedByte">
            <summary>
            Holds peeked byte.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfReader.m_bBytePeeked">
            <summary>
            Indicates if a byte was peeked.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.#ctor(System.IO.Stream)">
            <summary>
            Initialize an instance of the PDFReader class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.ReadLine">
            <summary>
            Reads a single line from the stream.
            </summary>
            <returns>The line read.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.Read">
            <summary>
            Reads a character from the stream and andvances the current position.
            </summary>
            <returns>A character read, or -1 if EOF reached.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.Peek">
            <summary>
            Reads a character from the stream and preserves the current position of
            the stream.
            </summary>
            <returns>A character read, or -1 if EOF reached.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Read the sequence of bytes from the stream.
            </summary>
            <param name="buffer">The storage for the characters.</param>
            <param name="index">The index in the buffer.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The count of the characters read.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary>
            Read the sequence of bytes from the stream.
            </summary>
            <param name="buffer">The storage for the characters.</param>
            <param name="index">The index in the buffer.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The count of the characters read.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.ReadToEnd">
            <summary>
            Read all bytes to the end of the stream and returns them as a single string.
            </summary>
            <returns>The characters read.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.IsEol(System.Char)">
            <summary>
            Informs whether the character is from the EOL character.
            </summary>
            <param name="character">The character to test.</param>
            <returns>True if the character is from EOL characters, false otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.IsSeparator(System.Char)">
            <summary>
            Determines if the character specified is a separator character.
            </summary>
            <param name="character">The character to test.</param>
            <returns>True is the character is a separator character.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.IsDelimiter(System.Char)">
            <summary>
            Determines if the character specified is a delimeter character.
            </summary>
            <param name="character">The character to test.</param>
            <returns>True is the character is a delimeter character, false otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.SearchBack(System.String)">
            <summary>
            Looks up for the token.
            </summary>
            <param name="token">What to look for.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.SearchForward(System.String)">
            <summary>
            Searches for a token specified by 'token' string.
            </summary>
            <param name="token">What to search.</param>
            <returns>The position of the found token.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.ReadBack(System.Int32)">
            <summary>
            Reads a string from a stream in the oppozite direction.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.SkipWSBack">
            <summary>
            Skip any whitespace at the tail.
            NOTE: stream.Position points to the last encounted whitespace.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.SkipWS">
            <summary>
            Skips all white spaces. stream.Position will point to the first nonspase
            character or EOF.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.GetNextToken">
            <summary>
            Returns next string separated by delimiters.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks for the position specified.
            </summary>
            <param name="offset">The origin relative offset.</param>
            <param name="origin">The origin for the offset.</param>
            <returns>The zero based position in the stream.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.AppendChar(System.String@)">
            <summary>
            Appends a line with the next character from the stream.
            Also it advances the current stream position.
            </summary>
            <param name="line">A text string.</param>
            <returns>The resulting the character read,
            or -1 if EOF was reached during reading.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfReader.GetPeeked(System.Int32@)">
            <summary>
            Gets the peeked byte value.
            </summary>
            <param name="byteValue">The byte value.</param>
            <returns>True if the byte was acquired.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfReader.Position">
            <summary>
            Sets or gets the position within the stream.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfReader.Stream">
            <summary>
            Returns the underlying stream.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PdfStreamWriter">
            <summary>
            Helper class to write PDF graphic streams easily.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.IPdfWriter">
            <summary>
            Defines the basic interace of the various writers.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.IPdfWriter.Write(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Writes the specified PDF object.
            </summary>
            <param name="pdfObject">The PDF object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.IPdfWriter.Write(System.Int64)">
            <summary>
            Writes the specified number.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.IPdfWriter.Write(System.Single)">
            <summary>
            Writes the specified number.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.IPdfWriter.Write(System.String)">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.IPdfWriter.Write(System.Char[])">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.IPdfWriter.Write(System.Byte[])">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.IO.IPdfWriter.Position">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.IPdfWriter.Length">
            <summary>
            Stream length.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.IPdfWriter.Document">
            <summary>
            The document required for saving process.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfStreamWriter.m_stream">
            <summary>
            The PDF stream where the data should be write into.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.#ctor(Syncfusion.Pdf.Primitives.PdfStream)">
            <summary>
            Initializes a new instance of the <see cref="T:PDFStreamWriter"/> class.
            </summary>
            <param name="stream">The PDF stream.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ModifyTM(Syncfusion.Pdf.Graphics.PdfTransformationMatrix)">
            <summary>
            Modifies TM (text matrix).
            </summary>
            <param name="matrix">Matrix to be inserted.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetFont(Syncfusion.Pdf.Graphics.PdfFont,System.String,System.Single)">
            <summary>
            Sets font.
            </summary>
            <param name="font">The font.</param>
            <param name="name">The name of the font.</param>
            <param name="size">Font size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetFont(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Primitives.PdfName,System.Single)">
            <summary>
            Sets font.
            </summary>
            <param name="font">The font.</param>
            <param name="name">The name of the font.</param>
            <param name="size">Font size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetColorSpace(Syncfusion.Pdf.ColorSpace.PdfColorSpaces,Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Set the Colorspace.
            </summary>
            <param name="colorspace"></param>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetCharacterSpacing(System.Single)">
            <summary>
            Sets the character spacing.
            </summary>
            <param name="charSpacing">The character spacing value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetWordSpacing(System.Single)">
            <summary>
            Sets the word spacing.
            </summary>
            <param name="wordSpacing">The word spacing value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetHorizontalScaling(System.Single)">
            <summary>
            Sets the scaling.
            </summary>
            <param name="scalingFactor">The scaling factor.</param>
            <remarks>The scaling factor of 100 means "normal size".</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetLeading(System.Single)">
            <summary>
            Sets text leading.
            </summary>
            <param name="leading">The leading value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetTextRenderingMode(Syncfusion.Pdf.Graphics.TextRenderingMode)">
            <summary>
            Sets the text rendering mode.
            </summary>
            <param name="renderingMode">The rendering mode.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetTextRise(System.Single)">
            <summary>
            Sets text rise.
            </summary>
            <param name="rise">The text rise value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetTextScaling(System.Single)">
            <summary>
            Sets the text scaling.
            </summary>
            <param name="textScaling">The text scaling.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.StartNextLine">
            <summary>
            Starts the next line.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.StartNextLine(System.Drawing.PointF)">
            <summary>
            Starts the next line.
            </summary>
            <param name="point">The start point of the line.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.StartNextLine(System.Single,System.Single)">
            <summary>
            Shifts the text to the point.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.StartLineAndSetLeading(System.Drawing.PointF)">
            <summary>
            Sets the start of the next line and set leading.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.StartLineAndSetLeading(System.Single,System.Single)">
            <summary>
            Sets the start of the next line and set leading.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ShowText(System.Byte[],System.Boolean)">
            <summary>
            Shows the text.
            </summary>
            <param name="text">The text.</param>
            <param name="hex">if set to <c>true</c> the text is in hex.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ShowText(System.String,System.Boolean)">
            <summary>
            Shows the text.
            </summary>
            <param name="text">The text.</param>
            <param name="hex">if set to <c>true</c> the text should be in hex.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ShowText(Syncfusion.Pdf.Primitives.PdfString)">
            <summary>
            Shows the text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ShowText(Syncfusion.Pdf.Primitives.PdfArray)">
            <summary>
            Flushes tokens to the stream.
            </summary>
            <param name="formattedText">String tokens.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ShowNextLineText(System.Byte[],System.Boolean)">
            <summary>
            Shows the next line text.
            </summary>
            <param name="text">The text.</param>
            <param name="hex">if set to <c>true</c> the text should be in hex.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ShowNextLineText(System.String,System.Boolean)">
            <summary>
            Shows the next line text.
            </summary>
            <param name="text">The text.</param>
            <param name="hex">if set to <c>true</c> the text should be in hex.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ShowNextLineText(Syncfusion.Pdf.Primitives.PdfString)">
            <summary>
            Shows the next line text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ShowNextLineTextWithSpacings(System.Single,System.Single,System.Byte[],System.Boolean)">
            <summary>
            Shows the text on the next line and sets word and character spacings.
            </summary>
            <param name="wordSpacing">The word spacing.</param>
            <param name="charSpacing">The char spacing.</param>
            <param name="text">The text.</param>
            <param name="hex">if set to <c>true</c> the text should be in hex.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ShowNextLineTextWithSpacings(System.Single,System.Single,System.String,System.Boolean)">
            <summary>
            Shows the text on the next line and sets word and character spacings.
            </summary>
            <param name="wordSpacing">The word spacing.</param>
            <param name="charSpacing">The char spacing.</param>
            <param name="text">The text.</param>
            <param name="hex">if set to <c>true</c> the text should be in hex.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ShowNextLineTextWithSpacings(System.Single,System.Single,Syncfusion.Pdf.Primitives.PdfString)">
            <summary>
            Shows the text on the next line and sets word and character spacings.
            </summary>
            <param name="wordSpacing">The word spacing.</param>
            <param name="charSpacing">The char spacing.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ShowText(System.Collections.IList)">
            <summary>
            Shows the text.
            </summary>
            <param name="formatting">The formatting.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.BeginText">
            <summary>
            Begins text.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.WriteTag(System.String)">
            <summary>
            Writes tags.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.EndText">
            <summary>
            Ends text.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.BeginMarkupSequence(System.String)">
            <summary>
            Begins start markup sequence text.
            </summary>
            <param name="name">The name of the markup sequence.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.BeginMarkupSequence(Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Begins start markup sequence text.
            </summary>
            <param name="name">The name of the markup sequence.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.EndMarkupSequence">
            <summary>
            Ends markup sequence text.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.WriteComment(System.String)">
            <summary>
            Writes comment to the file.
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.BeginPath(System.Drawing.PointF)">
            <summary>
            Begins the path.
            </summary>
            <param name="startPoint">The start point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.BeginPath(System.Single,System.Single)">
            <summary>
            Begins the path.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.AppendBezierSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Appends bezier segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.AppendBezierSegment(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Appends bezier segment.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <param name="x3">The x3.</param>
            <param name="y3">The y3.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.AppendBezierSegment(System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            Appends the bezier segment.
            </summary>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="useFirstPoint">if set to <c>true</c> p2 is used as p1.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.AppendBezierSegment(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Appends the bezier segment.
            </summary>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <param name="x3">The x3.</param>
            <param name="y3">The y3.</param>
            <param name="useFirstPoint">if set to <c>true</c>
            x2 is used as x1 and y2 is used as y1.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.AppendLineSegment(System.Drawing.PointF)">
            <summary>
            Appends a line segment.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.AppendLineSegment(System.Single,System.Single)">
            <summary>
            Appends a line segment.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.AppendRectangle(System.Drawing.RectangleF)">
            <summary>
            Appends the rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.AppendRectangle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Appends the rectangle.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ClosePath">
            <summary>
            Closes path object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.CloseSubPath">
            <summary>
            Closes the sub path.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.FillPath(System.Boolean)">
            <summary>
            Fills path.
            </summary>
            <param name="useEvenOddRule">if set to <c>true</c> use even-odd rule.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.StrokePath">
            <summary>
            Strokes path.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.FillStrokePath(System.Boolean)">
            <summary>
            Fills and strokes path.
            </summary>
            <param name="useEvenOddRule">if set to <c>true</c> use even-odd rule.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.CloseStrokePath">
            <summary>
            Closes and strokes the path.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.CloseFillStrokePath(System.Boolean)">
            <summary>
            Closes, then fills and strokes the path.
            </summary>
            <param name="useEvenOddRule">if set to <c>true</c> use even odd rule.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.CloseFillPath(System.Boolean)">
            <summary>
            Closes and fills the path.
            </summary>
            <param name="useEvenOddRule">if set to <c>true</c> [use even odd rule].</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ClipPath(System.Boolean)">
            <summary>
            Clips the path.
            </summary>
            <param name="useEvenOddRule">if set to <c>true</c> use even odd rule.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.EndPath">
            <summary>
            Ends the path.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SaveGraphicsState">
            <summary>
            Saves the graphics state.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.RestoreGraphicsState">
            <summary>
            Restores the graphics state.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ModifyCTM(Syncfusion.Pdf.Graphics.PdfTransformationMatrix)">
            <summary>
            Modifies current transformation matrix.
            </summary>
            <param name="matrix">Matrix to be inserted.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetLineWidth(System.Single)">
            <summary>
            Sets the width of the line.
            </summary>
            <param name="width">The width.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetLineCap(Syncfusion.Pdf.Graphics.PdfLineCap)">
            <summary>
            Sets the line cap.
            </summary>
            <param name="lineCapStyle">The line cap style.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetLineJoin(Syncfusion.Pdf.Graphics.PdfLineJoin)">
            <summary>
            Sets the line join.
            </summary>
            <param name="lineJoinStyle">The line join style.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetMiterLimit(System.Single)">
            <summary>
            Sets the miter limit.
            </summary>
            <param name="miterLimit">The miter limit.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetLineDashPattern(System.Single[],System.Single)">
            <summary>
            Sets the line dash pattern.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="patternOffset">The pattern offset.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetLineDashPattern(Syncfusion.Pdf.Primitives.PdfArray,Syncfusion.Pdf.Primitives.PdfNumber)">
            <summary>
            Sets the line dash pattern.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="patternOffset">The pattern offset.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetColorRenderingIntent(Syncfusion.Pdf.Graphics.ColorIntent)">
            <summary>
            Sets the color rendering intent.
            </summary>
            <param name="intent">The intent value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetFlatnessTolerance(System.Int32)">
            <summary>
            Sets the flatness tolerance.
            </summary>
            <param name="tolerance">The tolerance value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetGraphicsState(Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Sets the graphics state.
            </summary>
            <param name="dictionaryName">Name of the graphics state dictionary.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetGraphicsState(System.String)">
            <summary>
            Sets the graphics state.
            </summary>
            <param name="dictionaryName">Name of the graphics state dictionary.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetColorSpace(System.String,System.Boolean)">
            <summary>
            Sets the color space.
            </summary>
            <param name="name">The name of the colour space.</param>
            <param name="forStroking">if set to <c>true</c>
            the space is set for stroking operations.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetColorSpace(Syncfusion.Pdf.Primitives.PdfName,System.Boolean)">
            <summary>
            Sets the color space.
            </summary>
            <param name="name">The name of the colour space.</param>
            <param name="forStroking">if set to <c>true</c>
            the space is set for stroking operations.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetColorAndSpace(Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean)">
            <summary>
            Sets the color and color space.
            </summary>
            <param name="color">The color.</param>
            <param name="colorSpace">The color space.</param>
            <param name="forStroking">if set to <c>true</c>
            the colour is set for stroking operations.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetColorAndSpace(Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean,System.Boolean)">
            <summary>
            Sets the color and color space.
            </summary>
            <param name="color"></param>
            <param name="colorSpace"></param>
            <param name="forStroking"></param>
            <param name="check"></param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetColorAndSpace(Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the color and space.
            </summary>
            <param name="color">The color.</param>
            <param name="colorSpace">The color space.</param>
            <param name="forStroking">if it is for stroking, set to <c>true</c>.</param>
            <param name="check">if it is check, set to <c>true</c>.</param>
            <param name="iccbased">if it is iccbased, set to <c>true</c>.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetColorAndSpace(Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the color and space.
            </summary>
            <param name="color">The color.</param>
            <param name="colorSpace">The color space.</param>
            <param name="forStroking">if it is for for stroking, set to <c>true</c>.</param>
            <param name="check">if it is to check, set to <c>true</c>.</param>
            <param name="iccbased">if it is iccbased, set to <c>true</c>.</param>
            <param name="indexed">if it is indexed, set to <c>true</c>.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetColor(Syncfusion.Pdf.Graphics.PdfColor,Syncfusion.Pdf.Graphics.PdfColorSpace,System.Boolean)">
            <summary>
            Sets the color.
            </summary>
            <param name="color">The color.</param>
            <param name="currentSpace">The current space.</param>
            <param name="forStroking">if set to <c>true</c>
            the colour is set for stroking operations.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.SetColourWithPattern(System.Collections.IList,Syncfusion.Pdf.Primitives.PdfName,System.Boolean)">
            <summary>
            Sets the colour with pattern.
            </summary>
            <param name="colours">The colour array.</param>
            <param name="patternName">The name of the pattern.</param>
            <param name="forStroking">if set to <c>true</c> the colours and pattern
            are set for stroking operations.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ExecuteObject(System.String)">
            <summary>
            Executes the XObject.
            </summary>
            <param name="name">The name of the XObject.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.ExecuteObject(Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Executes the XObject.
            </summary>
            <param name="name">The name of the XObject.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.GetStream">
            <summary>
            Gets the stream.
            </summary>
            <returns>The internal PdfStream object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.Clear">
            <summary>
            Clears a stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.WritePoint(System.Drawing.PointF)">
            <summary>
            Writes the point.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.WritePoint(System.Single,System.Single)">
            <summary>
            Writes the point.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.WriteText(System.Object)">
            <summary>
            Writes the text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.WriteText(System.Byte[],System.Boolean)">
            <summary>
            Writes the text.
            </summary>
            <param name="text">The text.</param>
            <param name="hex">if set to <c>true</c> the text is in hex.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.WriteText(System.String,System.Boolean)">
            <summary>
            Writes the text.
            </summary>
            <param name="text">The text.</param>
            <param name="hex">if set to <c>true</c> the text is in hex.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.WriteText(Syncfusion.Pdf.Primitives.PdfString)">
            <summary>
            Writes the text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.WriteOperator(System.String)">
            <summary>
            Writes the operator.
            </summary>
            <param name="opcode">The operator code.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.CheckTextParam(System.Byte[])">
            <summary>
            Checks the text param.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.CheckTextParam(System.String)">
            <summary>
            Checks the text param.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.CheckTextParam(Syncfusion.Pdf.Primitives.PdfString)">
            <summary>
            Checks the text param.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.Syncfusion#Pdf#IO#IPdfWriter#Write(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Writes the specified PDF object.
            </summary>
            <param name="pdfObject">The PDF object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.Syncfusion#Pdf#IO#IPdfWriter#Write(System.Int64)">
            <summary>
            Writes the specified number.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.Syncfusion#Pdf#IO#IPdfWriter#Write(System.Single)">
            <summary>
            Writes the specified number.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.Syncfusion#Pdf#IO#IPdfWriter#Write(System.String)">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.Syncfusion#Pdf#IO#IPdfWriter#Write(System.Char[])">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStreamWriter.Syncfusion#Pdf#IO#IPdfWriter#Write(System.Byte[])">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfStreamWriter.Syncfusion#Pdf#IO#IPdfWriter#Position">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfStreamWriter.Length">
            <summary>
            Gets stream length.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PdfStructTreeRoot">
            <summary>
            Represents structure tree required to store document logical structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfStructTreeRoot.m_childSTR">
            <summary>
            Internal variable to hold structure elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfStructTreeRoot.m_pdfPage">
            <summary>
            Internal variable to store PdfPage associated with the element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfStructTreeRoot.m_id">
            <summary>
            Internal variable to store structure id.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.IO.PdfStructTreeRoot.m_BBoxBounds">
            <summary>
            Internal variable to store the bounding rectangle of the element.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStructTreeRoot.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStructTreeRoot.Add(System.String,System.String,Syncfusion.Pdf.PdfPageBase,System.Drawing.RectangleF)">
            <summary>
            Adds the specified element to the document structure tree.
            </summary>
            <param name="structType"></param>
            <param name="altText"></param>
            <param name="page"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfStructTreeRoot.Add(System.String,System.String,System.Drawing.RectangleF)">
            <summary>
            Adds the specified element to the document structure tree.
            </summary>
            <param name="structType"></param>
            <param name="altText"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfWriter"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfWriter.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfWriter.Write(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Writes the specified PDF object.
            </summary>
            <param name="pdfObject">The PDF object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfWriter.Write(System.Int64)">
            <summary>
            Writes the specified number.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfWriter.Write(System.Single)">
            <summary>
            Writes the specified number.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfWriter.Write(System.String)">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfWriter.Write(System.Char[])">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfWriter.Write(System.Byte[])">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.IO.PdfWriter.GetStream">
            <summary>
            Gets the stream.
            </summary>
            <returns>The stream.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfWriter.Stream">
            <summary>
            Gets the stream.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfWriter.Document">
            <summary>
            Gets or Sets the document required for saving process.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfWriter.Position">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.IO.PdfWriter.Length">
            <summary>
            Gets stream length.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.TokenType">
            <summary>
            Holds all tokens which might appear in every PDF file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.PDFType">
            <summary>
            All element types.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.IO.ObjectStatus">
            <summary>
            Specfies the status of the IPdfPrmitive. Status is registered if it has a reference or else none.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.StringInfoType">
            <summary>
            Specifies the type of character information the user wants to retrieve.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoType.CT_TYPE1">
            <summary>
            Retrieves character type info
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoType.CT_TYPE2">
            <summary>
            Retrieves bi-directional layout info
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoType.CT_TYPE3">
            <summary>
            Retrieves text processing info
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.StringInfoCtype1">
            <summary>
            These types support ANSI C and POSIX (LC_CTYPE) character-typing functions.
            A combination of these values is returned in the array pointed to by the lpCharType parameter
            when the dwInfoType parameter is set to CT_CTYPE1.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype1.C1_UPPER">
            <summary>
            Uppercase
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype1.C1_LOWER">
            <summary>
            Lowercase
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype1.C1_DIGIT">
            <summary>
            Decimal digits
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype1.C1_SPACE">
            <summary>
            Space characters
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype1.C1_PUNCT">
            <summary>
            Punctuation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype1.C1_CNTRL">
            <summary>
            Control characters
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype1.C1_BLANK">
            <summary>
            Blank characters
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype1.C1_XDIGIT">
            <summary>
            Hexadecimal digits
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype1.C1_ALPHA">
            <summary>
            Any linguistic character: alphabetic, syllabary, or ideographic
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.StringInfoCtype2">
            <summary>
            These types support proper layout of Unicode text. The direction attributes are assigned
            so that the bidirectional layout algorithm standardized by Unicode produces accurate results.
            These types are mutually exclusive.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype2.C2_LEFTTORIGHT">
            <summary>
            Left to right
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype2.C2_RIGHTTOLEFT">
            <summary>
            Right to left
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype2.C2_EUROPENUMBER">
            <summary>
            European number, European digit
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype2.C2_EUROPESEPARATOR">
            <summary>
            European numeric separator
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype2.C2_EUROPETERMINATOR">
            <summary>
            European numeric terminator
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype2.C2_ARABICNUMBER">
            <summary>
            Arabic number
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype2.C2_COMMONSEPARATOR">
            <summary>
            Common numeric separator
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype2.C2_BLOCKSEPARATOR">
            <summary>
            Block separator
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype2.C2_SEGMENTSEPARATOR">
            <summary>
            Segment separator
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype2.C2_WHITESPACE">
            <summary>
            White space
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype2.C2_OTHERNEUTRAL">
            <summary>
            Other neutrals
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype2.C2_NOTAPPLICABLE">
            <summary>
            No implicit directionality (for example, control codes)
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.StringInfoCtype3">
            <summary>
            These types are intended to be placeholders for extensions to the POSIX types
            required for general text processing or for the standard C library functions.
             A combination of these values is returned when dwInfoType is set to CT_CTYPE3.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype3.C3_DIACRITIC">
            <summary>
            Diacritic nonspacing mark
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype3.C3_VOWELMARK">
            <summary>
            Vowel nonspacing mark
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype3.C3_SYMBOL">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype3.C3_KATAKANA">
            <summary>
            Katakana character
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype3.C3_HIRAGANA">
            <summary>
            Hiragana character
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype3.C3_HALFWIDTH">
            <summary>
            Half-width (narrow) character
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype3.C3_FULLWIDTH">
            <summary>
            Full-width (wide) character
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype3.C3_IDEOGRAPH">
            <summary>
            Ideographic character
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype3.C3_KASHIDA">
            <summary>
            Arabic Kashida character
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype3.C3_LEXICAL">
            <summary>
            Punctuation which is counted as part of the word
            (Kashida, hyphen, feminine/masculine ordinal indicators, equal sign, and so forth)
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype3.C3_ALPHA">
            <summary>
            All linguistic characters (alphabetical, syllabary, and ideographic)
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.StringInfoCtype3.C3_NOTAPPLICABLE">
            <summary>
            Not applicable
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.FormatMessageFlags">
            <summary>
            Native enum.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_SETMITERLIMIT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.EMR_SETMITERLIMIT.eMiterLimit">
            <summary>
            New miter limit.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_MODIFYWORLDTRANSFORM">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.XFORM">
            <summary>
            The XFORM structure specifies a world-space to page-space transformation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.XFORM.eM11">
            <summary>
            Specifies scaling/rotation/reflection
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.XFORM.eM12">
            <summary>
            Specified shear/rotation
            </summary>   
        </member>
        <member name="F:Syncfusion.Pdf.Native.XFORM.eM21">
            <summary>
            Specified shear/rotation
            </summary>   
        </member>
        <member name="F:Syncfusion.Pdf.Native.XFORM.eM22">
            <summary>
            Specifies scaling/rotation/reflection
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.XFORM.eDx">
            <summary>
            Specifies the horizontal translation component, in logical units.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.XFORM.eDy">
            <summary>
            Specifies the vertical translation component, in logical units.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_EXTCREATEPEN">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EXTLOGPEN">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Native.POINT.#ctor(System.Int32)">
            <summary>
            Point creation from lParam's data.
            </summary>
            <param name="lParam">lParam's data for initialing point structure.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Native.POINT.op_Implicit(Syncfusion.Pdf.Native.POINT)~System.Drawing.Point">
            <summary>
            Performs an implicit conversion from <see cref="T:Syncfusion.Pdf.Native.POINT"/> to <see cref="T:System.Drawing.Point"/>.
            </summary>
            <param name="p">The p.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Native.POINT.op_Implicit(Syncfusion.Pdf.Native.POINT)~System.Drawing.PointF">
            <summary>
            Performs an implicit conversion from <see cref="T:Syncfusion.Pdf.Native.POINT"/> to <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <param name="p">The p.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Native.POINT.op_Implicit(System.Drawing.Point)~Syncfusion.Pdf.Native.POINT">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.Point"/> to <see cref="T:Syncfusion.Pdf.Native.POINT"/>.
            </summary>
            <param name="p">The p.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Native.LOGBRUSH32">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_CREATEBRUSHINDIRECT">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_SELECTCLIPPATH">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.ABC">
            <summary>
            ABC structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.ColorDataEx">
            <summary>
            Structure for 32 bit images saving.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ColorDataEx.Blue">
            <summary>
            Value of Blue chanel.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ColorDataEx.Green">
            <summary>
            Value of Green chanel.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ColorDataEx.Red">
            <summary>
            Value of Red chanel.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ColorDataEx.Alpha">
            <summary>
            Value of Alpha chanel.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.ColorData">
            <summary>
            Structure for 24 bit images saving.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ColorData.Blue">
            <summary>
            Value of Blue chanel.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ColorData.Green">
            <summary>
            Value of Green chanel.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ColorData.Red">
            <summary>
            Value of Red chanel.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.ColorData16">
            <summary>
            Structure for 24 bit images saving.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ColorData16.Blue">
            <summary>
            Value of Blue chanel.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ColorData16.Green">
            <summary>
            Value of Green chanel.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ColorData16.Red">
            <summary>
            Value of Red chanel.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_POLYPOLYLINE16">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_POLYPOLYLINE">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_SETVIEWPORTEXTEX">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_SETVIEWPORTORGEX">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_SCALEVIEWPORTEXTEX">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_LINETO">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_POLYLINE16">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_POLYLINE">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_ALPHABLEND">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_OFFSETCLIPRGN">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_EXCLUDECLIPRECT">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_SETARCDIRECTION">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_FILLRGN">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.RGNDATA">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.RGNDATAHEADER">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_INVERTRGN">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_EXTSELECTCLIPRGN">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_SETTEXTCOLOR">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_SETWORLDTRANSFORM">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_CREATEPEN">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.LOGPEN">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_ANGLEARC">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_RECTANGLE">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_ROUNDRECT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_ARC">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_FILLPATH">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.RGBQUAD">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.BITMAPINFOHEADER">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.BITMAPINFO">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.BITMAP">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_STRETCHDIBITS">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_BITBLT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_TRANSPARENTBLT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_STRETCHBLT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_MASKBLT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.LOGFONT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_EXTCREATEFONTINDIRECTW">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_EXTTEXTOUTA">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_TEXT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_CREATEDIBPATTERNBRUSHPT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_SETPIXELV">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.EMR_SELECTPALETTE">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.OUTLINETEXTMETRIC">
            <summary>
            Structure for information about font.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.WinGdiConst">
            <summary>
            Class with simple constants.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.ETO">
            <summary>
            ExtTextOut options constants.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ETO.OPAQUE">
            <summary>
            The current background color should be used to fill the rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ETO.CLIPPED">
            <summary>
            The text will be clipped to the rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ETO.GLYPH_INDEX">
            <summary>
            Windows 95 and Windows NT 4.0 and later:
            The lpString array refers to an array returned from 
            GetCharacterPlacement and should be parsed directly by GDI
            as no further language-specific processing is required.
            Glyph indexing only applies to TrueType fonts, but the flag
            can be used for bitmap and vector fonts to indicate that no further
            language processing is necessary and GDI should process the string
            directly.
            
            Note that all glyph indexes are 16-bit values even though the string is
            assumed to be an array of 8-bit values for raster fonts. 
            
            For ExtTextOutW, the glyph indexes are saved to a metafile.
            However, to display the correct characters the metafile must be
            played back using the same font. For ExtTextOutA, the glyph indexes are not saved.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ETO.NUMERICSLATIN">
            <summary>
            Windows 95 and Windows NT 4.0 and later: To display numbers, use European digits.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ETO.NUMERICSLOCAL">
            <summary>
            Windows 95 and Windows NT 4.0 and later: To display numbers, use digits appropriate to the locale.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ETO.RTLREADING">
            <summary>
            Windows 95 and Windows NT 4.0 and later for Middle East
            language edition of Windows: If this value is specified
            and a Hebrew or Arabic font is selected into the device
            context, the string is output using right-to-left reading
            order. If this value is not specified, the string is output
            in left-to-right order. The same effect can be achieved
            by setting the TA_RTLREADING value in SetTextAlign. This
            value is preserved for backward compatibility. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ETO.IGNORELANGUAGE">
            <summary>
            Windows NT 4.0 and later: Reserved for system use.
            If an application sets this flag, it loses international scripting
            support and in some cases it may display no text at all. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.ETO.PDY">
            <summary>
            Windows 2000/XP: When this is set, the array pointed to by lpDx
            contains pairs of values. The first value of each pair is,
            as usual, the distance between origins of adjacent character cells,
            but the second value is the displacement along the vertical direction of the font.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.MWT_DATA">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.PS_PEN_STYLE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.PS_PEN_CAP_STYLE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.PS_PEN_JOIN_STYLE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.PS_PEN_TYPE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.BS_BRUSH_STYLE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.BS_BRUSH_HATCH_STYLE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.GM_GraphicsMode">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.ICM_MODE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.MAPPING_MODE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.PT_POINT_TYPE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.AD_ANGLEDIRECTION">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.TA_TEXT_ALIGN">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.RASTER_CODE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.SRCCOPY">
            <summary>
            Copies the source rectangle directly to the destination rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.SRCPAINT">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.SRCAND">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.SRCINVERT">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean XOR operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.SRCERASE">
            <summary>
            Combines the inverted colors of the destination rectangle with the colors of the source rectangle 
            by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.NOTSRCCOPY">
            <summary>
            Copies the inverted source rectangle to the destination.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.NOTSRCERASE">
            <summary>
            Combines the colors of the source and destination rectangles 
            by using the Boolean OR operator and then inverts the resultant color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.MERGECOPY">
            <summary>
            Merges the colors of the source rectangle with the specified pattern 
            by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.MERGEPAINT">
            <summary>
            Merges the colors of the inverted source rectangle with the colors of the destination rectangle 
            by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.PATCOPY">
            <summary>
            Copies the specified pattern into the destination bitmap.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.PATPAINT">
            <summary>
            Combines the colors of the pattern with the colors of the inverted source rectangle by using the Boolean OR operator.
            The result of this operation is combined with the colors of the destination rectangle by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.PATINVERT">
            <summary>
            Combines the colors of the specified pattern with the colors of the destination rectangle 
            by using the Boolean XOR operator.
            </summary>		
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.DSTINVERT">
            <summary>
            Inverts the destination rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.BLACKNESS">
            <summary>
            Fills the destination rectangle using the color associated with index 0 in the physical palette.
            This color is black for the default physical palette.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.WHITENESS">
            <summary>
            Fills the destination rectangle using the color associated with index 1 in the physical palette.
            This color is white for the default physical palette.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Native.RASTER_CODE.SRCANDDST">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean AND operator.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.FW_FONT_WEIGHT">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.STOCK">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.COMBINE_RGN">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.DIB_COMPRESSION">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Native.GDI_CHARSET">
            <summary>
            Gdi Charset.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PageAddedEventHandler">
            <summary>
            Represents the  method that executes on a PdfDocument when a new page is created.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Syncfusion.Pdf.PageAddedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Pdf.PageAddedEventArgs">
            <summary>
            Provides data for PageAdded event.
            </summary>
            <remarks>
            This event raised on adding the pages. 
            </remarks> 
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            document.Pages.PageAdded += new PageAddedEventHandler(Pages_PageAdded);
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font with Bold font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold);
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
            page = document.Pages.Add();      
            //Saves the document
            document.Save("Sample.pdf");
            //Event handler for PageAdded event
            void Pages_PageAdded(object sender, PageAddedEventArgs args)
            {   
              PdfFont font = new PdfStandardFont(PdfFontFamily.Courier,10);
              args.Page.Graphics.DrawString("New Page", font, PdfBrushes.Black, new PointF(100,100));
            }
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Private document As PdfDocument = New PdfDocument()
            Private document.Pages.PageAdded += New PageAddedEventHandler(AddressOf Pages_PageAdded)
            'Creates a new page and adds it as the last page of the document
            Private page As PdfPage = document.Pages.Add()
            'Create font with Bold font style.
            Private font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
            page = document.Pages.Add()
            'Saves the document
            document.Save("Sample.pdf")
            'Event handler for PageAdded event
            void Pages_PageAdded(Object sender, PageAddedEventArgs args)
              Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier,10)
              args.Page.Graphics.DrawString("New Page", font, PdfBrushes.Black, New PointF(100,100))
            End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PageAddedEventHandler"/> Delegate.      
        </member>
        <member name="M:Syncfusion.Pdf.PageAddedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PageAddedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PageAddedEventArgs.#ctor(Syncfusion.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PageAddedEventArgs"/> class.
            </summary>
            <param name="page">a <see cref="T:Syncfusion.Pdf.PdfPage"/> object representing the page which is added in the document.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            document.Pages.PageAdded += new PageAddedEventHandler(Pages_PageAdded);
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font with Bold font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold);
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
            page = document.Pages.Add();      
            //Saves the document
            document.Save("Sample.pdf");
            // Event handler for PageAdded event
            void Pages_PageAdded(object sender, PageAddedEventArgs args)
            {   
              PdfFont font = new PdfStandardFont(PdfFontFamily.Courier,10);
              args.Page.Graphics.DrawString("New Page", font, PdfBrushes.Black, new PointF(100,100));
            }
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Private document As PdfDocument = New PdfDocument()
            Private document.Pages.PageAdded += New PageAddedEventHandler(AddressOf Pages_PageAdded)
            'Creates a new page and adds it as the last page of the document
            Private page As PdfPage = document.Pages.Add()
            'Create font with Bold font style.
            Private font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
            page = document.Pages.Add()
            'Saves the document
            document.Save("Sample.pdf")
            ' Event handler for PageAdded event
            void Pages_PageAdded(Object sender, PageAddedEventArgs args)
              Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier,10)
              args.Page.Graphics.DrawString("New Page", font, PdfBrushes.Black, New PointF(100,100))
            End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class. 
        </member>
        <member name="P:Syncfusion.Pdf.PageAddedEventArgs.Page">
            <summary>
            Gets the newly added page.
            </summary>
            <value>a <see cref="T:Syncfusion.Pdf.PdfPage"/> object representing the page which is added in the document.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            document.Pages.PageAdded += new PageAddedEventHandler(Pages_PageAdded);
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font with Bold font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold);
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
            page = document.Pages.Add();      
            //Saves the document
            document.Save("Sample.pdf");
            // Event handler for PageAdded event
            void Pages_PageAdded(object sender, PageAddedEventArgs args)
            {
             PdfPage page = args.Page;
             PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 10);
             page.Graphics.DrawString("New Page", font, PdfBrushes.Black, new PointF(100, 100));
            }
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Private document As PdfDocument = New PdfDocument()
            Private document.Pages.PageAdded += New PageAddedEventHandler(AddressOf Pages_PageAdded)
            'Creates a new page and adds it as the last page of the document
            Private page As PdfPage = document.Pages.Add()
            'Create font with Bold font style.
            Private font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
            page = document.Pages.Add()
            'Saves the document
            document.Save("Sample.pdf")
            ' Event handler for PageAdded event
            Private Sub Pages_PageAdded(ByVal sender As Object, ByVal args As PageAddedEventArgs)
              Dim page As PdfPage = args.Page
              Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier,10)
              page.Graphics.DrawString("New Page", font, PdfBrushes.Black, New PointF(100,100))
            End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class.
        </member>
        <member name="T:Syncfusion.Pdf.PdfPageSize">
             <property name="flag" value="Finished" />
            
             <summary>
             Represents information about page size.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.Letter">
             <property name="flag" value="Finished" />
            
             <summary>
             Letter format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.Note">
             <property name="flag" value="Finished" />
            
             <summary>
             Note format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.Legal">
             <property name="flag" value="Finished" />
            
             <summary>
             Legal format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.A0">
             <property name="flag" value="Finished" />
            
             <summary>
             A0 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.A1">
             <property name="flag" value="Finished" />
            
             <summary>
             A1 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.A2">
             <property name="flag" value="Finished" />
            
             <summary>
             A2 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.A3">
             <property name="flag" value="Finished" />
            
             <summary>
             A3 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.A4">
             <property name="flag" value="Finished" />
            
             <summary>
             A4 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.A5">
             <property name="flag" value="Finished" />
            
             <summary>
             A5 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.A6">
             <property name="flag" value="Finished" />
            
             <summary>
             A6 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.A7">
             <property name="flag" value="Finished" />
            
             <summary>
             A7 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.A8">
             <property name="flag" value="Finished" />
            
             <summary>
             A8 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.A9">
             <property name="flag" value="Finished" />
            
             <summary>
             A9 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.A10">
             <property name="flag" value="Finished" />
            
             <summary>
             A10 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.B0">
             <property name="flag" value="Finished" />
            
             <summary>
             B0 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.B1">
             <property name="flag" value="Finished" />
            
             <summary>
             B1 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.B2">
             <property name="flag" value="Finished" />
            
             <summary>
             B2 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.B3">
             <property name="flag" value="Finished" />
            
             <summary>
             B3 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.B4">
             <property name="flag" value="Finished" />
            
             <summary>
             B4 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.B5">
             <property name="flag" value="Finished" />
            
             <summary>
             B5 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.ArchE">
             <property name="flag" value="Finished" />
            
             <summary>
             ArchE format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.ArchD">
             <property name="flag" value="Finished" />
            
             <summary>
             ArchD format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.ArchC">
             <property name="flag" value="Finished" />
            
             <summary>
             ArchC format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.ArchB">
             <property name="flag" value="Finished" />
            
             <summary>
             ArchB format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.ArchA">
             <property name="flag" value="Finished" />
            
             <summary>
             ArchA format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.Flsa">
             <property name="flag" value="Finished" />
            
             <summary>
             The American Foolscap format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.HalfLetter">
             <property name="flag" value="Finished" />
            
             <summary>
             HalfLetter format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.Letter11x17">
             <property name="flag" value="Finished" />
            
             <summary>
             11x17 format.
             </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSize.Ledger">
             <property name="flag" value="Finished" />
            
             <summary>
             Ledger format.
             </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSize.#ctor">
             <property name="flag" value="Finished" />
            
             <summary>
             Private constructor.
             </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfDocumentPageCollection">
            <summary>
            Implements a virtual collection of all pages in the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentPageCollection.m_document">
            <summary>
            Parent document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentPageCollection.m_pageCollectionIndex">
            <summary>
            It holds the page collection with the index
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentPageCollection.count">
            <summary>
            It counts the index of the page
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.#ctor(Syncfusion.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPageCollection"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.Add">
            <summary>
            Creates a page and adds it to the last section in the document.
            </summary>
            <returns>Created page object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.Add(Syncfusion.Pdf.PdfPage)">
            <summary>
            Adds the specified page to the last section.
            </summary>
            <param name="page">The page.</param>i
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.Insert(System.Int32,Syncfusion.Pdf.PdfPage)">
            <summary>
            Inserts a page at the specified index to the last section in the document.
            </summary>
            <param name="index">The index of the page in the section.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.IndexOf(Syncfusion.Pdf.PdfPage)">
            <summary>
            Gets the index of the page in the document.
            </summary>
            <param name="page">The current page.</param>
            <returns>Index of the page in the document if exists, -1 otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.Remove(Syncfusion.Pdf.PdfPage)">
            <summary>
            Removes the specified page.
            </summary>
            <param name="page">The page.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.Clear">
            <summary>
            Clears the page collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.CountPages">
            <summary>
            Counts the pages.
            </summary>
            <returns>The total number of pages.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.GetPageByIndex(System.Int32)">
            <summary>
            Searches a page by its index in the document.
            </summary>
            <param name="index">Zero-based index of the page.</param>
            <returns>Page by its index in the document.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.Add(Syncfusion.Pdf.PdfLoadedPage)">
            <summary>
            Adds a loaded page to the last section in the document.
            </summary>
            <param name="page">The loaded page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.GetLastSection">
            <summary>
            Returns last section in the document.
            </summary>
            <returns>Returns last section in the document.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.OnPageAdded(Syncfusion.Pdf.PageAddedEventArgs)">
            <summary>
            Called when new page has been added
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.Add(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfPageBase,System.Collections.Generic.List{Syncfusion.Pdf.Primitives.PdfArray})">
            <summary>
            Adds a cloned page from a loaded document.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="page">The page.</param>
            <param name="destinations">The destinations.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.CanPageFitLastSection(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Determines whether the page fit last section.
            </summary>
            <param name="page">The page.</param>
            <returns>
            	<c>true</c> if the page fit last section; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentPageCollection.Count">
            <summary>
            Gets the total number of the pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentPageCollection.Item(System.Int32)">
            <summary>
            Gets a page by its index in the document.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentPageCollection.PageCollectionIndex">
            <summary>
            Gets a page index from the document.
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.PdfDocumentPageCollection.PageAdded">
            <summary>
            Represents the  method that executes on a PdfDocument when a new page is created.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfDocumentPageCollection.PdfPageEnumerator">
            <summary>
            Section collection enumerator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentPageCollection.PdfPageEnumerator.m_pageCollection">
            <summary>
            Parent page collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentPageCollection.PdfPageEnumerator.m_currentIndex">
            <summary>
            Current index of the enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.PdfPageEnumerator.#ctor(Syncfusion.Pdf.PdfDocumentPageCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Enumerator"/> class.
            </summary>
            <param name="pageCollection">The section collection.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.PdfPageEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.PdfPageEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentPageCollection.PdfPageEnumerator.CheckIndex">
            <summary>
            Checks the index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentPageCollection.PdfPageEnumerator.Current">
            <summary>
            Gets the current section.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfDocumentTemplate">
            <summary>
            Encapsulates a page template for all the pages in the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentTemplate.m_left">
            <summary>
            Left page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentTemplate.m_top">
            <summary>
            Top page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentTemplate.m_right">
            <summary>
            Right page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentTemplate.m_bottom">
            <summary>
            Bottom page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentTemplate.m_evenLeft">
            <summary>
            Even Left page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentTemplate.m_evenTop">
            <summary>
            Even Top page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentTemplate.m_evenRight">
            <summary>
            Even Right page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentTemplate.m_evenBottom">
            <summary>
            Even Bottom page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentTemplate.m_oddLeft">
            <summary>
            Odd Left page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentTemplate.m_oddTop">
            <summary>
            Odd Top page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentTemplate.m_oddRight">
            <summary>
            Odd Right page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentTemplate.m_oddBottom">
            <summary>
            Odd Bottom page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDocumentTemplate.m_stamps">
            <summary>
            The collection of the stamp elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfDocumentTemplate"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentTemplate.GetLeft(Syncfusion.Pdf.PdfPage)">
            <summary>
            Returns left template.
            </summary>
            <param name="page">Page where the template should be printed.</param>
            <returns>Returns left template.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentTemplate.GetTop(Syncfusion.Pdf.PdfPage)">
            <summary>
            Returns top template.
            </summary>
            <param name="page">Page where the template should be printed.</param>
            <returns>Returns top template.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentTemplate.GetRight(Syncfusion.Pdf.PdfPage)">
            <summary>
            Returns right template.
            </summary>
            <param name="page">Page where the template should be printed.</param>
            <returns>Returns right template.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentTemplate.GetBottom(Syncfusion.Pdf.PdfPage)">
            <summary>
            Returns bottom template.
            </summary>
            <param name="page">Page where the template should be printed.</param>
            <returns>Returns bottom template.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentTemplate.IsEven(Syncfusion.Pdf.PdfPage)">
            <summary>
            Checks whether the page is even or odd.
            </summary>
            <param name="page">The page object.</param>
            <returns>True if the page is even, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfDocumentTemplate.CheckElement(Syncfusion.Pdf.PdfPageTemplateElement,Syncfusion.Pdf.TemplateType)">
            <summary>
            Checks a template element.
            </summary>
            <param name="templateElement">The template element.</param>
            <param name="type">The type that should be assigned to the template element.</param>
            <returns>
            The template element which passed the check.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentTemplate.Left">
            <summary>
            Gets or sets a left page template.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentTemplate.Top">
            <summary>
            Gets or sets a top page template.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentTemplate.Right">
            <summary>
            Gets or sets a right page template.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentTemplate.Bottom">
            <summary>
            Gets or sets a bottom page template.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentTemplate.EvenLeft">
            <summary>
            Gets or sets a left page template using on the even pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentTemplate.EvenTop">
            <summary>
            Gets or sets a top page template using on the even pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentTemplate.EvenRight">
            <summary>
            Gets or sets a right page template using on the even pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentTemplate.EvenBottom">
            <summary>
            Gets or sets a bottom page template using on the even pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentTemplate.OddLeft">
            <summary>
            Gets or sets a left page template using on the odd pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentTemplate.OddTop">
            <summary>
            Gets or sets a top page template using on the odd pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentTemplate.OddRight">
            <summary>
            Gets or sets a right page template using on the odd pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentTemplate.OddBottom">
            <summary>
            Gets or sets a bottom page template using on the odd pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfDocumentTemplate.Stamps">
            <summary>
            Gets a collection of stamp elements.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfLoadedPage">
            <summary>
            Represents a page loaded from a document.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPageBase">
            <summary>
            The base class for all pages.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageBase.m_layers">
            <summary>
            Collection of the layers of the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageBase.m_annotations">
            <summary>
            Collection of the annotations of the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageBase.m_defLayerIndex">
            <summary>
            Index of the default layer.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageBase.m_fontNames">
            <summary>
            Local variable to store the Font Names.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageBase.m_fontReference">
            <summary>
            Local variable to store the Font Refences.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageBase.m_extractedImagesBounds">
            <summary>
            Local variable to store information about images.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageBase.m_contentTemplate">
            <summary>
            Local variable to store page template.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageBase.m_modified">
            <summary>
            Local variable to store if page updated.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageBase.m_annotCount">
            <summary>
            Local variable to store annotation count in the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageBase.m_layersCount">
            <summary>
            Internal variable to store layers count.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageBase.m_pageContentLength">
            <summary>
            Internal variable to store combined length.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageBase.m_imported">
            <summary>
            Internal variable to store if the page is imported.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPageBase"/> class.
            </summary>
            <param name="dic">The page dictionary.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.CreateTemplate">
            <summary>
            Creates a template from page content and all annotation appearances.
            </summary>
            <returns>The created template.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.GetFontStream">
            <summary>
            Collects the Font.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.GetXObject(Syncfusion.Pdf.PdfResources)">
            <summary>
            Gets the XObject from the Resource dictionary
            </summary>
            <param name="resources">Page resource</param>
            <returns>XObject</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.GetResources">
            <summary>
            Gets the resources and modifies the page dictionary.
            </summary>
            <returns>Pdf resources.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.SetResources(Syncfusion.Pdf.PdfResources)">
            <summary>
            Sets the resources.
            </summary>
            <param name="res">The resources object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.GetContent">
            <summary>
            Gets the content of the page in form of a PDF template.
            </summary>
            <returns>A read-only PdfTemplate object that represents the content of the page
            (w/o annotations and other interactive elements).</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.GetOrientation">
            <summary>
            Gets the page orientation.
            </summary>
            <returns>The orientation of the page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.Clear">
            <summary>
            Clears PdfPageBase.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.ImportAnnotations(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfPageBase,System.Collections.Generic.List{Syncfusion.Pdf.Primitives.PdfArray})">
            <summary>
            Imports all annotations from a page.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="page">The page.</param>
            <param name="destinations">The destination list containing the destinations from annotations.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.ImportAnnotations(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Imports all annotations from a page.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.GetDestination(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Gets the destination.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="annotation">The annotation.</param>
            <returns>The destination dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.GetAnnots">
            <summary>
            Gets the annotations array.
            </summary>
            <returns>The array of the annotations.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.GetAnnotationCount">
            <summary>
            Returns number of annotations in the page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.GetRotation">
            <summary>
            Gets the page rotation.
            </summary>
            <returns>The rotation of the page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.DrawAnnotationTemplates(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws the annotation templates.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.NormalizeAnnotationLocation(System.Drawing.PointF,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PdfTemplate)">
            <summary>
            Normalizes the annotation location.
            </summary>
            <param name="location">The location.</param>
            <param name="graphics">The graphics.</param>
            <param name="template">The annotation template.</param>
            <returns>The normalized location.</returns>
            <remarks>Annotation location treats low left page corner as coordinates origin.
            However, graphics translate the origin to the top left corner. This method makes
            location relative to the top left page corner.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.GetAnnotationLocation(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Gets the annotation location.
            </summary>
            <param name="annotation">The annotation dictionary.</param>
            <returns>The annotation location.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.GetAnnotationSize(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Gets the size of the annotation.
            </summary>
            <param name="annotation">The annotation dictionary.</param>
            <returns>The size of the annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.GetElementSize(Syncfusion.Pdf.Primitives.PdfDictionary,System.String)">
            <summary>
            Gets the size of the interactive element.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="propertyName">Name of the property containing size rectangle (e.g. Rect, BBox).</param>
            <returns>The size of the annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageBase.GetAnnotTemplate(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Gets the annotation template.
            </summary>
            <param name="annotation">The annotation.</param>
            <returns>The annotation template.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageBase.Graphics">
            <summary>
            Gets the graphics of the <see cref="P:Syncfusion.Pdf.PdfPageBase.DefaultLayer"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageBase.Imported">
            <summary>
            Gets or sets if a page is imported.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageBase.Layers">
            <summary>
            Gets the collection of the page's layers.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageBase.Annotations">
            <summary>
            Gets the collection of the page's annotations.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageBase.DefaultLayerIndex">
            <summary>
            Gets or sets index of the default layer.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageBase.DefaultLayer">
            <summary>
            Gets the default layer of the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageBase.Size">
            <summary>
            Gets the size of the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageBase.Origin">
            <summary>
            Gets the origin of the page
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageBase.Contents">
            <summary>
            Gets array of page's content.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageBase.Dictionary">
            <summary>
            Gets the page dictionary.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageBase.Rotation">
            <summary>
            Gets the page rotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageBase.Orientation">
            <summary>
            Gets the page orientation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageBase.ContentTemplate">
            <summary>
            Returns the page template.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageBase.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfLoadedPage.m_terminalannots">
            <summary>
            Dictionaries of terminal annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfLoadedPage.m_annots">
            <summary>
            Collection of annotations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfLoadedPage.m_widgetReferences">
            <summary>
            Holds the reference numbers of the widget annotations
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPage.GetResources">
            <summary>
            Gets the resources and modifies the page dictionary.
            </summary>
            <returns>Pdf resources.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPage.#ctor(Syncfusion.Pdf.PdfDocumentBase,Syncfusion.Pdf.IO.PdfCrossTable,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLoadedPage"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="cTable">The cross-reference table.</param>
            <param name="dictionary">The page's dictionary.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPage.CreateAnnotations">
            <summary>
            Retrieves the terminal annotations.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPage.CheckFormField(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Check whether annotation is form field or not.
            </summary>
            <param name="iPdfPrimitive">The annotation need to be check</param>
            <returns>Returns true if the annotation is used by Acroform field, otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPage.RemoveFromDictionaries(Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Removes field and kids annotation from dictionaries.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPage.OnBeginSave(System.EventArgs)">
            <summary>
            Raises <see cref="E:Syncfusion.Pdf.PdfLoadedPage.BeginSave"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPage.PageBeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Raises when page dictionary is going to be saved.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPage.PageEndSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Raises after the page dictionary was saved.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="args">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPage.Clear">
            <summary>
            Clears PdfLoadedPage.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPage.GetContentHeight(System.String)">
            <summary>
            Gets the text size of a specified font.
            </summary>
            <param name="key">Font key</param>
            <returns>Returns the text size of the specified font</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPage.CreateFont(Syncfusion.Pdf.Primitives.PdfDictionary,System.Single,Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Create metrics for embed font
            </summary>
            <param name="fontDictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPage.GetFontStyle(System.String)">
            <summary>
            Gets the font style.
            </summary>
            <param name="fontFamilyString">The font family string.</param>
            <returns>The style of pdf font.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPage.GetFontFamily(System.String)">
            <summary>
            Gets the font family.
            </summary>
            <param name="fontFamilyString">The font family string.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPage.GetKey(Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Gets the key value for a given font
            </summary>
            <param name="fontName">PdfFont value.</param>
            <returns>Returns the key value.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.PdfLoadedPage.Annotations">
            <summary>
            Gets the field collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfLoadedPage.Size">
            <summary>
            Gets the size of the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfLoadedPage.CropBox">
            <summary>
            Returns the visible region of the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfLoadedPage.BleedBox">
            <summary>
            Returns page region after clipping.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfLoadedPage.TrimBox">
            <summary>
            Returns page region after trimming.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfLoadedPage.ArtBox">
            <summary>
            Returns page region containing meaningful content.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfLoadedPage.Document">
            <summary>
            Gets the document.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfLoadedPage.CrossTable">
            <summary>
            Gets the cross table.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfLoadedPage.TerminalAnnotation">
            <summary>
            Gets or sets the terminal fields.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfLoadedPage.Origin">
            <summary>
            Gets the origin coordinate of the loaded page
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.PdfLoadedPage.BeginSave">
            <summary>
            Raises before the page saves.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection">
            <summary>
            Implements routines for manipulation with loaded pages.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.#ctor(Syncfusion.Pdf.PdfDocumentBase,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLoadedPageCollection"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Add">
            <summary>
            Creates a new page and adds it to the collection.
            </summary>
            <returns>The created page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Add(System.Drawing.SizeF)">
            <summary>
            Creates a new page of the specified size and adds it to the collection.
            </summary>
            <param name="size">The size of the new page.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Add(System.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfMargins)">
            <summary>
            Creates a new page of the specified size and with the specified margins
            and adds it to the collection.
            </summary>
            <param name="size">The size of the new page.</param>
            <param name="margins">The margins of the new page.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Add(System.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfMargins,Syncfusion.Pdf.PdfPageRotateAngle)">
            <summary>
            Creates a new page of the specified size and with the specified margins
            and adds it to the collection.
            </summary>
            <param name="size">The size of the new page.</param>
            <param name="margins">The margins of the new page.</param>
            <param name="rotation">The rotation of the new page.</param>
            <returns>The created page.</returns>		
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Add(System.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfMargins,Syncfusion.Pdf.PdfPageRotateAngle,System.Int32)">
            <summary>
            Creates a new page of the specified size and with the specified margins
            and adds it to the collection.
            </summary>
            <param name="size">The size of the new page.</param>
            <param name="margins">The margins of the new page.</param>
            <param name="rotation">The rotation of the new page.</param>
            <param name="loc">The location of the new page.</param>
            <returns>The created page.</returns>		
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Add(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfPageBase,System.Collections.Generic.List{Syncfusion.Pdf.Primitives.PdfArray})">
            <summary>
            Adds a cloned page from a loaded document.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="page">The page.</param>
            <param name="destinations">The destinations.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Add(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Adds a cloned page from a loaded document.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="page">The page.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Insert(System.Int32)">
            <summary>
            Creates a new page and inserts it at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Insert(System.Int32,System.Drawing.SizeF)">
            <summary>
            Creates a new page and inserts it at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="size">The size of the page.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Insert(System.Int32,System.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfMargins)">
            <summary>
            Creates a new page and inserts it at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="size">The size of the page.</param>
            <param name="margins">The margins of the page.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Insert(System.Int32,System.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfMargins,Syncfusion.Pdf.PdfPageRotateAngle)">
            <summary>
            Creates a new page and inserts it at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="size">The size of the page.</param>
            <param name="margins">The margins of the page.</param>
            <param name="rotation">The rotation of the new page.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the page at the given specified index.
            </summary>
            <param name="index"> Index of the page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Remove(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Removes the specified page.
            </summary>
            <param name="page">The page to be remove.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.ReArrange(System.Int32[])">
            <summary>
            ReArrange the Pages in the Loaded Document.
            </summary>
            <param name="orderArray">The page sequence to arrange the pages.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Insert(System.Int32,System.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfMargins,Syncfusion.Pdf.PdfPageRotateAngle,Syncfusion.Pdf.PdfPageOrientation)">
            <summary>
            Creates a new page and inserts it at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="size">The size of the page.</param>
            <param name="margins">The margins of the page.</param>
            <param name="rotation">The rotation of the new page.</param>
            <param name="orientation">The orientation of the new page.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.GetPage(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Gets the page.
            </summary>
            <param name="dic">The page dictionary.</param>
            <returns>The loaded page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.UpdateCount(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Updates number of leaf nodes of corresponding page tree nodes starting with <see cref="!:parent"/>.
            </summary>
            <param name="parent">The parent dictionary </param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.IndexOf(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Returns the index of the page.
            </summary>
            <param name="page">The page.</param>
            <returns>The index of the page.</returns>
            <remarks>This might be a time consuming operation.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.GetPage(System.Int32)">
            <summary>
            Gets the page by its index.
            </summary>
            <param name="index">The index.</param>
            <returns>The proper PdfPageBase instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.IsNodeLeaf(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Determines whether a node is a leaf nide.
            </summary>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if the specified node is a leaf node; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.GetNodeKids(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Gets the node kids.
            </summary>
            <param name="node">The node.</param>
            <returns>The node kids array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.GetNodeCount(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Gets the node count.
            </summary>
            <param name="node">The node.</param>
            <returns>The number of the kids in the node.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.GetParent(System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Gets the parent parent node.
            </summary>
            <param name="index">The index.</param>
            <param name="localIndex">Index of the local.</param>
            <param name="zeroValid">if set to <c>true</c> zero index is a valid index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Clear">
            <summary>
            Clears page cache.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see>
            object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.SectionCount">
            <summary>
            Get the Section Count.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.LoadedDocument">
            <summary>
             Get and set the Pdfloaded Document.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:PdfPageBase"/> at the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedPageCollection.PageCache">
            <summary>
            Gets the page cache.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedPageEnumerator">
            <summary>
            Implements enumerator to the loaded page collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageEnumerator.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedPageCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLoadedPageEnumerator"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedPageEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedPageEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>The current element in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection
            or after the last element. </exception>
        </member>
        <member name="T:Syncfusion.Pdf.PdfLoadedPageLabelCollection">
            <summary>
            This class allows to manipulate with page
            labels of one of the sections.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfLoadedPageLabelCollection.m_count">
            <summary>
            Local variable to store the PageLabel Count.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfLoadedPageLabelCollection.m_pageLabel">
            <summary>
            Internal variable to store page Label.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfLoadedPageLabelCollection.m_pageLabelCollection">
            <summary>
            Internal variable to store page Label Collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfLoadedPageLabelCollection.Add(Syncfusion.Pdf.PdfPageLabel)">
            <summary>
            Add the Page Label.
            </summary>
            <param name="pageLabel"></param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfLoadedPageLabelCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfLoadedPageLabelCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.PdfPageLabel"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfLoadedPageLabelCollection.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPage">
            <summary>
            Represents a single PDF page.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPage"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Add a page
            PdfPage page = doc.Pages.Add();
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPage.GetClientSize">
            <summary>
            Returns a page size reduced by page margins and page template dimensions.
            </summary>
            <remarks>It's the actual size of the page where some output can be performed.</remarks>
            <returns>Returns a page size reduced by page margins and page template dimensions.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPage.OnBeginSave(System.EventArgs)">
            <summary>
            Raises <see cref="E:Syncfusion.Pdf.PdfPage.BeginSave"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPage.Clear">
            <summary>
            Clears PdfPage.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPage.SetSection(Syncfusion.Pdf.PdfSection)">
            <summary>
            Sets parent section to the page.
            </summary>
            <param name="section">The parent section.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPage.SetProgress">
            <summary>
            Sets the progress.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPage.ResetProgress">
            <summary>
            Resets the progress.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPage.Initialize">
            <summary>
            Initializes a page.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPage.DrawPageTemplates(Syncfusion.Pdf.PdfDocument)">
            <summary>
            Draws page templates.
            </summary>
            <param name="document">Parent document.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPage.RemoveTemplateLayers(Syncfusion.Pdf.PdfDocument)">
            <summary>
            Removes template layers from the page layers.
            </summary>
            <param name="document">Parent document.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPage.PageBeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Raises when page dictionary is going to be saved.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPage.PageEndSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Raises after the page dictionary was saved.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="args">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPage.Section">
            <summary>
            Gets the parent section of the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPage.Size">
            <summary>
            Gets the size of the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPage.Origin">
            <summary>
            Gets the origin of the page
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPage.Annotations">
            <summary>
            Gets a collection of the annotations of the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPage.Document">
            <summary>
            Gets current document.
            </summary>
            <value>The pdf document.</value>
        </member>
        <member name="E:Syncfusion.Pdf.PdfPage.BeginSave">
            <summary>
            Raises before the page saves.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPageLabel">
            <summary>
            This class allows to manipulate with page
            labels of one of the sections.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLabel.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPageLabel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLabel.FromStyleToString(Syncfusion.Pdf.PdfNumberStyle)">
            <summary>
            Converts style to a string.
            </summary>
            <param name="style">The style.</param>
            <returns>The PDF name value representing the specified style.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLabel.FromStringToStyle(System.String)">
            <summary>
            Converts string to numbering style.
            </summary>
            <param name="name">The PDF name of the style.</param>
            <returns>The converted numbering style.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageLabel.NumberStyle">
            <summary>
            Gets or sets the numbering style.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageLabel.Prefix">
            <summary>
            Gets or sets the prefix.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageLabel.StartNumber">
            <summary>
            Gets or sets the start number.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageLabel.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPageLayer">
            <summary>
            Describes layer of the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_page">
            <summary>
            Parent page of the layer.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_graphics">
            <summary>
            Graphics context of the layer.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_content">
            <summary>
            Content of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_graphicsState">
            <summary>
            Graphics state of the Graphics.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_clipPageTemplates">
            <summary>
            Indicates whether the layer should clip page template dimensions or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_bSaved">
            <summary>
            Indicates if the graphics stream was saved.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_colorspace">
            <summary>
            Local Variable to store the colorspace of the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_layerid">
            <summary>
            Local Variable to store the layer id
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_name">
            <summary>
            Local Variable to store the name
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_visible">
            <summary>
            Local Variable to set visiblity
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_layer">
            <summary>
            Collection of the layers of the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_sublayer">
            <summary>
            Indicates if Sublayer is present.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_contentLength">
            <summary>
            Local variable to store length of the graphics.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_printOption">
            <summary>
            Stores the print Option dictionary
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.m_usage">
            <summary>
            Stores the usage dictionary
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayer.printState">
            <summary>
            Indicates printing state
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayer.Add">
            <summary>
            Adds a new layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayer.#ctor(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Creates new layer.
            </summary>
            <param name="page">Parent page of the layer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayer.#ctor(Syncfusion.Pdf.PdfPageBase,Syncfusion.Pdf.Primitives.PdfStream)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPageLayer"/> class.
            </summary>
            <param name="page">The page.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayer.#ctor(Syncfusion.Pdf.PdfPageBase,System.Boolean)">
            <summary>
            Creates a new layer.
            </summary>
            <param name="page">Parent page of the layer.</param>
            <param name="clipPageTemplates">Indicates whether the layer should clip page template dimensions or not.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayer.InitializeGraphics(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Initializes Graphics context of the layer.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayer.Clear">
            <summary>
            Clears PdfPageLayer.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayer.BeginSaveContent(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Catches BeforeSave of the content event.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageLayer.Colorspace">
            <summary>
            Get or set the Colorspace.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageLayer.Page">
            <summary>
            Gets parent page of the layer.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageLayer.Graphics">
            <summary>
            Gets Graphics context of the layer.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageLayer.PrintState">
            <summary>
            Gets and sets printing state
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageLayer.Layers">
            <summary>
            Gets the layer collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageLayer.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPageLayerCollection">
            <summary>
            Collection of the pages layers.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayerCollection.m_page">
            <summary>
            Parent page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayerCollection.m_sublayer">
            <summary>
            Indicates if Sublayer is present.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayerCollection.parentLayerCount">
            <summary>
            Stores the number of first level layers in the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayerCollection.m_OptionalContent">
            <summary>
            Stores the optional content dictionary
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.#ctor(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Creates new collection.
            </summary>
            <param name="page">Parent page for the layers in the collection.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.Add">
            <summary>
            Creates a new layer and adds it to the end of the collection.
            </summary>
            <returns>Created layer.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.Add(System.String,System.Boolean)">
            <summary>
            Creates a new layer and adds it to the end of the collection.
            </summary>
            <param name="LayerName">Layer Name.</param>
            <param name="Visible">Layer Visibility.</param>
            <returns>Created layer.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.Add(System.String)">
            <summary>
            Creates a new layer and adds it to the end of the collection.
            </summary>
            <param name="LayerName">Layer Name.</param>
            <returns>Created layer.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.Add(Syncfusion.Pdf.PdfPageLayer)">
            <summary>
            Adds layer to the collection.
            </summary>
            <param name="layer">Layer object.</param>
            <remarks>The layers belonging to the same page can be added to the collection only.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.CreateLayer(Syncfusion.Pdf.PdfPageLayer)">
            <summary>
            Creates a  Optional Content Properties and adds it to Catalog.
            </summary>
            <param name="layer">Layer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.setPrintOption(Syncfusion.Pdf.PdfPageLayer)">
            <summary>
            Creates Usage Dictionary and adds it to OCG dictionary
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.CreateLayerLoadedPage(Syncfusion.Pdf.PdfPageLayer)">
            <summary>
            creates a pdf page layer from loaded page
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.Insert(System.Int32,Syncfusion.Pdf.PdfPageLayer)">
            <summary>
            Inserts layer into collection.
            </summary>
            <param name="index">Index of the layer.</param>
            <param name="layer">Layer object.</param>
            <remarks>The layers belonging to the same page can be added to the collection only.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.CreateOptionalContentDictionary(Syncfusion.Pdf.PdfPageLayer)">
            <summary>
            Creates a  Optional Content Groups and adds it to OC Properties.
            </summary>
            <param name="layer">Layer.</param>
            <returns>primitive as pdfarray.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.CreateOptionalContentDictionary(Syncfusion.Pdf.PdfPageLayer,System.Boolean)">
            <summary>
            Creates a  Optional Content Groups and adds it to OC Properties.
            </summary>
            <param name="layer">Layer.</param>
            <returns>primitive as pdfarray.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.WriteEndMark">
            <summary>
            Writes End of Marked Content in Content Stream
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.CreateOptionalContentViews(Syncfusion.Pdf.PdfPageLayer)">
            <summary>
            Creates  Optional Content Views and adds it to OC Properties.
            </summary>
            <param name="layer">Layer.</param>
            <returns>m_dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.CreateOptionalContentViews(Syncfusion.Pdf.PdfPageLayer,System.Boolean)">
            <summary>
            Creates  Optional Content Views and adds it to OC Properties.
            </summary>
            <param name="layer">Layer.</param>
            <returns>m_dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.Remove(Syncfusion.Pdf.PdfPageLayer)">
            <summary>
            Removes layer from the collection.
            </summary>
            <param name="layer">Layer object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.Remove(System.String)">
            <summary>
            Removes layer by its name.
            </summary>
            <param name="name">Name of the layer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.RemoveAt(System.Int32)">
            <summary>
            Removes layer by its index.
            </summary>
            <param name="index">Index of the layer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.Contains(Syncfusion.Pdf.PdfPageLayer)">
            <summary>
            Checks whether collection contains layer.
            </summary>
            <param name="layer">Layer object.</param>
            <returns>True - if collection contains layer, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.IndexOf(Syncfusion.Pdf.PdfPageLayer)">
            <summary>
            Returns index of the layer in the collection if exists, -1 otherwise.
            </summary>
            <param name="layer">Layer object.</param>
            <returns>Returns index of the layer in the collection if exists, -1 otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.Clear">
            <summary>
            Cleares the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.CombineContent(System.IO.Stream)">
            <summary>
            Combines the content into the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.AddLayer(System.Int32,Syncfusion.Pdf.PdfPageLayer)">
            <summary>
            Registers layer at the page.
            </summary>
            <param name="index">Index of the layer in the collection.</param>
            <param name="layer">The new layer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.RemoveLayer(Syncfusion.Pdf.PdfPageLayer)">
            <summary>
            Removes layer from the page.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.InsertLayer(System.Int32,Syncfusion.Pdf.PdfPageLayer)">
            <summary>
            Registers layer at the page.
            </summary>
            <param name="index">Index of the layer in the collection.</param>
            <param name="layer">The new layer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageLayerCollection.ParseLayers(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Parses the layers.
            </summary>
            <param name="loadedPage">The loaded page.</param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageLayerCollection.Item(System.Int32)">
            <summary>
            Gets or sets element by its index.
            </summary>
            <remarks>The layers belonging to the same page can be added to the collection only.</remarks>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPageSettings">
            <summary>
            Represent class with setting of page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageSettings.m_transition">
            <summary>
            Internal variable to store transition.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPageSettings"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.#ctor(System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPageSettings"/> class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.#ctor(Syncfusion.Pdf.PdfPageOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPageSettings"/> class.
            </summary>
            <param name="pageOrientation">The page orientation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.#ctor(System.Drawing.SizeF,Syncfusion.Pdf.PdfPageOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPageSettings"/> class.
            </summary>
            <param name="size">The size.</param>
            <param name="pageOrientation">The page orientation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPageSettings"/> class.
            </summary>
            <param name="margins">The margins.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPageSettings"/> class.
            </summary>
            <param name="leftMargin">The left margin.</param>
            <param name="topMargin">The top margin.</param>
            <param name="rightMargin">The right margin.</param>
            <param name="bottomMargin">The bottom margin.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.#ctor(System.Drawing.SizeF,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPageSettings"/> class.
            </summary>
            <param name="size">The size.</param>
            <param name="margins">The margins.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.#ctor(System.Drawing.SizeF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPageSettings"/> class.
            </summary>
            <param name="size">The size.</param>
            <param name="leftMargin">The left margin.</param>
            <param name="topMargin">The top margin.</param>
            <param name="rightMargin">The right margin.</param>
            <param name="bottomMargin">The bottom margin.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.#ctor(System.Drawing.SizeF,Syncfusion.Pdf.PdfPageOrientation,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPageSettings"/> class.
            </summary>
            <param name="size">The size.</param>
            <param name="pageOrientation">The page orientation.</param>
            <param name="margins">The margins.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.#ctor(System.Drawing.SizeF,Syncfusion.Pdf.PdfPageOrientation,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPageSettings"/> class.
            </summary>
            <param name="size">The size.</param>
            <param name="pageOrientation">The page orientation.</param>
            <param name="leftMargin">The left margin.</param>
            <param name="topMargin">The top margin.</param>
            <param name="rightMargin">The right margin.</param>
            <param name="bottomMargin">The bottom margin.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.SetMargins(System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="margins">The margins.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.SetMargins(System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="leftRight">The left right.</param>
            <param name="topBottom">The top bottom.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>Cloned object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.GetActualSize">
            <summary>
            Returns size, shrinked by the margins.
            </summary>
            <returns>Returns size, shrinked by the margins.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.GetTransition">
            <summary>
            Gets the transition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.UpdateSize(Syncfusion.Pdf.PdfPageOrientation)">
            <summary>
            Update page size depending on orientation.
            </summary>
            <param name="orientation">Page orientation settings.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageSettings.SetSize(System.Drawing.SizeF)">
            <summary>
            Sets size to the page aaccording to the orientation.
            </summary>
            <param name="size">Size of the page.</param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageSettings.Orientation">
            <summary>
            Gets or sets the page orientation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageSettings.Size">
            <summary>
            Gets or sets the size of the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageSettings.Width">
            <summary>
            Gets or sets the width of the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageSettings.Height">
            <summary>
            Gets or sets the height of the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageSettings.Margins">
            <summary>
            Gets or sets the margins of the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageSettings.Rotate">
            <summary>
            Gets or sets the number of degrees by which the page should be rotated clockwise when displayed or printed.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageSettings.Transition">
            <summary>
            Gets or sets the transition.
            </summary>
            <value>The transition.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageSettings.Unit">
            <summary>
            Gets or sets the type of default user space units.
            </summary>
            <remarks>For PDF 1.6 and later versions.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageSettings.Origin">
            <summary>
            Gets or sets the origin of the page
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPageTemplateElement">
            <summary>
            Describes a page template object that can be used as header/footer, watermark or stamp.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageTemplateElement.m_foreground">
            <summary>
            Layer type of the template.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageTemplateElement.m_dockStyle">
            <summary>
            Docking style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageTemplateElement.m_alignmentStyle">
            <summary>
            Alignment style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageTemplateElement.m_template">
            <summary>
            PdfTemplate object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageTemplateElement.m_type">
            <summary>
            Usage type of this template.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageTemplateElement.m_location">
            <summary>
            Location of the template on the page.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.#ctor(System.Drawing.RectangleF)">
            <summary>
            Creates a new page template.
            </summary>
            <param name="bounds">Bounds of the template.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.#ctor(System.Drawing.RectangleF,Syncfusion.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfPageTemplateElement"/> class.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.#ctor(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Creates a new page template.
            </summary>
            <param name="location">Location of the template.</param>
            <param name="size">Size of the template.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.#ctor(System.Drawing.PointF,System.Drawing.SizeF,Syncfusion.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfPageTemplateElement"/> class.
            </summary>
            <param name="location">The location.</param>
            <param name="size">The size.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.#ctor(System.Drawing.SizeF)">
            <summary>
            Creates new page template object.
            </summary>
            <param name="size">Size of the template.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new page template.
            </summary>
            <param name="width">Width of the template.</param>
            <param name="height">Height of the template.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.#ctor(System.Single,System.Single,Syncfusion.Pdf.PdfPage)">
            <summary>
            Creates a new page template.
            </summary>
            <param name="width">Width of the template.</param>
            <param name="height">Height of the template.</param>
            <param name="page">The Current Page object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new page template.
            </summary>
            <param name="x">X co-ordinate of the template.</param>
            <param name="y">Y co-ordinate of the template.</param>
            <param name="width">Width of the template.</param>
            <param name="height">Height of the template.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.#ctor(System.Single,System.Single,System.Single,System.Single,Syncfusion.Pdf.PdfPage)">
            <summary>
            Creates a new page template.
            </summary>
            <param name="x">X co-ordinate of the template.</param>
            <param name="y">Y co-ordinate of the template.</param>
            <param name="width">Width of the template.</param>
            <param name="height">Height of the template.</param>
            <param name="page">The Current Page object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.Draw(Syncfusion.Pdf.PdfPageLayer,Syncfusion.Pdf.PdfDocument)">
            <summary>
            Draws the template.
            </summary>
            <param name="layer">Parent layer.</param>
            <param name="document">Parent document.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.UpdateDocking(Syncfusion.Pdf.TemplateType)">
            <summary>
            Updates Dock property if template is used as header/footer.
            </summary>
            <param name="type">Type of the template.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.ResetAlignment">
            <summary>
            Resets alignment of the template.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.SetAlignment(Syncfusion.Pdf.PdfAlignmentStyle)">
            <summary>
            Sets alignment of the template.
            </summary>
            <param name="alignment">Alignment style.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.CalculateBounds(Syncfusion.Pdf.PdfPage,Syncfusion.Pdf.PdfDocument)">
            <summary>
            Calculates bounds of the page template.
            </summary>
            <param name="page">Parent page.</param>
            <param name="document">Parent document.</param>
            <returns>Bounds of the page template.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.GetAlignmentBounds(Syncfusion.Pdf.PdfPage,Syncfusion.Pdf.PdfDocument)">
            <summary>
            Calculates bounds according to the alignment.
            </summary>
            <param name="page">Parent page.</param>
            <param name="document">Parent document.</param>
            <returns>Bounds according to the alignment.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.GetSimpleAlignmentBounds(Syncfusion.Pdf.PdfPage,Syncfusion.Pdf.PdfDocument)">
            <summary>
            Calculates bounds according to the alignment.
            </summary>
            <param name="page">Parent page.</param>
            <param name="document">Parent document.</param>
            <returns>Bounds according to the alignment.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.GetTemplateAlignmentBounds(Syncfusion.Pdf.PdfPage,Syncfusion.Pdf.PdfDocument)">
            <summary>
            Calculates bounds according to the alignment.
            </summary>
            <param name="page">Parent page.</param>
            <param name="document">Parent document.</param>
            <returns>Bounds according to the alignment.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.GetDockBounds(Syncfusion.Pdf.PdfPage,Syncfusion.Pdf.PdfDocument)">
            <summary>
            Calculates bounds according to the docking.
            </summary>
            <param name="page">Parent page.</param>
            <param name="document">Parent document.</param>
            <returns>Bounds according to the docking.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.GetSimpleDockBounds(Syncfusion.Pdf.PdfPage,Syncfusion.Pdf.PdfDocument)">
            <summary>
            Calculates template bounds basing on docking if template is not page template.
            </summary>
            <param name="page">Parent page.</param>
            <param name="document">Parent document.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTemplateElement.GetTemplateDockBounds(Syncfusion.Pdf.PdfPage,Syncfusion.Pdf.PdfDocument)">
            <summary>
            Calculates template bounds basing on docking if template is a page template.
            </summary>
            <param name="page">Parent page.</param>
            <param name="document">Parent document.</param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTemplateElement.Dock">
            <summary>
            Gets or sets the dock style of the page template element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTemplateElement.Alignment">
            <summary>
            Gets or sets alignment of the page template element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTemplateElement.Foreground">
            <summary>
            Indicates whether the page template is located in front of 
            the page layers or behind of it.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTemplateElement.Background">
            <summary>
            Indicates whether the page template is located behind of 
            the page layers or in front of it.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTemplateElement.Location">
            <summary>
            Gets or sets location of the page template element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTemplateElement.X">
            <summary>
            Gets or sets X co-ordinate of the template element on the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTemplateElement.Y">
            <summary>
            Gets or sets Y co-ordinate of the template element on the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTemplateElement.Size">
            <summary>
            Gets or sets size of the page template element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTemplateElement.Width">
            <summary>
            Gets or sets width of the page template element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTemplateElement.Height">
            <summary>
            Gets or sets height of the page template element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTemplateElement.Bounds">
            <summary>
            Gets or sets bounds of the page template element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTemplateElement.Graphics">
            <summary>
            Gets graphics context of the page template element.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTemplateElement.Template">
            <summary>
            Gets Pdf template object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTemplateElement.Type">
            <summary>
            Gets or sets type of the usage of this page template.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPageTransition">
            <summary>
            Represents parameters how to display the page in the presentation mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageTransition.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageTransition.m_style">
            <summary>
            Internal variable to store transition style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageTransition.m_duration">
            <summary>
            Internal value to store transtion duration.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageTransition.m_dimension">
            <summary>
            Internal variable to store transition dimension.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageTransition.m_motion">
            <summary>
            Internal variable to store transition motion.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageTransition.m_direction">
            <summary>
            Internal variable to store transition motion.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageTransition.m_scale">
            <summary>
            Internal variable to store scale.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageTransition.m_pageDuration">
            <summary>
            Internal variable to store page duration.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTransition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfPageTransition"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTransition.MotionToString(Syncfusion.Pdf.PdfTransitionMotion)">
            <summary>
            Converts transition motion to string.
            </summary>
            <param name="motion">The motion.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTransition.DimensionToString(Syncfusion.Pdf.PdfTransitionDimension)">
            <summary>
            Converts transition dimension to string.
            </summary>
            <param name="dimension">The dimension.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTransition.StyleToString(Syncfusion.Pdf.PdfTransitionStyle)">
            <summary>
            Converts style to string.
            </summary>
            <param name="style">The style.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageTransition.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTransition.Style">
            <summary>
            Gets or sets the transition style to use when moving to this page from another 
            during a presentation.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTransition.Duration">
            <summary>
            Gets or sets the duration of the transition effect, in seconds.
            </summary>
            <value>The transition duration.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTransition.Dimension">
            <summary>
            Gets or sets the dimension in which the specified transition effect occurs.
            </summary>
            <value>The dimension.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTransition.Motion">
            <summary>
            Gets or sets the the direction of motion for the specified transition effect.
            </summary>
            <value>The motion.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTransition.Direction">
            <summary>
            The direction in which the specified transition effect moves, expressed in degrees counter 
            clockwise starting from a left-to-right direction. (This differs from the page object�s 
            Rotate property, which is measured clockwise from the top.)
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTransition.Scale">
            <summary>
            Gets or sets the starting or ending scale at which the changes are drawn. 
            If Motion property specifies an inward transition, the scale of the changes drawn progresses 
            from Scale to 1.0 over the course of the transition. If Motion specifies an outward 
            transition, the scale of the changes drawn progresses from 1.0 to Scale over the course 
            of the transition.
            </summary>
            <remarks>
            This property has effect for Fly transition style only.
            </remarks>
            <value>The scale.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTransition.PageDuration">
            <summary>
            Gets or sets The page�s display duration (also called its advance timing): the maximum 
            length of time, in seconds, that the page is displayed during presentations before 
            the viewer application automatically advances to the next page. By default, 
            the viewer does not advance automatically.
            </summary>
            <value>The page duration.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageTransition.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Pdf.PdfSection">
            <summary>
            Represents a section entity. A section it's a set of the pages with similar page settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSection.m_settings">
            <summary>
            Page settings of the pages in the section.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSection.m_pageTemplate">
            <summary>
            Page template for the section.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSection.m_pageLabel">
            <summary>
            An instance of the class manipulating with a page label.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSection.m_isProgressOn">
            <summary>
            Indicates if the progress is turned on.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSection.m_initialSettings">
            <summary>
            Internal variable to store initial page settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSection.m_savedTransition">
            <summary>
            Internal variable to store cached saved settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSection.m_isTransitionSaved">
            <summary>
            Internal variable to store whether transition has been saved already.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSection.m_pagesCollection">
            <summary>
            A virtual collection of pages.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfSection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.#ctor(Syncfusion.Pdf.PdfDocumentBase,Syncfusion.Pdf.PdfPageSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfSection"/> class.
            </summary>
            <param name="pageSettings">The page settings.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.#ctor(Syncfusion.Pdf.PdfDocument)">
            <summary>
            Creates a new instance of PDfSection class.
            </summary>
            <param name="document">Parent document for the section.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.Add">
            <summary>
            Creates a page and adds it to the collection.
            </summary>
            <returns>Created page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.Add(Syncfusion.Pdf.PdfPage)">
            <summary>
            Adds the specified page.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.Insert(System.Int32,Syncfusion.Pdf.PdfPage)">
            <summary>
            Inserts a page at the specified index.
            </summary>
            <param name="index">The index of the page in the section.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.IndexOf(Syncfusion.Pdf.PdfPage)">
            <summary>
            Get the index of the page.
            </summary>
            <param name="page">The page.</param>
            <returns>The index of the page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.Contains(Syncfusion.Pdf.PdfPage)">
            <summary>
            Determines whether the page in within the section.
            </summary>
            <param name="page">The page.</param>
            <returns>
            	<c>true</c> if the specified page is within the section; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.Remove(Syncfusion.Pdf.PdfPage)">
            <summary>
            Removes the page from the section.
            </summary>
            <param name="page">The page that should be removed from the section.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.RemoveAt(System.Int32)">
            <summary>
            Removes the page by its index in the section.
            </summary>
            <param name="index">Zero-based index of the page in the section.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.Clear">
            <summary>
            Removes all the pages from the section.
            </summary>
            <remarks>If the document contains one section only, this section should contain at least one page.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.ContainsTemplates(Syncfusion.Pdf.PdfDocument,Syncfusion.Pdf.PdfPage,System.Boolean)">
            <summary>
            Checks whether any template should be printed on this layer.
            </summary>
            <param name="document">Parent document.</param>
            <param name="page">The parent page.</param>
            <param name="foreground">Layer z-order.</param>
            <returns>True - if some content should be printed on the layer, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.DrawTemplates(Syncfusion.Pdf.PdfPage,Syncfusion.Pdf.PdfPageLayer,Syncfusion.Pdf.PdfDocument,System.Boolean)">
            <summary>
            draws page templates on the page.
            </summary>
            <param name="page">The page.</param>
            <param name="layer">Page layer where the templates should be drawn.</param>
            <param name="document">Parent document.</param>
            <param name="foreground">Foreground layer if True, False otherwise.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.GetActualBounds(Syncfusion.Pdf.PdfPage,System.Boolean)">
            <summary>
            Calculates actual bounds of the page.
            </summary>
            <param name="page">Page where the bounds should be calculated.</param>
            <param name="includeMargins">If true - take into consideration Margins.</param>
            <returns>Actual bounds of the page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.GetActualBounds(Syncfusion.Pdf.PdfDocument,Syncfusion.Pdf.PdfPage,System.Boolean)">
            <summary>
            Calculates actual bounds of the page.
            </summary>
            <param name="document">Parent document.</param>
            <param name="page">Page where the bounds should be calculated.</param>
            <param name="includeMargins">If true - take into consideration Margins.</param>
            <returns>Actual bounds of the page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.GetLeftIndentWidth(Syncfusion.Pdf.PdfDocument,Syncfusion.Pdf.PdfPage,System.Boolean)">
            <summary>
            Calculates width of the left indent.
            </summary>
            <param name="document">Parent document.</param>
            <param name="page">Page where the bounds should be calculated.</param>
            <param name="includeMargins">If true - take into consideration Margins.</param>
            <returns>Width of the left indent.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.GetTopIndentHeight(Syncfusion.Pdf.PdfDocument,Syncfusion.Pdf.PdfPage,System.Boolean)">
            <summary>
            Calculates Height of the top indent.
            </summary>
            <param name="document">Parent document.</param>
            <param name="page">Page where the bounds should be calculated.</param>
            <param name="includeMargins">If true - take into consideration Margins.</param>
            <returns>Height of the top indent.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.GetRightIndentWidth(Syncfusion.Pdf.PdfDocument,Syncfusion.Pdf.PdfPage,System.Boolean)">
            <summary>
            Calculates width of the right indent.
            </summary>
            <param name="document">Parent document.</param>
            <param name="page">Page where the bounds should be calculated.</param>
            <param name="includeMargins">If true - take into consideration Margins.</param>
            <returns>Width of the right indent.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.GetBottomIndentHeight(Syncfusion.Pdf.PdfDocument,Syncfusion.Pdf.PdfPage,System.Boolean)">
            <summary>
            Calculates Height of the bottom indent.
            </summary>
            <param name="document">Parent document.</param>
            <param name="page">Page where the bounds should be calculated.</param>
            <param name="includeMargins">If true - take into consideration Margins.</param>
            <returns>Height of the top indent.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.PointToNativePdf(Syncfusion.Pdf.PdfPage,System.Drawing.PointF)">
            <summary>
            Translates point into native coordinates of the page.
            </summary>
            <param name="page">The parent page.</param>
            <param name="point">Point to translate.</param>
            <returns>Point in native page coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.DrawTemplates(Syncfusion.Pdf.PdfPageLayer,Syncfusion.Pdf.PdfDocument,Syncfusion.Pdf.PdfPageTemplateElement[])">
            <summary>
            Draws an array of the templates.
            </summary>
            <param name="layer">Parent layer.</param>
            <param name="document">PArent document.</param>
            <param name="templates">Array of templates.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.GetDocumentTemplates(Syncfusion.Pdf.PdfDocument,Syncfusion.Pdf.PdfPage,System.Boolean,System.Boolean)">
            <summary>
            Returns array of the document templates.
            </summary>
            <param name="document">Parent document.</param>
            <param name="page">the parent page.</param>
            <param name="headers">If true - return headers/footers, if false - return simple templates.</param>
            <param name="foreground">If true - return foreground templates, if false - return background templates.</param>
            <returns>Returns array of the document templates.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.GetSectionTemplates(Syncfusion.Pdf.PdfPage,System.Boolean,System.Boolean)">
            <summary>
            Returns array of the section templates.
            </summary>
            <param name="page">The parent page.</param>
            <param name="headers">If true - return headers/footers, if false - return simple templates.</param>
            <param name="foreground">If true - return foreground templates, if false - return background templates.</param>
            <returns>Returns array of the document templates.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.OnPageAdded(Syncfusion.Pdf.PageAddedEventArgs)">
            <summary>
            Called when the page has been added
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.SetProgress">
            <summary>
            Sets the progress.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.ResetProgress">
            <summary>
            Resets the progress.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.OnPageSaving(Syncfusion.Pdf.PdfPage)">
            <summary>
            Called when a page is being saved.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.CheckPresence(Syncfusion.Pdf.PdfPage)">
            <summary>
            Checks the presence.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.SetPageSettings(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.PdfPageSettings)">
            <summary>
            Infills dictionary by the data from Page settings.
            </summary>
            <param name="container">Pdf container of the data.</param>
            <param name="parentSettings">Parent page settings.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.Initialize">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.GetTransitionSettings">
            <summary>
            Gets the transition settings.
            </summary>
            <returns>Transition settings of the section.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.DropCropBox">
            <summary>
            Resets crop box to the default one.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.PageAddedMethod(Syncfusion.Pdf.PdfPage)">
            <summary>
            Call two event's methods
            </summary>
            <param name="page">Added page</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Catches the Save event of the dictionary.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.EndSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            End save event handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSection.Pages">
            <summary>
            Gets the pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSection.PageLabel">
            <summary>
            Gets or sets the page label.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSection.PageSettings">
            <summary>
            Gets or sets page settings of the section.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSection.Template">
            <summary>
            Gets or sets a template for the pages in the section.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:PdfPage"/> at the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSection.Count">
            <summary>
            Gets the count of the pages in the section.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSection.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSection.Resources">
            <summary>
            Gets the resources.
            </summary>
            <value>The resources.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSection.Document">
            <summary>
            Gets the document.
            </summary>
            <value>The document.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSection.ParentDocument">
            <summary>
            Gets the parent document.
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.PdfSection.PageAdded">
            <summary>
            Event rises when the new page has been added
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSection.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.PdfPageEnumerator.#ctor(Syncfusion.Pdf.PdfSection)">
            <summary>
            Initializes a new instance of the <see cref="T:Enumerator"/> class.
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.PdfPageEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.PdfPageEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSection.PdfPageEnumerator.CheckIndex">
            <summary>
            Checks the index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSection.PdfPageEnumerator.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfSectionCollection">
            <summary>
            The collection of the sections.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSectionCollection.RotateFactor">
            <summary>
            Rotate factor for page rotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.#ctor(Syncfusion.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfSectionCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.Add">
            <summary>
            Creates a section and adds it to the collection.
            </summary>
            <returns>Created section object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.IndexOf(Syncfusion.Pdf.PdfSection)">
            <summary>
            Determines the index of the section.
            </summary>
            <param name="section">The section.</param>
            <returns>The index of the section.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.Insert(System.Int32,Syncfusion.Pdf.PdfSection)">
            <summary>
            Inserts the section at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="section">The section.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.Contains(Syncfusion.Pdf.PdfSection)">
            <summary>
            Checks whether the collection contains the section.
            </summary>
            <param name="section">The section object.</param>
            <returns>True - if the sections belongs to the collection, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.PageLabelsSet">
            <summary>
            Informs the section collection that the page labels were set.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.ResetProgress">
            <summary>
            Resets the progress.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.SetProgress">
            <summary>
            Sets the progress.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.OnPageSaving(Syncfusion.Pdf.PdfPage)">
            <summary>
            Called when a page is saving.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.SetPageSettings(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.PdfPageSettings)">
            <summary>
            Infills dictionary by the data from Page settings.
            </summary>
            <param name="container">Pdf container of the data.</param>
            <param name="pageSettings">Page settings.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.CheckSection(Syncfusion.Pdf.PdfSection)">
            <summary>
            Checks if the section is within the collection.
            </summary>
            <param name="section">The section.</param>
            <returns>The reference holder of the section.</returns>
            <exception cref="T:ArgumentException">Throws ArgumentException 
            if the section is within the collection.</exception>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.CountPages">
            <summary>
            Counts the pages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.Add(Syncfusion.Pdf.PdfSection)">
            <summary>
            Adds the specified section.
            </summary>
            <param name="section">The section.</param>
            <returns>Index of the section in the collection.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.Initialize">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.Clear">
            <summary>
            Clears section collection of the document.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Catches the Save event of the dictionary.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSectionCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:PdfSection"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSectionCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSectionCollection.Document">
            <summary>
            Gets a parent document.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSectionCollection.Syncfusion#Pdf#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfSectionCollection.PdfSectionEnumerator">
            <summary>
            Section collection enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.PdfSectionEnumerator.#ctor(Syncfusion.Pdf.PdfSectionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Enumerator"/> class.
            </summary>
            <param name="sectionCollection">The section collection.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.PdfSectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.PdfSectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionCollection.PdfSectionEnumerator.CheckIndex">
            <summary>
            Checks the index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSectionCollection.PdfSectionEnumerator.Current">
            <summary>
            Gets the current section.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfSectionPageCollection">
            <summary>
            Manipulates pages within a section.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfSectionPageCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCollection.#ctor(Syncfusion.Pdf.PdfSection)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfSectionPageCollection"/> class.
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCollection.Add">
            <summary>
            Creates a new page and adds it into the collection.
            </summary>
            <returns>The new page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCollection.Add(Syncfusion.Pdf.PdfPage)">
            <summary>
            Adds a page into collection.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCollection.Insert(System.Int32,Syncfusion.Pdf.PdfPage)">
            <summary>
            Inserts a page at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCollection.IndexOf(Syncfusion.Pdf.PdfPage)">
            <summary>
            Returns the index of the specified page.
            </summary>
            <param name="page">The page.</param>
            <returns>The index of the page.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCollection.Contains(Syncfusion.Pdf.PdfPage)">
            <summary>
            Determines whether the specified page is within the collection.
            </summary>
            <param name="page">The page.</param>
            <returns>
            	<c>true</c> if the collection contains the specified page; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCollection.Remove(Syncfusion.Pdf.PdfPage)">
            <summary>
            Removes the specified page.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a page at the index specified.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCollection.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionPageCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSectionPageCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:PdfPage"/> at the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSectionPageCollection.Count">
            <summary>
            Gets the count of the pages.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfSectionTemplate">
            <summary>
            Encapsulates a page template for all the pages in the section.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSectionTemplate.m_left">
            <summary>
            Left settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSectionTemplate.m_top">
            <summary>
            Top settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSectionTemplate.m_right">
            <summary>
            Right settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSectionTemplate.m_bottom">
            <summary>
            Bottom settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfSectionTemplate.m_stamp">
            <summary>
            Other templates settings
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfSectionTemplate.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSectionTemplate.ApplyDocumentLeftTemplate">
            <summary>
            Gets or sets value indicating whether parent Left page template should be used or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSectionTemplate.ApplyDocumentTopTemplate">
            <summary>
            Gets or sets value indicating whether parent Top page template should be used or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSectionTemplate.ApplyDocumentRightTemplate">
            <summary>
            Gets or sets value indicating whether parent Right page template should be used or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSectionTemplate.ApplyDocumentBottomTemplate">
            <summary>
            Gets or sets value indicating whether parent Bottom page template should be used or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfSectionTemplate.ApplyDocumentStamps">
            <summary>
            Gets or sets value indicating whether 
            the parent stamp elements should be used or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfStampCollection">
            <summary>
            A collection of stamps that are applied to the page templates.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStampCollection.#ctor">
            <summary>
            Creates a new stamp collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStampCollection.Add(Syncfusion.Pdf.PdfPageTemplateElement)">
            <summary>
            Adds a stamp element to the collection.
            </summary>
            <param name="template">The stamp element.</param>
            <returns>The index of the stamp element.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStampCollection.Add(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a stamp element and adds it to the collection.
            </summary>
            <param name="x">X co-ordinate of the stamp.</param>
            <param name="y">Y co-ordinate of the stamp.</param>
            <param name="width">Width of the stamp.</param>
            <param name="height">Height of the stamp.</param>
            <returns>The created stamp element.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStampCollection.Contains(Syncfusion.Pdf.PdfPageTemplateElement)">
            <summary>
            Checks whether the stamp element exists in the collection.
            </summary>
            <param name="template">Stamp element.</param>
            <returns>True - if stamp element exists in the collection, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStampCollection.Insert(System.Int32,Syncfusion.Pdf.PdfPageTemplateElement)">
            <summary>
            Inserts a stamp element to the collection at the specified position.
            </summary>
            <param name="index">The index of the stamp in the collection.</param>
            <param name="template">The stamp element.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStampCollection.Remove(Syncfusion.Pdf.PdfPageTemplateElement)">
            <summary>
            Removes the stamp element from the collection.
            </summary>
            <param name="template">The stamp element.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStampCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a stamp element from the specified position in the collection.
            </summary>
            <param name="index">The index of the stamp in the collection.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStampCollection.Clear">
            <summary>
            Cleares the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStampCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.PdfStampCollection.Item(System.Int32)">
            <summary>
            Gets a stamp element by its index.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfStampCollection.PdfPageTemplateEnumerator">
            <summary>
            PdfPageTemplate enumerator.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfStampCollection.PdfPageTemplateEnumerator.m_stamps">
            <summary>
            Stamps collection
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfStampCollection.PdfPageTemplateEnumerator.m_currentIndex">
            <summary>
            Current index of the enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStampCollection.PdfPageTemplateEnumerator.#ctor(Syncfusion.Pdf.PdfStampCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Enumerator"/> class.
            </summary>
            <param name="stamps">The stanps collection.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStampCollection.PdfPageTemplateEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStampCollection.PdfPageTemplateEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Syncfusion.Pdf.PdfStampCollection.PdfPageTemplateEnumerator.CheckIndex">
            <summary>
            Checks the index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfStampCollection.PdfPageTemplateEnumerator.Current">
            <summary>
            Gets the current section.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPageOrientation">
            <summary>
            Enumerator that implements page orientations.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageOrientation.Portrait">
            <summary>
            Portrait orientation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageOrientation.Landscape">
            <summary>
            Landscape orientation.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPageRotateAngle">
            <summary>
            The number of degrees by which the page should be rotated clockwise when displayed or printed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageRotateAngle.RotateAngle0">
            <summary>
            The page is rotated as 0 angle.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageRotateAngle.RotateAngle90">
            <summary>
            The page is rotated as 90 angle.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageRotateAngle.RotateAngle180">
            <summary>
            The page is rotated as 180 angle.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageRotateAngle.RotateAngle270">
            <summary>
            The page is rotated as 270 angle.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfNumberStyle">
            <summary>
            Specifies numbering style of page labels.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfNumberStyle.None">
            <summary>
            No numbering at all.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfNumberStyle.Numeric">
            <summary>
            Decimal arabic numerals.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfNumberStyle.LowerLatin">
            <summary>
            Lowercase letters a-z.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfNumberStyle.LowerRoman">
            <summary>
            Lowercase roman numerals.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfNumberStyle.UpperLatin">
            <summary>
            Uppercase letters A-Z.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfNumberStyle.UpperRoman">
            <summary>
            Uppercase roman numerals.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfDockStyle">
            <summary>
            Specifies the docking style of the page template.
            </summary>
            <remarks>This enumeration is used in <see cref="T:Syncfusion.Pdf.PdfPageTemplateElement"/> class.</remarks>
            <example>
            <code lang="C#">
            //Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Create a page
            PdfPage page = doc.Pages.Add();
            RectangleF rect = new RectangleF(0, 0, page.GetClientSize().Width, page.GetClientSize().Height);
            //Create a page template
            PdfPageTemplateElement footer = new PdfPageTemplateElement(rect);
            footer.Dock = PdfDockStyle.Right;
            //Set the template alignment as top right
            footer.Alignment = PdfAlignmentStyle.TopRight;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            PdfSolidBrush brush = new PdfSolidBrush(Color.Gray);
            //Create page number field
            PdfPageNumberField pageNumber = new PdfPageNumberField(font, brush);            
            //Create page count field
            PdfPageCountField count = new PdfPageCountField(font, brush);
            PdfCompositeField compositeField = new PdfCompositeField(font, brush, "Page {0} of {1}", pageNumber, count);
            compositeField.Bounds = footer.Bounds;            
            compositeField.Draw(footer.Graphics, new PointF(40, footer.Height - 50));
            //Add the footer template at the bottom
            doc.Template.Right = footer;
            doc.Save("Template.pdf");
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            Dim rect As RectangleF = New RectangleF(0, 0, page.GetClientSize().Width, page.GetClientSize().Height)
            'Create a page template
            Dim footer As PdfPageTemplateElement = New PdfPageTemplateElement(rect)
            footer.Dock = PdfDockStyle.Right
            'Set the template alignment as top right
            footer.Alignment = PdfAlignmentStyle.TopRight
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Gray)
            'Create page number field
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField(font, brush)
            'Create page count field
            Dim count As PdfPageCountField = New PdfPageCountField(font, brush)
            Dim compositeField As PdfCompositeField = New PdfCompositeField(font, brush, "Page {0} of {1}", pageNumber, count)
            compositeField.Bounds = footer.Bounds
            compositeField.Draw(footer.Graphics, New PointF(40, footer.Height - 50))
            'Add the footer template at the bottom
            doc.Template.Right = footer
            doc.Save("Template.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDockStyle.None">
            <summary>
            The page template is not docked.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDockStyle.Bottom">
            <summary>
            The page template edge is docked to the bottom page's side.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDockStyle.Top">
            <summary>
            The page template edge is docked to the top page's side.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDockStyle.Left">
            <summary>
            The page template edge is docked to the left page's side.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDockStyle.Right">
            <summary>
            The page template edge is docked to the right page's side.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfDockStyle.Fill">
            <summary>
            The page template stretch on full page.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfAlignmentStyle">
            <summary>
            Specifies how the page template is aligned relative to the template area.    
            </summary>
            <example>
            <code lang="C#">    
            //Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Create a page
            PdfPage page = doc.Pages.Add();
            RectangleF rect = new RectangleF(0, 0, page.GetClientSize().Width, page.GetClientSize().Height);
            //Create a page template
            PdfPageTemplateElement footer = new PdfPageTemplateElement(rect);
            //Set the template alignment as top right
            footer.Alignment = PdfAlignmentStyle.TopRight;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            PdfSolidBrush brush = new PdfSolidBrush(Color.Gray);
            //Create page number field
            PdfPageNumberField pageNumber = new PdfPageNumberField(font, brush);
            //Create page count field
            PdfPageCountField count = new PdfPageCountField(font, brush);
            PdfCompositeField compositeField = new PdfCompositeField(font, brush, "Page {0} of {1}", pageNumber, count);
            compositeField.Bounds = footer.Bounds;
            compositeField.Draw(footer.Graphics, new PointF(40, footer.Height - 50));
            //Add the footer template at the bottom
            doc.Template.Bottom = footer;
            doc.Save("Template.pdf");
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            Dim rect As RectangleF = New RectangleF(0, 0, page.GetClientSize().Width, page.GetClientSize().Height)
            'Create a page template
            Dim footer As PdfPageTemplateElement = New PdfPageTemplateElement(rect)
            'Set the template alignment as top right
            footer.Alignment = PdfAlignmentStyle.TopRight
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Gray)
            'Create page number field
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField(font, brush)
            'Create page count field
            Dim count As PdfPageCountField = New PdfPageCountField(font, brush)
            Dim compositeField As PdfCompositeField = New PdfCompositeField(font, brush, "Page {0} of {1}", pageNumber, count)
            compositeField.Bounds = footer.Bounds
            compositeField.Draw(footer.Graphics, New PointF(40, footer.Height - 50))
            'Add the footer template at the bottom
            doc.Template.Bottom = footer
            doc.Save("Template.pdf")
            </code>
            </example>
            <remarks>This enumeration is used in <see cref="T:Syncfusion.Pdf.PdfPageTemplateElement"/> class.</remarks>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAlignmentStyle.None">
            <summary>
            Specifies no alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAlignmentStyle.TopLeft">
            <summary>
            The template is top left aligned.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAlignmentStyle.TopCenter">
            <summary>
            The template is top center aligned.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAlignmentStyle.TopRight">
            <summary>
            The template is top right aligned.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAlignmentStyle.MiddleLeft">
            <summary>
            The template is middle left aligned.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAlignmentStyle.MiddleCenter">
            <summary>
            The template is middle center aligned.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAlignmentStyle.MiddleRight">
            <summary>
            The template is middle right aligned.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAlignmentStyle.BottomLeft">
            <summary>
            The template is bottom left aligned.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAlignmentStyle.BottomCenter">
            <summary>
            The template is bottom center aligned.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfAlignmentStyle.BottomRight">
            <summary>
             The template is bottom right aligned.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPageLayout">
            <summary>
            A name object specifying the page layout to be used when the
            document is opened.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayout.SinglePage">
            <summary>
            Default Value. Display one page at a time.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayout.OneColumn">
            <summary>
            Display the pages in one column.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayout.TwoColumnLeft">
            <summary>
            Display the pages in two columns, with odd numbered
            pages on the left.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayout.TwoColumnRight">
            <summary>
            Display the pages in two columns, with odd numbered
            pages on the right.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayout.TwoPageLeft">
            <summary>
            Display the pages two at a time, with odd-numbered pages on the left
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageLayout.TwoPageRight">
            <summary>
            Display the pages two at a time, with odd-numbered pages on the right
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPageMode">
            <summary>
            Represents mode of document displaying.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageMode.UseNone">
            <summary>
            Default value. Neither document outline nor thumbnail images visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageMode.UseOutlines">
            <summary>
            Document outline visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageMode.UseThumbs">
            <summary>
            Thumbnail images visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageMode.FullScreen">
            <summary>
            Full-screen mode, with no menu bar, window
            controls, or any other window visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageMode.UseOC">
            <summary>
            Optional content group panel visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfPageMode.UseAttachments">
            <summary>
            Attachments are visible.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.TemplateType">
            <summary>
            TemplateArea can be header/footer on of the following types. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TemplateType.None">
            <summary>
            Page template is not used as header.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TemplateType.Top">
            <summary>
            Page template is used as Top.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TemplateType.Bottom">
            <summary>
            Page template is used as Bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TemplateType.Left">
            <summary>
            Page template is used as Left.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TemplateType.Right">
            <summary>
            Page template is used as Right.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfTransitionStyle">
            <summary>
            Enumeration of possible transition styles when moving to the page from another 
            during a presentation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionStyle.Split">
            <summary>
            Two lines sweep across the screen, revealing the new page. The lines may be either 
            horizontal or vertical and may move inward from the edges of the page or outward 
            from the center.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionStyle.Blinds">
            <summary>
            Multiple lines, evenly spaced across the screen, synchronously sweep in the same 
            direction to reveal the new page. The lines may be either horizontal or vertical.
            Horizontal lines move downward; vertical lines move to the right.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionStyle.Box">
            <summary>
            A rectangular box sweeps inward from the edges of the page or outward from the center,
            revealing the new page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionStyle.Wipe">
            <summary>
            A single line sweeps across the screen from one edge to the other, revealing the new page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionStyle.Dissolve">
            <summary>
            The old page dissolves gradually to reveal the new one.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionStyle.Glitter">
            <summary>
            Similar to Dissolve, except that the effect sweeps across the page in a wide band moving from 
            one side of the screen to the other.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionStyle.Replace">
            <summary>
            The new page simply replaces the old one with no special transition effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionStyle.Fly">
            <summary>
            Changes are flown out or in, to or from a location that is offscreen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionStyle.Push">
            <summary>
            The old page slides off the screen while the new page slides in, pushing the old page out.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionStyle.Cover">
            <summary>
            The new page slides on to the screen, covering the old page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionStyle.Uncover">
            <summary>
            The old page slides off the screen, uncovering the new page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionStyle.Fade">
            <summary>
            The new page gradually becomes visible through the old one.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfTransitionDimension">
            <summary>
            Enumeration of transition dimensions.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionDimension.Horizontal">
            <summary>
            Horizontal effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionDimension.Vertical">
            <summary>
            Vertical effect.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfTransitionMotion">
            <summary>
            Enumeration of transition motions.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionMotion.Inward">
            <summary>
            Inward motion from the edges of the page to center..
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionMotion.Outward">
            <summary>
            Outward motion from the center of the page to edges.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PdfTransitionDirection">
            <summary>
            Enumeration of transition directions.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionDirection.LeftToRight">
            <summary>
            Left to Right direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionDirection.BottomToTop">
            <summary>
            Bottom to Top direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionDirection.RightToLeft">
            <summary>
            Right to Left direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionDirection.TopToBottom">
            <summary>
            Top to Bottom direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfTransitionDirection.TopLeftToBottomRight">
            <summary>
            TopLeft to BottomRight direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation">
            <summary>
            Represents the base class for loaded annotation classes.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfAnnotation"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.ObjectID">
            <summary>
            Represents the Form field identifier
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.m_crossTable">
            <summary>
            Cross Table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.m_Changed">
            <summary>
            Indicates was field changed or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.m_defaultIndex">
            <summary>
            Represents index used to default annotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedField"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.SetText(System.String)">
            <summary>
            Sets the name of the field.
            </summary>
            <param name="name">New name of the field.</param>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedSoundAnnotation soundAnnotation = document.Pages[1].Annotations[5] as PdfLoadedSoundAnnotation;
            //Sets the annotation text.
            soundAnnotation.SetText("Sound Annotation");
            //Save the document.
            document.Save("SoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim soundAnnotation As PdfLoadedSoundAnnotation = document.Pages(1).Annotations(5) as PdfLoadedSoundAnnotation
            'Sets the annotation text.
            soundAnnotation.SetText("Sound Annotation")
            'Save the document.
            document.Save("SoundAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.SearchInParents(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.String)">
            <summary>
            Searches the in parents.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="value">The value.</param>
            <returns>Serched primitive.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.GetValue(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.String,System.Boolean)">
            <summary>
            Gets the value.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="value">The value.</param>
            <param name="inheritable">if it is inheritable, set to <c>true</c>.</param>
            <returns>The founded value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.GetWidgetAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Gets the widget annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The widget annotation dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.ApplyText(System.String)">
            <summary>
            Aplies field name
            </summary>
            <param name="name">specified field name</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.BeginSave">
            <summary>
            Begins the save.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.ExportText(System.IO.Stream,System.Int32@)">
            <summary>
            Exports the form fields.
            </summary>
            <param name="stream">Stream.</param>
            <param name="objectid">Object identifier.</param>
        </member>
        <member name="E:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.BeforeNameChanges">
            <summary>
            Raises when user manualy chages the name of the field.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.Changed">
            <summary>
            Gets or sets the changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.CrossTable">
            <summary>
            Gets or sets the cross table.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.Page">
            <summary>
            Gets and sets the Page.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            //Gets the page.
            PdfLoadedPage page =soundAnnotation.Page;
            //Save the document.
            document.Save("SoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim soundAnnotation As PdfLoadedSoundAnnotation = document.Pages(1).Annotations(5) as PdfLoadedSoundAnnotation
            'Gets the page.
            Dim page As PdfLoadedPage=soundAnnotation.Page
            'Save the document.
            document.Save("SoundAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedAnnotation.BeforeNameChangesEventHandler">
            <summary>
            NameChanged event handler.
            </summary>
            <param name="name">New name of the field.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection">
            <summary>
            Represents the loaded annotation colllection.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing pdf document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation collection.
            PdfLoadedAnnotationCollection annotationCollection=document.Pages[1].Annotations;
            //Gets the sound annotion.
            PdfLoadedSoundAnnotation soundAnnotation = annotationCollection.Annotations[5] as PdfLoadedSoundAnnotation;
            //Sets the sound annotation border.
            soundAnnotation.Border.Width = 4;
            soundAnnotation.Border.HorizontalRadius = 20;
            soundAnnotation.Border.VerticalRadius = 30;
            //Set the pdf rubberstamp annotation icon.
            soundAnnotation.Icon = PdfSoundIcon.Speaker;
            //Sets the pdf sound.
            PdfSound sound = new PdfSound("Startup.wav");
            soundAnnotation.Sound=sound;
            //Save the document.
            document.Save("SoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing pdf document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation collection.
            Dim annotationCollection As PdfLoadedAnnotationCollection = document.Pages[1].Annotations
            'Gets the pdf sound annotation.
            Dim soundAnnotation As PdfLoadedSoundAnnotation = dannotationCollection.Annotations(5) as PdfLoadedSoundAnnotation
            'Sets the sound annotation border.
            soundAnnotation.Border.Width = 4
            soundAnnotation.Border.HorizontalRadius = 20
            soundAnnotation.Border.VerticalRadius = 30
            'Set the pdf rubberstamp annotation icon.
            soundAnnotation.Icon = PdfSoundIcon.Speaker
            'Sets the pdf sound.
            Dim sound As PdfSound  = New PdfSound("Startup.wav")
            soundAnnotation.Sound=sound
            'Save the document.
            document.Save("SoundAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.m_page">
            <summary>
            Loaded page, wich collection belongs to.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.#ctor(Syncfusion.Pdf.PdfLoadedPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection"/> class.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.ldAnnotation_NameChanded(System.String)">
            <summary>
            NameChanged evant handler.
            </summary>
            <param name="name">New Name of the annotation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.Add(Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Adds annotation to collection.
            </summary>
            <param name="annotation">Annotation to be added to collection.</param>
            <returns>Position of the annotation in collection.</returns>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the pfd sound annotation.
            PdfLoadedAnnotationCollection annotationCollection=document.Pages[1].Annotations;
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Uri Annotation.
            PdfUriAnnotation uriAnnotation = new PdfUriAnnotation(rectangle, "http://www.google.com");
            //Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation";
            annotationCollection.Add(uriAnnotation);
            //Save the document.
            document.Save("SoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the pfd sound annotation.
            Dim annotationCollection As PdfLoadedAnnotationCollection = document.Pages[1].Annotations
            'Create a new rectangle
            Dim rectangle As RectangleF = New RectangleF(10, 40, 30, 30)
            'Create a new uri Annotation.
            Dim uriAnnotation As PdfUriAnnotation = New PdfUriAnnotation(rectangle, "http://www.google.com")
            'Set the Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation"
            annotationCollection.Add(uriAnnotation)
            'Save the document.
            document.Save("SoundAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.DoAdd(Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Adds a annotation to collection.
            </summary>
            <param name="annot">The annotation.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.GetCorrectName(System.String)">
            <summary>
            Gets the new name of the annotation.
            </summary>
            <param name="name">The name.</param>
            <returns>The annotation name.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.IsValidName(System.String)">
            <summary>
            Check whether the annotation with the same name already exists.
            </summary>
            <param name="name">The name.</param>
            <returns>
            <c>true</c> if there are no annotation with the same name within the collection; 
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.GetAnnotationIndex(System.String)">
            <summary>
            Gets the index of the annotation.
            </summary>
            <param name="name">The name.</param>
            <returns>The index of the annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.GetAnnotation(System.Int32)">
            <summary>
            Gets the annotation.
            </summary>
            <param name="index">The index.</param>
            <returns>The created annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.GetAnnotationType(Syncfusion.Pdf.Primitives.PdfName,Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Gets the type of the annotation.
            </summary>
            <param name="name">The name.</param>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The annotation type.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateFileRemoteGoToLinkAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,Syncfusion.Pdf.Primitives.PdfString,Syncfusion.Pdf.Primitives.PdfArray,System.Drawing.RectangleF)">
            <summary>
            Create file remotegoto link annotation
            </summary>
            <param name="dictionary"></param>
            <param name="crossTable"></param>
            <param name="fileName"></param>
            <param name="destination"></param>
            <param name="rect"></param>
            <returns>The created file remotegoto link annotation</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateTextWebLinkAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.String)">
            <summary>
            Creates the text web link annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created file link annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateDocumentLinkAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF)">
            <summary>
            Creates the file link annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created file link annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateFileLinkAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF,System.String)">
            <summary>
            Creates the document link annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created widget annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateWidgetAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF)">
            <summary>
            Creates the widget annotation.
            </summary>
            <param name="dictionary"></param>
            <param name="crossTable"></param>
            <param name="rect"></param>
            <returns>The created the widget annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateInkAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF)">
            <summary>
            Creates the Ink annotation.
            </summary>
            <param name="dictionary"></param>
            <param name="crossTable"></param>
            <param name="rect"></param>
            <returns>Created the Ink annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateWatermarkAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the watermark annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created watermark annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateTrapNetworkAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the Trap Network Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created Trap Network Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateTextMarkupAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the Text Markup Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created Text Markup Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateTextAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the Text Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created Text Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateSquareandCircleAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the Square and Circle Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created Square and Circle Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateSoundAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF)">
            <summary>
            Creates the Sound Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rect">The RectangleF.</param>
            <param name="fileName">The Filename.</param>
            <returns>The created Sound Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateScreenAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF)">
            <summary>
            Creates the Screen Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created Screen Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateRubberStampAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF,System.String)">
            <summary>
            Creates the Rubber Stamp Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created Rubber Stamp Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreatePrinterMarkAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the Printer Mark Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created Printer Mark Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreatePopupAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF,System.String)">
            <summary>
            Creates the Popup Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rect">The RectangleF.</param>
            <param name="text">The Text.</param>
            <returns>The created Popup Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreatePolygonandPolylineAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the Polygon and Polyline Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created Polygon and Polyline Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateMovieAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the Movie Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created Movie Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateMarkupAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF)">
            <summary>
            Creates the Markup Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rect">The RectangleF.</param>
            <returns>The created Markup Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateLnkAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF,System.String)">
            <summary>
            Creates the Lnk Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rect">The RectangleF.</param>
            <param name="filename">The Filename.</param>
            <returns>The created Lnk Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateLinkAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF,System.String)">
            <summary>
            Creates the Link Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rect">The RectangleF.</param>
            <param name="text">The Text.</param>
            <returns>The created Link Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateLineAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF,System.String)">
            <summary>
            Creates the Line Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rect">The RectangleF.</param>
            <param name="text">The Text.</param>
            <returns>The created Line Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateFreeTextAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the Free Text Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created Free Text Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateFileAttachmentAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF,System.String)">
            <summary>
            Creates the File Attachment Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rect">The RectangleF.</param>
            <param name="filename">The Filename.</param>
            <returns>The created File Attachment Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateCaretAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the Caret Annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created Caret Annotation.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.CreateAnnotationStates(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the Annotation States.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created Annotation States.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.DoInsert(System.Int32,Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Inserts a annotation into collection.
            </summary>
            <param name="index">The index.</param>
            <param name="field">The annotation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.DoClear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.DoRemoveAt(System.Int32)">
            <summary>
            Removes the annotation at the specified position.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.DoRemove(Syncfusion.Pdf.Interactive.PdfAnnotation)">
            <summary>
            Removes the annotation from collection.
            </summary>
            <param name="field">The annotation.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.FindAnnotation(Syncfusion.Pdf.Primitives.PdfArray)">
            <summary>
            Find the annotation from collection.
            </summary>
            <param name="arr">The annotation.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Interactive.PdfAnnotation"/> at the specified index.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation collection.
            PdfLoadedAnnotationCollection annotationCollection=document.Pages[1].Annotations;
            //Gets the pdf sound annotation.
            PdfLoadedSoundAnnotation soundAnnotation = annotationCollection.Annotations[5] as PdfLoadedSoundAnnotation;
            //Sets the sound annotation border
            soundAnnotation.Border.Width = 4;
            //Save the document.
            document.Save("SoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim annotationCollection As PdfLoadedAnnotationCollection = document.Pages[1].Annotations
            'Gets the pdf sound annotation.
            Dim soundAnnotation As PdfLoadedSoundAnnotation = dannotationCollection.Annotations(5) as PdfLoadedSoundAnnotation
            'Sets the sound annotation border.
            soundAnnotation.Border.Width = 4
            'Save the document.
            document.Save("SoundAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.Item(System.String)">
            <summary>
            Represents the annotation with specified name.
            </summary>
            <param name="name">The specified annotation name.</param>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation collection.
            PdfLoadedAnnotationCollection annotationCollection=document.Pages[1].Annotations;\
            'Gets the pfd sound annotation.
            PdfLoadedSoundAnnotation soundAnnotation = annotationCollection.Annotations["SoundAnnotation"] as PdfLoadedSoundAnnotation;
            //Sets the sound annotation border
            soundAnnotation.Border.Width = 4;
            //Save the document.
            document.Save("SoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation collection.
            Dim annotationCollection As PdfLoadedAnnotationCollection = document.Pages[1].Annotations
            'Gets the pfd sound annotation.
            Dim soundAnnotation As PdfLoadedSoundAnnotation = dannotationCollection.Annotations("SoundAnnotation") as PdfLoadedSoundAnnotation
            'Sets the sound annotation border
            soundAnnotation.Border.Width = 4
            'Save the document.
            document.Save("SoundAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedAnnotationCollection.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the pfd sound annotation.
            PdfLoadedAnnotationCollection annotationCollection=document.Pages[1].Annotations;
            //Gets the pdf sound annotation.
            PdfLoadedSoundAnnotation soundAnnotation = annotationCollection.Annotations[5] as PdfLoadedSoundAnnotation;
            'Gets the sound pdf loaded page.
            PdfLoadedPage page =soundAnnotation.Page;
            //Save the document.
            document.Save("SoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the pfd sound annotation.
            Dim annotationCollection As PdfLoadedAnnotationCollection = document.Pages[1].Annotations
            'Gets the pdf sound annotation.
            Dim soundAnnotation As PdfLoadedSoundAnnotation = dannotationCollection.Annotations(5) as PdfLoadedSoundAnnotation
            'Gets the pdf loaded page.
            Dim page As PdfLoadedPage=soundAnnotation.Page
            'Save the document.
            document.Save("SoundAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation">
             <summary>
             Represents the attachment annotation from the loaded document.
             </summary>
             <example>
             <code lang="C#">
             //Load an existing pdf document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedAttachmentAnnotation attchmentAnnotation = document.Pages[1].Annotations[3] as PdfLoadedAttachmentAnnotation;
             //Gets the annotation flags
             PdfAnnotationFlags flag = attchmentAnnotation.AnnotationFlags;
             //Gets the attchment annotation border.
             PdfAnnotationBorder border = attchmentAnnotation.Border;
             //Gets the attchment annotation bounds.
             RectangleF rect = attchmentAnnotation.Bounds;
             //Sets the attachement icon.
             attchmentAnnotation.Icon=PdfAttachmentIcon.PushPin;
             //Sets the file name
             attchmentAnnotation.FileName=@"..\..\Manual.txt";
             //Save the document.
             document.Save("LoadedAttachmentAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim attchmentAnnotation As PdfLoadedAttachmentAnnotation = document.Pages(1).Annotations(3) as PdfLoadedAttachmentAnnotation
             'Gets the annotation flags
             Dim flag As PdfAnnotationFlags = attchmentAnnotation.AnnotationFlags
             'Gets the attchment annotation border.
             Dim border As PdfAnnotationBorder = attchmentAnnotation.Border
             'Sets the attachement icon.
             attchmentAnnotation.Icon=PdfAttachmentIcon.PushPin
             'Sets the file name
             attchmentAnnotation.FileName="..\..\Manual.txt"
             'Save the document.
             document.Save("LoadedAttachmentAnnotation.pdf")
             </code>
             </example>
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextWebLinkAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation">
             <summary>
             Represents the PdfLoadedStyledAnnotation.
             </summary>
             <example>
             <code lang="C#">
             //Load an existing document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedFileLinkAnnotation fileLinkAnnotation = document.Pages[1].Annotations[6] as PdfLoadedFileLinkAnnotation;
             //Sets the annotation flags
             attchmentAnnotation.AnnotationFlags=PdfAnnotationFlags.Default;
             //Sets the file name.
             fileLinkAnnotation.FileName = @"..\..\Data\Manual.txt";
             // Set the file link annotation border.
             fileLinkAnnotation.Border=new PdfAnnotationBorder(4, 0, 0);
             //Set the file link annotation color.
             fileLinkAnnotation.Color=new PdfColor(Color.Blue);
             //Sets the file link annotation text.
             fileLinkAnnotation.Text = "File Link Annotation";
             //Save the document.
             document.Save("fileLinkAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim fileLinkAnnotation As PdfLoadedFileLinkAnnotation = document.Pages(1).Annotations(6) as PdfLoadedFileLinkAnnotation
             'Sets the annotation flags
             attchmentAnnotation.AnnotationFlags=PdfAnnotationFlags.Default
             'Sets the file name.
             fileLinkAnnotation.FileName = @"..\..\Data\Manual.txt"
             ' Set the file link annotation border.
             fileLinkAnnotation.Border=New PdfAnnotationBorder(4, 0, 0)
             'Set the file link annotation color.
             fileLinkAnnotation.Color=New PdfColor(Color.Blue)
             'Sets the file link annotation text.
             fileLinkAnnotation.Text = "File Link Annotation"
             'Save the document.
             document.Save("fileLinkAnnotation.pdf")
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.GetText">
            <summary>
            Gets the text.
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.GetBounds(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Gets the bounds.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The bounds.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.GetBorder">
            <summary>
            Gets the border.
            </summary>
            <returns>The border.</returns>    
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.GetColor">
            <summary>
            Gets the color.
            </summary>
            <returns>The color.</returns>   
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.GetLoadedPage">
            <summary>
            Gets the loaded page.
            </summary>
            <returns>The loaded page in which annotation draw.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.GetAnnotationFlags">
            <summary>
            Gets the annotation flags.
            </summary>
            <returns>The annotation flags.</returns>   
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStyledField"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.Color">
             <summary>
             Gets or sets the color.
             </summary>
             <value>The color.</value>
             <example>
             <code lang="C#">
             //Load an existing document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedFileLinkAnnotation fileLinkAnnotation = document.Pages[1].Annotations[6] as PdfLoadedFileLinkAnnotation;
             //Set the file link annotation color.
             fileLinkAnnotation.Color=new PdfColor(Color.Blue);
             //Save the document.
             document.Save("fileLinkAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim fileLinkAnnotation As PdfLoadedFileLinkAnnotation = document.Pages(1).Annotations(6) as PdfLoadedFileLinkAnnotation
             'Set the file link annotation color.
             fileLinkAnnotation.Color=New PdfColor(Color.Blue)
             'Save the document.
             document.Save("fileLinkAnnotation.pdf")
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.Text">
             <summary>
             Gets or sets the text.
             </summary>
             <value>The text.</value>
             <example>
             <code lang="C#">
             //Load an existing document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedFileLinkAnnotation fileLinkAnnotation = document.Pages[1].Annotations[6] as PdfLoadedFileLinkAnnotation;
             //Sets the file link annotation text.
             fileLinkAnnotation.Text = "File Link Annotation";
             //Save the document.
             document.Save("fileLinkAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim fileLinkAnnotation As PdfLoadedFileLinkAnnotation = document.Pages(1).Annotations(6) as PdfLoadedFileLinkAnnotation
             'Sets the file link annotation text.
             fileLinkAnnotation.Text = "File Link Annotation"
             'Save the document.
             document.Save("fileLinkAnnotation.pdf")
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.Bounds">
             <summary>
             Gets or sets the annotation's bounds. If this property is not set, bounds are calculated automatically
             based on <see cref="P:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.Location">Location</see> property and content of annotation.
             </summary>
             <example>
             <code lang="C#">
             //Load an existing document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedFileLinkAnnotation fileLinkAnnotation = document.Pages[1].Annotations[6] as PdfLoadedFileLinkAnnotation;
             'Sets the file link annotation bounds.
             fileLinkAnnotation.Bounds = new RectangleF(100,100,50,50);
             //Save the document.
             document.Save("fileLinkAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim fileLinkAnnotation As PdfLoadedFileLinkAnnotation = document.Pages(1).Annotations(6) as PdfLoadedFileLinkAnnotation
             'Sets the file link annotation bounds.
             fileLinkAnnotation.Bounds = New RectangleF(100,100,50,50)
             'Save the document.
             document.Save("fileLinkAnnotation.pdf")
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.Border">
             <summary>
             Gets or sets the annotation's border.
             </summary>
             <example>
             <code lang="C#">
             //Load an existing document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedFileLinkAnnotation fileLinkAnnotation = document.Pages[1].Annotations[6] as PdfLoadedFileLinkAnnotation;
             //Sets the annotation flags
             attchmentAnnotation.AnnotationFlags=PdfAnnotationFlags.Default;
             // Set the file link annotation border.
             fileLinkAnnotation.Border=new PdfAnnotationBorder(4, 0, 0);
             //Save the document.
             document.Save("fileLinkAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim fileLinkAnnotation As PdfLoadedFileLinkAnnotation = document.Pages(1).Annotations(6) as PdfLoadedFileLinkAnnotation
             ' Set the file link annotation border.
             fileLinkAnnotation.Border=New PdfAnnotationBorder(4, 0, 0)
             'Save the document.
             document.Save("fileLinkAnnotation.pdf")
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.Location">
             <summary>
             Gets or sets the location.
             </summary>
             <example>
             <code lang="C#">
             //Load an existing document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedFileLinkAnnotation fileLinkAnnotation = document.Pages[1].Annotations[6] as PdfLoadedFileLinkAnnotation;
             //Sets the file link Annotation location.
             fileLinkAnnotation.Location new PointF(100,100);
             //Save the document.
             document.Save("fileLinkAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim fileLinkAnnotation As PdfLoadedFileLinkAnnotation = document.Pages(1).Annotations(6) as PdfLoadedFileLinkAnnotation
             'Sets the file link Annotation location
             fileLinkAnnotation.Location =New PointF(100,100)
             'Save the document.
             document.Save("fileLinkAnnotation.pdf")
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.Size">
             <summary>
             Gets or sets the size.
             </summary>
             <example>
             <code lang="C#">
             //Load an existing document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedFileLinkAnnotation fileLinkAnnotation = document.Pages[1].Annotations[6] as PdfLoadedFileLinkAnnotation;
             //Sets the size
             attchmentAnnotation.Size=new SizeF(100,50)
             //Save the document.
             document.Save("fileLinkAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim fileLinkAnnotation As PdfLoadedFileLinkAnnotation = document.Pages(1).Annotations(6) as PdfLoadedFileLinkAnnotation
             'Sets the size
             attchmentAnnotation.Size=New SizeF(100,50)
             'Save the document.
             document.Save("fileLinkAnnotation.pdf")
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedStyledAnnotation.AnnotationFlags">
             <summary>
             Gets or sets the annotation flags.
             </summary>
             <example>
             <code lang="C#">
             //Load an existing document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedFileLinkAnnotation fileLinkAnnotation = document.Pages[1].Annotations[6] as PdfLoadedFileLinkAnnotation;
             //Sets the annotation flags
             attchmentAnnotation.AnnotationFlags=PdfAnnotationFlags.Default;
             //Save the document.
             document.Save("fileLinkAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim fileLinkAnnotation As PdfLoadedFileLinkAnnotation = document.Pages(1).Annotations(6) as PdfLoadedFileLinkAnnotation
             'Sets the annotation flags
             attchmentAnnotation.AnnotationFlags=PdfAnnotationFlags.Default
             'Save the document.
             document.Save("fileLinkAnnotation.pdf")
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rectangle">The rectangle</param>
            <param name="text">The text</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation.Icon">
             <summary>
             Gets or sets the icon of the annotation.
             </summary>
             <example>
             <code lang="C#">
             //Load an existing pdf document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedAttachmentAnnotation attchmentAnnotation = document.Pages[1].Annotations[3] as PdfLoadedAttachmentAnnotation;
             attchmentAnnotation.Icon=PdfAttachmentIcon.PushPin;
             //Save the document.
             document.Save("LoadedAttachmentAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim attchmentAnnotation As PdfLoadedAttachmentAnnotation = document.Pages(1).Annotations(3) as PdfLoadedAttachmentAnnotation
             attchmentAnnotation.Icon=PdfAttachmentIcon.PushPin
             'Save the document.
             document.Save("LoadedAttachmentAnnotation.pdf")
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation.FileName">
             <example>
             <code lang="C#">
             //Load an existing pdf document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedAttachmentAnnotation attchmentAnnotation = document.Pages[1].Annotations[3] as PdfLoadedAttachmentAnnotation;
             attchmentAnnotation.FileName=@"..\..\Manual.txt";
             //Save the document.
             document.Save("LoadedAttachmentAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim attchmentAnnotation As PdfLoadedAttachmentAnnotation = document.Pages(1).Annotations(3) as PdfLoadedAttachmentAnnotation
             attchmentAnnotation.FileName="..\..\Manual.txt"
             'Save the document.
             document.Save("LoadedAttachmentAnnotation.pdf")
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation.Data">
            <summary>
            Get the bytes from the Attched file.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation">
             <summary>
             Represents the loaded document link annotation class.
             </summary>
             <example>
             <code lang="C#">
             //Load an existing document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedDocumentLinkAnnotation documentLinkAnnotation = document.Pages[1].Annotations[4] as PdfLoadedDocumentLinkAnnotation;
             //Gets the annotation flags
             PdfAnnotationFlags flag = attchmentAnnotation.AnnotationFlags;
             //Sets the pdf destination.
             documentLinkAnnotation.Destination = new PdfDestination(document.Pages[0], new PointF(10, 10));
             //Gets the document link annotation border.
             PdfAnnotationBorder border = documentLinkAnnotation.Border;
             //Gets the document link annotation bounds.
             RectangleF rectangle = documentLinkAnnotation.Bounds;
             //Gets the document link annotation color.
             PdfColor color = documentLinkAnnotation.Color;
             //Gets the document link annotation location.
             PointF point = documentLinkAnnotation.Location;
             //Gets the document link annotation size.
             SizeF size = documentLinkAnnotation.Size;
             //Gets the document link annotation text.
             string text = documentLinkAnnotation.Text;
             //Save the document.
             document.Save("documentLinkAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim documentLinkAnnotation As PdfLoadedDocumentLinkAnnotation = document.Pages(1).Annotations(4) as PdfLoadedDocumentLinkAnnotation
             'Sets the destination.
             documentLinkAnnotation.Destination = New PdfDestination(document.Pages[0], New PointF(10, 10));
             'Gets the annotation flags
             Dim flag As PdfAnnotationFlags = documentLinkAnnotation.AnnotationFlags
             'Gets the document link annotation border.
             Dim border As PdfAnnotationBorder = documentLinkAnnotation.Border
             'Gets the document link annotation bounds.
             Dim rect As RectangleF = documentLinkAnnotation.Bounds
             'Gets the document link annotation color.
             Dim color As PdfColor = documentLinkAnnotation.Color
             'Gets the document link annotation location.
             Dim point As PointF = documentLinkAnnotation.Location
             'Gets the document link annotation size.
             Dim size As SizeF = documentLinkAnnotation.Size
             'Gets the document link annotation text.
             Dim text As string = documentLinkAnnotation.Text
             'Save the document.
             document.Save("documentLinkAnnotation.pdf")
             </code>
             </example>
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextWebLinkAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation.m_crossTable">
            <summary>
            Cross Table
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rectangle">The rectangle</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation.GetDestination">
            <summary>
            Gets the destination.
            </summary>
            <returns>The destination</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation.Destination">
             <summary>
             Sets the destination of the annotation.
             </summary>
             <example>
             <code lang="C#">
             //Load an existing document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedDocumentLinkAnnotation documentLinkAnnotation = document.Pages[1].Annotations[4] as PdfLoadedDocumentLinkAnnotation;
             //Gets the annotation flags
             PdfAnnotationFlags flag = attchmentAnnotation.AnnotationFlags;
             //Sets the destination.
             documentLinkAnnotation.Destination = new PdfDestination(document.Pages[0], new PointF(10, 10));
             //Save the document.
             document.Save("documentLinkAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim documentLinkAnnotation As PdfLoadedDocumentLinkAnnotation = document.Pages(1).Annotations(4) as PdfLoadedDocumentLinkAnnotation
             'Sets the destination.
             documentLinkAnnotation.Destination = New PdfDestination(document.Pages[0], New PointF(10, 10));
             'Save the document.
             document.Save("documentLinkAnnotation.pdf")
             </code>
             </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation">
             <summary>
             Represents the loaded file link annotation class.
             </summary>
             <example>
             <code lang="C#">
             //Load an existing document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedFileLinkAnnotation fileLinkAnnotation = document.Pages[1].Annotations[6] as PdfLoadedFileLinkAnnotation;
             //Gets the annotation flags
             PdfAnnotationFlags flag = attchmentAnnotation.AnnotationFlags;
             //Sets the file name.
             fileLinkAnnotation.FileName = @"..\..\Data\Manual.txt";
             //Gets the file link annotation border.
             PdfAnnotationBorder border = fileLinkAnnotation.Border;
             //Gets the file link annotation bounds.
             RectangleF rectangle = fileLinkAnnotation.Bounds;
             //Gets the file link annotation bounds.
             PdfColor color = fileLinkAnnotation.Color;
             //Gets the file link annotation location.
             PointF point = fileLinkAnnotation.Location;
             //Gets the file link annotation size.
             SizeF size = fileLinkAnnotation.Size;
             //Gets the file link annotation text.
             string text = fileLinkAnnotation.Text;
             //Save the document.
             document.Save("fileLinkAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim fileLinkAnnotation As PdfLoadedFileLinkAnnotation = document.Pages(1).Annotations(6) as PdfLoadedFileLinkAnnotation
             'Sets the file name.
             fileLinkAnnotation.FileName = "..\..\Data\Manual.txt"
             'Gets the annotation flags
             Dim flag As PdfAnnotationFlags = fileLinkAnnotation.AnnotationFlags
             'Gets the file link annotation border.
             Dim border As PdfAnnotationBorder = fileLinkAnnotation.Border
             'Gets the file link annotation bounds.
             Dim rect As RectangleF = fileLinkAnnotation.Bounds
             'Gets the file link annotation bounds.
             Dim color As PdfColor = fileLinkAnnotation.Color
             'Gets the file link annotation location.
             Dim point As PointF = fileLinkAnnotation.Location
             'Gets the file link annotation size.
             Dim size As SizeF = fileLinkAnnotation.Size
             'Gets the file link annotation text.
             Dim text As string = fileLinkAnnotation.Text
             'Save the document.
             document.Save("fileLinkAnnotation.pdf")
             </code>
             </example>
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextWebLinkAnnotation"/> Class
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation.destinationArray">
            <summary>
            Interger array of destination
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation.m_crossTable">
            <summary>
            CrossTable
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation.m_action">
            <summary>
            Action of the page
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation.m_destination">
            <summary>
            Destination array
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation.GetFileName">
            <summary>
            Gets the filename.
            </summary>
            <returns>File name</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rectangle">The rectangle</param>
            <param name="filename">The File name</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,Syncfusion.Pdf.Primitives.PdfArray,System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param> 
            <param name="destination">The destination</param>
            <param name="rectangle">The rectangle</param>
            <param name="filename">The File name</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation.GetDestination">
            <summary>
            Gets the destination array
            </summary>
            <returns>integer destination array</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation.FileName">
             <example>
             <code lang="C#">
             //Load an existing document.
             PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
             //Gets the annotation from loaded document.
             PdfLoadedFileLinkAnnotation fileLinkAnnotation = document.Pages[1].Annotations[6] as PdfLoadedFileLinkAnnotation;
             //Gets the annotation flags
             PdfAnnotationFlags flag = attchmentAnnotation.AnnotationFlags;
             //Sets the file name.
             fileLinkAnnotation.FileName = @"..\..\Data\Manual.txt";
             //Gets the file link annotation border.
             //Save the document.
             document.Save("fileLinkAnnotation.pdf");
             </code>
             <code lang="VB">
            'Load an existing document.
             Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
             'Gets the annotation from loaded document.
             Dim fileLinkAnnotation As PdfLoadedFileLinkAnnotation = document.Pages(1).Annotations(6) as PdfLoadedFileLinkAnnotation
             'Sets the file name.
             fileLinkAnnotation.FileName = "..\..\Data\Manual.txt"
             'Save the document.
             document.Save("fileLinkAnnotation.pdf")
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation.Destination">
            <summary>
            Gets or sets the destination of the filelinkannotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation.DestinationArray">
            <summary>
            Gets or sets the destination array of the annotation
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedFileLinkAnnotation linkAnnotation = lDoc.Pages[1].Annotations[2] as PdfLoadedFileLinkAnnotation;
            //Assgin DestinationArray[pagenumber,xaxis,yaxis]
            int[] array = new int[3] { 2, 750, 0 };
            linkAnnotation.DestinationArray = array;
            //Save the document.
            document.Save("lineAnnotation.pdf");
            </code>
            <code lang="VB">
              'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim linkAnnotation As PdfLoadedFileLinkAnnotation = lDoc.Pages(1).Annotations(2) as PdfLoadedFileLinkAnnotation        
            'Assgin DestinationArray[pagenumber,xaxis,yaxis]
            Dim array As Integer() = New Integer(2) {2, 750, 0}
            linkAnnotation.DestinationArray = array
            'Save the document.
            document.Save("lineAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation">
            <summary>
            Represent Loaded ink annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.m_crossTable">
            <summary>
            Cross table
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.m_inkList">
            <summary>
            Indicate the path of the ink annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.m_dashArray">
            <summary>
            Internal variable to store Border Dash.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.m_borderWidth">
            <summary>
            border width
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.m_borderDic">
            <summary>
            Indicate the border Dictionary
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.m_borderStyle">
            <summary>
            Indicat the border style
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="dictionary">The Dictionary</param>
            <param name="crossTable">The Crosstable</param>
            <param name="rectangle">the Rectangle</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.GetInkList">
            <summary>
            Get the Path of the Ink annotation
            </summary>
            <returns>the line InkList </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.GetBorderWidth">
            <summary>
            Get the border width
            </summary>
            <returns>The border width</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.GetLineBorder">
            <summary>
            Get the border dtyle
            </summary>
            <returns>The Line border style</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.GetBorderStyle(System.String)">
            <summary>
            get the Line style 
            </summary>
            <param name="bstyle"></param>
            <returns>The line Style</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.GetDashArray">
            <summary>
            Get the Dash array value
            </summary>
            <returns>The dashArray </returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.InkList">
            <summary>
            Get or sets back the Path of the ink annotation
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.BorderWidth">
            <summary>
            Get or sets back the border width
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.BorderStyle">
            <summary>
            get or sets the border style
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedInkAnnotation.DashArray">
            <summary>
            get or sets DashArray value
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation">
            <summary>
            Represents the loaded line annotation class.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedLineAnnotation lineAnnotation = document.Pages[1].Annotations[5] as PdfLoadedLineAnnotation;
            int[] points = new int[] { 100, 100, 200, 100 };
            //Create a new pdf line border.
            LineBorder lineBorder = new LineBorder();
            lineBorder.BorderStyle = PdfBorderStyle.Solid;
            lineBorder.DashArray = 1;
            lineBorder.BorderWidth =3;
            lineBorder.DashArray = 8;
            //Sets the line border.
            lineAnnotation.LineBorder = lineBorder;
            //Sets the line indent.
            lineAnnotation.LineIntent = PdfLineIntent.LineArrow;
            //Assign the line ending style
            lineAnnotation.BeginLineStyle = PdfLineEndingStyle.Slash;
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Circle;
            lineAnnotation.AnnotationFlags = PdfAnnotationFlags.Locked;
            //Assign the line color
            lineAnnotation.InnerLineColor = new PdfColor(Color.Blue);
            lineAnnotation.BackColor = new PdfColor(Color.Red);
            //Assign the leader line
            lineAnnotation.LeaderExt = 20;
            lineAnnotation.LeaderLine = 20;
            lineAnnotation.Size = new SizeF(100, 200);
            //Assign the line caption
            lineAnnotation.LineCaption = true;
            lineAnnotation.Text = "Syncfusion";
            lineAnnotation.CaptionType = PdfLineCaptionType.Top;
            //Save the document.
            document.Save("lineAnnotation.pdf");
            </code>
            <code lang="VB">
              'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim lineAnnotation As PdfLoadedLineAnnotation = document.Pages(1).Annotations(5) as PdfLoadedLineAnnotation
            Dim points As Integer() = { 100, 100, 200, 100 }
            'Create a new pdf line border.
            Dim lineBorder As New LineBorder()
            lineBorder.BorderStyle = PdfBorderStyle.Solid
            lineBorder.DashArray = 1
            lineBorder.BorderWidth = 3
            lineBorder.DashArray = 8
            'Sets the line border
            lineAnnotation.LineBorder = lineBorder
            'Sets the line indent
            lineAnnotation.LineIntent = PdfLineIntent.LineArrow
            'Assign the line ending style
            lineAnnotation.BeginLineStyle = PdfLineEndingStyle.Slash
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Circle
            lineAnnotation.AnnotationFlags = PdfAnnotationFlags.Locked
            'Assign the line color
            lineAnnotation.InnerLineColor = New PdfColor(Color.Blue)
            lineAnnotation.BackColor = New PdfColor(Color.Red)
            'Assign the leader line
            lineAnnotation.LeaderExt = 20
            lineAnnotation.LeaderLine = 20
            lineAnnotation.Size = New SizeF(100, 200)
            'Assign the line caption
            lineAnnotation.LineCaption = True
            lineAnnotation.Text = "Syncfusion"
            lineAnnotation.CaptionType = PdfLineCaptionType.Top
            'Save the document.
            document.Save("lineAnnotation.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextWebLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.m_crossTable">
            <summary>
            Cross Table
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.m_backcolor">
            <summary>
            Indicates the back color.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.m_lineborder">
            <summary>
            Indicates the line border.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rectangle">The rectangle</param>
            <param name="text">The text</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.GetLineIntent">
            <summary>
            Gets the line intent of the annotation.
            </summary>
            <returns>The line intent.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.GetLineStyle">
            <summary>
            Gets line style of the annotation.
            </summary>
            <returns>The line style.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.GetLineStyle(System.Int32)">
            <summary>
            Gets line style of the annotation.
            </summary>
            <param name="Ch">choice</param>
            <returns>The line style.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.GetLineStyle(System.String)">
            <summary>
            Gets line style of the annotation.
            </summary>
            <param name="style">Type of line style</param>
            <returns>The line style.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.GetBackColor">
            <summary>
            Gets back color of the annotation.
            </summary>
            <returns>The back color.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.GetCaptionType">
            <summary>
            Gets caption type of the annotation.
            </summary>
            <returns>The caption type.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.GetCaptionType(System.String)">
            <summary>
            Gets caption type of the annotation.
            </summary>
            <param name="cType">caption type</param>
            <returns>The caption type.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.GetLineCaption">
            <summary>
            Gets line caption of the annotation.
            </summary>
            <returns>The line caption.</returns> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.GetLeaderLine">
            <summary>
            Gets leader line of the annotation.
            </summary>
            <returns>The leader line.</returns> 
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.GetLeaderExt">
            <summary>
            Gets leader ext of the annotation.
            </summary>
            <returns>The leader ext.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.GetLineBorder">
            <summary>
            Gets line border of the annotation.
            </summary>
            <returns>The line border.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.GetBorderStyle(System.String)">
            <summary>
            Gets border style of the annotation.
            </summary>
            <param name="bstyle">border style</param>
            <returns>The border style.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.GetLineIntentText(System.String)" -->
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.BackColor">
            <summary>
            Gets or sets the back color of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedLineAnnotation lineAnnotation = document.Pages[1].Annotations[5] as PdfLoadedLineAnnotation;
            //Sets the line annotation backcolor.
            lineAnnotation.BackColor = new PdfColor(Color.Red);
            //Save the document.
            document.Save("lineAnnotation.pdf");
            </code>
            <code lang="VB">
              'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim lineAnnotation As PdfLoadedLineAnnotation = document.Pages(1).Annotations(5) as PdfLoadedLineAnnotation
            'Sets the line annotation backcolor
            lineAnnotation.BackColor = New PdfColor(Color.Red)
            'Save the document.
            document.Save("lineAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.BeginLineStyle">
            <summary>
            Gets or sets the begin line style of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedLineAnnotation lineAnnotation = document.Pages[1].Annotations[5] as PdfLoadedLineAnnotation;
            //Assign the line ending style
            lineAnnotation.BeginLineStyle = PdfLineEndingStyle.Slash;
            //Save the document.
            document.Save("lineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim lineAnnotation As PdfLoadedLineAnnotation = document.Pages(1).Annotations(5) as PdfLoadedLineAnnotation
            'Assign the line ending style
            lineAnnotation.BeginLineStyle = PdfLineEndingStyle.Slash
            'Save the document.
            document.Save("lineAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.CaptionType">
            <summary>
            Gets or sets the caption type of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedLineAnnotation lineAnnotation = document.Pages[1].Annotations[5] as PdfLoadedLineAnnotation;
            //Sets the line caption type.
            lineAnnotation.CaptionType = PdfLineCaptionType.Top;
            //Save the document.
            document.Save("lineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim lineAnnotation As PdfLoadedLineAnnotation = document.Pages(1).Annotations(5) as PdfLoadedLineAnnotation
            'Sets the line caption type.
            lineAnnotation.CaptionType = PdfLineCaptionType.Top
            'Save the document.
            document.Save("lineAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.EndLineStyle">
            <summary>
            Gets or sets the end line style of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedLineAnnotation lineAnnotation = document.Pages[1].Annotations[5] as PdfLoadedLineAnnotation;
            //Assign the line ending style
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Circle;
            //Save the document.
            document.Save("lineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim lineAnnotation As PdfLoadedLineAnnotation = document.Pages(1).Annotations(5) as PdfLoadedLineAnnotation
            'Assign the line ending style
            lineAnnotation.EndLineStyle = PdfLineEndingStyle.Circle
            'Save the document.
            document.Save("lineAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.InnerLineColor">
            <summary>
            Gets or sets the inner line color of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedLineAnnotation lineAnnotation = document.Pages[1].Annotations[5] as PdfLoadedLineAnnotation;
            //Assign the line color
            lineAnnotation.InnerLineColor = new PdfColor(Color.Blue);
            //Save the document.
            document.Save("lineAnnotation.pdf");
            </code>
            <code lang="VB">
              'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim lineAnnotation As PdfLoadedLineAnnotation = document.Pages(1).Annotations(5) as PdfLoadedLineAnnotation
            'Assign the line color
            lineAnnotation.InnerLineColor = New PdfColor(Color.Blue)
            'Save the document.
            document.Save("lineAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.LeaderLine">
            <summary>
            Gets or sets the leader line of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedLineAnnotation lineAnnotation = document.Pages[1].Annotations[5] as PdfLoadedLineAnnotation;
            //Sets the leader line.
            lineAnnotation.LeaderLine = 20;
            //Save the document.
            document.Save("lineAnnotation.pdf");
            </code>
            <code lang="VB">
              'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim lineAnnotation As PdfLoadedLineAnnotation = document.Pages(1).Annotations(5) as PdfLoadedLineAnnotation
            'Sets the leader line.
            lineAnnotation.LeaderLine = 20
            'Save the document.
            document.Save("lineAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.LeaderExt">
            <summary>
            Gets or sets the leader ext of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedLineAnnotation lineAnnotation = document.Pages[1].Annotations[5] as PdfLoadedLineAnnotation;
            //Assign the leader line
            lineAnnotation.LeaderExt = 20;
            //Save the document.
            document.Save("lineAnnotation.pdf");
            </code>
            <code lang="VB">
              'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim lineAnnotation As PdfLoadedLineAnnotation = document.Pages(1).Annotations(5) as PdfLoadedLineAnnotation
            'Assign the leader line
            lineAnnotation.LeaderExt = 20
            'Save the document.
            document.Save("lineAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.LineBorder">
            <summary>
            Gets the line border of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedLineAnnotation lineAnnotation = document.Pages[1].Annotations[5] as PdfLoadedLineAnnotation;
            //Create a new pdf line border.
            LineBorder lineBorder = new LineBorder();
            lineBorder.BorderStyle = PdfBorderStyle.Solid;
            lineBorder.DashArray = 1;
            lineBorder.BorderWidth =3;
            lineBorder.DashArray = 8;
            lineAnnotation.LineBorder = lineBorder;
            //Save the document.
            document.Save("lineAnnotation.pdf");
            </code>
            <code lang="VB">
              'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim lineAnnotation As PdfLoadedLineAnnotation = document.Pages(1).Annotations(5) as PdfLoadedLineAnnotation
            'Create a new pdf line border.
            Dim lineBorder As New LineBorder()
            lineBorder.BorderStyle = PdfBorderStyle.Solid
            lineBorder.DashArray = 1
            lineBorder.BorderWidth = 3
            lineBorder.DashArray = 8
            lineAnnotation.LineBorder = lineBorder
            'Save the document.
            document.Save("lineAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.LineCaption">
            <summary>
            Gets or sets the line caption of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedLineAnnotation lineAnnotation = document.Pages[1].Annotations[5] as PdfLoadedLineAnnotation;
            //Assign the line caption
            lineAnnotation.LineCaption = true;
            lineAnnotation.CaptionType = PdfLineCaptionType.Top;
            //Save the document.
            document.Save("lineAnnotation.pdf");
            </code>
            <code lang="VB">
              'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim lineAnnotation As PdfLoadedLineAnnotation = document.Pages(1).Annotations(5) as PdfLoadedLineAnnotation
            'Assign the line caption
            lineAnnotation.LineCaption = True
            lineAnnotation.CaptionType = PdfLineCaptionType.Top
            'Save the document.
            document.Save("lineAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation.LineIntent">
            <summary>
            Gets or sets the line intent of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedLineAnnotation lineAnnotation = document.Pages[1].Annotations[5] as PdfLoadedLineAnnotation;
            lineAnnotation.LineIntent = PdfLineIntent.LineArrow;
            //Save the document.
            document.Save("lineAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim lineAnnotation As PdfLoadedLineAnnotation = document.Pages(1).Annotations(5) as PdfLoadedLineAnnotation
            lineAnnotation.LineIntent = PdfLineIntent.LineArrow
            'Save the document.
            document.Save("lineAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation">
            <summary>
            Represents the loaded pop up annotation class.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedPopupAnnotation popupAnnotation = document.Pages[1].Annotations[5] as PdfLoadedPopupAnnotation;
            //Sets the popup annotation border
            popupAnnotation.Border.Width = 4;
            popupAnnotation.Border.HorizontalRadius = 20;
            popupAnnotation.Border.VerticalRadius = 30;
            //Set the popup icon
            popupAnnotation.Icon = PdfPopupIcon.Key;
            //Save the document.
            document.Save("popupAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim popupAnnotation As PdfLoadedPopupAnnotation = document.Pages(1).Annotations(5) as PdfLoadedPopupAnnotation
            'Sets the popup annotation border
            popupAnnotation.Border.Width = 4
            popupAnnotation.Border.HorizontalRadius = 20
            popupAnnotation.Border.VerticalRadius = 30
            'Set the popup icon
            popupAnnotation.Icon = PdfPopupIcon.Key
            'Save the document.
            document.Save("popupAnnotation.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextWebLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation.m_crossTable">
            <summary>
            CroosTable
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation.m_open">
            <summary>
            Indicates the open the popup window or not.
            </summary>        
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation.m_name">
            <summary>
            Indicates the icon name.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rectangle">The rectangle</param>
            <param name="text">The text</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation.GetOpen">
            <summary>
            Gets the boolean value ( if it's true popup window is opened otherwise closed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation.GetIcon">
            <summary>
            Gets the popup icon type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation.GetIconName(System.String)">
            <summary>
            Gets the popup icon name
            </summary>
            <param name="name">Icon name</param>
            <returns>Icon type</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation.Open">
            <summary>
            Gets or sets the open option of the popup annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedPopupAnnotation popupAnnotation = document.Pages[1].Annotations[5] as PdfLoadedPopupAnnotation;
            //Set the popup annotation open option
            popupAnnotation.Open = true
            //Save the document.
            document.Save("popupAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim popupAnnotation As PdfLoadedPopupAnnotation = document.Pages(1).Annotations(5) as PdfLoadedPopupAnnotation
            'Set the popup annotation open option
            popupAnnotation.Open = True
            'Save the document.
            document.Save("popupAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation.Icon">
            <summary>
            Gets or sets the icon of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedPopupAnnotation popupAnnotation = document.Pages[1].Annotations[5] as PdfLoadedPopupAnnotation;
            //Set the pdf popup icon
            popupAnnotation.Icon = PdfPopupIcon.Key;
            //Save the document.
            document.Save("popupAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim popupAnnotation As PdfLoadedPopupAnnotation = document.Pages(1).Annotations(5) as PdfLoadedPopupAnnotation
            'Set the pdf popup icon
            popupAnnotation.Icon = PdfPopupIcon.Key
            'Save the document.
            document.Save("popupAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation">
            <summary>
            Represents the loaded rubber stamp annotation class.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedRubberStampAnnotation rubberStampAnnotation = document.Pages[1].Annotations[5] as PdfLoadedRubberStampAnnotation;
            //Sets the rubber stamp annotation border
            rubberStampAnnotation.Border.Width = 4;
            rubberStampAnnotation.Border.HorizontalRadius = 20;
            rubberStampAnnotation.Border.VerticalRadius = 30;
            //Set the pdf rubber stamp annotation icon
            rubberStampAnnotation.Icon = PdfRubberStampAnnotationIcon.Approved;
            //Save the document.
            document.Save("RubberStampAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim popupAnnotation As PdfLoadedRubberStampAnnotation = document.Pages(1).Annotations(5) as PdfLoadedRubberStampAnnotation
            'Sets the rubber stamp annotation border
            rubberStampAnnotation.Border.Width = 4
            rubberStampAnnotation.Border.HorizontalRadius = 20
            rubberStampAnnotation.Border.VerticalRadius = 30
            'Set the pdf rubber stamp annotation icon
            rubberStampAnnotation.Icon = PdfRubberStampAnnotationIcon.Approved
            'Save the document.
            document.Save("RubberStampAnnotation.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextWebLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation.m_crossTable">
            <summary>
            Crosstable
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation.m_name">
            <summary>
            Rubber and Stamp Annotation name.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rectangle">The rectangle</param>
            <param name="text">The text</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation.GetIcon">
            <summary>
            Gets the popup icon type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation.GetIconName(System.String)">
            <summary>
            Gets the popup icon name
            </summary>
            <param name="name">Icon name</param>
            <returns>Icon type</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation.Icon">
            <summary>
            Gets or sets the icon of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedRubberStampAnnotation rubberStampAnnotation = document.Pages[1].Annotations[5] as PdfLoadedRubberStampAnnotation;
            //Set the pdf rubber stamp annotation icon
            rubberStampAnnotation.Icon = PdfRubberStampAnnotationIcon.Approved;
            //Save the document.
            document.Save("RubberStampAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim popupAnnotation As PdfLoadedRubberStampAnnotation = document.Pages(1).Annotations(5) as PdfLoadedRubberStampAnnotation
            'Set the pdf rubber stamp annotation icon
            rubberStampAnnotation.Icon = PdfRubberStampAnnotationIcon.Approved
            'Save the document.
            document.Save("RubberStampAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation">
            <summary>
            Represents the loaded sound annotation class.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedSoundAnnotation soundAnnotation = document.Pages[1].Annotations[5] as PdfLoadedSoundAnnotation;
            //Sets the sound annotation border
            soundAnnotation.Border.Width = 4;
            soundAnnotation.Border.HorizontalRadius = 20;
            soundAnnotation.Border.VerticalRadius = 30;
            //Set the pdf sound annotation icon.
            soundAnnotation.Icon = PdfSoundIcon.Speaker;
            //Sets the pdf sound.
             PdfSound sound = new PdfSound("Startup.wav");
             soundAnnotation.Sound=sound;
            //Save the document.
            document.Save("SoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim soundAnnotation As PdfLoadedSoundAnnotation = document.Pages(1).Annotations(5) as PdfLoadedSoundAnnotation
            'Sets the sound annotation border
            soundAnnotation.Border.Width = 4
            soundAnnotation.Border.HorizontalRadius = 20
            soundAnnotation.Border.VerticalRadius = 30
            'Set the pdf sound annotation icon.
            soundAnnotation.Icon = PdfSoundIcon.Speaker
            Sets the pdf sound.
            Dim sound As PdfSound  = New PdfSound("Startup.wav")
            soundAnnotation.Sound=sound
            'Save the document.
            document.Save("SoundAnnotation.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextWebLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation.m_crossTable">
            <summary>
            CrossTable
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation.m_sound">
            <summary>
            Internal variable to store sound.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation.m_dictionary">
            <summary>
            Dictionary
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation.m_icon">
            <summary>
            Indicates the sound icon of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation.m_appearance">
            <summary>
            Indicates the appearance of the annotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation.GetFileName">
            <summary>
            Gets the filename.
            </summary>
            <returns>File name</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation.GetIcon">
            <summary>
            Gets the sound annotation icon.
            </summary>
            <returns>Sound annotation icon</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation.GetIconName(System.String)">
            <summary>
            Gets the icon name
            </summary>
            <param name="iType">Icon type</param>
            <returns>Sound icon</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation.GetSound">
            <summary>
            Gets the sound file.
            </summary>
            <returns>Sound file</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation.GetEncodigType(System.String)">
            <summary>
            Gets the sound annottation encoding type
            </summary>
            <param name="eType">Encoding type</param>
            <returns>Encoding type</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rectangle">The rectangle</param>
            <param name="fileName">The filename</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation.Sound">
            <summary>
            Gets or sets the sound of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedSoundAnnotation soundAnnotation = document.Pages[1].Annotations[5] as PdfLoadedSoundAnnotation;
            //Sets the pdf sound.
            PdfSound sound = new PdfSound("Startup.wav");
            soundAnnotation.Sound=sound;
            //Save the document.
            document.Save("SoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim soundAnnotation As PdfLoadedSoundAnnotation = document.Pages(1).Annotations(5) as PdfLoadedSoundAnnotation
            Sets the pdf sound.
            Dim sound As PdfSound  = New PdfSound("Startup.wav")
            soundAnnotation.Sound=sound
            'Save the document.
            document.Save("SoundAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation.FileName">
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedSoundAnnotation soundAnnotation = document.Pages[1].Annotations[5] as PdfLoadedSoundAnnotation;
            'Gets the file name
            string filename =soundAnnotation.FileName;
            //Save the document.
            document.Save("SoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim soundAnnotation As PdfLoadedSoundAnnotation = document.Pages(1).Annotations(5) as PdfLoadedSoundAnnotation
            'Gets the file name
            Dim filename As String=soundAnnotation.FileName
            'Save the document.
            document.Save("SoundAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation.Icon">
            <summary>
            Gets or sets the icon of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedSoundAnnotation soundAnnotation = document.Pages[1].Annotations[5] as PdfLoadedSoundAnnotation;
            //Set the pdfsound icon
            soundAnnotation.Icon = PdfSoundIcon.Speaker;
            //Save the document.
            document.Save("SoundAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim soundAnnotation As PdfLoadedSoundAnnotation = document.Pages(1).Annotations(5) as PdfLoadedSoundAnnotation
            'Set the pdfsound icon
            soundAnnotation.Icon = PdfSoundIcon.Speaker
            'Save the document.
            document.Save("SoundAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation">
            <summary>
            Represents the loaded text markup annotation class.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedTextMarkupAnnotation textMarkupAnnotation = document.Pages[1].Annotations[5] as PdfLoadedTextMarkupAnnotation;
            //Sets the pdf text markup annotation type
            textMarkupAnnotation.TextMarkupAnnotationType=PdfTextMarkupAnnotationType.Highlight
            //Sets the text markup color
            textMarkupAnnotation.TextMarkupColor=new PdfColor(Color.Blue);
            //Save the document.
            document.Save("TextMarkupAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim textMarkupAnnotation As PdfLoadedTextMarkupAnnotation = document.Pages(1).Annotations(5) as PdfLoadedTextMarkupAnnotation
            'Sets the pdf text markup annotation type
             textMarkupAnnotation.TextMarkupAnnotationType=PdfTextMarkupAnnotationType.Highlight
            'Sets the text markup color
            textMarkupAnnotation.TextMarkupColor=New PdfColor(Color.Blue)
            'Save the document.
            document.Save("TextMarkupAnnotation.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextWebLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation.m_crossTable">
            <summary>
            CrossTable
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation.m_dictionary">
            <summary>
            Dictionary
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation.m_TextMarkupAnnotationType">
            <summary>
            Type of the annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation.m_color">
            <summary>
            Indicates the color.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rectangle">The rectangle</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation.SetTitleText(System.String)">
            <summary>
            Sets the name of the field.
            </summary>
            <param name="name">New name of the field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation.GetTextMarkupColor">
            <summary>
            Gets back color of the annotation.
            </summary>
            <returns>The back color.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation.TextMarkupAnnotationType">
            <summary>
            Gets or sets the annotation Type.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedTextMarkupAnnotation textMarkupAnnotation = document.Pages[1].Annotations[5] as PdfLoadedTextMarkupAnnotation;
            //Sets the pdf text markup annotation type
            textMarkupAnnotation.TextMarkupAnnotationType=PdfTextMarkupAnnotationType.Highlight
            //Save the document.
            document.Save("TextMarkupAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim textMarkupAnnotation As PdfLoadedTextMarkupAnnotation = document.Pages(1).Annotations(5) as PdfLoadedTextMarkupAnnotation
            'Sets the pdf text markup annotation type
            textMarkupAnnotation.TextMarkupAnnotationType=PdfTextMarkupAnnotationType.Highlight
            'Save the document.
            document.Save("TextMarkupAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation.TextMarkupColor">
            <summary>
            Gets or sets the color.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedTextMarkupAnnotation textMarkupAnnotation = document.Pages[1].Annotations[5] as PdfLoadedTextMarkupAnnotation;
            //Sets the text markup color
            textMarkupAnnotation.TextMarkupColor=new PdfColor(Color.Blue);
            //Save the document.
            document.Save("TextMarkupAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim textMarkupAnnotation As PdfLoadedTextMarkupAnnotation = document.Pages(1).Annotations(5) as PdfLoadedTextMarkupAnnotation
            'Sets the text markup color
            textMarkupAnnotation.TextMarkupColor=New PdfColor(Color.Blue)
            'Save the document.
            document.Save("TextMarkupAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedTextWebLinkAnnotation">
            <summary>
            Represents the loaded text web link annotation class.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedTextWebLinkAnnotation textWeblinkAnnotation = document.Pages[1].Annotations[5] as PdfLoadedTextWebLinkAnnotation;
            //Sets the text weblink annotation URI
            textWeblinkAnnotation.Url="http://www.syncfusion.com";
            //Save the document.
            document.Save("TextWebLinkAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim textWeblinkAnnotation As PdfLoadedTextWebLinkAnnotation = document.Pages(1).Annotations(5) as PdfLoadedTextWebLinkAnnotation
            'Sets the text weblink annotation URI
            textWeblinkAnnotation.Url="http://www.syncfusion.com"
            'Save the document.
            document.Save("TextWebLinkAnnotation.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedTextWebLinkAnnotation.m_crossTable">
            <summary>
            Crosstable
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedTextWebLinkAnnotation.GetUrl">
            <summary>
            Gets the web link.
            </summary>
            <returns>Web link</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedTextWebLinkAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rectangle">The rectangle</param>
            <param name="text">The text</param>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedTextWebLinkAnnotation.Url">
            <summary>
            Gets or sets the Url.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedTextWebLinkAnnotation textWeblinkAnnotation = document.Pages[1].Annotations[5] as PdfLoadedTextWebLinkAnnotation;
            //Sets the text weblink annotation URI
            textWeblinkAnnotation.Url="http://www.syncfusion.com";
            //Save the document.
            document.Save("TextWebLinkAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim textWeblinkAnnotation As PdfLoadedTextWebLinkAnnotation = document.Pages(1).Annotations(5) as PdfLoadedTextWebLinkAnnotation
            'Sets the text weblink annotation URI
            textWeblinkAnnotation.Url="http://www.syncfusion.com"
            'Save the document.
            document.Save("TextWebLinkAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation">
            <summary>
            Represents the loaded unique resource identifier annotation class.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedUriAnnotation UriAnnotation = document.Pages[1].Annotations[5] as PdfLoadedUriAnnotation;
            //Sets the uri annotation URI
            UriAnnotation.Url="http://www.syncfusion.com";
            //Save the document.
            document.Save("UriAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim UriAnnotation As PdfLoadedUriAnnotation = document.Pages(1).Annotations(5) as PdfLoadedUriAnnotation
            'Sets the uri annotation URI
            UriAnnotation.Url="http://www.syncfusion.com"
            'Save the document.
            document.Save("UriAnnotation.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedAttachmentAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedDocumentLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedFileLinkAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedPopupAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedSoundAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextMarkupAnnotation"/> Class
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfLoadedTextWebLinkAnnotation"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation.m_crossTable">
            <summary>
            CrossTable
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation.m_uri">
            <summary>
            Indicates the unique resource identifier text.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rectangle">The rectangle</param>
            <param name="text">The text</param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation.GetUriText">
            <summary>
            Gets the unique resource identifier text
            </summary>
            <returns>The unique resource identifier text</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedUriAnnotation.Uri">
            <summary>
            Gets or sets the unique resource identifier text of the annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument document = new PdfLoadedDocument(@"..\..\Annotations.pdf");
            //Gets the annotation from loaded document.
            PdfLoadedUriAnnotation UriAnnotation = document.Pages[1].Annotations[5] as PdfLoadedUriAnnotation;
            //Sets the uri annotation URI
            UriAnnotation.Url="http://www.syncfusion.com";
            //Save the document.
            document.Save("UriAnnotation.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim document As New PdfLoadedDocument("..\..\Annotations.pdf")
            'Gets the annotation from loaded document.
            Dim UriAnnotation As PdfLoadedUriAnnotation = document.Pages(1).Annotations(5) as PdfLoadedUriAnnotation
            'Sets the uri annotation URI
            UriAnnotation.Url="http://www.syncfusion.com"
            'Save the document.
            document.Save("UriAnnotation.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedWebLinkAnnotation">
            <summary>
            Represents the loaded web link annotation class.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedWebLinkAnnotation.m_crossTable">
            <summary>
            CrossTable
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedWebLinkAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfLoadedLineAnnotation"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="rectangle">The rectangle</param>
            <param name="text">The text</param>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.m_crossTable">
            <summary>
            Internal cross table
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.m_flags">
            <summary>
            Internal Annotation flags
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.m_extendedAppearance">
            <summary>
            Internal variable to store extended appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.m_border">
            <summary>
            Intrenal variable to store border parameters.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.m_widgetAppearance">
            <summary>
            Internal variable to store appearance of the widget.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.m_highlightMode">
            <summary>
            Internal variable to store highlighting mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.m_defaultAppearance">
            <summary>
            Internal variable to store default appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.m_actions">
            <summary>
            Internal variable to store annotation's actions.
            </summary>   
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.m_appearance">
            <summary>
            Annotation's appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.m_alignment">
            <summary>
            Internal variable to store alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.m_appearanceState">
            <summary>
            Internal variable to store default appearance state value.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation"/> class.
            </summary>
            <param name="dictionary"></param>
            <param name="crossTable"></param>
            <param name="rectangle"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.HighlightModeToString(Syncfusion.Pdf.Interactive.PdfHighlightMode)">
            <summary>
            Highlightings the mode to string.
            </summary>
            <param name="m_highlightingMode">The m_highlighting mode.</param>
            <returns>String representation of the highlighting mode in Pdf suiatable format.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.ExtendedAppearance">
            <summary>
            Gets or sets the extended appearance.
            </summary>
            <value>The extended appearance.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.HighlightMode">
            <summary>
            Gets or sets the highlighting mode.
            </summary>
            <value>The highlighting mode.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.Actions">
            <summary>
            Gets the actions of the annotation.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.Appearance">
            <summary>
            Gets or sets appearance of the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Interactive.PdfLoadedWidgetAnnotation.AppearanceState">
            <summary>
            Gets or sets default appearance name.
            </summary>
            <value>The state of the appearance.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedButtonField">
            <summary>
            Represents a button field of an existing PDF document`s form.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the form
            PdfLoadedForm form = doc.Form;
            // Load an existing button field.
            PdfLoadedButtonField buttonField = form.Fields["Submit"] as PdfLoadedButtonField;
            buttonField.ToolTip = "SubmitButton";
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the form
            Dim form As PdfLoadedForm = doc.Form
            ' Load an existing button field.
            Dim buttonField As PdfLoadedButtonField = TryCast(form.Fields("Submit"), PdfLoadedButtonField)
            buttonField.ToolTip = "SubmitButton"
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedForm"/> Class    
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedStyledField">
            <summary>
            Represents loaded styled field.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedField"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedField">
             <summary>
             Represents base class for loaded fields.
             </summary>
             <example>
             <code lang="C#">
             //Create a new document.
             PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
             //load the form fields
             foreach (PdfLoadedField field in doc.Form.Fields)
             {
               // Flatten the form
               field.Flatten = true;
             }
             doc.Save("Form.pdf");
             </code>
             <code lang="VB">
              'Create a new document
             Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
             'load the form fields
             For Each field As PdfLoadedField In doc.Form.Fields
               ' Flatten the form
             field.Flatten = True
             Next field
            doc.Save("Form.pdf")
             </code>
             </example>
             <seealso cref="T:Syncfusion.Pdf.Interactive.PdfField"/> Class    
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedField.ObjectID">
            <summary>
            Form field identifier
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedField.m_crossTable">
            <summary>
            Cross Table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedField.m_Changed">
            <summary>
            Indicates was field changed or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedField.m_defaultIndex">
            <summary>
            Represents index used to default annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedField.m_name">
            <summary>
            Represent's the field name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedField.m_page">
            <summary>
            Represent's the field page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedField.m_form">
            <summary>
            Internal variable to store form.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedField"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.SetName(System.String)">
            <summary>
            Sets the name of the field.
            </summary>
            <param name="name">New name of the field.</param>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            //load the form field
            PdfLoadedField field = doc.Form.Fields[0] as PdfLoadedField;
            // Sets new name of the first field
            field.SetName("fieldFirstName");
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            'load the form field
            Dim field As PdfLoadedField = TryCast(doc.Form.Fields(0), PdfLoadedField)
            ' Sets new name of the first field
            field.SetName("fieldFirstName")
            doc.Save("Form.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.SearchInParents(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.String)">
            <summary>
            Searches the in parents.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="value">The value.</param>
            <returns>Searched primitive.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.GetValue(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,System.String,System.Boolean)">
            <summary>
            Gets the value.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <param name="value">The value.</param>
            <param name="inheritable">if it is inheritable, set to <c>true</c>.</param>
            <returns>The founded value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.GetWidgetAnnotation(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Gets the widget annotation.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The widget annotation dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.GetHighLight(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Gets the high light.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The HighLIght mode.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.CreateLoadedItem(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Creates a copy of loaded field item.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.ApplyName(System.String)">
            <summary>
            Applies field name
            </summary>
            <param name="name">specified field name</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.BeginSave">
            <summary>
            Begins the save.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.GetLoadedPage">
            <summary>
            Gets the loaded page.
            </summary>
            <returns>The loaded page in which field draw.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.ExportField(System.IO.Stream,System.Int32@)">
            <summary>
            Exports the form fields.
            </summary>
            <param name="stream">Stream.</param>
            <param name="objectid">Object identifier.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.ImportFieldValue(System.String)">
            <summary>
            Imports the form fields.
            </summary>
            <param name="textWriter"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.validateString(System.String)">
            <summary>
            Validates the string.
            </summary>
            <param name="text1">The text1.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedField.GetFieldName">
            <summary>
            Gets the name of the field.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Syncfusion.Pdf.Parsing.PdfLoadedField.BeforeNameChanges">
            <summary>
            Raises when user manually changes the name of the field.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedField.Name">
            <summary>
            Gets the name of the field.
            </summary>
            <value>A string value specifying the name of the field.</value>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            //load the form field
            PdfLoadedField field = doc.Form.Fields[0] as PdfLoadedField;
            // Read the field name
            String fieldName = field.Name;            
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            'load the form field
            Dim field As PdfLoadedField = TryCast(doc.Form.Fields(0), PdfLoadedField)
            ' Read the field name
            Dim fieldName As String = field.Name
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedField"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class   
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedField.MappingName">
            <summary>
            Gets or sets the mapping name to be used when exporting interactive form
            field data from the document.
            </summary>
            <value>A string value specifying the mapping name of the field. </value>        
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            //load the form field
            PdfLoadedField field = doc.Form.Fields[0] as PdfLoadedField;
            // Sets the Mapping name as 'FirstField'
            field.MappingName = "FirstField";            
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            'load the form field
            Dim field As PdfLoadedField = TryCast(doc.Form.Fields(0), PdfLoadedField)
            ' Sets the Mapping name as 'FirstField'
            field.MappingName = "FirstField"
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedField"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class   
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedField.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            //load the form field
            PdfLoadedField field = doc.Form.Fields[0] as PdfLoadedField;
            // Sets the tooltip of the field
            field.ToolTip = "FirstField";       
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            'load the form field
            Dim field As PdfLoadedField = TryCast(doc.Form.Fields(0), PdfLoadedField)
            ' Sets the tooltip of the field
            field.ToolTip = "FirstField"
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedField"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class   
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedField.Page">
            <summary>
            Gets the page.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            //load the form field
            PdfLoadedField field = doc.Form.Fields[0] as PdfLoadedField;
            PdfPageBase page = field.Page;  
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            'load the form field
            Dim field As PdfLoadedField = TryCast(doc.Form.Fields(0), PdfLoadedField)
            Dim page As PdfPageBase = field.Page
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedField"/> Class   
            <seealso cref="T:Syncfusion.Pdf.PdfPageBase"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedField.ReadOnly">
            <summary>
            Gets or sets a value indicating whether [read only].
            </summary>
            <value>True if the field is read-only, false otherwise. Default is false.</value>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            //load the form field
            PdfLoadedField field = doc.Form.Fields[0] as PdfLoadedField;
            // Set the form field as read only
            field.ReadOnly = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            'load the form field
            Dim field As PdfLoadedField = TryCast(doc.Form.Fields(0), PdfLoadedField)
            ' Set the form field as read only
            field.ReadOnly = True
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedField"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedField.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfField"/> is required.
            </summary>
            <value>True if the field is required, false otherwise. Default is false.</value>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            //load the form field
            PdfLoadedField field = doc.Form.Fields[0] as PdfLoadedField;
            field.Required = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            'load the form field
            Dim field As PdfLoadedField = TryCast(doc.Form.Fields(0), PdfLoadedField)
            field.Required = True
            doc.Save("Form.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedField.Export">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfField"/> is export.
            </summary>
            <value><c>true</c> if export; otherwise, <c>false</c>.</value>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            //load the form field
            PdfLoadedField field = doc.Form.Fields[0] as PdfLoadedField;
            field.Export = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            'load the form field
            Dim field As PdfLoadedField = TryCast(doc.Form.Fields(0), PdfLoadedField)
            field.Export = True
            doc.Save("Form.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedField.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedField.ActualFieldName">
            <summary>
            Gets the actual field name.
            </summary>
            <remarks>This returns the field name alone, where Name property returns the field name along with its parent name.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedField.Form">
            <summary>
            Gets the form.
            </summary>
            <value>The form.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedField.CrossTable">
            <summary>
            Gets or sets the cross table.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedField.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedField.Changed">
            <summary>
            Gets or sets the changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedField.DefaultIndex">
            <summary>
            Gets or sets the index of the default.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedField.BeforeNameChangesEventHandler">
            <summary>
            NameChanged event handler.
            </summary>
            <param name="name">New name of the field.</param>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.ShadowShift">
            <summary>
            Internal variable to store color shift value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.m_actions">
            <summary>
            Internal variable to store Pdf Field Actions.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.m_widget">
            <summary>
            Internal variable to store widget of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.m_mouseEnter">
            <summary>
            Internal variable to store enter action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.m_mouseLeave">
            <summary>
            Internal variable to store leave action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.m_mouseDown">
            <summary>
            Internal variable to store mouse down action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.m_mouseUp">
            <summary>
            Internal variable to store mouse up action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.m_gotFocus">
            <summary>
            Internal variable to store get focus action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.m_lostFocus">
            <summary>
            Internal variable to store lost focus action.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.m_borderPen">
            <summary>
            Internal variable to store border pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.m_font">
            <summary>
            Internal variable to store field's font.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStyledField"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetGraphicsProperties(Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GraphicsProperties@,Syncfusion.Pdf.Parsing.PdfLoadedFieldItem)">
            <summary>
            Gets the graphics properties.
            </summary>
            <param name="graphicsProperties">The graphics properties.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.CreateBorderStyle(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Creates the border style.
            </summary>
            <param name="bs">The bs.</param>
            <returns>The border style.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.SetBorderStyle(Syncfusion.Pdf.Interactive.PdfBorderStyle)">
            <summary>
            Sets the border style.
            </summary>
            <param name="bs">The bs.</param>
            <returns>The border style.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.SetBorderColor(Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Gets border pen.
            </summary>
            <returns>The border style.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetBounds(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Gets the bounds.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The bounds.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetHighLightString(Syncfusion.Pdf.Interactive.PdfHighlightMode)">
            <summary>
            Gets the high light string.
            </summary>
            <param name="mode">The mode.</param>
            <returns>The highligt mode.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.CreateColor(Syncfusion.Pdf.Primitives.PdfArray)">
            <summary>
            Creates the color.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetForeColour(System.String)">
            <summary>
            Gets the font colour.
            </summary>
            <param name="defaultAppearance">The default appearance.</param>
            <returns>The colour of the text value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.ParseFloatColour(System.String)">
            <summary>
            Parses the float.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetFont(System.String,System.Boolean@)">
            <summary>
            Gets the font.
            </summary>
            <param name="fontString">The font string.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.FontName(System.String,System.Single@)">
            <summary>
            Reading Font Name from Dictionary.
            </summary>
            <param name="fontString"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.CreateFont(Syncfusion.Pdf.Primitives.PdfDictionary,System.Single,Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Create metrics for embed font
            </summary>
            <param name="fontDictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetFontByName(System.String,System.Single)">
            <summary>
            Gets the font by its name.
            </summary>
            <param name="name">The name.</param>
            <param name="height">The height of the resulting font.</param>
            <returns>The proper font object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetFontStyle(System.String)">
            <summary>
            Gets the font style.
            </summary>
            <param name="fontFamilyString">The font family string.</param>
            <returns>The style of pdf font.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetFontName(System.String)">
            <summary>
            Gets the font name
            </summary>
            <param name="fontFamilyString"></param>
            <returns>font name</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetFontFamily(System.String,System.String@)">
            <summary>
            Gets the font family.
            </summary>
            <param name="fontFamilyString">The font family string.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetBackColor">
            <summary>
            Gets the border style.
            </summary>
            <returns>Border style of the field.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetBorderStyle">
            <summary>
            Gets the border style.
            </summary>
            <returns>Border style of the field.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetDashPatern">
            <summary>
            Gets DashPatern.
            </summary>
            <returns>The DashPatern.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetBorderWidth">
            <summary>
            Gets border width.
            </summary>
            <returns>The boder width.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.SetBorderWidth(System.Int32)">
            <summary>
            Sets border width.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetStringFormat">
            <summary>
            Gets string format.
            </summary>
            <returns>The string format.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetBackBrush">
            <summary>
            Gets back brush.
            </summary>
            <returns>The back brush.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.SetBackBrush(Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Sets the back color of the Field.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetForeBrush">
            <summary>
            Gets fore brush.
            </summary>
            <returns>The fore brush.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetShadowBrush">
            <summary>
            Gets shadow brush.
            </summary>
            <returns>The shadow brush.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.CreateLoadedItem(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Creates a copy of loaded field item.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.BeginSave">
            <summary>
            Begins the save.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetFontHeight(Syncfusion.Pdf.Graphics.PdfFontFamily)">
            <summary>
            Gets the height of the font.
            </summary>
            <returns>The calculated size of font.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetBorderPen">
            <summary>
            Gets border pen.
            </summary>
            <returns>The border style.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetKids">
            <summary>
            Gets the field's annotation.
            </summary>
            <returns>The array of fields annotations.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GetVisible">
            <summary>
            Gets the visibility of the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.CreateBorderPen">
            <summary>
            Creates the border pen.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.DefineDefaultAppearance">
            <summary>
            Defines the default appearance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.MouseEnter">
            <summary>
            Gets or sets the action to be performed when the cursor enters the annotation�s 
            active area.
            </summary>
            <value>The mouse enter action.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.MouseUp">
            <summary>
            Gets or sets the action to be performed when the mouse button is released 
            inside the annotation�s active area..
            </summary>
            <value>The mouse up action.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.MouseDown">
            <summary>
            Gets or sets the action to be performed when the mouse button is pressed inside the 
            annotation�s active area.
            </summary>
            <value>The mouse down action.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.MouseLeave">
            <summary>
            Gets or sets the action to be performed when the cursor exits the annotation�s 
            active area.
            </summary>
            <value>The mouse leave action.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GotFocus">
            <summary>
            Gets or sets the action to be performed when the annotation receives the 
            input focus.
            </summary>
            <value>The got focus action.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.ForeColor">
            <summary>
            Gets the fore color of the Field.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.LostFocus">
            <summary>
            Gets or sets the action to be performed when the annotation loses the 
            input focus.
            </summary>
            <value>The lost focus action.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.Widget">
            <summary>
            Gets the widget.
            </summary>
            <value>The widget.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.BorderPen">
            <summary>
            Gets the border pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.BorderStyle">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.DashPatern">
            <summary>
            Gets the DashPatern.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.BorderWidth">
            <summary>
            Gets or Sets the width of the border.
            </summary>
            <value>The width of the border.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.StringFormat">
            <summary>
            Gets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.BackBrush">
            <summary>
            Gets the back brush.
            </summary>
            <value>The back brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.ForeBrush">
            <summary>
            Gets the color of the fore.
            </summary>
            <value>The color of the fore.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.ShadowBrush">
            <summary>
            Gets the shadow brush.
            </summary>
            <value>The shadow brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.Font">
            <summary>
            Gets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.DefaultIndex">
            <summary>
            Gets the default index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.Kids">
            <summary>
             Gets the kids.
             </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.Visible">
            <summary>
            Gets a value indicating the visibility of the field.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GraphicsProperties">
            <summary>
            Structure that holds graphics properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GraphicsProperties.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedStyledField)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GraphicsProperties"/> struct.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GraphicsProperties.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedFieldItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStyledField.GraphicsProperties"/> struct.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedButtonField.m_items">
            <summary>
            Collection of button items.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedButtonField.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedButtonField"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedButtonField.GetText">
            <summary>
            Gets the text.
            </summary>
            <returns>The text of the field.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedButtonField.SetText(System.String)">
            <summary>
            Sets the text of the field.
            </summary>
            <param name="value">Text field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedButtonField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedButtonField.BeginSave">
            <summary>
            Begins the save.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedButtonField.Clone(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.PdfPage)">
            <summary>
            Creates a copy of PdfLoadedButton field.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedButtonField.CreateLoadedItem(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Creates a copy of PdfLoadedButtonItem.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedButtonField.ApplyAppearance(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Parsing.PdfLoadedFieldItem)">
            <summary>
            Applies the appearance.
            </summary>
            <param name="widget">The widget.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedButtonField.DrawButton(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Parsing.PdfLoadedFieldItem)">
            <summary>
            Draws the button.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedButtonField.GetFontHeight(Syncfusion.Pdf.Graphics.PdfFontFamily)">
            <summary>
            Gets the height of the font.
            </summary>
            <param name="family"></param>
            <returns>The calculated size of font.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedButtonField.AddPrintAction">
            <summary>
            Adds Print action to current button field.</summary>
            <remarks>Clicking on the specified button will trigger the Print Dialog Box.</remarks>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument ldoc = new PdfLoadedDocument("SourceDoc.pdf");
            // Load the existing form
            PdfLoadedForm form = ldoc.Form;
            // Load an existing button field.
            PdfLoadedButtonField buttonField = form.Fields["Submit"] as PdfLoadedButtonField;
            // Adding print action
            buttonField.AddPrintAction();
            // Save the document to a disk
            ldoc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim ldoc As PdfLoadedDocument = New PdfLoadedDocument("SourceDoc.pdf")
            ' Load the existing form
            Dim form As PdfLoadedForm = ldoc.Form
            ' Load an existing button field.
            Dim buttonField As PdfLoadedButtonField = TryCast(form.Fields("Submit"), PdfLoadedButtonField)
            ' Adding print action
            buttonField.AddPrintAction()
            ' Save the document to a disk
            ldoc.Save("Form.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedButtonField.Text">
            <summary>
            Gets or sets the caption text.
            </summary>
            <value>A string value specifying the caption of the button.</value>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the form
            PdfLoadedForm form = doc.Form;
            // Load an existing button field.
            PdfLoadedButtonField buttonField = form.Fields["Submit"] as PdfLoadedButtonField;
            buttonField.ToolTip = "SubmitButton";
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the form
            Dim form As PdfLoadedForm = doc.Form
            ' Load an existing button field.
            Dim buttonField As PdfLoadedButtonField = TryCast(form.Fields("Submit"), PdfLoadedButtonField)
            buttonField.ToolTip = "SubmitButton"
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedForm"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedButtonField.Items">
            <summary>
            Gets the collection of button items.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load an existing button field
            PdfLoadedButtonField buttonField = doc.Form.Fields["Submit"] as PdfLoadedButtonField;
            // Reading button collection item
            PdfLoadedButtonItemCollection buttonCollection = buttonField.Items;
            // Load an existing button item
            PdfLoadedButtonItem buttonItem = buttonCollection[0];
            buttonItem.Bounds = new RectangleF(0, 0, 20, 30);
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load an existing button field
            Dim buttonField As PdfLoadedButtonField = TryCast(doc.Form.Fields("Submit"), PdfLoadedButtonField)
            ' Reading button collection item
            Dim buttonCollection As PdfLoadedButtonItemCollection = buttonField.Items
            ' Load an existing button item
            Dim buttonItem As PdfLoadedButtonItem = buttonCollection(0)
            buttonItem.Bounds = New RectangleF(0, 0, 20, 30)
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedButtonField"/> Class 
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedButtonItem">
            <summary>
            Represents button group item of an existing PDF document`s form.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load an existing button field
            PdfLoadedButtonField buttonField = doc.Form.Fields["Submit"] as PdfLoadedButtonField;
            // Load an existing button item
            PdfLoadedButtonItem buttonItem = buttonField.Items[0];
            buttonItem.Bounds = new RectangleF(0, 0, 20, 30);
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load an existing button field
            Dim buttonField As PdfLoadedButtonField = TryCast(doc.Form.Fields("Submit"), PdfLoadedButtonField)
            ' Load an existing button item
            Dim buttonItem As PdfLoadedButtonItem = buttonField.Items(0)
            buttonItem.Bounds = New RectangleF(0, 0, 20, 30)
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedButtonField"/> Class 
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem">
            <summary>
            Represents base class for field's group items.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.m_field">
            <summary>
            Field which item belongs to.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.m_collectionIndex">
            <summary>
            Item index in collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.m_page">
            <summary>
            Local variable to hold page reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedStyledField,System.Int32,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="index">The index.</param>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.Field">
            <summary>
            Get the current Loaded style Field.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.CrossTable">
            <summary>
            Gets the cross table.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.BorderPen">
            <summary>
            Gets the border pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.BorderStyle">
            <summary>
            Gets the border style.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.DashPatern">
            <summary>
            Gets the DashPatern.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.BorderWidth">
            <summary>
            Gets the width of the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.StringFormat">
            <summary>
            Gets the string format.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.BackBrush">
            <summary>
            Gets the back brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.ForeBrush">
            <summary>
            Gets the color of the fore.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.ShadowBrush">
            <summary>
            Gets the shadow brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.Font">
            <summary>
            Gets the font.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem.Page">
            <summary>
            Gets the page.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedButtonItem.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedStyledField,System.Int32,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedButtonItem"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="index">The index.</param>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedButtonItemCollection">
            <summary>
            Represents collection of button item.
            </summary>
            <example>
            <code lang="C#">
             //Load an existing document.
             PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
             // Load the form
             PdfLoadedForm form = doc.Form;
             // Load an existing button field
             PdfLoadedButtonField buttonField = doc.Form.Fields["Submit"] as PdfLoadedButtonField;
             // Load an existing button collection
             PdfLoadedButtonItemCollection buttonCollection = buttonField.Items;
             // Load an existing button button item
             PdfLoadedButtonItem buttonItem = buttonCollection[0];
             buttonItem.Bounds = new RectangleF(0, 0, 20, 30);          
             doc.Save("Form.pdf");
            </code>
            <code lang="VB">
             'Load an existing document.
             Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
             ' Load the form
             Dim form As PdfLoadedForm = doc.Form
             ' Load an existing button field
             Dim buttonField As PdfLoadedButtonField = TryCast(doc.Form.Fields("Submit"), PdfLoadedButtonField)
             ' Load an existing button collection
             Dim buttonCollection As PdfLoadedButtonItemCollection = buttonField.Items
             ' Load an existing button button item
             Dim buttonItem As PdfLoadedButtonItem = buttonCollection(0)
             buttonItem.Bounds = New RectangleF(0, 0, 20, 30)
             doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedButtonField"/> Class 
            <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class  
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedButtonItemCollection.Add(Syncfusion.Pdf.Parsing.PdfLoadedButtonItem)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedButtonItemCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedTexBoxItem"/> at the specified index.
            </summary>
            <example>
            <code lang="C#">
             //Load an existing document.
             PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
             // Load the form
             PdfLoadedForm form = doc.Form;
             // Load an existing button field
             PdfLoadedButtonField buttonField = doc.Form.Fields["Submit"] as PdfLoadedButtonField;
             // Load an existing button collection
             PdfLoadedButtonItemCollection buttonCollection = buttonField.Items;
             // Load an existing button button item
             PdfLoadedButtonItem buttonItem = buttonCollection[0];
             buttonItem.Bounds = new RectangleF(0, 0, 20, 30);          
             doc.Save("Form.pdf");
            </code>
            <code lang="VB">
             'Load an existing document.
             Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
             ' Load the form
             Dim form As PdfLoadedForm = doc.Form
             ' Load an existing button field
             Dim buttonField As PdfLoadedButtonField = TryCast(doc.Form.Fields("Submit"), PdfLoadedButtonField)
             ' Load an existing button collection
             Dim buttonCollection As PdfLoadedButtonItemCollection = buttonField.Items
             ' Load an existing button button item
             Dim buttonItem As PdfLoadedButtonItem = buttonCollection(0)
             buttonItem.Bounds = New RectangleF(0, 0, 20, 30)
             doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedButtonField"/> Class 
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField">
            <summary>
            Represents check box of an existing PDF document`s form. 
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load an existing Check field
            PdfLoadedCheckBoxField checkField = doc.Form.Fields["Java"] as PdfLoadedCheckBoxField;
            checkField.Checked = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load an existing Check field
            Dim checkField As PdfLoadedCheckBoxField = TryCast(doc.Form.Fields("Java"), PdfLoadedCheckBoxField)
            checkField.Checked = True
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateField"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class     
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedStateField">
            <summary>
            Represents the base class for loaded state field.
            </summary>   
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStyledField"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStateField.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable,Syncfusion.Pdf.Parsing.PdfLoadedStateItemCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateField"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStateField.GetItem(System.Int32,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Gets the item.
            </summary>
            <param name="index">The index.</param>
            <param name="itemDictionary">The item dictionary.</param>
            <returns>The proper state item.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStateField.GetStateTemplate(Syncfusion.Pdf.Interactive.PdfCheckFieldState,Syncfusion.Pdf.Parsing.PdfLoadedStateItem)">
            <summary>
            Gets the state template.
            </summary>
            <param name="state">The state.</param>
            <param name="item">The item.</param>
            <returns>The proper PdfTemplate instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStateField.SetCheckedStatus(System.Boolean)">
            <summary>
            Sets checked status of the field.
            </summary>
            <param name="value">Checked status.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStateField.GetItemValue(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Gets the item value.
            </summary>
            <returns>The value of the item.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStateField.UncheckOthers(Syncfusion.Pdf.Parsing.PdfLoadedStateItem,System.String,System.Boolean)">
            <summary>
            Unchecks the others kids.
            </summary>
            <param name="child">The child.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStateField.ApplyAppearance(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxItem)">
            <summary>
            Applies the appearance.
            </summary>
            <param name="widget">The widget.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStateField.DrawStateItem(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Interactive.PdfCheckFieldState,Syncfusion.Pdf.Parsing.PdfLoadedStateItem)">
            <summary>
            Draws the check box item.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="state">The state.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStateField.Items">
            <summary>
            Gets the items collection.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateItemCollection"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField.CHECK_SYMBOL">
            <summary>
            Symbol for check state.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField.GetItem(System.Int32,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Gets the item.
            </summary>
            <param name="index">The index.</param>
            <param name="itemDictionary">The item dictionary.</param>
            <returns>The proper state item.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField.BeginSave">
            <summary>
            Begins the save.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField.Clone(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.PdfPage)">
            <summary>
            Creates a copy of PdfLoadedCheckBoxField.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField.CreateLoadedItem(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Creates a copy of PdfLoadedCheckBoxItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField"/> is checked.
            </summary>
            <value>True if the check box is checked, false otherwise. </value>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load an existing Check field
            PdfLoadedCheckBoxField checkField = doc.Form.Fields["Java"] as PdfLoadedCheckBoxField;
            checkField.Checked = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load an existing Check field
            Dim checkField As PdfLoadedCheckBoxField = TryCast(doc.Form.Fields("Java"), PdfLoadedCheckBoxField)
            checkField.Checked = True
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class     
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField.Items">
            <summary>
            Gets the collection check box items.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load an existing Check field
            PdfLoadedCheckBoxField checkField = doc.Form.Fields["Java"] as PdfLoadedCheckBoxField;
            // Loads the check box items collection.
            PdfLoadedCheckBoxItemCollection checkCollection = checkField.Items;
            checkCollection[0].Checked = false;            
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load an existing Check field
            Dim checkField As PdfLoadedCheckBoxField = TryCast(doc.Form.Fields("Java"), PdfLoadedCheckBoxField)
            ' Loads the check box items collection.
            Dim checkCollection As PdfLoadedCheckBoxItemCollection = checkField.Items
            checkCollection(0).Checked = False
            doc.Save("Form.pdf"
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateField"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField"/> Class  
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxItemCollection">
            <summary>
            Represents collection of text box group items.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load an existing Check field
            PdfLoadedCheckBoxField checkField = doc.Form.Fields["Java"] as PdfLoadedCheckBoxField;
            // Loads the check box items collection.
            PdfLoadedCheckBoxItemCollection checkCollection = checkField.Items;
            checkCollection[0].Checked = false;            
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load an existing Check field
            Dim checkField As PdfLoadedCheckBoxField = TryCast(doc.Form.Fields("Java"), PdfLoadedCheckBoxField)
            ' Loads the check box items collection.
            Dim checkCollection As PdfLoadedCheckBoxItemCollection = checkField.Items
            checkCollection(0).Checked = False
            doc.Save("Form.pdf"
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateField"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxField"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateItemCollection"/> Class 
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedStateItemCollection">
            <summary>
            Represents the collection of loaded state item.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStateItemCollection.IndexOf(Syncfusion.Pdf.Parsing.PdfLoadedStateItem)">
            <summary>
            Index of the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The index of specified item</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStateItemCollection.Add(Syncfusion.Pdf.Parsing.PdfLoadedStateItem)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStateItemCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateItem"/> at the specified index.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxItemCollection.IndexOf(Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxItem)">
            <summary>
            Index of the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The index of specified item</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxItemCollection.Add(Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxItem)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxItemCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedTexBoxItem"/> at the specified index.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxItem">
            <summary>
            Represents loaded check box item.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load an existing Check field
            PdfLoadedCheckBoxField checkField = doc.Form.Fields["Java"] as PdfLoadedCheckBoxField;
            // Loads the check box items collection.
            PdfLoadedCheckBoxItemCollection checkCollection = checkField.Items;
            // Read the first item of the collection
            PdfLoadedCheckBoxItem checkItem = checkCollection[0];
            checkItem.Checked = false;            
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load an existing Check field
            Dim checkField As PdfLoadedCheckBoxField = TryCast(doc.Form.Fields("Java"), PdfLoadedCheckBoxField)
            ' Loads the check box items collection.
            Dim checkCollection As PdfLoadedCheckBoxItemCollection = checkField.Items
            ' Read the first item of the collection
            Dim checkItem As PdfLoadedCheckBoxItem = checkCollection(0)
            checkItem.Checked = False
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateItem"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxItemCollection"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedStateItem">
            <summary>
            Represents the loaded state item.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStateItem.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedStyledField,System.Int32,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateItem"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="index">The index.</param>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedStateItem.SetCheckedStatus(System.Boolean)">
            <summary>
            Sets checked status of the field.
            </summary>
            <param name="value">Checked status.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedStateItem.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateItem"/> is checked.
            </summary>           
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxItem.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedStyledField,System.Int32,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxItem"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="index">The index.</param>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedCheckBoxItem.SetCheckedStatus(System.Boolean)">
            <summary>
            Sets checked status of the field.
            </summary>
            <param name="value">Checked status.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField">
            <summary>
            Represents a choice field of an existing PDF document`s form.
            </summary>
            <example>
            <code lang="C#">
             //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load an existing choice field
            PdfLoadedChoiceField choiceField = doc.Form.Fields["Java"] as PdfLoadedChoiceField;
            choiceField.SelectedIndex = 0;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load an existing Check field
            Dim choiceField As PdfLoadedChoiceField = TryCast(doc.Form.Fields("Java"), PdfLoadedChoiceField)
            choiceField.SelectedIndex = 0
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStyledField"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField.GetSelectedIndex">
            <summary>
            Gets selected index.
            </summary>
            <returns>Selected index.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField.SetSelectedIndex(System.Int32[])">
            <summary>
            Sets selected index.
            </summary>
            <param name="value">Selected index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField.GetSelectedValue">
            <summary>
            Gets selected value.
            </summary>
            <returns>Selected value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField.SetSelectedValue(System.String[])">
            <summary>
            Sets selected value.
            </summary>
            <param name="value">Selected value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField.GetListItemCollection">
            <summary>
            Gets the list item.
            </summary>
            <returns>The list item collection</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField.Values">
            <summary>
            Gets the collection of choice items.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField.SelectedIndex">
            <summary>
            Gets or sets the first selected item in the list.
            </summary>
            <example>
            <value>An integer value specifying the choice item in the list.</value>
            <code lang="C#">
             //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load an existing choice field
            PdfLoadedChoiceField choiceField = doc.Form.Fields["Java"] as PdfLoadedChoiceField;
            choiceField.SelectedIndex = 0;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load an existing Check field
            Dim choiceField As PdfLoadedChoiceField = TryCast(doc.Form.Fields("Java"), PdfLoadedChoiceField)
            choiceField.SelectedIndex = 0
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStyledField"/> Class 
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField.SelectedValue">
            <summary>
            Gets or sets the value of the first selected item in the list.
            </summary>
            <example>
            <value>A string value specifying the value of the selected item.</value>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load an existing choice field
            PdfLoadedChoiceField choiceField = doc.Form.Fields["Java"] as PdfLoadedChoiceField;
            choiceField.SelectedValue = "Employee";
            doc.Save("Form.pdf");          
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load an existing choice field
            Dim choiceField As PdfLoadedChoiceField = TryCast(doc.Form.Fields("Java"), PdfLoadedChoiceField)
            choiceField.SelectedValue = "Employee"
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField"/> Class   
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField.SelectedItem">
            <summary>
            Gets the first selected item in the list.
            </summary>
            <example>
            <value>A <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListItem"/>object specifying the selected item.</value>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load an existing Check field
            PdfLoadedChoiceField choiceField = doc.Form.Fields["Java"] as PdfLoadedChoiceField;
            // Change the selected item
            PdfLoadedListItem item = choiceField.SelectedItem;
            item.Text = "New Text";
            doc.Save("Form.pdf");          
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load an existing Check field
            Dim choiceField As PdfLoadedChoiceField = TryCast(doc.Form.Fields("Java"), PdfLoadedChoiceField)
            ' Change the selected item
            Dim item As PdfLoadedListItem = choiceField.SelectedItem
            item.Text = "New Text"
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField"/> Class   
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField">
            <summary>
            Represents the combo box field of an existing item.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read a combo box field
            PdfLoadedComboBoxField comboField = doc.Form.Fields["EmployeeCombo"] as PdfLoadedComboBoxField;
            comboField.SelectedIndex = 0;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read a combo box field
            Dim comboField As PdfLoadedComboBoxField = TryCast(doc.Form.Fields("EmployeeCombo"), PdfLoadedComboBoxField)
            comboField.SelectedIndex = 0
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField"/> Class   
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField.m_items">
            <summary>
            Stores the collection of items.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField.BeginSave">
            <summary>
            Begins the save.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField.Clone(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.PdfPage)">
            <summary>
            Creates a copy of PdfLoadedComboBoxField.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField.CreateLoadedItem(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Creates a copy of PdfLoadedComboBoxItem.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField.ApplyAppearance(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Parsing.PdfLoadedFieldItem)">
            <summary>
            Applies the appearance.
            </summary>
            <param name="widget">The widget.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField.DrawComboBox(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Parsing.PdfLoadedFieldItem)">
            <summary>
            Draws the combo box.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField.GetFontHeight(Syncfusion.Pdf.Graphics.PdfFontFamily)">
            <summary>
            Gets the height of the font.
            </summary>
            <param name="family"></param>
            <returns>The calculated size of font.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField.Editable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfComboBoxField"/> is editable.
            </summary>
            <value>True if the drop down list is editable, false otherwise. Default is false.</value>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load an existing combo field
            PdfLoadedComboBoxField comboField = doc.Form.Fields["EmployeeCombo"] as PdfLoadedComboBoxField;
            comboField.Editable = false;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load an existing Check field
            Dim choiceField As PdfLoadedChoiceField = TryCast(doc.Form.Fields("Java"), PdfLoadedChoiceField)
            ' Change the selected item
            Dim item As PdfLoadedListItem = choiceField.SelectedItem
            item.Text = "New Text"
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListItem"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField.Items">
            <summary>
            Gets the collection of combo box items.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");           
            // Load an existing combo field
            PdfLoadedComboBoxField comboField = doc.Form.Fields["EmployeeCombo"] as PdfLoadedComboBoxField;
            // Load combo field collection
            PdfLoadedComboBoxItemCollection comboCollection = comboField.Items;
            // Reading first item of the collection.
            PdfLoadedComboBoxItem item = comboCollection[0];
            item.Location = new PointF(200, 200);
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load an existing combo field
            Dim comboField As PdfLoadedComboBoxField = TryCast(doc.Form.Fields("EmployeeCombo"), PdfLoadedComboBoxField)
            ' Load combo field collection
            Dim comboCollection As PdfLoadedComboBoxItemCollection = comboField.Items
            ' Reading first item of the collection.
            Dim item As PdfLoadedComboBoxItem = comboCollection(0)
            item.Location = New PointF(200, 200)
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxItem"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxItem">
             <summary>
             Represents group for combo box field.
             </summary>
             <example>
             <code lang="C#">
             //Load an existing document
             PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
             // Load an existing combo field
             PdfLoadedComboBoxField comboField = doc.Form.Fields["EmployeeCombo"] as PdfLoadedComboBoxField;
             // Load combo field collection
             PdfLoadedComboBoxItemCollection comboCollection = comboField.Items;
             // Load combo field item
             PdfLoadedComboBoxItem comboItem = comboCollection[0];
             comboItem.Bounds = new RectangleF(10,20,200,300);
             doc.Save("Form.pdf");
             </code>
             <code lang="VB">
             'Load an existing document
             Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
             ' Load an existing combo field
             Dim comboField As PdfLoadedComboBoxField = TryCast(doc.Form.Fields("EmployeeCombo"), PdfLoadedComboBoxField)
             ' Load combo field collection
             Dim comboCollection As PdfLoadedComboBoxItemCollection = comboField.Items
            ' Load combo field item
             Dim comboItem As PdfLoadedComboBoxItem = comboCollection(0)
             comboItem.Bounds = New RectangleF(10,20,200,300)
             doc.Save("Form.pdf")
             </code>
             </example>
             <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem"/> Class   
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxItem.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedStyledField,System.Int32,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxItem"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="index">The index.</param>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxItemCollection">
             <summary>
             Represents collection of Combo box items.
             </summary>
             <example>
             <code lang="C#">
             //Load an existing document
             PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
             // Load an existing combo field
             PdfLoadedComboBoxField comboField = doc.Form.Fields["EmployeeCombo"] as PdfLoadedComboBoxField;
             // Load combo field collection
             PdfLoadedComboBoxItemCollection comboCollection = comboField.Items;
             // Load combo field item
             PdfLoadedComboBoxItem comboItem = comboCollection[0];
             comboItem.Bounds = new RectangleF(10,20,200,300);
             doc.Save("Form.pdf");
             </code>
             <code lang="VB">
             'Load an existing document
             Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
             ' Load an existing combo field
             Dim comboField As PdfLoadedComboBoxField = TryCast(doc.Form.Fields("EmployeeCombo"), PdfLoadedComboBoxField)
             ' Load combo field collection
             Dim comboCollection As PdfLoadedComboBoxItemCollection = comboField.Items
            ' Load combo field item
             Dim comboItem As PdfLoadedComboBoxItem = comboCollection(0)
             comboItem.Bounds = New RectangleF(10,20,200,300)
             doc.Save("Form.pdf")
             </code>
             </example>
             <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class  
             <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField"/> Class  
             <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxItemCollection.Item(System.Int32)">
             <summary>
             Gets the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedTexBoxItem"/> at the specified index.
             </summary>
             <example>
             <code lang="C#">
             //Load an existing document
             PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
             // Load an existing combo field
             PdfLoadedComboBoxField comboField = doc.Form.Fields["EmployeeCombo"] as PdfLoadedComboBoxField;
             // Load combo field collection
             PdfLoadedComboBoxItemCollection comboCollection = comboField.Items;
             // Load combo field item
             PdfLoadedComboBoxItem comboItem = comboCollection[0];
             comboItem.Bounds = new RectangleF(10,20,200,300);
             doc.Save("Form.pdf");
             </code>
             <code lang="VB">
             'Load an existing document
             Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
             ' Load an existing combo field
             Dim comboField As PdfLoadedComboBoxField = TryCast(doc.Form.Fields("EmployeeCombo"), PdfLoadedComboBoxField)
             ' Load combo field collection
             Dim comboCollection As PdfLoadedComboBoxItemCollection = comboField.Items
            ' Load combo field item
             Dim comboItem As PdfLoadedComboBoxItem = comboCollection(0)
             comboItem.Bounds = New RectangleF(10,20,200,300)
             doc.Save("Form.pdf")
             </code>
             </example>
             <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class  
             <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedComboBoxField"/> Class  
             <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class  
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadeddStateItemCollection">
            <summary>
            Represents state item collection.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class   
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadeddStateItemCollection.IndexOf(Syncfusion.Pdf.Parsing.PdfLoadedStateItem)">
            <summary>
            Index of the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The index of specified item</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadeddStateItemCollection.Add(Syncfusion.Pdf.Parsing.PdfLoadedStateItem)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadeddStateItemCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateItem"/> at the specified index.
            </summary>  
            <value>The index of specified <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateItem"/> item.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedForm">
            <summary>
            Represents Loaded form.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the existing form
            PdfLoadedForm form = doc.Form;
            //load the form field
            PdfLoadedField field = form.Fields[0] as PdfLoadedField;
            field.Export = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the existing form
            Dim form As PdfLoadedForm = doc.Form
            'load the form field
            Dim field As PdfLoadedField = TryCast(form.Fields(0), PdfLoadedField)
            field.Export = True
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfForm"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class  
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedForm.m_fields">
            <summary>
            Collection of fields
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedForm.m_crossTable">
            <summary>
            Store crooss table.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedForm.m_terminalFields">
            <summary>
            Dictionaries of tremil fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedForm.m_isModified">
            <summary>
            Indicates is field modified or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedForm.m_isXFAForm">
            <summary>
            Indicates is xfa form or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedForm"/> class.
            </summary>
            <param name="formDictionary">The form dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.#ctor(Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedForm"/> class.
            </summary>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.Initialize(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes the specified form dictionary.
            </summary>
            <param name="formDictionary">The form dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.CreateFields">
            <summary>
            Retrieves the terminal fields.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.IsNode(Syncfusion.Pdf.Primitives.PdfArray)">
            <summary>
            Determines whether the specified kids is node.
            </summary>
            <param name="kids">The kids.</param>
            <returns>
            	<c>true</c> if the specified kids is node; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.OnValidate(System.String)">
            <summary>
            Validate the XML node element
            </summary>
            <param name="nodeName">name of the XML element node.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.Dictionary_BeginSave(System.Object,Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.Clear">
            <summary>
            Clears PdfLoadedForm.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.RemoveFromDictionaries(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Removes field and kids annotation from dictionaries.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.DeleteFromPages(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Deletes from pages.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.DeleteAnnottation(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Deletes the annotation from the page dictionary.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.GetCorrectName(System.String)">
            <summary>
            Gets the new name of the field.
            </summary>
            <param name="name">The name.</param>
            <returns>The field name.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.HighlightFields(System.Boolean)">
            <summary>
            Sets/Resets the form field highlight option.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.OnlyHexInString(System.String)">
            <summary>
            Called when [hex in string].
            </summary>
            <param name="test">The test.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedForm.Fields">
            <summary>
            Gets the field collection.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the existing form
            PdfLoadedForm form = doc.Form;
            //load the form field
            PdfLoadedField field = form.Fields[0] as PdfLoadedField;
            field.Export = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the existing form
            Dim form As PdfLoadedForm = doc.Form
            'load the form field
            Dim field As PdfLoadedField = TryCast(form.Fields(0), PdfLoadedField)
            field.Export = True
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedForm"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedForm.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the form is read only.
            </summary>
            <value>True if the field is read-only, false otherwise. Default is false.</value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the existing form
            PdfLoadedForm form = doc.Form;         
            //Set the form as read only
            form.ReadOnly = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the existing form
            Dim form As PdfLoadedForm = doc.Form
            'Set the form as read only
            form.ReadOnly = True
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedForm"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedForm.SignatureFlags">
            <summary>
            Gets the signature flags.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedForm.NeedAppearances">
            <summary>
            Gets or sets a value indicating whether need appearances.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedForm.Resources">
            <summary>
            Gets the resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedForm.IsModified">
            <summary>
            Gets or sets a value indicating whether this instance is modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedForm.CrossTable">
            <summary>
            Gets the cross table.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedForm.TerminalFields">
            <summary>
            Gets or sets the terminal fields.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedForm.IsXFAForm">
            <summary>
            Gets or sets a value indicating whether this form is XFA Form or AcroForm.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedForm.NodeInfo">
            <summary>
            Represents node information.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedForm.NodeInfo.m_count">
            <summary>
            Parsed field count.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedForm.NodeInfo.m_fields">
            <summary>
            Current kids array.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedForm.NodeInfo.#ctor(Syncfusion.Pdf.Primitives.PdfArray,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedForm.NodeInfo"/> class.
            </summary>
            <param name="fields">The fields.</param>
            <param name="count">The count.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedForm.NodeInfo.Fields">
            <summary>
            Gets or sets the current array.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedForm.NodeInfo.Count">
            <summary>
            Gets or sets the count.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedFieldImportError">
            <summary>
            Represents errors on importing loaded field.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldImportError.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFieldImportError.Field">
            <summary>
            Gets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection">
            <summary>
            Represents field collection of loaded form.
            </summary>
            <example>
            <code lang="C#">
             //Load an existing document
             PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
             // PDF loaded field collection
             PdfLoadedFormFieldCollection fieldCollection = doc.Form.Fields;
             // Remove the first field 
             fieldCollection.RemoveAt(0);
             doc.Save("Form.pdf");
            </code>
            <code lang="VB">
             'Load an existing document
             Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
             ' PDF loaded field collection
             Dim fieldCollection As PdfLoadedFormFieldCollection = doc.Form.Fields
             ' Remove the first field 
             fieldCollection.RemoveAt(0)
             doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfFieldCollection"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.m_form">
            <summary>
            Loaded form, wich collection belongs to.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedForm)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection"/> class.
            </summary>
            <param name="form">The form.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.GetField(System.Int32)">
            <summary>
            Gets the field.
            </summary>
            <param name="index">The index.</param>
            <returns>The created field.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.CreateListBox(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the list box.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created list box.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.CreateComboBox(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the combo box.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created combo box.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.CreateTextField(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the text field.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created text field.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.CreateRadioButton(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the radio button.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created radio button.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.CreateCheckBox(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the check box.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created check box.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.CreatePushButton(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates the push button.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The created push button.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.GetFieldType(Syncfusion.Pdf.Primitives.PdfName,Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Gets the type of the field.
            </summary>
            <param name="name">The name.</param>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
            <returns>The field type.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.DoAdd(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Adds a field to collection.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.DoInsert(System.Int32,Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Inserts a filed into collection.
            </summary>
            <param name="index">The index.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.DoRemove(Syncfusion.Pdf.Interactive.PdfField)">
            <summary>
            Removes the field from collection.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.DoRemoveAt(System.Int32)">
            <summary>
            Removes the field at the specified position.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.DoClear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.IsValidName(System.String)">
            <summary>
            Check whether the field with the same name already exists.
            </summary>
            <param name="name">The name.</param>
            <returns>
            <c>true</c> if there are no fields with the same name within the collection; 
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.GetCorrectName(System.String)">
            <summary>
            Gets the new name of the field.
            </summary>
            <param name="name">The name.</param>
            <returns>The field name.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.AddFieldDictionary(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Adds the field dictionary.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.ldField_NameChanded(System.String)">
            <summary>
            NameChanged evant handler.
            </summary>
            <param name="name">New Name of the field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.GetFieldIndex(System.String)">
            <summary>
            Gets the index of the field.
            </summary>
            <param name="name">The name.</param>
            <returns>The index of the field.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.GetNamedField(System.String)">
            <summary>
            Gets the named field.
            </summary>
            <param name="name">The name.</param>
            <returns>The field with specified name.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.TryGetField(System.String,Syncfusion.Pdf.Parsing.PdfLoadedField@)">
            <summary>
            Gets the form field with the given field name
            </summary>
            <param name="fieldName">Name of the field</param>
            <param name="field">Loaded Form Field</param>
            <returns>Loaded Form Field</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the filed value from the given filed name
            </summary>
            <param name="fieldName">Name of the loaded form filed</param>
            <param name="fieldValue">Value of the field</param>
            <returns>vale of the field</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Interactive.PdfField"/> at the specified index.
            </summary>
            <example>
            <code lang="C#">
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            //load the form fields
            foreach (PdfField field in doc.Form.Fields)
            {
              // Flatten the form
              field.Flatten = true;
            }
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            'load the form fields
            For Each field As PdfField In doc.Form.Fields
              ' Flatten the form
              field.Flatten = True
            Next field
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.Item(System.String)">
            <summary>
            Returns field with specified name.
            </summary>
            <param name="name">The specified field name.</param>
            <example>
            <code lang="C#">
            // Loads an existing PDF document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the FirstTextBox field
            PdfField field = doc.Form.Fields["FirstTextBox"];
            field.Flatten = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
             // Loads an existing PDF document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the FirstTextBox field
            Dim field As PdfField = doc.Form.Fields("FirstTextBox")
            field.Flatten = True
            doc.Save("Form.pdf")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedFormFieldCollection.Form">
            <summary>
            Gets or sets the form.
            </summary>      
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField">
            <summary>
            Represents loaded list box field.
            </summary>
            <example>
            <code lang="C#">
             //Load an existing document
             PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
             // Load the list box field          
             PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;
             // Flatten the list field
             listField.Flatten = true;
             doc.Save("Form.pdf");
            </code>
            <code lang="VB">
             'Load an existing document
             Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
             ' Load the list box field          
             Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
             ' Flatten the list field
             listField.Flatten = True
             doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedChoiceField"/> Class  
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField.m_items">
            <summary>
            Represents collection of items.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField.BeginSave">
            <summary>
            Begins the save.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField.Clone(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.PdfPage)">
            <summary>
            Creates a copy of PdfLoadedListBoxField.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField.CreateLoadedItem(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Creates a copy of PdfLoadedListField Item.
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField.ApplyAppearance(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Parsing.PdfLoadedFieldItem)">
            <summary>
            Applies the appearance.
            </summary>
            <param name="widget">The widget.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField.DrawListBox(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Parsing.PdfLoadedFieldItem)">
            <summary>
            Draws the list box.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField.ConvertToListItems(Syncfusion.Pdf.Parsing.PdfLoadedListItemCollection)">
            <summary>
            Converts to list items.
            </summary>
            <param name="items">The items.</param>
            <returns>The PdfListItemCollection.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField.GetFontHeight(Syncfusion.Pdf.Graphics.PdfFontFamily)">
            <summary>
            Gets the height of the font.
            </summary>
            <param name="family"></param>
            <returns>The calculated size of font.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField.MultiSelect">
            <summary>
            Gets or sets a value indicating whether the field is multiselectable..
            </summary>
            <example>
            <code lang="C#">
            // Loads an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the list box field 
            PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;
            // Enabling the multi selection option
            listField.MultiSelect = true;
            doc.Save("Sample.pdf");
            </code>
            <code lang="VB">
            ' Loads an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the list box field 
            Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
            ' Enabling the multi selection option
            listField.MultiSelect = True
            doc.Save("Sample.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The collection of list box items.</value>
            <example>
            <code lang="C#">
            // Loads an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the list box field 
            PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;
            // List box items collection
            PdfLoadedListFieldItemCollection listcollection = listField.Items;
            listcollection[0].Location = new PointF(100, 200);
            doc.Save("Sample.pdf");
            </code>
            <code lang="VB">
            ' Loads an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the list box field 
            Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
            ' List box items collection
            Dim listcollection As PdfLoadedListFieldItemCollection = listField.Items
            listcollection(0).Location = New PointF(100, 200)
            doc.Save("Sample.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField"/> Class 
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedListFieldItem">
            <summary>
            Represents group item for list field.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem"/> Class
            <example>
            <code lang="C#">
            // Loads an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the list box field 
            PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;
            // Loaded list box field items
            PdfLoadedListFieldItem listFieldItem = listField.Items[0];
            listFieldItem.Location = new PointF(100, 200);
            doc.Save("Sample.pdf");
            </code>
            <code lang="VB">
            ' Loads an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the list box field 
            Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
            ' Loaded list box field items
            Dim listFieldItem As PdfLoadedListFieldItem = listField.Items(0)
            listFieldItem.Location = New PointF(100, 200)
            doc.Save("Sample.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField"/> Class  
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListFieldItem.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedStyledField,System.Int32,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListFieldItem"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="index">The index.</param>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedListFieldItemCollection">
            <summary>
            Represents loaded item collection.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Getting the 'course' list box field          
            PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;       
            // list field item Collection
            PdfLoadedListFieldItemCollection listItemCollection = listField.Items;
            listItemCollection[0].Bounds = new RectangleF(0, 0, 20, 30);            
            doc.Save("LoadedForm.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Getting the 'course' list box field          
            Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
            ' list field item Collection
            Dim listItemCollection As PdfLoadedListFieldItemCollection = listField.Items
            listItemCollection(0).Bounds = New RectangleF(0, 0, 20, 30)
            doc.Save("LoadedForm.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedListFieldItemCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListFieldItem"/> at the specified index.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Getting the 'course' list box field          
            PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;       
            // List field item Collection
            PdfLoadedListFieldItemCollection listItemCollection = listField.Items;
            // Reading the first item in the list items collection
            PdfLoadedListFieldItem listItem = listItemCollection[0];
            // Relocate the list item
            listItem.Location = new PointF(10, 20);
            doc.Save("LoadedForm.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Getting the 'course' list box field          
            Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
            ' List field item Collection
            Dim listItemCollection As PdfLoadedListFieldItemCollection = listField.Items
            ' Reading the first item in the list items collection
            Dim listItem As PdfLoadedListFieldItem = listItemCollection(0)
            ' Relocate the list item
            listItem.Location = New PointF(10, 20)
            doc.Save("LoadedForm.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class  
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedListItem">
            <summary>
            Represents loaded list item.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the list box field          
            PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;
            // Get the selected list item
            PdfLoadedListItem listItem = listField.SelectedItem;
            listItem.Text = "NewText";
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the list box field          
            Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
            ' Get the selected list item
            Dim listItem As PdfLoadedListItem = listField.SelectedItem
            listItem.Text = "NewText"
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedListItem.m_text">
            <summary>
            Text of the item.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedListItem.m_value">
            <summary>
            Value of the item. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedListItem.m_field">
            <summary>
            Field wich item belons to. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedListItem.m_crossTable">
            <summary>
            CrossTable of document.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListItem.#ctor(System.String,System.String,Syncfusion.Pdf.Parsing.PdfLoadedChoiceField,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListItem"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="value">The value.</param>
            <param name="field">The field.</param>
            <param name="cTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListItem"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="value">The value.</param>
            <example>
            <code lang="C#">
              // Load the list box field    
            PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;
            // Get the selected list item
            PdfLoadedListItem listItem = new PdfLoadedListItem("C#.Net",".NET Course");
            // Add the list item in list field
            listField.Values.Add(listItem);
            </code>
            <code lang="VB">
              ' Load the list box field
            Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
            ' Get the selected list item
            Dim listItem As PdfLoadedListItem = New PdfLoadedListItem("C#.Net",".NET Course")
            ' Add the list item in list field
            listField.Values.Add(listItem)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListItem.SetText(System.String)">
            <summary>
            Sets the text of the item.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListItem.SetValue(System.String)">
            <summary>
            Sets item value.
            </summary>
            <param name="value">The item value.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Parsing.PdfLoadedListItem.Text" -->
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedListItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>A string value representing the value of the item. </value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the list box field          
            PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;
            // Get the selected list item
            PdfLoadedListItem listItem = listField.SelectedItem;
            listItem.Value = "C#.NET";
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the list box field          
            Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
            ' Get the selected list item
            Dim listItem As PdfLoadedListItem = listField.SelectedItem
            listItem.Value = "C#.NET"
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedListItemCollection">
            <summary>
            Represents a collection of list box field items.
            </summary>   
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Getting the 'course' list box field          
            PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;       
            // List field item Collection
            PdfLoadedListItemCollection listItemCollection = listField.Values;
            // Create a new list item
            PdfLoadedListItem listItem = new PdfLoadedListItem("Oracle", "Oracle");
            // Adding item in collection
            listItemCollection.Add(listItem);            
            doc.Save("LoadedForm.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Getting the 'course' list box field          
            Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
            ' List field item Collection
            Dim listItemCollection As PdfLoadedListItemCollection = listField.Values
            ' Create a new list item
            Dim listItem As PdfLoadedListItem = New PdfLoadedListItem("Oracle", "Oracle")
            ' Adding item in collection
            listItemCollection.Add(listItem)
            doc.Save("LoadedForm.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedListItemCollection.m_field">
            <summary>
            Parents field.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListItemCollection.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedChoiceField)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListItemCollection"/> class.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListItemCollection.Add(Syncfusion.Pdf.Parsing.PdfLoadedListItem)">
            <summary>
            Inserts an item at the end of the collection. 
            </summary>
            <param name="item">a <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListItem"/>object to be added to collection.</param>
            <returns>The index of item.</returns>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Getting the 'course' list box field          
            PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;       
            // List field item Collection
            PdfLoadedListItemCollection listItemCollection = listField.Values;
            // Create a new list item
            PdfLoadedListItem listItem = new PdfLoadedListItem("Oracle", "Oracle");
            // Adding item in collection
            listItemCollection.Add(listItem);            
            doc.Save("LoadedForm.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Getting the 'course' list box field          
            Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
            ' List field item Collection
            Dim listItemCollection As PdfLoadedListItemCollection = listField.Values
            ' Create a new list item
            Dim listItem As PdfLoadedListItem = New PdfLoadedListItem("Oracle", "Oracle")
            ' Adding item in collection
            listItemCollection.Add(listItem)
            doc.Save("LoadedForm.pdf")
            </code>
            </example>        
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListItemCollection.AddItem(Syncfusion.Pdf.Parsing.PdfLoadedListItem)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
            <returns>The index of added item.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListItemCollection.Insert(System.Int32,Syncfusion.Pdf.Parsing.PdfLoadedListItem)">
            <summary>
            Inserts the list item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");         
            // Getting the 'course' list box field
            PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;
            // List field item Collection
            PdfLoadedListItemCollection listItemCollection = listField.Values;
            // Getting the first item from the list item collection
            PdfLoadedListItem listItem = listItemCollection[0];
            // Insert the item at first index
            listItemCollection.Insert(0, listItem);   
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Getting the 'course' list box field
            Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
            ' List field item Collection
            Dim listItemCollection As PdfLoadedListItemCollection = listField.Values
            ' Getting the first item from the list item collection
            Dim listItem As PdfLoadedListItem = listItemCollection(0)
            ' Insert the item at first index
            listItemCollection.Insert(0, listItem)
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <remarks>Throws IndexOutOfRange exception if the index is out of bounds.</remarks>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");         
            // Getting the 'course' list box field
            PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;
            // List field item Collection
            PdfLoadedListItemCollection listItemCollection = listField.Values;
            // Remove the first item
            listItemCollection.RemoveAt(0);
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Getting the 'course' list box field
            Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
            ' List field item Collection
            Dim listItemCollection As PdfLoadedListItemCollection = listField.Values
            ' Remove the first item
            listItemCollection.RemoveAt(0)
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListItemCollection.Clear">
            <summary>
            Clears the item collection.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");         
            // Getting the 'course' list box field
            PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;
            // List field item Collection
            PdfLoadedListItemCollection listItemCollection = listField.Values;
            // Clears the collection
            listItemCollection.Clear();
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Getting the 'course' list box field
            Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
            ' List field item Collection
            Dim listItemCollection As PdfLoadedListItemCollection = listField.Values
            ' Clears the collection
            listItemCollection.Clear()
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListItemCollection.GetItems">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedListItemCollection.GetArray(Syncfusion.Pdf.Parsing.PdfLoadedListItem)">
            <summary>
            Gets the array.
            </summary>
            <param name="item">The item.</param>
            <returns>The array of item value and text.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedListItemCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem"/> at the specified index.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");         
            // Getting the 'course' list box field
            PdfLoadedListBoxField listField = doc.Form.Fields["Course"] as PdfLoadedListBoxField;
            // List field item Collection
            PdfLoadedListItemCollection listItemCollection = listField.Values;
            // Getting the first item from the list item collection
            PdfLoadedListItem listItem = listItemCollection[0];
            listItem.Value = "C#.NET";
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Getting the 'course' list box field
            Dim listField As PdfLoadedListBoxField = TryCast(doc.Form.Fields("Course"), PdfLoadedListBoxField)
            ' List field item Collection
            Dim listItemCollection As PdfLoadedListItemCollection = listField.Values
            ' Getting the first item from the list item collection
            Dim listItem As PdfLoadedListItem = listItemCollection(0)
            listItem.Value = "C#.NET"
            doc.Save("Form.pdf")
            </code>
            </example>        
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedListBoxField"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItemCollection">
            <summary>
            Represents collection of radio box group items.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Getting the 'Gender' radio button field          
            PdfLoadedRadioButtonListField radiobuttonField = doc.Form.Fields["Gender"] as PdfLoadedRadioButtonListField;
            // Radio button field collection
            PdfLoadedRadioButtonItemCollection radiobuttonFieldCollection =  radiobuttonField.Items;
            // Radio button field item
            PdfLoadedRadioButtonItem radiobuttonItem = radiobuttonFieldCollection[0];
            // Selected the item 
            radiobuttonItem.Checked = true;         
            doc.Save("LoadedForm.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Getting the  'Gender' radio button field         
            Dim radiobuttonField As PdfLoadedRadioButtonListField = TryCast(doc.Form.Fields("Gender"), PdfLoadedRadioButtonListField)
            ' Radio button field collection
            Dim radiobuttonFieldCollection As PdfLoadedRadioButtonItemCollection = radiobuttonField.Items
            ' Radio button field item
            Dim radiobuttonItem As PdfLoadedRadioButtonItem = radiobuttonFieldCollection(0)
            ' Selected the item 
            radiobuttonItem.Checked = True
            doc.Save("LoadedForm.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateItemCollection"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItemCollection.IndexOf(Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem)">
            <summary>
            Index of the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The index of specified item</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItemCollection.Add(Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItemCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem"/> at the specified index.
            </summary>
            <returns>Returns <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem"/> object at the specified index.</returns>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Getting the 'Gender' radio button field          
            PdfLoadedRadioButtonListField radiobuttonField = doc.Form.Fields["Gender"] as PdfLoadedRadioButtonListField;
            // Radio button field collection
            PdfLoadedRadioButtonItemCollection radiobuttonFieldCollection =  radiobuttonField.Items;
            // Radio button field item
            PdfLoadedRadioButtonItem radiobuttonItem = radiobuttonFieldCollection[0];
            // Selected the item 
            radiobuttonItem.Checked = true;         
            doc.Save("LoadedForm.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Getting the  'Gender' radio button field         
            Dim radiobuttonField As PdfLoadedRadioButtonListField = TryCast(doc.Form.Fields("Gender"), PdfLoadedRadioButtonListField)
            ' Radio button field collection
            Dim radiobuttonFieldCollection As PdfLoadedRadioButtonItemCollection = radiobuttonField.Items
            ' Radio button field item
            Dim radiobuttonItem As PdfLoadedRadioButtonItem = radiobuttonFieldCollection(0)
            ' Selected the item 
            radiobuttonItem.Checked = True
            doc.Save("LoadedForm.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateItemCollection"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem">
            <summary>
            Represents radio button field of an existing PDF document`s form.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Getting the 'Gender' radio button field      
            PdfLoadedRadioButtonListField radiobuttonField = doc.Form.Fields["Gender"] as PdfLoadedRadioButtonListField;
            // Radio button field collection
            PdfLoadedRadioButtonItemCollection radiobuttonFieldCollection =  radiobuttonField.Items;
            // Radio button field item
            PdfLoadedRadioButtonItem radiobuttonItem = radiobuttonFieldCollection[0];    
            radiobuttonItem.Checked = true;         
            doc.Save("LoadedForm.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Getting the 'Gender' radio button field            
            Dim radiobuttonField As PdfLoadedRadioButtonListField = TryCast(doc.Form.Fields("Gender"), PdfLoadedRadioButtonListField)
            ' Radio button field collection
            Dim radiobuttonFieldCollection As PdfLoadedRadioButtonItemCollection = radiobuttonField.Items
            ' Radio button field item
            Dim radiobuttonItem As PdfLoadedRadioButtonItem = radiobuttonFieldCollection(0)    
            radiobuttonItem.Checked = True
            doc.Save("LoadedForm.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateItem"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedStyledField,System.Int32,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="index">The index.</param>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem.GetItemValue">
            <summary>
            Gets the item value.
            </summary>
            <returns>The value of the item.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem.SetItemValue(System.String)">
            <summary>
            Stes item value.
            </summary>
            <param name="value">The item value.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value of the radio button item.</value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Getting the 'Gender' radio button field   
            PdfLoadedRadioButtonListField radiobuttonField = doc.Form.Fields["Gender"] as PdfLoadedRadioButtonListField;
            // Radio button field collection
            PdfLoadedRadioButtonItemCollection radiobuttonFieldCollection = radiobuttonField.Items;
            // Radio button field item
            PdfLoadedRadioButtonItem radiobuttonItem = radiobuttonFieldCollection[0];
            // Set the value of the item 
            radiobuttonItem.Value = "Male";
            doc.Save("Form.pdf");    
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Getting the 'Gender' radio button field   
            Dim radiobuttonField As PdfLoadedRadioButtonListField = TryCast(doc.Form.Fields("Gender"), PdfLoadedRadioButtonListField)
            ' Radio button field collection
            Dim radiobuttonFieldCollection As PdfLoadedRadioButtonItemCollection = radiobuttonField.Items
            ' Radio button field item
            Dim radiobuttonItem As PdfLoadedRadioButtonItem = radiobuttonFieldCollection(0)
            ' Set the value of the item 
            radiobuttonItem.Value = "Male"
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem"/> is selected.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Getting the 'Gender' radio button field   
            PdfLoadedRadioButtonListField radiobuttonField = doc.Form.Fields["Gender"] as PdfLoadedRadioButtonListField;
            // Radio button field collection
            PdfLoadedRadioButtonItemCollection radiobuttonFieldCollection = radiobuttonField.Items;
            // Radio button field item
            PdfLoadedRadioButtonItem radiobuttonItem = radiobuttonFieldCollection[0];
            // Set the first item as selected item
            radiobuttonItem.Selected = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Getting the 'Gender' radio button field   
            Dim radiobuttonField As PdfLoadedRadioButtonListField = TryCast(doc.Form.Fields("Gender"), PdfLoadedRadioButtonListField)
            ' Radio button field collection
            Dim radiobuttonFieldCollection As PdfLoadedRadioButtonItemCollection = radiobuttonField.Items
            ' Radio button field item
            Dim radiobuttonItem As PdfLoadedRadioButtonItem = radiobuttonFieldCollection(0)
            ' Set the first item as selected item
            radiobuttonItem.Selected = True
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem.Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField">
            <summary>
            Represents radio button field of an existing PDF document`s form.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the 'Gender' radio button field         
            PdfLoadedRadioButtonListField radiobuttonField = doc.Form.Fields["Gender"] as PdfLoadedRadioButtonListField;
            // Flatten the radio button field
            radiobuttonField.Flatten = true;
            doc.Save("LoadedForm.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the 'Gender' radio button field         
            Dim radiobuttonField As PdfLoadedRadioButtonListField = TryCast(doc.Form.Fields("Gender"), PdfLoadedRadioButtonListField)
            ' Flatten the radio button field
            radiobuttonField.Flatten = True
            doc.Save("LoadedForm.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStateField"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField.CHECK_SYMBOL">
            <summary>
            Symbol for check state.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField.GetItem(System.Int32,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Gets the item.
            </summary>
            <param name="index">The index.</param>
            <param name="itemDictionary">The item dictionary.</param>
            <returns>The proper state item.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField.GetSelectedIndex">
            <summary>
            Gets the index of the selected.
            </summary>
            <returns>The index of first selected item.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField.SetSelectedIndex(System.Int32)">
            <summary>
            Sets selected index of the radio button.
            </summary>
            <param name="value">Selected index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField.SetSelectedValue(System.String)">
            <summary>
            Sets selected value.
            </summary>
            <param name="value">Selected value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField.Clone(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.PdfPage)">
            <summary>
            Creates a copy of PdfLoadedRadioButtonListField.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField.CreateLoadedItem(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Creates a copy of PdfLoadedRadioButtonItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField.Items">
            <summary>
            Gets the collection of radio button items.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItemCollection"/> that represents the items within the list.</value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Getting the 'Gender' radio button field          
            PdfLoadedRadioButtonListField radiobuttonField = doc.Form.Fields["Gender"] as PdfLoadedRadioButtonListField;
            // Radio button field collection
            PdfLoadedRadioButtonItemCollection radiobuttonFieldCollection =  radiobuttonField.Items;
            // Radio button field item
            PdfLoadedRadioButtonItem radiobuttonItem = radiobuttonFieldCollection[0];
            // Selected the item 
            radiobuttonItem.Checked = true;         
            doc.Save("LoadedForm.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Getting the  'Gender' radio button field         
            Dim radiobuttonField As PdfLoadedRadioButtonListField = TryCast(doc.Form.Fields("Gender"), PdfLoadedRadioButtonListField)
            ' Radio button field collection
            Dim radiobuttonFieldCollection As PdfLoadedRadioButtonItemCollection = radiobuttonField.Items
            ' Radio button field item
            Dim radiobuttonItem As PdfLoadedRadioButtonItem = radiobuttonFieldCollection(0)
            ' Selected the item 
            radiobuttonItem.Checked = True
            doc.Save("LoadedForm.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonItem"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item in the list.
            </summary>
            <value>The lowest ordinal index of the selected items in the list. The default is -1, which indicates that nothing is selected. </value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the 'Gender' radio button field   
            PdfLoadedRadioButtonListField radiobuttonField = doc.Form.Fields["Gender"] as PdfLoadedRadioButtonListField;
            // Set the selected index as 1
            radiobuttonField.SelectedIndex = 1;
            // Save the document to a disk
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the 'Gender' radio button field   
            Dim radiobuttonField As PdfLoadedRadioButtonListField = TryCast(doc.Form.Fields("Gender"), PdfLoadedRadioButtonListField)
            ' Set the selected index as 1
            radiobuttonField.SelectedIndex = 1
            ' Save the document to a disk
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField.SelectedValue">
            <summary>
            Gets or sets the value of the first selected item in the list. 
            </summary>
            <value>A string value specifying the value of the first selected item, null (Nothing in VB.NET) if there is no selected item.</value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the 'Gender' radio button field   
            PdfLoadedRadioButtonListField radiobuttonField = doc.Form.Fields["Gender"] as PdfLoadedRadioButtonListField;
            // Set the selected index as 1
            radiobuttonField.SelectedValue = "Female";
            // Save the document to a disk
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the 'Gender' radio button field   
            Dim radiobuttonField As PdfLoadedRadioButtonListField = TryCast(doc.Form.Fields("Gender"), PdfLoadedRadioButtonListField)
            ' Set the selected index as 1
            radiobuttonField.SelectedValue = "Female"
            ' Save the document to a disk
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField.SelectedItem">
            <summary>
            Gets the selected item.
            </summary>
            <value>Return the item as PdfLoadedRadioButtonItem class</value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the 'Gender' radio button field   
            PdfLoadedRadioButtonListField radiobuttonField = doc.Form.Fields["Gender"] as PdfLoadedRadioButtonListField;
            // Read the selected item of the radio button
            PdfLoadedRadioButtonItem radiobuttonItem = radiobuttonField.SelectedItem;
            // Uncheck the selected item
            radiobuttonItem.Checked = false;
            // Save the document to a disk
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the 'Gender' radio button field   
            Dim radiobuttonField As PdfLoadedRadioButtonListField = TryCast(doc.Form.Fields("Gender"), PdfLoadedRadioButtonListField)
            ' Read the selected item of the radio button
            Dim radiobuttonItem As PdfLoadedRadioButtonItem = radiobuttonField.SelectedItem
            ' Uncheck the selected item
            radiobuttonItem.Checked = False
            ' Save the document to a disk
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField.Value">
            <summary>
            Gets or sets the value of specified item.
            </summary>
            <value>A string value representing the value of the item.</value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the 'Gender' radio button field   
            PdfLoadedRadioButtonListField radiobuttonField = doc.Form.Fields["Gender"] as PdfLoadedRadioButtonListField;
            // Set the radio box value as Male
            radiobuttonField.Value = "Male";
            // Save the document to a disk
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the 'Gender' radio button field   
            Dim radiobuttonField As PdfLoadedRadioButtonListField = TryCast(doc.Form.Fields("Gender"), PdfLoadedRadioButtonListField)
            ' Set the radio box value as Male
            radiobuttonField.Value = "Male"
            ' Save the document to a disk
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedRadioButtonListField"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedTexBoxItem">
            <summary>
            Represents an item in a text box field collection.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the text box field
            PdfLoadedTextBoxField textBoxField = doc.Form.Fields["EmployeeName"] as PdfLoadedTextBoxField;
            // Read the first text box field item from the collection
            PdfLoadedTexBoxItem textBoxItem = textBoxField.Items[0];
            textBoxItem.Location = new PointF(10, 20);
            doc.Save("LoadedForm.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the text box field
            Dim textBoxField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields("EmployeeName"), PdfLoadedTextBoxField)
            ' Read the first text box field item from the collection
            Dim textBoxItem As PdfLoadedTexBoxItem = textBoxField.Items(0)
            textBoxItem.Location = New PointF(10, 20)
            doc.Save("LoadedForm.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedFieldItem"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedTexBoxItem.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedStyledField,System.Int32,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedTexBoxItem"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="index">The index.</param>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField">
            <summary>
            Represents the text box field of an existing PDF document`s form.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the text box field
            PdfLoadedTextBoxField ldField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            RectangleF newBounds = new RectangleF(100, 100, 50, 50);
            ldField.Bounds = newBounds;
            ldField.SpellCheck = true;
            ldField.Text = "New text of the field.";
            ldField.Password = false;
            ldField.BorderStyle = PdfBorderStyle.Dashed;
            doc.Save("LoadedForm.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the text box field
            Dim ldField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            Dim newBounds As RectangleF = New RectangleF(100, 100, 50, 50)
            ldField.Bounds = newBounds
            ldField.SpellCheck = True
            ldField.Text = "New text of the field."
            ldField.Password = False
            ldField.BorderStyle = PdfBorderStyle.Dashed
            doc.Save("LoadedForm.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedStyledField"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.m_passwordValue">
            <summary>
            The password chrackter.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.m_items">
            <summary>
            Collection of textbox items.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.m_foreColor">
            <summary>
            Internal variable to stroe field`s fore color.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="crossTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.SetBackColor(Syncfusion.Pdf.Graphics.PdfColor)">
            <summary>
            Set the back color of the Field.
            </summary>
            <param name="value">PdfColor Value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.HighlightModeToString(Syncfusion.Pdf.Interactive.PdfHighlightMode)">
            <summary>
            Converts the HighlightMode as String value.
            </summary>
            <param name="m_highlightingMode">PdfHighlightMode value.</param>
            <returns>Returns the PdfHighlightMode as string value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.GetHighlightModeFromString(Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Converts the given string value as PdfHighlightMode.
            </summary>
            <param name="hightlightMode">Given string value.</param>
            <returns>Returns the PdfHighlightMode values.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.BeginSave">
            <summary>
            Begins the save.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.Clone(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.PdfPage)">
            <summary>
            Creates a copy of PdfLoadedTextBoxField.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.CreateLoadedItem(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Creates a copy of PdfLoadedTextBoxItem.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.ApplyAppearance(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Parsing.PdfLoadedFieldItem)">
            <summary>
            Applies the appearance.
            </summary>
            <param name="widget">The widget.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.Draw">
            <summary>
            Draws this instance if it is flatten.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.DrawTextBox(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Parsing.PdfLoadedFieldItem)">
            <summary>
            Draws the text box.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.IsRTLText(System.UInt16[])">
            <summary>
            Checks if the text contains RTL character or number.
            </summary>
            <param name="characterCodes">Array of symbols.</param>
            <returns>True if the text contans RTL character or number.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.GetFontHeight(Syncfusion.Pdf.Graphics.PdfFontFamily)">
            <summary>
            Gets the height of the font.
            </summary>
            <param name="family"></param>
            <returns>The calculated size of font.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.BackColor">
            <summary>
            Get or Set the back color of the field
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Graphics.PdfColor"/> object specifying the background color of field. </value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the text box field.
            PdfLoadedTextBoxField ldField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            ldField.BackColor = new PdfColor(Color.Transparent);
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the text box field
            Dim ldField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            ldField.BackColor = New PdfColor(Color.Transparent)
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfColor"/> Class    
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.ForeColor">
            <summary>
            Gets or Set the fore color of the field.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Graphics.PdfColor"/> object specifying the background color of field.</value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the text box field.
            PdfLoadedTextBoxField ldField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            ldField.ForeColor = new PdfColor(Color.Red);
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the text box field.
            Dim ldField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            ldField.ForeColor = New PdfColor(Color.Red)
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfColor"/> Class    
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.TextAlignment">
            <summary>
            Get or Set the text alignment in a text box.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Graphics.PdfTextAlignment"/> enumeration member specifying the text alignment in a text box.</value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the text box field.
            PdfLoadedTextBoxField ldField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            ldField.TextAlignment = PdfTextAlignment.Justify;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the text box field.
            Dim ldField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            ldField.TextAlignment = PdfTextAlignment.Justify
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfTextAlignment"/> Class    
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.HighlightMode">
            <summary>
            Get or Set the HighLightMode of the Field.
            </summary>
            <value>A <see cref="T:Syncfusion.Pdf.Interactive.PdfHighlightMode"/> enumeration member specifying the highlight mode in a text box.</value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the text box field
            PdfLoadedTextBoxField ldField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            ldField.HighlightMode = PdfHighlightMode.Push;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the text box field
            Dim ldField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            ldField.HighlightMode = PdfHighlightMode.Push
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfHighlightMode"/> Class    
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.Text">
            <summary>
            Gets or Set value of the text box field.
            </summary>
            <value>A string value representing the value of the item. </value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the text box field
            PdfLoadedTextBoxField ldField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            ldField.Text = "New Text";
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the text box field
            Dim ldField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            ldField.Text = "New Text"
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class            
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.DefaultValue" -->
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.SpellCheck">
            <summary>
            Gets or sets a value indicating whether to check spelling.
            </summary>
            <value>True if the field content should be checked for spelling erorrs, false otherwise. Default is true.</value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the text box field
            PdfLoadedTextBoxField ldField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            ldField.SpellCheck = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the text box field
            Dim ldField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            ldField.SpellCheck = True
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.InsertSpaces">
            <summary>
            Meaningful only if the MaxLength property is set and the Multiline, Password properties are false.
            If set, the field is automatically divided into as many equally spaced positions, or combs, 
            as the value of MaxLength, and the text is laid out into those combs.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the text box field
            PdfLoadedTextBoxField ldField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            ldField.InsertSpaces = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the text box field
            Dim ldField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            ldField.InsertSpaces = True
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.Multiline">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfTextBoxField"/> is multiline.
            </summary>       
            <value>True if the field is multiline, false otherwise. Default is false.</value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the text box field
            PdfLoadedTextBoxField ldField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            ldField.Multiline = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the text box field
            Dim ldField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            ldField.Multiline = True
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.Password">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfTextBoxField"/> is password field.
            </summary>
            <value>True if the field is a password field, false otherwise. Default is false.</value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the text box field
            PdfLoadedTextBoxField ldField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            ldField.Password = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the text box field
            Dim ldField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            ldField.Password = True
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.Scrollable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Pdf.Interactive.PdfTextBoxField"/> is scrollable.
            </summary>
            <value>True if the field content can be scrolled, false otherwise. Default is true.</value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the text box field
            PdfLoadedTextBoxField ldField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            ldField.Scrollable = true;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the text box field
            Dim ldField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            ldField.Scrollable = True
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.MaxLength">
            <summary>
            Gets or sets the maximum length of the field, in characters.
            </summary>
            <value>A positive integer value specifying the maximum number of characters that can be entered in the text edit field.</value>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the text box field
            PdfLoadedTextBoxField ldField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            ldField.MaxLength = 10;
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the text box field
            Dim ldField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            ldField.MaxLength = 10
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField.Items">
            <summary>
            Gets the collection of text box field items. 
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the text box field
            PdfLoadedTextBoxField textboxField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            // TextBox Item collection
            PdfLoadedTextBoxItemCollection textboxFieldCollection = textboxField.Items;
            textboxFieldCollection[0].Location = new PointF(10, 20);
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the text box field
            Dim textboxField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            ' TextBox Item collection
            Dim textboxFieldCollection As PdfLoadedTextBoxItemCollection = textboxField.Items
            textboxFieldCollection(0).Location = New PointF(10, 20)
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class 
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxItemCollection">
            <summary>
            Represents collection of text box group items.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the text box field item
            PdfLoadedTextBoxField textboxField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            // TextBox Item collection
            PdfLoadedTextBoxItemCollection textboxFieldCollection = textboxField.Items;
            textboxFieldCollection[0].Location = new PointF(10, 20);
            doc.Save("LoadedForm.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the text box field item
            Dim textboxField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            ' TextBox Item collection
            Dim textboxFieldCollection As PdfLoadedTextBoxItemCollection = textboxField.Items
            textboxFieldCollection(0).Location = New PointF(10, 20)
            doc.Save("LoadedForm.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxItemCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedTexBoxItem"/> at the specified index.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceForm.pdf");
            // Read the text box field item
            PdfLoadedTextBoxField textboxField = doc.Form.Fields[0] as PdfLoadedTextBoxField;
            // Read the text box item collection
            PdfLoadedTextBoxItemCollection textboxFieldCollection = textboxField.Items;
            PdfLoadedTexBoxItem textboxItem = textboxFieldCollection[0];
            textboxItem.Location = new PointF(10, 20);
            doc.Save("Form.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Read the text box field item
            Dim textboxField As PdfLoadedTextBoxField = TryCast(doc.Form.Fields(0), PdfLoadedTextBoxField)
            ' Read the text box item collection
            Dim textboxFieldCollection As PdfLoadedTextBoxItemCollection = textboxField.Items
            Dim textboxItem As PdfLoadedTexBoxItem = textboxFieldCollection(0)
            textboxItem.Location = New PointF(10, 20)
            doc.Save("Form.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxField"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedTextBoxItemCollection"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedFieldTypes.PushButton">
            <summary>
            Identify push button field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedFieldTypes.CheckBox">
            <summary>
            Identify check box field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedFieldTypes.RadioButton">
            <summary>
            Identify radio button field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedFieldTypes.TextField">
            <summary>
            Identify text field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedFieldTypes.ListBox">
            <summary>
            Identify listbox field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedFieldTypes.ComboBox">
            <summary>
            Identify combobox field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedFieldTypes.SignatureField">
            <summary>
            Identify signature field.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedFieldTypes.Null">
            <summary>
            Identify that field has no type.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.DataFormat">
            <summary>
            Specifies the format of Export or Import data.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument ldoc = new PdfLoadedDocument("SourceForm.pdf");
            // Load the existing form
            PdfLoadedForm form = ldoc.Form;
            // Export the form data as XML file
            form.ExportData("Export.xml", DataFormat.Xml, "SourceForm.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim ldoc As PdfLoadedDocument = New PdfLoadedDocument("SourceForm.pdf")
            ' Load the existing form
            Dim form As PdfLoadedForm = ldoc.Form
            ' Export the form data as XML file
            form.ExportData("Export.xml", DataFormat.Xml, "SourceForm.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedForm"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class  
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.DataFormat.Xml">
            <summary>
            Specifies  XML file format
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.DataFormat.Fdf">
            <summary>
            Specifies  Forms Data Format file format
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.DataFormat.XFdf">
            <summary>
            Specifies  XFDF file format.
            </summary>    
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument">
            <summary>
            Represents a logic to handle existing PDF documents.
            </summary>
            <example>
            <code lang="C#">
            // Loads an existing document
            PdfLoadedDocument lDoc = new PdfLoadedDocument("sourceDoc.pdf");
            // Sets the PDF version as 1.6
            lDoc.FileStructure.Version = PdfVersion.Version1_6;
            lDoc.Save("Sample.pdf");
            </code>
            <code lang="VB">
            ' Loads an existing document
            Dim lDoc As PdfLoadedDocument = New PdfLoadedDocument("sourceDoc.pdf")
            ' Sets the PDF version as 1.6
            lDoc.FileStructure.Version = PdfVersion.Version1_6
            lDoc.Save("Sample.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocumentBase"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfFileStructure"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_password">
            <summary>
            String contain either user or owner password.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_stream">
            <summary>
            The stream with the document data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_bWasEncrypted">
            <summary>
            Indicates whether the document was encrypted.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_isPdfViewerDocumentDisable">
            <summary>
            Indicates whether the document was Pdf Viewer document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_form">
            <summary>
            Stores loaded form.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_pages">
            <summary>
            Collection of loaded and created pages.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_bookmark">
            <summary>
            Bookmarks of the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_bCloseStream">
            <summary>
            Indicates whether the stream should be closed on dispose.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_isDisposed">
            <summary>
            Indicates whether the object was disposed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_internalStream">
            <summary>
            Internal stream
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_colorSpace">
            <summary>
            Defines the color space of the document
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_attachments">
            <summary>
            Defines the attachment collection of the document
            </summary>		
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.password">
            <summary>
            String contain either user or owner password.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_pageLabel">
            <summary>
            Defines the Pdf Page Label.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_pageLabelCollection">
            <summary>
            Defined the Pdf Loaded Page Label Collection
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.isPageLabel">
            <summary>
            Check whether the Page Label Enabled or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_isXFAForm">
            <summary>
            Indicates is xfa form or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_fileName">
            <summary>
            Holds the file name for file saving operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_conformance">
            <summary>
            Holds the conformance level of the loaded document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.isLinearized">
            <summary>
            Check whether the document is linearized or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.m_portfolio">
            <summary>
            Private variable to store the pdf portfolio
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLoadedDocument"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLoadedDocument"/> class.
            </summary>
            <param name="file">The byte array with the file content.</param>
            <example>
            <code lang="C#">
            Stream file2 = new FileStream("sample.pdf", FileMode.Open, FileAccess.Read, FileShare.Read);
            // Create a byte array of file stream length  
            byte[] pdfData = new byte[file2.Length];   
            //Read block of bytes from stream into the byte array   
            file2.Read(pdfData,0,System.Convert.ToInt32(pdfData.Length));
            // Load the byte array 
            PdfLoadedDocument doc = new PdfLoadedDocument(pdfData);
            doc.Save("Samplepdf.pdf");
            </code>
            <code lang="VB">
            Dim file2 As Stream = New FileStream("sample.pdf", FileMode.Open, FileAccess.Read, FileShare.Read)
            ' Create a byte array of file stream length  
            Dim pdfData() As Byte = New Byte(file2.Length){}
            'Read block of bytes From stream Into the Byte array 
            file2.Read(pdfData,0,System.Convert.ToInt32(pdfData.Length))
            ' Load the byte array 
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument(pdfData)
            doc.Save("Samplepdf.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLoadedDocument"/> class.
            </summary>
            <param name="file">The byte array with the file content.</param>
            <param name="password">The password (user or owner) of the encrypted document.</param>
            <example>
            <code lang="C#">
            // Load the byte array with password
            PdfLoadedDocument doc = new PdfLoadedDocument(pdfData, "password");
            doc.Save("Samplepdf.pdf");
            </code>
            <code lang="VB">
            ' Load the byte array with password
            PdfLoadedDocument doc = new PdfLoadedDocument(pdfData, "password")
            doc.Save("Samplepdf.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLoadedDocument"/> class.
            </summary>
            <param name="file">The stream with the file.</param>
            <example>
            <code lang="C#">
            Stream file2 = new FileStream("sample.pdf", FileMode.Open, FileAccess.Read, FileShare.Read);    
            // Load the stream
            PdfLoadedDocument doc = new PdfLoadedDocument(file2);
            doc.Save("Samplepdf.pdf");
            </code>
            <code lang="VB">
            Dim file2 As Stream = New FileStream("sample.pdf", FileMode.Open, FileAccess.Read, FileShare.Read)
            ' Load the stream
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument(file2)
            doc.Save("Samplepdf.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLoadedDocument"/> class.
            </summary>
            <param name="file">The stream with the file.</param>
            <param name="password">The password (user or owner) of the encrypted document.</param>
            <example>
            <code lang="C#">
            Stream file2 = new FileStream("sample.pdf", FileMode.Open, FileAccess.Read, FileShare.Read);    
            // Load the stream
            PdfLoadedDocument doc = new PdfLoadedDocument(file2, "password");
            doc.Save("Samplepdf.pdf");
            </code>
            <code lang="VB">
            Dim file2 As Stream = New FileStream("sample.pdf", FileMode.Open, FileAccess.Read, FileShare.Read)
            ' Load the stream
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument(file2, "password")
            doc.Save("Samplepdf.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CreateStream(System.String)">
            <summary>
            Creates the stream.
            </summary>
            <param name="filename">The filename.</param>
            <returns>The proper file stream.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CreateStream(System.Byte[])">
            <summary>
            Creates the stream.
            </summary>
            <param name="file">The file content.</param>
            <returns>The proper memory stream.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.OpenAsync(Windows.Storage.StorageFile)">
            <summary>
            Opens an exiting Pdf document
            </summary>
            <param name="stFile">Storage File</param>
            <returns> Task returning true if open succeeded</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.OpenAsync(Windows.Storage.StorageFile,System.String)">
            <summary>
            Opens an exising Pdf document
            </summary>
            <param name="stFile">Storage File</param>
            <param name="password">Password for opening the document</param>
            <returns>Task returning true if open succeeded</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.OpenAsync(System.Byte[])">
            <summary>
            Opens an existing Pdf document
            </summary>
            <param name="bytes">Pdf document in bytes</param>
            <returns>Task returning true if open succeeded</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.OpenAsync(System.Byte[],System.String)">
            <summary>
            Opens an existing Pdf document
            </summary>
            <param name="bytes">Pdf document in bytes</param>
            <param name="password">Password for opening the document</param>
            <returns>Task returning true if open succeeded</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.OpenAsync(System.IO.Stream)">
            <summary>
            Opens an existing Pdf document
            </summary>
            <param name="stream">Pdf document stream</param>
            <returns>Task returning true if open succeeded</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.OpenAsync(System.IO.Stream,System.String)">
            <summary>
            Opens an existing Pdf document
            </summary>
            <param name="stream">Pdf document stream</param>
            <param name="password">Password for opening the document</param>
            <returns>Task returning true if open succeeded</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.SaveAsync(System.IO.Stream)">
            <summary>
            Saves the document to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.Save">
            <summary>
            Saves the modified document
            </summary>
            <returns>Task returning true if open succeeded</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CreateForm">
            <summary>
            Creates new form.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CreateAttachment">
            <summary>
            Creates the pdf attachment
            </summary>
            <returns>The root collection of attachment.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CreateBookmarkRoot">
            <summary>
            Creates the bookmark root.
            </summary>
            <returns>The root collection of bookmarks.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.Save(System.IO.Stream)">
            <summary>
            Saves the document to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.AddFields(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfPageBase,System.Collections.Generic.List{Syncfusion.Pdf.Interactive.PdfField})">
            <summary>
            Adds the fields connected to the page.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="newPage">The new page.</param>
            <param name="fields">The lost of the fields.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.ClonePage(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfPageBase,System.Collections.Generic.List{Syncfusion.Pdf.Primitives.PdfArray})">
            <summary>
            Clones pages and their resource dictionaries and adds them into the document.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="page">The page being cloned.</param>
            <param name="destinations">The destinations.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.GetForm">
            <summary>
            Gets the form.
            </summary>
            <returns>The proper PdfForm instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
            <example>
            <code lang="C#">
             //Load an existing document
             PdfLoadedDocument doc = new PdfLoadedDocument("SourceDoc.pdf");
             //Creates a new page and adds it as the last page of the document
             PdfPageBase page = doc.Pages.Add();            
             //Create Pdf graphics for the page
             PdfGraphics g = page.Graphics;                        
             //Create a solid brush
             PdfBrush brush = new PdfSolidBrush(Color.Black);          
             float fontSize = 8f;
             //Set the font
             PdfFont font = new PdfStandardFont(PdfFontFamily.TimesRoman, fontSize);            
             //Draw the text
             g.DrawString("HelloWorld", font, brush, new RectangleF(47.835f, 236.835f, 564.165f, 553.937f));           
             doc.Save("Dispose.pdf");
             // Dispose the object
             doc.Dispose();
            </code>
            <code lang="VB">
             'Load an existing document
             Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceDoc.pdf")
             'Create a page
             Dim page As PdfPageBase = doc.Pages.Add()
             'Create Pdf graphics for the page
             Dim g As PdfGraphics = page.Graphics
             'Create a solid brush
             Dim brush As PdfBrush = New PdfSolidBrush(Color.Black)
             Dim fontSize As Single = 8f
             'Set the font
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.TimesRoman, fontSize)
             'Draw the text
             g.DrawString("HelloWorld", font, brush, New RectangleF(47.835f, 236.835f, 564.165f, 553.937f))
             doc.Save("Dispose.pdf")
             ' Dispose the object
             doc.Dispose()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="dispose"><c>true</c> to release both managed
            and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.Close(System.Boolean)">
            <summary>
            Closes the document.
            </summary>
            <param name="completely">if set to <c>true</c> the document should
            close its stream as well.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.Clone">
            <summary>
            Creates a shallow copy of the current document.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document
            PdfLoadedDocument doc = new PdfLoadedDocument("SourceDoc.pdf");
            // Clone the existing the document
            PdfLoadedDocument doc1 = doc.Clone() as PdfLoadedDocument;
            // Save the cloned document to a disk
            doc1.Save("ClonedPDF.pdf");
            </code>
            <code lang="VB">
            'Load an existing document
            Dim doc As PdfLoadedDocument = New PdfLoadedDocument("SourceDoc.pdf")
            ' Clone the existing the document
            Dim doc1 As PdfLoadedDocument = TryCast(doc.Clone(), PdfLoadedDocument)
            ' Save the cloned document to a disk
            doc1.Save("ClonedPDF.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.PageLabel">
            <summary>
            Set the Page Label
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CreateBookmarkDestinationDictionary">
            <summary>
            Creates the bookmark destination dictionary.
            </summary>
            <returns>Hashtable that uses destination as a key and bookmark list as a value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.GetNamedDestination(Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Gets the named destination.
            </summary>
            <param name="name">The name of the destination.</param>
            <returns>The direct destination.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.GetNamedDestination(Syncfusion.Pdf.Primitives.PdfString)">
            <summary>
            Gets the named destination.
            </summary>
            <param name="name">The name of the destination.</param>
            <returns>A direct destination.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.ExtractDestination(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Extracts the destination from dictionary or returns the object.
            </summary>
            <param name="obj">The destination object.</param>
            <returns>The destination array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.LoadDocument(System.IO.Stream)">
            <summary>
            Loads the document.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CheckIfTagged">
            <summary>
            Check whether the loaded PDF is tagged one.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.ReadFileVersion">
            <summary>
            Gets the PDF version
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.GetCatalog">
            <summary>
            Gets the catalog of the loaded document.
            </summary>
            <returns>The PdfCatalog instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CheckNeedAppearence(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            To check the Need Appearance.
            </summary>
            <param name="dictionary">dictionary</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.ReadDocumentInfo">
            <summary>
            Read and parse the document's info dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CheckEncryption">
            <summary>
            Checks whether the PDF document was encrypted.
            </summary>
            <returns>True if the document was encrypted.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.GetFormDictionary">
            <summary>
            Gets the form dictionary.
            </summary>
            <returns>The form dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.GetAttachmentDictionary">
            <summary>
            Gets the form dictionary.
            </summary>
            <returns>The form dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.GetPortfolioDictionary">
            <summary>
            Get the collection dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.AppendDocument(Syncfusion.Pdf.IO.PdfWriter)">
            <summary>
            Appends the new document data.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CopyOldStream(Syncfusion.Pdf.IO.PdfWriter)">
            <summary>
            Copies the old stream.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.IsXFAForm">
            <summary>
            Gets or sets a value indicating whether this form is XFA Form or AcroForm.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.LoadedPageLabel">
            <summary>
            Get and Set the PdfPageLabel.
            </summary>
            <example>
            <code lang="C#">
            // Loads an existing document
            PdfLoadedDocument lDoc = new PdfLoadedDocument("sourceDoc.pdf");
            // Create page label with upper case roman letters and starts with 3
            PdfPageLabel label = new PdfPageLabel();
            label.NumberStyle = PdfNumberStyle.UpperRoman;
            label.StartNumber = 3;
            lDoc.LoadedPageLabel = label;
            lDoc.Save("PageLabel.pdf");
            </code>
            <code lang="VB">
            ' Loads an existing document
            Dim lDoc As PdfLoadedDocument = New PdfLoadedDocument("sourceDoc.pdf")
            ' Create page label with upper case roman letters and starts with 3
            Dim label As PdfPageLabel = New PdfPageLabel()
            label.NumberStyle = PdfNumberStyle.UpperRoman
            label.StartNumber = 3
            lDoc.LoadedPageLabel = label
            lDoc.Save("PageLabel.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.Password">
            <summary>
            Get and Set the Password.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.Attachments">
            <summary>
            Gets the collection of document attachments displayed on a PDF page.
            </summary>
            <example>
            <code lang="C#">
            // Loads an existing document
            PdfLoadedDocument lDoc = new PdfLoadedDocument("sourceDoc.pdf");
            // Gets the collection of attachments displayed on a PDF page.
            PdfAttachmentCollection collection = lDoc.Attachments;
            // Creating an attachment
            PdfAttachment attachment = new PdfAttachment("logo.jpeg");
            attachment.FileName = "Syncfusion Logo";
            // Adding attachments to an existing document
            collection.Add(attachment);
            lDoc.Save("Attachment.pdf");
            </code>
            <code lang="VB">
            ' Loads an existing document
            Dim lDoc As PdfLoadedDocument = New PdfLoadedDocument("sourceDoc.pdf")
            ' Gets the collection of attachments displayed on a PDF page.
            Dim collection As PdfAttachmentCollection = lDoc.Attachments
            ' Creating an attachment
            Dim attachment As PdfAttachment = New PdfAttachment("logo.jpeg")
            attachment.FileName = "Syncfusion Logo"
            ' Adding attachments to an existing document
            collection.Add(attachment)
            lDoc.Save("Attachment.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfAttachment"/> Class
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.PortfolioInformation">
            <summary>
            Get the portfolio from the document
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.ColorSpace">
            <summary>
            Gets or sets the color space for page that will be created.
            </summary>
            <remarks>This property has impact on the new created pages only.
            If a page was created it remains its colour space obliviously
            to this property changes.</remarks>
            <example>
            <code lang="C#">
            // Loads an existing document
            PdfLoadedDocument lDoc = new PdfLoadedDocument("sourceDoc.pdf");
            // Sets the documents colorSpace as GrayScale
            lDoc.ColorSpace = PdfColorSpace.GrayScale;
            lDoc.Save("ColorSpace.pdf");
            </code>
            <code lang="VB">
            ' Loads an existing document
            Dim lDoc As PdfLoadedDocument = New PdfLoadedDocument("sourceDoc.pdf")
            'Sets the documents colorSpace as GrayScale
            lDoc.ColorSpace = PdfColorSpace.GrayScale
            lDoc.Save("ColorSpace.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.Form">
            <summary>
            Gets the loaded form.
            </summary>
            <example>
            <code lang="C#">
            // Load the PDF form
            PdfLoadedDocument lDoc = new PdfLoadedDocument("SourceDoc.pdf");
            // Gets the form from the existing document
            PdfLoadedForm form = lDoc.Form;
            // Reading field element
            PdfLoadedTextBoxField textField = form[0] as PdfLoadedTextBoxField;
            textField.Text = "Syncfusion";
            lDoc.Save("LoadedForm.pdf");
            </code>
            <code lang="VB">
            ' Loads an existing document
            Dim lDoc As PdfLoadedDocument = New PdfLoadedDocument("SourceDoc.pdf")
            ' Gets the form from the existing document
            Dim form As PdfLoadedForm = lDoc.Form
            ' Reading field element
            Dim textField As PdfLoadedTextBoxField = TryCast(form(0), PdfLoadedTextBoxField)
            textField.Text = "Syncfusion"
            lDoc.Save("LoadedForm.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfForm"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.Pages">
            <summary>
            Gets the pages.
            </summary>
            <example>
            <code lang="C#">
            // Loads an existing document
            PdfLoadedDocument lDoc = new PdfLoadedDocument("SourceDoc.pdf");
            // Reading page collection from an existing document
            PdfLoadedPageCollection pageCollection = lDoc.Pages;
            //Creates a new page and adds it as the last page of the document 
            pageCollection.Add();            
            lDoc.Save("Pages.pdf");
            </code>
            <code lang="VB">
            ' Loads an existing document
            Dim lDoc As PdfLoadedDocument = New PdfLoadedDocument("SourceDoc.pdf")
            ' Reading page collection from an existing document
            Dim pageCollection As PdfLoadedPageCollection = lDoc.Pages
            ' Create a page 
            pageCollection.Add()
            lDoc.Save("Pages.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfLoadedPage"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.Bookmarks">
            <summary>
            Gets the bookmarks.
            </summary>
            <example>
            <code lang="C#">
            // Loads an existing document
            PdfLoadedDocument lDoc = new PdfLoadedDocument("sourceDoc.pdf");
            // Reading bookmark collection from an existing document
            PdfBookmarkBase bm =  lDoc.Bookmarks;
            // Creates a new bookmark
            PdfBookmark newbm = bm.Add("Chapter1");
            newbm.Color = Color.DarkBlue;
            newbm.TextStyle = PdfTextStyle.Bold;            
            newbm.Destination = new PdfDestination( lDoc.Pages[0]);
            lDoc.Save("BookMark.pdf");
            </code>
            <code lang="VB">
            ' Loads an existing document
            Dim lDoc As PdfLoadedDocument = New PdfLoadedDocument("sourceDoc.pdf")
            ' Reading bookmark collection from an existing document
            Dim bm As PdfBookmarkBase = lDoc.Bookmarks
            ' Creates a new bookmark
            Dim newbm As PdfBookmark = bm.Add("Chapter1")
            newbm.Color = Color.DarkBlue
            newbm.TextStyle = PdfTextStyle.Bold
            newbm.Destination = New PdfDestination(lDoc.Pages(0))
            lDoc.Save("BookMark.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Interactive.PdfBookmark"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.PageCount">
            <summary>
            Gets number of pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.IsLinearized">
            <summary>
            Used to check document is linearized or not
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.IsPortfolio">
            <summary>
            used to check the portfolio in the document
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.DocumentInformation">
            <summary>
            Gets or sets document's information and properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.IsPdfViewerDocumentDisable">
            <summary>
            Gets a value indicating whether the document was PDF viewer document.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfLoadedDocument.WasEncrypted">
            <summary>
            Gets a value indicating whether the document was encrypted.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CurrentNodeInfo">
            <summary>
            Stores info about current node.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CurrentNodeInfo.Kids">
            <summary>
            Internal variable used to store Kids values.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CurrentNodeInfo.Index">
            <summary>
             Internal variable used to store index value.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CurrentNodeInfo.#ctor(System.Collections.Generic.List{Syncfusion.Pdf.Interactive.PdfBookmarkBase})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CurrentNodeInfo"/> class.
            </summary>
            <param name="kids">The kids.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CurrentNodeInfo.#ctor(System.Collections.Generic.List{Syncfusion.Pdf.Interactive.PdfBookmarkBase},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Parsing.PdfLoadedDocument.CurrentNodeInfo"/> class.
            </summary>
            <param name="kids">The kids.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfStream"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.#ctor(Syncfusion.Pdf.Primitives.PdfDictionary,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:PdfStream"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.StreamToBytes(System.IO.Stream)">
            <summary>
            Gets bytes of the stream.
            </summary>
            <param name="stream">Stream to be converted.</param>
            <returns>Destination bytes.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.StreamToBytes(System.IO.Stream,System.Boolean)">
            <summary>
            Gets bytes of the stream.
            </summary>
            <param name="stream">Stream to be converted.</param>
            <param name="writeWholeStream">Indicates whether to write the whole stream.</param>
            <returns>Destination bytes.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.StreamToBigEndian(System.IO.Stream)">
            <summary>
            Converts a stream to bigendian format.
            </summary>
            <param name="stream">A stream containing data.</param>
            <returns>A stream in bigendian format.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.Write(System.Char)">
            <summary>
            Writes the specified symbol.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.Write(System.String)">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.Write(System.Byte[])">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.BlockEncryption">
            <summary>
            Blocks the encryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.Decompress">
            <summary>
            Decompresses this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.Clear">
            <summary>
            Cleares a stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.Save(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Saves the object using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.Decrypt(Syncfusion.Pdf.Security.PdfEncryptor,System.Int64)">
            <summary>
            Decrypts the data using the specified encryptor.
            </summary>
            <param name="encryptor">The encryptor.</param>
            <param name="currObjNumber">The current object number.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.Decompress(System.Byte[],System.String)">
            <summary>
            Decompresses the stream data.
            </summary>
            <param name="data">The data to decompress.</param>
            <param name="filter">The filter name.</param>
            <returns>Uncompressed byte array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.DetermineCompressor(System.String)">
            <summary>
            Returnes a compressor by its name.
            </summary>
            <param name="filter">The name of the compressor.</param>
            <returns>IPDFCompressor interface.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.PostProcess(System.Byte[],System.String)">
            <summary>
            Performs postprocessing of the data for the filter specified.
            </summary>
            <param name="data">The data to process.</param>
            <param name="filter">The filter.</param>
            <returns>Restored data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.NormalizeFilter">
            <summary>
            Normalizes the filter. If the filter array has only one element store that element
            instead of entire array.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.CompressContent(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Compresses the content if it's required.
            </summary>
            <param name="writer">The writer.</param>
            <returns>The compressed data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.Pdf3DStream.AddFilter(System.String)">
            <summary>
            Adds a filter to the filter array.
            </summary>
            <param name="filterName">Name of the filter.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.Pdf3DStream.Animation">
            <summary>
            Gets or sets the animation for this 3D artwork. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.Pdf3DStream.Content">
            <summary>
            Gets or sets content of this stream. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.Pdf3DStream.DefaultView">
            <summary>
            Gets or sets the default view.
            <remarks>If there are no views, this value is ignored. If the value is outside of the valid range, the first view is considered to be default.</remarks>
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.Pdf3DStream.OnInstantiate">
            <summary>
            Gets or sets the code to execute when the 3D artwork is instantiated. 
            <value>Javascript code to be executed when the 3D artwork is instantiated.</value>
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.Pdf3DStream.Views">
            <summary>
            Gets the list of views for this 3D artwork. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.Pdf3DStream.InternalStream">
            <summary>
            Gets the internal stream.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.Pdf3DStream.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <remarks>The modifications of the returned stream
            have no impact on the real data.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.Pdf3DStream.Compress">
            <summary>
            Gets or sets compression flag.
            </summary>
            <value><c>true</c> if compress; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.Pdf3DStream.WasEncrypted">
            <summary>
            Gets a value indicating whether the object was encrypted.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.Pdf3DStream.Decrypted">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Pdf.Primitives.PdfStream"/> is decrypted.
            </summary>
            <value><c>true</c> if decrypted; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfArray.m_elements">
            <summary>
            The elements of the PDF array.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfArray.m_bChanged">
            <summary>
            Indicates if the array was changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfArray.m_status">
            <summary>
            Shows the type of object status whether it is object registered or other status;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfArray.m_isSaving">
            <summary>
            Indicates if the object is currently in saving state or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfArray.m_index">
            <summary>
            Holds the index number of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfArray.m_position">
            <summary>
            Internal variable to store the position.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfArray.m_crossTable">
            <summary>
            Internal variable to hold PdfCrossTable reference.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfArray.m_clonedObject">
            <summary>
            Internal variable to hold cloned object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfArray"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.#ctor(Syncfusion.Pdf.Primitives.PdfArray)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfArray"/> class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:PdfArray"/> class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:PdfArray"/> class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:PdfArray"/> class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.FromRectangle(System.Drawing.RectangleF)">
            <summary>
            Creates filled PDF array from the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>The filled in PdfArray instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.FromRectangle(System.Drawing.Rectangle)">
            <summary>
            Creates filled PDF array from the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>The filled in PdfArray instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.Add(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Adds the specified element to the PDF array.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.Add(Syncfusion.Pdf.Primitives.IPdfPrimitive[])">
            <summary>
            Adds the specified list of elements to array.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.Contains(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Determines whether the specified element is within the array.
            </summary>
            <param name="element">The element.</param>
            <returns>
            	<c>true</c> if the array contains the specified element; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.Insert(System.Int32,Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Inserts the element into the array.
            </summary>
            <param name="index">Zero-based index of the element in the array.</param>
            <param name="element">The element that should be added to the array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.IndexOf(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Checks whether array contains the element.
            </summary>
            <param name="element">The element object.</param>
            <returns>Index of the element in the array if exists, -1 otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.Remove(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Removes element from the array.
            </summary>
            <param name="element">The element that should be removed from the array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.ReArrange(System.Int32[])">
            <summary>
            ReArrange the Nested page kids array
            </summary>
            <param name="orderArray">To specify the in which sequence the pages are arranged.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.RemoveAt(System.Int32)">
            <summary>
            Remove the element from the array by its index.
            </summary>
            <param name="index">Zero-based index of the element in the array.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.Clear">
            <summary>
            Cleares the array.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.ToRectangle">
            <summary>
            Converts an instance of the PdfArray to the RectangleF.
            </summary>
            <returns>The properly filled RectangleF structure.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.Save(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Saves the object using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see>
            object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.MarkChanged">
            <summary>
            Marks the object changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.FreezeChanges(System.Object)">
            <summary>
            Freezes the changes.
            </summary>
            <param name="freezer">The freezer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.GetNumber(System.Int32)">
            <summary>
            Gets the number from the array.
            </summary>
            <param name="index">The index.</param>
            <returns>The proper instance of the PdfNumber.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfArray.Clone(Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates a copy of PdfArray.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfArray.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:IPdfSavable"/> at the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfArray.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfArray.Status">
            <summary>
            Gets or sets the Status of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfArray.IsSaving">
            <summary>
            Gets or sets a value indicating whether this document is saving or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfArray.ObjectCollectionIndex">
            <summary>
            Gets or sets the integer value of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfArray.Position">
            <summary>
            Gets or sets the position of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfArray.CrossTable">
            <summary>
            Returns PdfCrossTable associated with the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfArray.ClonedObject">
            <summary>
            Returns cloned object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfArray.Changed">
            <summary>
            Gets a value indicating whether this <see cref="T:PdfArray"/> is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfBoolean.m_value">
            <summary>
            The value of the PDF boolean.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfBoolean.m_status">
            <summary>
            Shows the type of object status whether it is object registered or other status;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfBoolean.m_isSaving">
            <summary>
            Indicates if the object is currently in saving state or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfBoolean.m_index">
            <summary>
            Holds the index number of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfBoolean.m_position">
            <summary>
            Internal variable to store the position.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfBoolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfBoolean"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfBoolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfBoolean"/> class.
            </summary>
            <param name="value">if it is value, set to <c>true</c>.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfBoolean.Clone(Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates a copy of PdfBoolean.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfBoolean.Save(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Saves the object using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfBoolean.Value">
            <summary>
            Gets or sets the value of this instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfBoolean.Status">
            <summary>
            Gets or sets the Status of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfBoolean.IsSaving">
            <summary>
            Gets or sets a value indicating whether this document is saving or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfBoolean.ObjectCollectionIndex">
            <summary>
            Gets or sets the integer value of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfBoolean.Position">
            <summary>
            Gets or sets the position of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfBoolean.ClonedObject">
            <summary>
            Returns cloned object.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Primitives.PdfPair">
            <summary>
            Internal structure describing a pair of Key/Value.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs">
            <summary>
            Event arguments class.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs.m_writer">
            <summary>
            Pdf document writer.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs.#ctor(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Creates the new object.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventArgs.Writer">
            <summary>
            Gets a document that is currently generating.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Primitives.SavePdfPrimitiveEventHandler">
            <summary>
            Delegate type.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Primitives.PdfName">
            <summary>
            Implementation of the name object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfName.StringStartMark">
            <summary>
            Start symbol of the name object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfName.Delimiters">
            <summary>
            PDF special characters.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfName.m_replacements">
            <summary>
            The symbols that are not allowed in PDF names and should be replaced.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfName.m_value">
            <summary>
            Value of the element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfName.m_status">
            <summary>
            Shows the type of object status whether it is object registered or other status;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfName.m_isSaving">
            <summary>
            Indicates if the object is currently in saving state or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfName.m_index">
            <summary>
            Holds the index number of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfName.m_position">
            <summary>
            Internal variable to store the position.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfName"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.#ctor(System.String)">
            <summary>
            Creates object with defined string value.
            </summary>
            <param name="value">Value of the string.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.#ctor(System.Enum)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfName"/> class.
            </summary>
            <param name="value">The enum value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.NormalizeValue(System.String)">
            <summary>
            Makes the string more correct from the PDF's point of view.
            </summary>
            <param name="value">The string to normalize as PDF name.</param>
            <returns>The normalized string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.NormalizeValue(System.String,System.Char)">
            <summary>
            Replace a symbol with its code with the precedence of the sharp sign.
            </summary>
            <param name="value">The string which the symbol should be replaced in.</param>
            <param name="symbol">The symbol to replace.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.EscapeString(System.String)">
            <summary>
            Replace some characters with its escape sequences.
            </summary>
            <param name="str">The string value.</param>
            <returns>Modified string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.op_Explicit(System.String)~Syncfusion.Pdf.Primitives.PdfName">
            <summary>
            Explicit operator. Converts a string to a PdfName.
            </summary>
            <param name="str">The string representation of the name.</param>
            <returns>Properly initialized PdfName instance.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.ToString">
            <summary>
            Gets string representation of the primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.Equals(System.Object)">
            <summary>
            Compares two PDF names.
            </summary>
            <param name="obj">PDFName to compare</param>
            <returns>The result of comparison.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.GetHashCode">
            <summary>
            Returns a hash code for the name.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.op_Equality(Syncfusion.Pdf.Primitives.PdfName,System.Object)">
            <summary>
            Compares two names.
            </summary>
            <param name="name1">The name1.</param>
            <param name="name2">The name2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.op_Inequality(Syncfusion.Pdf.Primitives.PdfName,System.Object)">
            <summary>
            Determines if two names aren't equal.
            </summary>
            <param name="name1">The name1.</param>
            <param name="name2">The name2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.op_Equality(Syncfusion.Pdf.Primitives.PdfName,Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Determines if two names are equal.
            </summary>
            <param name="name1">The name1.</param>
            <param name="name2">The name2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.op_Inequality(Syncfusion.Pdf.Primitives.PdfName,Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Determines if two names aren't equal.
            </summary>
            <param name="name1">The name1.</param>
            <param name="name2">The name2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.Save(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Saves the name using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfName.Clone(Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates a copy of PdfName.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfName.Value">
            <summary>
            Gets or sets the value of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfName.Status">
            <summary>
            Gets or sets the Status of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfName.IsSaving">
            <summary>
            Gets or sets a value indicating whether this document is saving or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfName.ObjectCollectionIndex">
            <summary>
            Gets or sets the integer value of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfName.Position">
            <summary>
            Gets or sets the position of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfName.ClonedObject">
            <summary>
            Returns cloned object.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Primitives.PdfNull">
            <summary>
            Represent the PDF null object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfNull.m_status">
            <summary>
            Shows the type of object status whether it is object registered or other status;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfNull.m_isSaving">
            <summary>
            Indicates if the object is currently in saving state or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfNull.m_index">
            <summary>
            Holds the index number of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfNull.m_position">
            <summary>
            Internal variable to store the position.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfNull.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfNull"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfNull.Save(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Saves the object.
            </summary>
            <param name="writer">PDF writer.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfNull.Clone(Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates a copy of PdfNull.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfNull.Status">
            <summary>
            Gets or sets the Status of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfNull.IsSaving">
            <summary>
            Gets or sets a value indicating whether this document is saving or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfNull.ObjectCollectionIndex">
            <summary>
            Gets or sets the integer value of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfNull.Position">
            <summary>
            Gets or sets the position of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfNull.ClonedObject">
            <summary>
            Returns cloned object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfNumber.m_status">
            <summary>
            Shows the type of object status whether it is object registered or other status;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfNumber.m_isSaving">
            <summary>
            Indicates if the object is currently in saving state or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfNumber.m_index">
            <summary>
            Holds the index number of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfNumber.m_position">
            <summary>
            Internal variable to store the position.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfNumber.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfNumber"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfNumber.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfNumber"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfNumber.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfNumber"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfNumber.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfNumber"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfNumber.FloatToString(System.Single)">
            <summary>
            Converts a float value to a string using Adobe PDF rules.
            </summary>
            <param name="number">The number.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfNumber.Min(System.Single,System.Single,System.Single)">
            <summary>
            Determines the minimum of the three values.
            </summary>
            <param name="x">The 1st value.</param>
            <param name="y">The 2nd value.</param>
            <param name="z">The 3d value.</param>
            <returns>The min value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfNumber.Max(System.Single,System.Single,System.Single)">
            <summary>
            Determines the maximum of the three values.
            </summary>
            <param name="x">The 1st value.</param>
            <param name="y">The 2nd value.</param>
            <param name="z">The 3d value.</param>
            <returns>The max value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfNumber.Save(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Saves the object.
            </summary>
            <param name="writer">PDF writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfNumber.Clone(Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates a copy of PdfNumber.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfNumber.IntValue">
            <summary>
            Gets or sets the integer value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfNumber.FloatValue">
            <summary>
            Gets or sets the float value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfNumber.IsInteger">
            <summary>
            Gets or sets a value indicating whether this instance is integer.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfNumber.Status">
            <summary>
            Gets or sets the Status of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfNumber.IsSaving">
            <summary>
            Gets or sets a value indicating whether this document is saving or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfNumber.ObjectCollectionIndex">
            <summary>
            Gets or sets the integer value of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfNumber.Position">
            <summary>
            Gets or sets the position of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfNumber.ClonedObject">
            <summary>
            Returns cloned object.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Primitives.PdfReference">
            <summary>
            Represents a PDF reference.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfReference.ObjNum">
            <summary>
            Holds the object number.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfReference.GenNum">
            <summary>
            Holds the generation number of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfReference.m_status">
            <summary>
            Shows the type of object status whether it is object registered or other status;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfReference.m_isSaving">
            <summary>
            Indicates if the object is currently in saving state or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfReference.m_index">
            <summary>
            Holds the index number of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfReference.m_position">
            <summary>
            Internal variable to store the position.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReference.#ctor(System.Int64,System.Int32)">
            <summary>
            Initialize the class.
            </summary>
            <param name="objNum">The object number.</param>
            <param name="genNum">The generation number.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReference.#ctor(System.String,System.String)">
            <summary>
            Initialize the class.
            </summary>
            <param name="objNum">The object number.</param>
            <param name="genNum">The generation number.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReference.ToString">
            <summary>
            Returns a string representing the object.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReference.Equals(System.Object)">
            <summary>
            Compares two object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>The result of comparison.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReference.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReference.Syncfusion#Pdf#Primitives#IPdfPrimitive#Clone(Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates a copy of PdfReference.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReference.op_Equality(Syncfusion.Pdf.Primitives.PdfReference,Syncfusion.Pdf.Primitives.PdfReference)">
            <summary>
            Compares two reference objects.
            </summary>
            <param name="ref1">The first object to compare.</param>
            <param name="ref2">The second object to compare.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReference.op_Inequality(Syncfusion.Pdf.Primitives.PdfReference,Syncfusion.Pdf.Primitives.PdfReference)">
            <summary>
            Compares two reference objects.
            </summary>
            <param name="ref1">The first object to compare.</param>
            <param name="ref2">The second object to compare.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReference.Save(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Writes a reference into a PDF document.
            </summary>
            <param name="writer">A PDF writer.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfReference.Status">
            <summary>
            Gets or sets the Status of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfReference.IsSaving">
            <summary>
            Gets or sets a value indicating whether this document is saving or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfReference.ObjectCollectionIndex">
            <summary>
            Gets or sets the integer value of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfReference.Position">
            <summary>
            Gets or sets the position of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfReference.ClonedObject">
            <summary>
            Returns cloned object.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Primitives.PdfReferenceHolder">
            <summary>
            Class that is like a reference but during saving it is replaced by
            a real reference to the object it holds.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfReferenceHolder.m_object">
            <summary>
            The object which the reference is of.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfReferenceHolder.m_crossTable">
            <summary>
            The cross-reference table, which the object is within.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfReferenceHolder.m_reference">
            <summary>
            The reference to the object, which was read from the PDF document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfReferenceHolder.m_objectIndex">
            <summary>
            The index of the object within the object collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfReferenceHolder.m_status">
            <summary>
            Shows the type of object status whether it is object registered or other status;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfReferenceHolder.m_isSaving">
            <summary>
            Indicates if the object is currently in saving state or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfReferenceHolder.m_index">
            <summary>
            Holds the index number of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfReferenceHolder.m_position">
            <summary>
            Internal variable to store the position.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReferenceHolder.#ctor(Syncfusion.Pdf.IPdfWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Primitives.PdfReferenceHolder"/> class.
            </summary>
            <param name="wrapper">The wrapper.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReferenceHolder.#ctor(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Initializes the class instance with an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReferenceHolder.#ctor(Syncfusion.Pdf.Primitives.PdfReference,Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:PDFReferenceHolder"/> class.
            </summary>
            <param name="reference">The reference.</param>
            <param name="crossTable">The cross-reference table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReferenceHolder.Save(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Saves the object.
            </summary>
            <param name="writer">A PDF writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReferenceHolder.Clone(Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Create a copy of the referenced object.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReferenceHolder.Equals(System.Object)">
            <summary>
            Compares two reference holders.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>The result of comparison.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReferenceHolder.GetHashCode">
            <summary>
            Returns a hashcode for a hashtable.
            </summary>
            <returns>The hashcode.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReferenceHolder.op_Equality(Syncfusion.Pdf.Primitives.PdfReferenceHolder,Syncfusion.Pdf.Primitives.PdfReferenceHolder)">
            <summary>
            Compares two reference holders whether they are equal.
            </summary>
            <param name="rh1">A reference holder to compare.</param>
            <param name="rh2">A reference holder to compare.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReferenceHolder.op_Inequality(Syncfusion.Pdf.Primitives.PdfReferenceHolder,Syncfusion.Pdf.Primitives.PdfReferenceHolder)">
            <summary>
            Compares two reference holders whether they are different.
            </summary>
            <param name="rh1">A reference holder to compare.</param>
            <param name="rh2">A reference holder to compare.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfReferenceHolder.GetObject">
            <summary>
            Gets the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfReferenceHolder.Object">
            <summary>
            Gets the object the reference is of.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfReferenceHolder.Index">
            <summary>
            Gets the index of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfReferenceHolder.Reference">
            <summary>
            Gets the reference.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfReferenceHolder.Status">
            <summary>
            Gets or sets the Status of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfReferenceHolder.IsSaving">
            <summary>
            Gets or sets a value indicating whether this document is saving or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfReferenceHolder.ObjectCollectionIndex">
            <summary>
            Gets or sets the integer value of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfReferenceHolder.Position">
            <summary>
            Gets or sets the position of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfReferenceHolder.ClonedObject">
            <summary>
            Returns cloned object.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Primitives.PdfString">
            <summary>
            Implements PDF string object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.StringMark">
            <summary>
            General markers for string.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.HexStringMark">
            <summary>
            Hex markers for string.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.HexFormatPattern">
            <summary>
            Format of password data.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.m_bHex">
            <summary>
            Value indicating whether the string was converted to hex.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.m_value">
            <summary>
            Value of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.m_data">
            <summary>
            The byte data of the string.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.m_bConverted">
            <summary>
            Indicates whether to check if the value has unicode characters.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.m_bForceEncoding">
            <summary>
            Indicates whether we should convert data to Unicode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.m_bDecrypted">
            <summary>
            Shows if the data of the stream was decrypted.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.m_status">
            <summary>
            Shows the type of object status whether it is object registered or other status;
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.m_isSaving">
            <summary>
            Indicates if the object is currently in saving state or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.m_index">
            <summary>
            Holds the index number of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.m_position">
            <summary>
            Internal variable to store the position.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.m_isParentDecrypted">
            <summary>
            Shows if the data of the stream was decrypted.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.m_crossTable">
            <summary>
            Internal variable to hold PdfCrossTable reference.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.m_clonedObject">
            <summary>
            Internal variable to hold cloned object.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Primitives.PdfString.m_isPacked">
            <summary>
             Gets a value indicating whether the object is packed or not
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Primitives.PdfString"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.#ctor(System.String)">
            <summary>
            Creates new PDF string object.
            </summary>
            <param name="value">Value of the object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize a string from a hex string.
            </summary>
            <param name="value">The value.</param>
            <param name="encrypted">if set to <c>true</c> the string has been encrypted.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.#ctor(System.Byte[])">
            <summary>
            Creates new PDF string object.
            </summary>
            <param name="value">Value of the object.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.ByteToString(System.Byte[])">
            <summary>
            Converts byte data to string.
            </summary>
            <param name="data">Bytes to be converted.</param>
            <returns>Destination string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.ByteToString(System.Byte[],System.Int32)">
            <summary>
            Converts byte data to string.
            </summary>
            <param name="data">Bytes to be converted.</param>
            <param name="length">The actual length of the buffer.</param>
            <returns>Destination string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.IsUnicode(System.String)">
            <summary>
            Determines if the string is a unicode one.
            </summary>
            <param name="value">String value.</param>
            <returns>True if string is in Unicode format; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.ToUnicodeArray(System.String,System.Boolean)">
            <summary>
            Converts string to array of unicode symbols.
            </summary>
            <param name="value">String value.</param>
            <param name="bAddPrefix">Indicates whether we should add Unicode prefix to output data.</param>
            <returns>Array of data in unicode format.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.FromDate(System.DateTime)">
            <summary>
            FromDate in PDF suitable form.
            </summary>
            <param name="dateTime">The datetime.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.ByteCompare(Syncfusion.Pdf.Primitives.PdfString,Syncfusion.Pdf.Primitives.PdfString)">
            <summary>
            Compare two PDF strings by their bytes.
            </summary>
            <param name="str1">The first string.</param>
            <param name="str2">The second string.</param>
            <returns>If the first string is greater then the second one it returns a value greater then 0,
            if the second string is greater then the first one, it returns a value lower then 0,
            if both are equal the 0 is returned.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.op_Explicit(System.String)~Syncfusion.Pdf.Primitives.PdfString">
            <summary>
            Explicit operator. Converts system string into PdfString.
            </summary>
            <param name="str">The system string.</param>
            <returns>Properly initialized PdfString.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.PdfEncode(Syncfusion.Pdf.PdfDocumentBase)">
            <summary>
            Converts PDFString to string.
            </summary>
            <returns>Byte array containing PDF representation of this object.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.GetAsciiBytes(System.String)">
            <summary>
            Gets ascii bytes for specified string value.
            </summary>
            <param name="value">String for which to get bytes.</param>
            <returns>Bytes retrieved from specified text.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.BytesToHex(System.Byte[])">
            <summary>
            Converts bytes to string using hex format for representing string.
            </summary>
            <param name="bytes">Bytes to be converted.</param>
            <returns>String int hex format.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.EncryptIfNeeded(System.Byte[],Syncfusion.Pdf.PdfDocumentBase)">
            <summary>
            If needed encryption of data, encrypts data and returns new content.
            </summary>
            <param name="data">Bytes to be encrypted.</param>
            <param name="document">A PDF document.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.EscapeSymbols(System.Byte[])">
            <summary>
            Escapes special symbols.
            </summary>
            <param name="data">Data from which must be escaped special symbols.</param>
            <returns>Data from which are escaped special symbols.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.EscapeSymbols(System.Byte[],System.Boolean)">
            <summary>
            Escapes special symbols.
            </summary>
            <param name="data">Data from which must be escaped special symbols.</param>
            <returns>Data from which are escaped special symbols.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.HexToBytes(System.String)">
            <summary>
            Converts hexadecimal digits into a byte array.
            </summary>
            <param name="value">The string value.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.ParseHex(System.Char)">
            <summary>
            Parses the hex.
            </summary>
            <param name="c">The character representing a hex digit.</param>
            <returns>A byte value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.HexDigitsToNumbers(System.Collections.Generic.List{System.Byte})">
            <summary>
            Converts hex digits into byte numbers.
            </summary>
            <param name="hexNumbers">The hex numbers.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.GetBytes">
            <summary>
            Converts the Value to array of bytes.
            </summary>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.GetBytes(System.Boolean)">
            <summary>
            Returns a byta array based on the value.
            </summary>
            <param name="unicode">Shows if should be unicode encoding.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.Save(Syncfusion.Pdf.IO.IPdfWriter)">
            <summary>
            Saves the object using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.ToHex">
            <summary>
            Forces PdfString to the hex mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.Clone(Syncfusion.Pdf.IO.PdfCrossTable)">
            <summary>
            Creates a copy of PdfString.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.StringToByte(System.String)">
            <summary>
            Converts string value to a byte array.
            </summary>
            <param name="data">The string data.</param>
            <returns>The resulting byte array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.ProcessUnicodeWithPreamble(System.String@,System.Text.Encoding)">
            <summary>
            Processes the unicode string
            </summary>
            <param name="text"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Primitives.PdfString.Decrypt(Syncfusion.Pdf.Security.PdfEncryptor,System.Int64)">
            <summary>
            Decrypts the specified encryptor.
            </summary>
            <param name="encryptor">The encryptor.</param>
            <param name="currObjNumber">The current object number.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.Value">
            <summary>
            Gets or sets string value of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.Hex">
            <summary>
            Gets a value indicating whether string is in hex.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.IsPacked">
            <summary>
            Gets a value indicating whether the object is packed or not
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.Converted">
            <summary>
            Gets or sets a value indicating whether to check if the value
             has unicode characters.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.Encode">
            <summary>
            Gets or sets value indicating whether we should convert data to Unicode.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.Decrypted">
            <summary>
            Gets a flag that shows if the object has been decrypted already.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.Bytes">
            <summary>
            Gets the bytes.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.Status">
            <summary>
            Gets or sets the Status of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.IsSaving">
            <summary>
            Gets or sets a value indicating whether this document is saving or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.ObjectCollectionIndex">
            <summary>
            Gets or sets the integer value of the specified object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.Position">
            <summary>
            Gets or sets the position of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.IsParentDecrypted">
            <summary>
            Gets or set the flag indicating whether the string in the stream is decrypted or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.CrossTable">
            <summary>
            Returns PdfCrossTable associated with the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.ClonedObject">
            <summary>
            Returns cloned object.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Primitives.PdfString.Syncfusion#Pdf#Security#IPdfDecryptable#WasEncrypted">
            <summary>
            Gets a value indicating whether the object was encrypted.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Primitives.PdfString.ForceEncoding">
            <summary>
            Shows what encoding must be used.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Primitives.PdfString.SourceType">
            <summary>
            The types of the PDFString data source.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Security.Aes">
            <summary>
            Class used for implementing Advanced Encryption Standard algorithm.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Security.Aes.#ctor(Syncfusion.Pdf.Security.Aes.KeySize,System.Byte[])">
            <summary>
            Initializes a new instance of the Aes class.
            </summary>
            <param name="keySize">Key size.</param>
            <param name="keyBytes">Key bytes</param>
        </member>
        <member name="M:Syncfusion.Pdf.Security.Aes.Cipher(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Encipher 16 bit input
            </summary>
            <param name="input">16 bit Input</param>
            <param name="output">Output value</param>
        </member>
        <member name="M:Syncfusion.Pdf.Security.Aes.InvCipher(System.Byte[],System.Byte[],System.Int32)">
            <summary>
             Decipher 16-bit input
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Security.Aes.Dump">
            <summary>
            Dump
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Security.Aes.DumpKey">
            <summary>
            Dump key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.Aes.DumpTwoByTwo(System.Byte[0:,0:])">
            <summary>
            Dump two by two.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Pdf.Security.Aes.KeySize">
            <summary>
            Possible key sizes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.Aes.KeySize.Bits128">
            <summary>
            128-bit.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.Aes.KeySize.Bits192">
            <summary>
            192-bit.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.Aes.KeySize.Bits256">
            <summary>
            256-bit.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Security.AesEncryptor">
            <summary>
            Implements both the 128 bit and 256 bit AES encryption.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.AesEncryptor.c_blockSize">
            <summary>
            Block size for 128 bit encryption
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.AesEncryptor.m_aes">
            <summary>
            Aes encryptor
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.AesEncryptor.m_cbcV">
            <summary>
            Cypher Blocking Chain vector
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.AesEncryptor.m_nextBlockV">
            <summary>
            vector that represents next block of the Chain 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.AesEncryptor.m_ivOff">
            <summary>
            Offset of the initialization vector.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.AesEncryptor.m_buf">
            <summary>
            Buffer containing the initialization vector
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.AesEncryptor.m_isEncryption">
            <summary>
            Reprents the current process either encryption/decryption
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Security.AesEncryptor.#ctor(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the AesEncryptor class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Security.AesEncryptor.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Does the initial AES encryption process in CBC mode.
            </summary>
            <param name="input">input data stream.</param>
            <param name="inOff">Offset of input stream.</param>
            <param name="length">length of the input stream.</param>
            <param name="output">output encrypted stream.</param>
            <param name="input">input data stream.</param> 
        </member>
        <member name="M:Syncfusion.Pdf.Security.AesEncryptor.Finalize(System.Byte[])">
            <summary>
            Does the final encryption after padding (PKCS7 standards).
            </summary>          
            <param name="outBytes">output encrypted stream.</param>
            <param name="outOff">current offset of the output stream.</param> 
        </member>
        <member name="M:Syncfusion.Pdf.Security.AesEncryptor.GetBlockSize(System.Int32)">
            <summary>
            Calculates the correct block size for the given input data length
            </summary>          
            <param name="length">length of the data.</param> 
        </member>
        <member name="M:Syncfusion.Pdf.Security.AesEncryptor.CalculateOutputSize">
            <summary>
            Calculates the length for padding
            </summary>          
            <param name="length">length of the data.</param>         
        </member>
        <member name="M:Syncfusion.Pdf.Security.AesEncryptor.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Does Cypher Blocking chain operation and calls for encryption.
            </summary>
            <param name="input">input data stream.</param>
            <param name="inOff">Offset of input stream.</param>       
            <param name="outBytes">output encrypted stream.</param>
            <param name="outOff">current offset of the output stream.</param> 
        </member>
        <member name="M:Syncfusion.Pdf.Security.AesEncryptor.AddPadding(System.Byte[],System.Int32)">
            <summary>
            Add padding in the PKCS7 standards.
            </summary>          
            <param name="input">input data.</param>
            <param name="inOff">offset where the padding has to be done.</param> 
        </member>
        <member name="M:Syncfusion.Pdf.Security.AesEncryptor.CheckPadding(System.Byte[])">
            <summary>
            Checks for the padding added in the encrypted cypher.
            </summary>          
            <param name="input">input data.</param>       
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.c_newKeyOffset">
            <summary>
            New key offset length.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.c_key40">
            <summary>
            Key length of 40 bit key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.c_key128">
            <summary>
            Key length of 128 bit key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.c_key256">
            <summary>
            Key length of 256 bit key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.c_40RevisionNumber">
            <summary>
            Revision number. A number specifying which revision of the
            standard security handler should be used to interpret this dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.c_128RevisionNumber">
            <summary>
            Revision number. A number specifying which revision of the
            standard security handler should be used to interpret this dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.c_bytesAmount">
            <summary>
            Amount of bytes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.c_randomBytesAmount">
            <summary>
            Amount of random bytes.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.c_stringLength">
            <summary>
            Optimal string length.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.c_ownerLoopNum">
            <summary>
            Number of iteration of the loop during owner pass calculation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.c_ownerLoopNum2">
            <summary>
            Number of iteration of the loop during owner pass calculation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.c_flagNum">
            <summary>
            Flag, used during enc. key calculating.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.c_numBits">
            <summary>
            Number of bits in one byte.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_hasComputedPasswordValues">
            <summary>
            A value indicating whether password values were already computed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_provider">
            <summary>
            The object that allows to compute the MD5 hash for the input data
            using the implementation provided by the cryptographic service provider (CSP).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_customArray">
            <summary>
            Bytes array for manipulating by Custom algo.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_randomBytes">
            <summary>
            Bytes array of random numbers.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_ownerPassword">
            <summary>
            Output owner password.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_userPassword">
            <summary>
            Output user password.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_ownerPasswordOut">
            <summary>
            Changed owner password. It's needed to encryption purpose.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_userPasswordOut">
            <summary>
            Changed user password. It's needed to encryption purpose.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_encryptionKey">
            <summary>
            The encryption key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_keyLength">
            <summary>
            Length of encryption key.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_permission">
            <summary>
            Permission flags.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_revision">
            <summary>
            A revision number that has been read from a PDF document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_bChanged">
            <summary>
            Shows if the encryptor's settings have been changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.s_paddingString">
            <summary>
            Predefined bytes for empty string.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.s_lockObject">
            <summary>
            Helps to control access to s_paddingString.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_encrypt">
            <summary>
            Holds ecryptor status enable/disable ecryption.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_permissionValue">
            <summary>
            The valuse that should be stored in the encryptor dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.salt">
            <summary>
            The array used to add padding to the encryption key in AES mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_encryptionAlgorithm">
            <summary>
            The object that describes the type of encryption algorithm that should be used.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_userEncryptionKeyOut">
            <summary>
            The user encryption key (UE), that should stored in encryption dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_ownerEncryptionKeyOut">
            <summary>
            The Owner encryption key (OE), that should stored in encryption dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_permissionFlag">
            <summary>
            The permission flag (Perms), that should stored in encryption dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_fileEncryptionKey">
            <summary>
            The 32 byte random number used as key for encrypting contents.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_userRandomBytes">
            <summary>
            The random bytes used in computing U and UE entries.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_ownerRandomBytes">
            <summary>
            The random bytes used in computing O and OE entries.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_randomArray">
            <summary>
            Used to derive random byte array.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_hashComputer">
            <summary>
            Used to compute SHA256 hash.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_encryptMetadata">
            <summary>
            Shows if metadata has to be encrypted or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_revisionNumberOut">
            <summary>
            The integer which represents revision of the encryption dictionary. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptor.m_versionNumberOut">
            <summary>
            The integer which represents the version of the encryption dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfEncryptor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.Clone">
            <summary>
            Clones the specified document.
            </summary>
            <returns>A new cloned encryptor.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.ReadFromDictionary(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Reads the essential values from a dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.CheckPassword(System.String,Syncfusion.Pdf.Primitives.PdfString)">
            <summary>
            Checks the password.
            </summary>
            <param name="password">The password.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.EncryptData(System.Int64,System.Byte[],System.Boolean)">
            <summary>
            Encrypts the data.
            </summary>
            <param name="currObjNumber">The curr obj number.</param>
            <param name="data">The data.</param>
            <returns>Encrypted byte array.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.SaveToDictionary(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.PadTrancateString(System.String)">
            <summary>
            Pads or truncates string to string with length equals to c_stringLength == 32.
            </summary>
            <returns>Bytes of newly created string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.PadTrancateString(System.Byte[])">
            <summary>
            Pads or truncates data with length equals to c_stringLength == 32.
            </summary>
            <returns>Bytes of newly created string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.EncryptDataByCustom(System.Byte[],System.Byte[])">
            <summary>
            Preperes hash code for cryptographic algorithm and executes it.
            </summary>
            <param name="data">Data to be encrypted / decrypted.</param>
            <param name="key">Key for using by Custom algo.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.EncryptDataByCustom(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Prepares hash code for cryptographic algorithm and executes it.
            </summary>
            <param name="data">Data to be encrypted / decrypted.</param>
            <param name="key">Key for using by Custom algo.</param>
            <param name="keyLen">The length of a key.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.AESEncrypt(System.Byte[],System.Byte[])">
            <summary>
            Encrypts the data using AES cryptographic algorithm using initialization vector in CBC mode
            </summary>
            <param name="data">Data to be encrypted / decrypted.</param>
            <param name="key">Key for using by Custom algo.</param> 
            <returns> The encrypted data</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.AESDecrypt(System.Byte[],System.Byte[])">
             <summary>
             Decrypts the data using AES cryptographic algorithm using initialization vector in CBC mode
             </summary>
             <param name="data">Data to be decrypted.</param>
             <param name="key">Key for using by Custom algo.</param>
            <returns>The decrypted data</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.EncryptData256(System.Byte[])">
             <summary>
             Encrypts the data using AES(256 Bit) cryptographic algorithm using initialization vector in CBC mode
             </summary>
             <param name="data">Data to be decrypted.</param>
            <returns>Encrypted data</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.DecryptData256(System.Byte[])">
            <summary>
            Decrypts the data using AES(256 Bit) cryptographic algorithm using initialization vector in CBC mode
            </summary>
            <param name="data">Data to be decrypted.</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.GenerateIV">
            <summary>
            Creates initialization vector for AES encryption
            </summary>
            <returns>Initialization vector</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.RecreateCustomArray(System.Byte[],System.Int32)">
            <summary>
            Recreates CustomArray array. This method is the part of 
            implementation Custom algo.
            </summary>
            <param name="key">Key for using by Custom algo.</param>
            <param name="keyLen">The length of a key.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.GetKeyLength">
            <summary>
            Returns length of the encryption key.
            </summary>
            <returns>Length of the encryption key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.CreateOwnerPassword">
            <summary>
            Calculates owner password.
            </summary>
            <returns>Data of calculated owner password.</returns>
            <remarks>Algorithm 3.3 of PDF 1.6 reference.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.Create256BitOwnerPassword">
            <summary>
            Calculates owner password for 256 bit encryption algorithm.
            </summary>
            <returns>Data of calculated owner password.</returns>
            <remarks>Algorithm 3.9 of adobe_supplement_iso32000.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.CreateOwnerEncryptionKey">
            <summary>
            Calculates owner encryption key for 256 bit encryption algorithm.
            </summary>
            <returns>Data of calculated owner encryption key.</returns>
            <remarks>Algorithm 3.9 of adobe_supplement_iso32000.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.GetKeyFromOwnerPass(System.String)">
            <summary>
            Computes first 4 steps from algorithm 3.3 to calculate the encryption key.
            </summary>
            <param name="password">The owner password.</param>
            <returns>The encryption key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.FindFileEncryptionKey(System.String)">
            <summary>
            Computes the file encryption key of 256 bit AES encrypted documents.
            </summary>
            <param name="password">The owner/user password.</param>        
            <remarks>The algorithm 3.2a of adobe_supplement_iso32000</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.GetKeyForOwnerPassStep7(System.Byte[],System.Byte)">
            <summary>
            Calculates temporary key used for calculating owner password value.
            </summary>
            <param name="originalKey">Orignial key value.</param>
            <param name="index">Current index.</param>
            <returns>Temporary key used for calculating owner password value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.CreateEncryptionKey(System.String,System.Byte[])">
            <summary>
            Creates encryption key.
            </summary>
            <param name="inputPass">Input password string.</param>
            <param name="ownerPass">Owner password value.</param>
            <returns>Key created.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.CreateFileEncryptionKey">
            <summary>
            Creates file encryption key for 256 bit encryption scheme (random 32 byte array).
            </summary>  
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.CreateUserPassword">
            <summary>
            Creates user password.
            </summary>
            <returns>Created user password.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.Create256BitUserPassword">
            <summary>
            Calculates user encryption key for 256 bit encryption algorithm.
            </summary>
            <returns>Data of calculated user encryption key.</returns>
            <remarks>Algorithm 3.8 of adobe_supplement_iso32000.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.CreateUserEncryptionKey">
            <summary>
            Calculates user encryption key for 256 bit encryption algorithm.
            </summary>
            <returns>Data of calculated user encryption key.</returns>
            <remarks>Algorithm 3.8 of adobe_supplement_iso32000.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.CreatePermissionFlag">
            <summary>
            Calculates permission flag(Perms) for 256 bit encryption algorithm.
            </summary>
            <returns>Data of calculated Permission flag.</returns>
            <remarks>Algorithm 3.10 of adobe_supplement_iso32000.</remarks>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.Create40BitUserPassword">
            <summary>
            Creates user password when encryption key is 40 bits length.
            </summary>
            <returns>Created user password.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.Create128BitUserPassword">
            <summary>
            Creates user password when encryption key is 128 bits length.
            </summary>
            <returns>Created user password.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.InitializeData">
            <summary>
            Initializes data.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.PrepareKeyForEncryption(System.Byte[])">
            <summary>
            Transforms key before encryption.
            </summary>
            <param name="originalKey">Original key to be transformed.</param>
            <returns>Transformed key.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.AuthenticateUserPassword(System.String)">
            <summary>
            Checks if the password given is the user password.
            </summary>
            <param name="password">The password, which was given by the user.</param>
            <returns>A flag indicating if the password is the user password.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.Authenticate256BitUserPassword(System.String)">
            <summary>
            Checks if the password given is the user password (256 bit encryption scheme).
            </summary>
            <param name="password">The password, which was given by the user.</param>
            <returns>A flag indicating if the password is the user password.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.AuthenticateOwnerPassword(System.String)">
            <summary>
            Checks if the password given is the owner password.
            </summary>
            <param name="password">The password, which was given by the user.</param>
            <returns>A flag indicating if the password is the owner password.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.Authenticate256BitOwnerPassword(System.String)">
            <summary>
            Checks if the password given is the owner password (256 bit encryption scheme).
            </summary>
            <param name="password">The password, which was given by the user.</param>
            <returns>A flag indicating if the password is the owner password.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.ConvertToPassword(System.Byte[])">
            <summary>
            Converts an array into a password string. Before the convertion to string
            cutts off the padding string if there is one.
            </summary>
            <param name="array">The array, which should be converted.</param>
            <returns>A string that should be a valid password string.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.CompareByteArrays(System.Byte[],System.Byte[])">
            <summary>
            Determines if the arrays are equal.
            </summary>
            <param name="array1">One array that should be compared.</param>
            <param name="array2">Another array.</param>
            <returns><b>True</b> if arrays are equal, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.CompareByteArrays(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Determines if the first <i>bytes</i> of the arrays are equal.
            </summary>
            <param name="array1">One array that should be compared.</param>
            <param name="array2">Another array.</param>
            <param name="size">The actual size of the arrays to compare.</param>
            <returns>
            	<b>True</b> if arrays are equal, false otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfEncryptor.AESDictionary">
            <summary>
            Standard encryption dictionary for AES encryption 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.FileID">
            <summary>
            Gets file ID.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.Filter">
            <summary>
            Gets security handler. Filter's value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.CryptographicAlgorithm">
            <summary>
            Gets or sets cryptographic algorithm. V's value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.EncryptionAlgorithm">
            <summary>
            Gets or sets encryption algorithm.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.Permissions">
            <summary>
            Gets or sets permission set.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.RevisionNumber">
            <summary>
            Gets revision number. R's value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.OwnerPassword">
            <summary>
            Gets or sets the password required to change permissions
            for the PDF document. O's value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.UserPassword">
            <summary>
            Gets or sets the password required to open the PDF document. P's value.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.RandomBytes">
            <summary>
            Gets bytes array of random numbers.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.CustomArray">
            <summary>
            Gets or sets bytes array for manipulating by Custom algo.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.Provider">
            <summary>
            Gets or sets the object that allows to compute the MD5 hash for the input data
            using the implementation provided by the cryptographic service provider (CSP).
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.SecurityEncoding">
            <summary>
            Gets encoding.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.EncryptionKey">
            <summary>
            Gets or sets encryption key.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.Encrypt">
            <summary>
            Gets or sets value indicating whether document should be encrypted or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.UserPasswordOut">
            <summary>
            Gets calculated user password.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.OwnerPasswordOut">
            <summary>
            Gets calculated owner password.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.Changed">
            <summary>
            Shows if the encryptor's setting have been changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.EncryptMetaData">
            <summary>
            Shows if the metadata should be encrypted.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfEncryptor.PaddingString">
            <summary>
            Bytes for empty string.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Security.PdfSecurity">
            <summary>
            Represents the security settings of the PDF document.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            PdfStandardFont font = new PdfStandardFont(PdfFontFamily.TimesRoman, 20f, PdfFontStyle.Bold);
            PdfBrush brush = PdfBrushes.Black;
            //Document security
            PdfSecurity security = document.Security;
            //use 128 bits key
            security.KeySize = PdfEncryptionKeySize.Key128Bit;
            security.OwnerPassword = "syncfusion";
            security.Permissions = PdfPermissionsFlags.Print | PdfPermissionsFlags.FullQualityPrint;
            security.UserPassword = "password";
            document.Save("Security.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim document As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            Dim font As PdfStandardFont = New PdfStandardFont(PdfFontFamily.TimesRoman, 20f, PdfFontStyle.Bold)
            Dim brush As PdfBrush = PdfBrushes.Black
            'Document security
            Dim security As PdfSecurity = document.Security
            'use 128 bits key
            security.KeySize = PdfEncryptionKeySize.Key128Bit
            security.OwnerPassword = "syncfusion"
            security.Permissions = PdfPermissionsFlags.Print Or PdfPermissionsFlags.FullQualityPrint
            security.UserPassword = "password"
            document.Save("Security.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfSecurity.m_ownerPassword">
            <summary>
            Owner password value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfSecurity.m_userPassword">
            <summary>
            User password value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfSecurity.m_encryptor">
            <summary>
            Object encrypting the data.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfSecurity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Security.PdfSecurity"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfSecurity.SetPermissions(Syncfusion.Pdf.Security.PdfPermissionsFlags)">
            <summary>
            Logically ORs flag and mask and return result.
            </summary>
            <param name="flags">The mask of set bit that should be set in the result.</param>
            <returns>The ORed value of flag and mask.</returns>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            PdfSecurity security = doc.Security;
            security.SetPermissions(PdfPermissionsFlags.AssembleDocument);
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 10);
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, new PointF(10,10));
            doc.Save("Security.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            'Document security
            Dim security As PdfSecurity = doc.Security
            security.SetPermissions(PdfPermissionsFlags.AssembleDocument)
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 10)
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, New PointF(10,10))
            doc.Save("Security.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Security.PdfSecurity"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="!:PdfFont"/> Class  
        </member>
        <member name="M:Syncfusion.Pdf.Security.PdfSecurity.ResetPermissions(Syncfusion.Pdf.Security.PdfPermissionsFlags)">
            <summary>
            Logically ANDs flag and inverted mask and return result.
            </summary>
            <param name="flags">The mask of set bit that should be cleared in the result.</param>
            <returns>The ANDed value of flag and inverted mask.</returns>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            PdfSecurity security = doc.Security;
            security.ResetPermissions(PdfPermissionsFlags.AssembleDocument);
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 10);
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, new PointF(10,10));
            doc.Save("Security.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            'Document security
            Dim security As PdfSecurity = doc.Security
            security.ResetPermissions(PdfPermissionsFlags.AssembleDocument)
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 10)
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, New PointF(10,10))
            doc.Save("Security.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Security.PdfSecurity"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="!:PdfFont"/> Class      
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfSecurity.OwnerPassword">
            <summary>
            Gets or sets the owner password.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            // Set the documents permission settings
            doc.Security.KeySize = PdfEncryptionKeySize.Key128Bit;
            doc.Security.OwnerPassword = "Syncfusion";
            doc.Security.Permissions = PdfPermissionsFlags.EditAnnotations;
            doc.Security.UserPassword = "123";
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 10);
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, new PointF(10,10));
            doc.Save("Security.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Set the documents permission settings
            doc.Security.KeySize = PdfEncryptionKeySize.Key128Bit
            doc.Security.OwnerPassword = "Syncfusion"
            doc.Security.Permissions = PdfPermissionsFlags.EditAnnotations
            doc.Security.UserPassword = "123"
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 10)
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, New PointF(10,10))
            doc.Save("Security.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Security.PdfSecurity"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="!:PdfFont"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfSecurity.UserPassword">
            <summary>
            Gets or sets the user password.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            // Set the documents permission settings
            doc.Security.KeySize = PdfEncryptionKeySize.Key128Bit;
            doc.Security.OwnerPassword = "Syncfusion";
            doc.Security.Permissions = PdfPermissionsFlags.EditAnnotations;
            doc.Security.UserPassword = "123";
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 10);
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, new PointF(10,10));
            doc.Save("Security.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Set the documents permission settings
            doc.Security.KeySize = PdfEncryptionKeySize.Key128Bit
            doc.Security.OwnerPassword = "Syncfusion"
            doc.Security.Permissions = PdfPermissionsFlags.EditAnnotations
            doc.Security.UserPassword = "123"
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 10)
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, New PointF(10,10))
            doc.Save("Security.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Security.PdfSecurity"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="!:PdfFont"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfSecurity.Permissions">
            <summary>
            Permissions when the document is opened with user password.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            // Set the documents permission settings
            doc.Security.KeySize = PdfEncryptionKeySize.Key128Bit;
            doc.Security.OwnerPassword = "Syncfusion";
            doc.Security.Permissions = PdfPermissionsFlags.EditAnnotations;
            doc.Security.UserPassword = "123";
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 10);
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, new PointF(10,10));
            doc.Save("Security.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Set the documents permission settings
            doc.Security.KeySize = PdfEncryptionKeySize.Key128Bit
            doc.Security.OwnerPassword = "Syncfusion"
            doc.Security.Permissions = PdfPermissionsFlags.EditAnnotations
            doc.Security.UserPassword = "123"
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 10)
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, New PointF(10,10))
            doc.Save("Security.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Security.PdfSecurity"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="!:PdfFont"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfSecurity.Encryptor">
            <summary>
            Gets or sets the encryptor.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfSecurity.KeySize">
            <summary>
            Gets or sets the size of the key.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            // Set the documents permission settings
            doc.Security.KeySize = PdfEncryptionKeySize.Key128Bit;
            doc.Security.OwnerPassword = "Syncfusion";
            doc.Security.Permissions = PdfPermissionsFlags.EditAnnotations;
            doc.Security.UserPassword = "123";
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 10);
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, new PointF(10,10));
            doc.Save("Security.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Set the documents permission settings
            doc.Security.KeySize = PdfEncryptionKeySize.Key128Bit
            doc.Security.OwnerPassword = "Syncfusion"
            doc.Security.Permissions = PdfPermissionsFlags.EditAnnotations
            doc.Security.UserPassword = "123"
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 10)
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, New PointF(10,10))
            doc.Save("Security.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Security.PdfSecurity"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="!:PdfFont"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfSecurity.Algorithm">
            <summary>
            Gets or sets the type of encryption algorithm.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Security.PdfSecurity.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:PdfSecurity"/> is enabled.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Security.PdfEncryptionKeySize">
            <summary>
            Specifies length of the encryption key for encryption.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            // Set the documents permission settings
            doc.Security.KeySize = PdfEncryptionKeySize.Key128Bit;
            doc.Security.OwnerPassword = "Syncfusion";
            doc.Security.Permissions = PdfPermissionsFlags.EditAnnotations;
            doc.Security.UserPassword = "123";
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 10);
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, new PointF(10,10));
            doc.Save("Security.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Set the documents permission settings
            doc.Security.KeySize = PdfEncryptionKeySize.Key128Bit
            doc.Security.OwnerPassword = "Syncfusion"
            doc.Security.Permissions = PdfPermissionsFlags.EditAnnotations
            doc.Security.UserPassword = "123"
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 10)
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, New PointF(10,10))
            doc.Save("Security.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Security.PdfSecurity"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="!:PdfFont"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptionKeySize.Key40Bit">
            <summary>
            The key is 40 bit long.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptionKeySize.Key128Bit">
            <summary>
            The key is 128 bit long.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptionKeySize.Key256Bit">
            <summary>
            The key is 256 bit long.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Security.PdfEncryptionAlgorithm">
            <summary>
            Specifies the type of encryption algorithm used.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptionAlgorithm.RC4">
            <summary>
            The encryption algorithm is RC4.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfEncryptionAlgorithm.AES">
            <summary>
            The encryption algorithm is AES.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Security.PdfPermissionsFlags">
            <summary>
            Specifies the available permissions set for the signature.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            // Set the documents permission settings
            doc.Security.KeySize = PdfEncryptionKeySize.Key128Bit;
            doc.Security.OwnerPassword = "Syncfusion";
            doc.Security.Permissions = PdfPermissionsFlags.EditAnnotations;
            doc.Security.UserPassword = "123";
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 10);
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, new PointF(10,10));
            doc.Save("Security.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Set the documents permission settings
            doc.Security.KeySize = PdfEncryptionKeySize.Key128Bit
            doc.Security.OwnerPassword = "Syncfusion"
            doc.Security.Permissions = PdfPermissionsFlags.EditAnnotations
            doc.Security.UserPassword = "123"
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 10)
            page.Graphics.DrawString("Permission",font,PdfBrushes.Blue, New PointF(10,10))
            doc.Save("Security.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Security.PdfSecurity"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="!:PdfFont"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfPermissionsFlags.Default">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfPermissionsFlags.Print">
            <summary>
            Print the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfPermissionsFlags.EditContent">
            <summary>
            Edit content.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfPermissionsFlags.CopyContent">
            <summary>
            Copy content.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfPermissionsFlags.EditAnnotations">
            <summary>
            Add or modify text annotations, fill in interactive form fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfPermissionsFlags.FillFields">
            <summary>
            Fill form fields. (Only for 128 bits key).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfPermissionsFlags.AccessibilityCopyContent">
            <summary>
            Copy accessibility content.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfPermissionsFlags.AssembleDocument">
            <summary>
            Assemble document permission. (Only for 128 bits key).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfPermissionsFlags.FullQualityPrint">
            <summary>
            Full quality print.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Security.SecurityHandlers">
            <summary>
            Enumerator that implements possible security handlers.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.SecurityHandlers.Standard">
            <summary>
            The built-in password-based security handler.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Security.StoreType">
            <summary>
            Specifies the naming a system store.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.StoreType.MY">
            <summary>
            A certificate store that holds certificates with associated private keys.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.StoreType.ROOT">
            <summary>
            Root certificates.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.StoreType.CA">
            <summary>
            Certification authority certificates.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.StoreType.SPC">
            <summary>
            Software Publisher Certificate.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Security.PdfCertificationFlags">
            <summary>
            Specifies the available permissions on certificated document.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfCertificate pdfCert = new PdfCertificate("Pdf.pfx", "123");
            PdfSignature signature = new PdfSignature(doc, page, pdfCert, "Signature");
            signature.DocumentPermissions = PdfCertificationFlags.AllowComments;
            doc.Save("SignedPdfSample.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            Dim pdfCert As PdfCertificate = New PdfCertificate("Pdf.pfx", "123")
            Dim signature As PdfSignature = New PdfSignature(doc, page, pdfCert, "Signature")
            signature.DocumentPermissions = PdfCertificationFlags.AllowComments
            doc.Save("SignedPdfSample.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="!:PdfGraphics"/> Class
            <seealso cref="!:PdfFont"/> Class
            <seealso cref="!:PdfCertificate"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfCertificationFlags.ForbidChanges">
            <summary>
            Disallow any changes to the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfCertificationFlags.AllowFormFill">
            <summary>
            Only allow form fill-in actions on this document.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.PdfCertificationFlags.AllowComments">
            <summary>
            Only allow commenting and form fill-in actions on this document.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Security.SignatureFlags">
            <summary>
            Enumeration of signature flags.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.SignatureFlags.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.SignatureFlags.SignaturesExists">
            <summary>
            If set, the document contains at least one signature field. This flag allows a viewer 
            application to enable user interface items (such as menu items or pushbuttons) related 
            to signature processing without having to scan the entire document for the presence 
            of signature fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Security.SignatureFlags.AppendOnly">
            <summary>
            If set, the document contains signatures that may be invalidated if the file is saved 
            (written) in a way that alters its previous contents, as opposed to an incremental 
            update. Merely updating the file by appending new information to the end of the 
            previous version is safe. Viewer applications can use this flag to present 
            a user requesting a full save with an additional alert box warning that signatures 
            will be invalidated and requiring explicit confirmation before continuing with the operation.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.#ctor(Syncfusion.Pdf.Grid.PdfGrid)">
            <summary>
            Initializes a new instance of the <see cref="T:LightTableLayouter"/> class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.Layout(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.PointF)">
            <summary>
            Layouts the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.Layout(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.RectangleF)">
            <summary>
            Layouts the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.LayoutInternal(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.LayoutOnPage(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the on page.
            </summary>
            <param name="param">The param.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.ReArrangePages(System.Collections.Generic.Dictionary{Syncfusion.Pdf.PdfPage,System.Int32[]})">
            <summary>
            Rearranges the pages.
            </summary>
            <param name="layoutedPages">The layouted pages.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.DrawRow(Syncfusion.Pdf.Grid.PdfGridRow)">
            <summary>
            Draws the row.
            </summary>
            <param name="row">The row.</param>
            <param name="cellStartIndex">Start index of the cell.</param>
            <param name="cellEndIndex">End index of the cell.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.DrawRowWithBreak(Syncfusion.Pdf.Grid.PdfGridLayouter.RowLayoutResult@,Syncfusion.Pdf.Grid.PdfGridRow,System.Single)">
            <summary>
            Draws row till it fits the page and then calculates height for the next page.
            </summary>
            <param name="result">The RowLayoutResult.</param>
            <param name="row">Row being drawn.</param>
            <param name="height">Height of the row.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.DrawRow(Syncfusion.Pdf.Grid.PdfGridLayouter.RowLayoutResult@,Syncfusion.Pdf.Grid.PdfGridRow,System.Single)">
            <summary>
            Draws row
            </summary>
            <param name="result">The RowLayoutResult.</param>
            <param name="row">Row being drawn.</param>
            <param name="height">Height of the row.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.ReCalculateHeight(Syncfusion.Pdf.Grid.PdfGridRow,System.Single)">
            <summary>
            Recalculate row height for the split cell to be drawn.
            </summary>
            <param name="row"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.RaiseBeforePageLayout(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF@,System.Int32@)">
            <summary>
            Raises BeforePageLayout event.
            </summary>
            <param name="currentPage">The current page.</param>
            <param name="currentBounds">The current bounds.</param>
            <param name="currentRow">The current row.</param>
            <returns>If true, stop lay outing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.RaisePageLayouted(Syncfusion.Pdf.Graphics.PdfLayoutResult)">
            <summary>
            Raises PageLayout event if needed.
            </summary>
            <param name="pageResult">Page layout result.</param>
            <returns>Event arguments.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.CheckIfDefaultFormat(Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Checks if the given format is default format or not.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.DetermineColumnDrawRanges">
            <summary>
            Determines the column draw ranges.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.GetNextPage(Syncfusion.Pdf.Graphics.PdfLayoutFormat)">
            <summary>
            Gets the next page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.GetFormat(Syncfusion.Pdf.Graphics.PdfLayoutFormat)">
            <summary>
            Gets the format.
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.GetLayoutResult">
            <summary>
            Gets the layout result.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridLayouter.Grid">
            <summary>
            Gets the grid.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayouter.RowLayoutResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridLayouter.RowLayoutResult"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridLayouter.RowLayoutResult.IsFinish">
            <summary>
            Gets or sets a value indicating whether this instance is finish.
            </summary>
            <value><c>true</c> if this instance is finish; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridLayouter.RowLayoutResult.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Grid.PdfGridLayoutFormat">
            <summary>
            Defines parameters for PdfGrid layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayoutFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridLayoutFormat"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayoutFormat.#ctor(Syncfusion.Pdf.Graphics.PdfLayoutFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridLayoutFormat"/> class.
            </summary>
            <param name="baseFormat">The base format.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Grid.PdfGridLayoutResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridLayoutResult.#ctor(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridLayoutResult"/> class.
            </summary>
            <param name="page">The current page.</param>
            <param name="bounds">The current bounds.</param>
            <remarks>The page might be null, which means that
            lay outing was performed on PdfGraphics.</remarks>
        </member>
        <member name="F:Syncfusion.Pdf.Grid.PdfGrid.m_layoutFormat">
            <summary>
            Internal variable to store layout format.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGrid"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.Draw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.PointF,System.Single)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="location">The location.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.Draw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Single,System.Single,System.Single)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.Draw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.RectangleF)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.PointF)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.PointF,Syncfusion.Pdf.Grid.PdfGridLayoutFormat)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="location">The location.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF,Syncfusion.Pdf.Grid.PdfGridLayoutFormat)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="bounds">The bounds.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.Draw(Syncfusion.Pdf.PdfPage,System.Single,System.Single)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.Draw(Syncfusion.Pdf.PdfPage,System.Single,System.Single,Syncfusion.Pdf.Grid.PdfGridLayoutFormat)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.Draw(Syncfusion.Pdf.PdfPage,System.Single,System.Single,System.Single)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.Draw(Syncfusion.Pdf.PdfPage,System.Single,System.Single,System.Single,Syncfusion.Pdf.Grid.PdfGridLayoutFormat)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.Layout(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Layout parameters.</param>
            <returns>Returns the results of layout.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.SetSpan">
            <summary>
            Applies the span.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.Measure">
            <summary>
            Measures this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.SetDataSource">
            <summary>
            Sets the data source.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.MeasureColumnsWidth">
            <summary>
            Calculates the column widths.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGrid.MeasureColumnsWidth(System.Drawing.RectangleF)">
            <summary>
            Calculates the width of the columns.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGrid.Headers">
            <summary>
            Gets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGrid.Rows">
            <summary>
            Gets the rows.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGrid.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGrid.DataMember">
            <summary>
            Gets or sets the data member.
            </summary>
            <value>The data member.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGrid.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGrid.LastRow">
            <summary>
            Gets the first row.
            </summary>
            <value>The first row.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGrid.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGrid.RepeatHeader">
            <summary>
            Gets or sets a value indicating whether [repeat header].
            </summary>
            <value><c>true</c> if [repeat header]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGrid.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGrid.AllowRowBreakAcrossPages">
            <summary>
            Gets or sets whether to split or cut rows that overflow a page.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGrid.IsChildGrid">
            <summary>
            Gets or set if grid is nested grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGrid.ParentCell">
            <summary>
            Gets or sets the parent cell of the nested grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGrid.LayoutFormat">
            <summary>
            Gets layout format of the grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Grid.PdfGridCell.m_imagePosition">
            <summary>
            Alignment of the image.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridCell"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCell.#ctor(Syncfusion.Pdf.Grid.PdfGridRow)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridCell"/> class.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCell.Draw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCell.MeasureWidth">
            <summary>
            Calculates the width.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCell.MeasureHeight">
            <summary>
            Calcualtes the height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCell.AdjustOuterLayoutArea(System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Adjusts the outer layout area.
            </summary>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCell.AdjustContentLayoutArea(System.Drawing.RectangleF)">
            <summary>
            Adjusts the text layout area.
            </summary>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCell.DrawCellBorders(Syncfusion.Pdf.Graphics.PdfGraphics@,System.Drawing.RectangleF)">
            <summary>
            Draws the cell border constructed by drawing lines.
            </summary>
            <param name="gr">The Current Graphics.</param>
            <param name="cs">The CellStyle.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCell.SetTransparency(Syncfusion.Pdf.Graphics.PdfGraphics@,Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Sets the transparency.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCell.GetNextCell">
            <summary>
            Gets the next cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCell.GetTextFont">
            <summary>
            Gets the text font.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCell.GetTextBrush">
            <summary>
            Gets the text brush.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCell.GetTextPen">
            <summary>
            Gets the text pen.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCell.GetBackgroundBrush">
            <summary>
            Gets the background brush.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.RowSpan">
            <summary>
            Gets or sets the row span.
            </summary>
            <value>The row span.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.ColumnSpan">
            <summary>
            Gets or sets the column span.
            </summary>
            <value>The column span.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.Style">
            <summary>
            Gets or sets the cell style.
            </summary>
            <value>The cell style.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.StringFormat">
            <summary>
            Gets or sets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.Row">
            <summary>
            Gets or sets the parent row.
            </summary>
            <value>The parent row.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.IsCellMergeContinue">
            <summary>
            Gets or sets a value indicating whether this instance is cell merge continue.
            </summary>
            <value>
            	<c>true</c> if this instance is cell merge continue; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.IsCellMergeStart">
            <summary>
            Gets or sets a value indicating whether this instance is cell merge start.
            </summary>
            <value>
            	<c>true</c> if this instance is cell merge start; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.IsRowMergeStart">
            <summary>
            Gets or sets a value indicating whether this instance is row merge start.
            </summary>
            <value>
            	<c>true</c> if this instance is row merge start; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.IsRowMergeContinue">
            <summary>
            Gets or sets a value indicating whether this instance is row merge continue.
            </summary>
            <value>
            	<c>true</c> if this instance is row merge continue; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.NextCell">
            <summary>
            Gets the next cell.
            </summary>
            <value>The next cell.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.RemainingString">
            <summary>
            Gets or sets the remaining string after the row split between pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.FinishedDrawingCell">
            <summary>
            Gets or sets whether drawing of cell is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCell.ImagePosition">
            <summary>
            Gets or sets the image alignment type of the PdfGridCell background image.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCellCollection.#ctor(Syncfusion.Pdf.Grid.PdfGridRow)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridCellCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCellCollection.Add">
            <summary>
            Adds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCellCollection.Add(Syncfusion.Pdf.Grid.PdfGridCell)">
            <summary>
            Adds the specified cell.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCellCollection.IndexOf(Syncfusion.Pdf.Grid.PdfGridCell)">
            <summary>
            Returns the index of a particular cell in the collection.
            </summary>
            <param name="cell">The cell.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCellCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCellCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Grid.PdfGridCell"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCellCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Grid.PdfGridCellCollection.PdfGridCellEnumerator">
            <summary>
            Column collection enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCellCollection.PdfGridCellEnumerator.#ctor(Syncfusion.Pdf.Grid.PdfGridCellCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridCellCollection.PdfGridCellEnumerator"/> struct.
            </summary>
            <param name="columnCollection">The column collection.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCellCollection.PdfGridCellEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCellCollection.PdfGridCellEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCellCollection.PdfGridCellEnumerator.CheckIndex">
            <summary>
            Checks the index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCellCollection.PdfGridCellEnumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridColumn.#ctor(Syncfusion.Pdf.Grid.PdfGrid)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridColumn"/> class.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridColumn.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridColumn.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridColumn.Grid">
            <summary>
            Gets the grid.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridColumnCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridColumnCollection.Add">
            <summary>
            Adds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridColumnCollection.Add(System.Int32)">
            <summary>
            Adds the specified count.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridColumnCollection.Add(Syncfusion.Pdf.Grid.PdfGridColumn)">
            <summary>
            Adds the specified column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridColumnCollection.AddColumns(System.Int32)">
            <summary>
            Adds the columns.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridColumnCollection.MeasureColumnsWidth">
            <summary>
            Calculates the column widths.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridColumnCollection.GetDefaultWidths(System.Single)">
            <summary>
            Gets the widths of the columns.
            </summary>
            <param name="totalWidth">The total width.</param>
            <param name="startColumn">The start column.</param>
            <param name="endColumn">The end column.</param>
            <returns>An array containing widths.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridColumnCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridColumnCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Grid.PdfGridColumn"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridColumnCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridColumnCollection.Width">
            <summary>
            Gets the widths.
            </summary>
            <value>The widths.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Grid.PdfGridColumnCollection.PdfGridColumnEnumerator">
            <summary>
            Column collection enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridColumnCollection.PdfGridColumnEnumerator.#ctor(Syncfusion.Pdf.Grid.PdfGridColumnCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridColumnCollection.PdfGridColumnEnumerator"/> struct.
            </summary>
            <param name="columnCollection">The column collection.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridColumnCollection.PdfGridColumnEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridColumnCollection.PdfGridColumnEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridColumnCollection.PdfGridColumnEnumerator.CheckIndex">
            <summary>
            Checks the index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridColumnCollection.PdfGridColumnEnumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridRow.#ctor(Syncfusion.Pdf.Grid.PdfGrid)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridRow"/> class.
            </summary>
            <param name="parentGrid">The parent grid.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridRow.MeasureHeight">
            <summary>
            Calculates the height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridRow.MeasureWidth">
            <summary>
            Measures the width.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridRow.ApplyStyle(Syncfusion.Pdf.Grid.PdfGridCellStyle)">
            <summary>
            Applies the cell style to all the cells present in a row.
            </summary>
            <param name="cellStyle">The cell style.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridRow.Cells">
            <summary>
            Gets the cells.
            </summary>
            <value>The cells.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridRow.Grid">
            <summary>
            Gets or sets the parent grid.
            </summary>
            <value>The parent grid.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridRow.Style">
            <summary>
            Gets or sets the row style.
            </summary>
            <value>The row style.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridRow.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridRow.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridRow.RowSpanExists">
            <summary>
            Gets or sets a value indicating whether [row span exists].
            </summary>
            <value><c>true</c> if [row span exists]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridRow.ColumnSpanExists">
            <summary>
            Gets or sets a value indicating whether [column span exists].
            </summary>
            <value><c>true</c> if [column span exists]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridRow.RowBreakHeight">
            <summary>
            Height of the row yet to be drawn after split.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridRow.RowOverflowIndex">
            <summary>
            Gets or sets the index of the cell at which the row breaks when AllowHorizonalOverflow is true.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridRow.NestedGridLayoutResult">
            <summary>
            Holds the result of nested grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridRow.RowIndex">
            <summary>
            Returns index of the row.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridRowCollection.#ctor(Syncfusion.Pdf.Grid.PdfGrid)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridRowCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridRowCollection.Add">
            <summary>
            Adds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridRowCollection.Add(Syncfusion.Pdf.Grid.PdfGridRow)">
            <summary>
            Adds this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridRowCollection.SetSpan(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the span.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="cellIndex">Index of the cell.</param>
            <param name="rowSpan">The row span.</param>
            <param name="colSpan">The col span.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridRowCollection.ApplyStyle(Syncfusion.Pdf.Grid.PdfGridStyleBase)">
            <summary>
            Applies the style.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridHeaderCollection.Add(Syncfusion.Pdf.Grid.PdfGridRow)">
            <summary>
            Adds the specified row.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridHeaderCollection.Add(System.Int32)">
            <summary>
            Adds the specified count.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridHeaderCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridHeaderCollection.ApplyStyle(Syncfusion.Pdf.Grid.PdfGridStyleBase)">
            <summary>
            Applies the style.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridHeaderCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridHeaderCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Pdf.Grid.PdfGridColumn"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridHeaderCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Grid.PdfGridHeaderCollection.PdfGridHeaderRowEnumerator">
            <summary>
            Column collection enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridHeaderCollection.PdfGridHeaderRowEnumerator.#ctor(Syncfusion.Pdf.Grid.PdfGridHeaderCollection)">
            <summary>
            Initializes a new instance of the <see cref="!:PdfGridRowEnumerator"/> struct.
            </summary>
            <param name="rowCollection">The row collection.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridHeaderCollection.PdfGridHeaderRowEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridHeaderCollection.PdfGridHeaderRowEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridHeaderCollection.PdfGridHeaderRowEnumerator.CheckIndex">
            <summary>
            Checks the index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridHeaderCollection.PdfGridHeaderRowEnumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfBorders.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfBorders.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfBorders.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfBorders.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfBorders.All">
            <summary>
            Sets all.
            </summary>
            <value>All.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfBorders.IsAll">
            <summary>
            Gets a value indicating whether this instance is all.
            </summary>
            <value><c>true</c> if this instance is all; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfBorders.Default">
            <summary>
            Gets the default.
            </summary>
            <value>The default.</value>
        </member>
        <member name="M:Syncfusion.Pdf.PdfEdges.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfEdges"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfEdges.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfEdges"/> class.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="top">The top.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfEdges.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfEdges.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfEdges.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfEdges.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfEdges.All">
            <summary>
            Sets all.
            </summary>
            <value>All.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfEdges.IsAll">
            <summary>
            Gets a value indicating whether this instance is all.
            </summary>
            <value><c>true</c> if this instance is all; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPaddings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfPaddings"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPaddings.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.PdfPaddings"/> class.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="top">The top.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPaddings.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPaddings.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPaddings.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPaddings.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPaddings.All">
            <summary>
            Sets all.
            </summary>
            <value>All.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Grid.PdfGridStyleBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridStyleBase.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridStyleBase.BackgroundBrush">
            <summary>
            Gets or sets the background brush.
            </summary>
            <value>The background brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridStyleBase.TextBrush">
            <summary>
            Gets or sets the text brush.
            </summary>
            <value>The text brush.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridStyleBase.TextPen">
            <summary>
            Gets or sets the text pen.
            </summary>
            <value>The text pen.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridStyleBase.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Grid.PdfGridStyle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridStyle"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridStyle.CellSpacing">
            <summary>
            Gets or sets the cell spacing.
            </summary>
            <value>The cell spacing.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridStyle.CellPadding">
            <summary>
            Gets or sets the cell padding.
            </summary>
            <value>The cell padding.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridStyle.BorderOverlapStyle">
            <summary>
            Gets or sets the border overlap style.
            </summary>
            <value>The border overlap style.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridStyle.AllowHorizontalOverflow">
            <summary>
            Gets or sets a value indicating whether to allow horizontal overflow.
            </summary>
            <value>
            	<c>true</c> if [allow horizontal overflow]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridStyle.HorizontalOverflowType">
            <summary>
            Gets or sets the type of the horizontal overflow.
            </summary>
            <value>The type of the horizontal overflow.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Grid.PdfGridRowStyle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridRowStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridRowStyle"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Grid.PdfGridCellStyle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCellStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridCellStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridCellStyle.GetDefaultFormat">
            <summary>
            Gets the default format.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCellStyle.StringFormat">
            <summary>
            Gets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCellStyle.Borders">
            <summary>
            Gets or sets the border.
            </summary>
            <value>The border.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCellStyle.BackgroundImage">
            <summary>
            Gets or sets the background image.
            </summary>
            <value>The background image.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridCellStyle.Edges">
            <summary>
            Gets or sets the edges.
            </summary>
            <value>The edges.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Grid.PdfHorizontalOverflowType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Grid.PdfHorizontalOverflowType.NextPage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Grid.PdfHorizontalOverflowType.LastPage">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Grid.PdfGridBeginPageLayoutEventArgs">
            <summary>
            Arguments of BeginPageLayoutEvent.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Graphics.BeginPageLayoutEventArgs"/> Class    
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridBeginPageLayoutEventArgs.#ctor(System.Drawing.RectangleF,Syncfusion.Pdf.PdfPage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridBeginPageLayoutEventArgs"/> class.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="page">The page.</param>
            <param name="startRow">The start row.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Grid.PdfGridBeginPageLayoutEventArgs.StartRowIndex">
            <summary>
            Gets the start row.
            </summary>
            <value>The start row.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Grid.PdfGridEndPageLayoutEventArgs">
            <summary>
            Arguments of EndPageLayoutEvent.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Graphics.EndPageLayoutEventArgs"/> Class    
        </member>
        <member name="M:Syncfusion.Pdf.Grid.PdfGridEndPageLayoutEventArgs.#ctor(Syncfusion.Pdf.Graphics.PdfLayoutResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Grid.PdfGridEndPageLayoutEventArgs"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="startRow">The start row.</param>
            <param name="endRow">The end row.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Lists.PdfMarker">
            <summary>
            Represents base class for markers.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfMarker.m_font">
            <summary>
            Marker font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfMarker.m_brush">
            <summary>
            Marker brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfMarker.m_pen">
            <summary>
            Marker pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfMarker.m_format">
            <summary>
            The string format of the marker.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfMarker.m_alignment">
            <summary>
            Marker alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfMarker.Font">
            <summary>
            Gets or sets marker font.
            </summary>		
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfMarker.Brush">
            <summary>
            Gets or sets marker brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfMarker.Pen">
            <summary>
            Gets or sets marker pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfMarker.StringFormat">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfMarker.Alignment">
            <summary>
            Gets or sets a value indicating whether the marker is
            situated at the left of the list or at the right of the list.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfMarker.RightToLeft">
            <summary>
            Indicates is alignment right.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Lists.PdfOrderedMarker">
            <summary>
            Represents marker for ordered list.
            </summary>
            <example>
            <code lang="C#">
             //Create a new PDf document
             PdfDocument document = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = document.Pages.Add();
             PdfGraphics graphics = page.Graphics;
             //Create a font and write title
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14,PdfFontStyle.Bold);            
             //Create a unordered list
             PdfOrderedMarker list = new PdfOrderedMarker(PdfNumberStyle.LowerRoman, font);
             //Create Ordered list as sublist of parent list
             PdfOrderedList subList = new PdfOrderedList();
             subList.Marker = list;
             //Add items to the list
             subList.Items.Add("List of Essential Studio products");
             subList.Items.Add("IO products");
             subList.Items.Add("Grid products");
             subList.Items.Add("Tools products");
             //Draw list
             subList.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
             document.Save("List.pdf");
            </code>
            <code lang="VB">
             'Create a new PDf document
             Dim document As PdfDocument = New PdfDocument()
             'Create a page
             Dim page As PdfPage = document.Pages.Add()
             Dim graphics As PdfGraphics = page.Graphics
             'Create a font and write title
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14,PdfFontStyle.Bold)
             'Create a unordered list
             Dim list As PdfOrderedMarker = New PdfOrderedMarker(PdfNumberStyle.LowerRoman, font)
             'Create Ordered list as sublist of parent list
             Dim subList As PdfOrderedList = New PdfOrderedList()
             subList.Marker = list
             'Add items to the list
             subList.Items.Add("List of Essential Studio products")
             subList.Items.Add("IO products")
             subList.Items.Add("Grid products")
             subList.Items.Add("Tools products")
             'Draw list
             subList.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
             document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfMarker"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfOrderedMarker"/> Class  
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfOrderedMarker.m_style">
            <summary>
            Holds numbering style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfOrderedMarker.m_startNumber">
            <summary>
            Start number for ordered list.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfOrderedMarker.m_delimiter">
            <summary>
            Delimiter for numbers.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfOrderedMarker.m_suffix">
            <summary>
            Finalizer for numbers.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfOrderedMarker.m_currentIndex">
            <summary>
            Current index of item.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedMarker.#ctor(Syncfusion.Pdf.PdfNumberStyle,System.String,System.String,Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfOrderedMarker"/> class.
            </summary>
            <param name="style">Number style of marker.</param>
            <param name="delimiter">Number delimiter of marker.</param>
            <param name="suffix">Number suffix of marker.</param>
            <param name="font">Number font of marker.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedMarker.#ctor(Syncfusion.Pdf.PdfNumberStyle,System.String,Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfOrderedMarker"/> class.
            </summary>
            <param name="style">Number style of marker.</param>
            <param name="suffix">Number suffix of the marker.</param>
            <param name="font">Number font of marker.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedMarker.#ctor(Syncfusion.Pdf.PdfNumberStyle,Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfOrderedMarker"/> class.
            </summary>
            <param name="style">Number style of marker.</param>
            <param name="font">Number font of marker.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedMarker.Draw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.PointF)">
            <summary>
            Draw marker in specified point at graphics.
            </summary>
            <param name="graphics"> Pdf graphics.</param>
            <param name="point">The location point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedMarker.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.PointF)">
            <summary>
            Draw marker in specified point at page.
            </summary>
            <param name="page">The page.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedMarker.GetNumber">
            <summary>
            Gets the marker number.
            </summary>
            <returns>Number in string.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfOrderedMarker.Style">
            <summary>
            Gets or sets the list numbering style.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);           
            //Create Ordered list as sublist of parent list
            PdfOrderedList subList = new PdfOrderedList();
            subList.Marker.Alignment = PdfListMarkerAlignment.Right;
            subList.Marker.Delimiter = ".";
            subList.Marker.StartNumber = 2;
            subList.Marker.Style = PdfNumberStyle.UpperRoman;
            //Add items to the list
            subList.Items.Add("List of Essential Studio products");
            subList.Items.Add("IO products");
            subList.Items.Add("Grid products");
            subList.Items.Add("Tools products");
            //Draw list
            subList.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("List.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            'Create Ordered list as sublist of parent list
            Dim subList As PdfOrderedList = New PdfOrderedList()
            subList.Marker.Alignment = PdfListMarkerAlignment.Right
            subList.Marker.Delimiter = "."
            subList.Marker.StartNumber = 2
            subList.Marker.Style = PdfNumberStyle.UpperRoman
            'Add items to the list
            subList.Items.Add("List of Essential Studio products")
            subList.Items.Add("IO products")
            subList.Items.Add("Grid products")
            subList.Items.Add("Tools products")
            'Draw list
            subList.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfOrderedList"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfOrderedMarker.StartNumber">
            <summary>
            Gets ar sets start number for ordered list. Default value is 1.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);           
            //Create Ordered list as sublist of parent list
            PdfOrderedList subList = new PdfOrderedList();
            subList.Marker.Alignment = PdfListMarkerAlignment.Right;
            subList.Marker.Delimiter = ".";
            subList.Marker.StartNumber = 2;
            subList.Marker.Style = PdfNumberStyle.UpperRoman;
            //Add items to the list
            subList.Items.Add("List of Essential Studio products");
            subList.Items.Add("IO products");
            subList.Items.Add("Grid products");
            subList.Items.Add("Tools products");
            //Draw list
            subList.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("List.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            'Create Ordered list as sublist of parent list
            Dim subList As PdfOrderedList = New PdfOrderedList()
            subList.Marker.Alignment = PdfListMarkerAlignment.Right
            subList.Marker.Delimiter = "."
            subList.Marker.StartNumber = 2
            subList.Marker.Style = PdfNumberStyle.UpperRoman
            'Add items to the list
            subList.Items.Add("List of Essential Studio products")
            subList.Items.Add("IO products")
            subList.Items.Add("Grid products")
            subList.Items.Add("Tools products")
            'Draw list
            subList.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfOrderedList"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfOrderedMarker.Delimiter">
            <summary>
            Gets or sets the delimiter.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);           
            //Create Ordered list as sublist of parent list
            PdfOrderedList subList = new PdfOrderedList();
            subList.Marker.Alignment = PdfListMarkerAlignment.Right;
            subList.Marker.Delimiter = ".";
            subList.Marker.StartNumber = 2;
            subList.Marker.Style = PdfNumberStyle.UpperRoman;
            //Add items to the list
            subList.Items.Add("List of Essential Studio products");
            subList.Items.Add("IO products");
            subList.Items.Add("Grid products");
            subList.Items.Add("Tools products");
            //Draw list
            subList.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("List.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            'Create Ordered list as sublist of parent list
            Dim subList As PdfOrderedList = New PdfOrderedList()
            subList.Marker.Alignment = PdfListMarkerAlignment.Right
            subList.Marker.Delimiter = "."
            subList.Marker.StartNumber = 2
            subList.Marker.Style = PdfNumberStyle.UpperRoman
            'Add items to the list
            subList.Items.Add("List of Essential Studio products")
            subList.Items.Add("IO products")
            subList.Items.Add("Grid products")
            subList.Items.Add("Tools products")
            'Draw list
            subList.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfOrderedList"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfOrderedMarker.Suffix">
            <summary>
            Gets or sets the suffix of the marker.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);           
            //Create Ordered list as sublist of parent list
            PdfOrderedList subList = new PdfOrderedList();
            subList.Marker.Alignment = PdfListMarkerAlignment.Right;
            subList.Marker.Delimiter = ".";
            subList.Marker.StartNumber = 2;
            subList.Marker.Style = PdfNumberStyle.UpperRoman;
            //Add items to the list
            subList.Items.Add("List of Essential Studio products");
            subList.Items.Add("IO products");
            subList.Items.Add("Grid products");
            subList.Items.Add("Tools products");
            //Draw list
            subList.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("List.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            'Create Ordered list as sublist of parent list
            Dim subList As PdfOrderedList = New PdfOrderedList()
            subList.Marker.Alignment = PdfListMarkerAlignment.Right
            subList.Marker.Delimiter = "."
            subList.Marker.StartNumber = 2
            subList.Marker.Style = PdfNumberStyle.UpperRoman
            'Add items to the list
            subList.Items.Add("List of Essential Studio products")
            subList.Items.Add("IO products")
            subList.Items.Add("Grid products")
            subList.Items.Add("Tools products")
            'Draw list
            subList.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfOrderedList"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfOrderedMarker.CurrentIndex">
            <summary>
            Gets or sets the index of the current item.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Lists.PdfUnorderedMarker">
            <summary>
            Represents bullet for the list.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList();            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);
            //Create string format
            PdfStringFormat format = new PdfStringFormat();
            format.LineSpacing = 20f;
            font = new PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold);
            //Apply formattings to list
            list.Font = font;
            list.StringFormat = format;
            //Set list indent
            list.Indent = 10;
            //Add items to the list
            list.Items.Add("List of Essential Studio products");
            list.Items.Add("IO products");
            //Set text indent
            list.TextIndent = 10;
            //Draw list
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("UnOrderList.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList()
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            'Create string format
            Dim format As PdfStringFormat = New PdfStringFormat()
            format.LineSpacing = 20f
            font = New PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold)
            'Apply formattings to list
            list.Font = font
            list.StringFormat = format
            'Set list indent
            list.Indent = 10
            'Add items to the list
            list.Items.Add("List of Essential Studio products")
            list.Items.Add("IO products")
            'Set text indent
            list.TextIndent = 10
            'Draw list
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("UnOrderList.pdf")
            </code>
            </example>   
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfMarker"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfUnorderedList"/> Class 
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedMarker.m_text">
            <summary>
            Holds the marker text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedMarker.m_style">
            <summary>
            Holds the marker style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedMarker.m_image">
            <summary>
            Holds the marker image.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedMarker.m_template">
            <summary>
            Marker temlapte.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedMarker.m_size">
            <summary>
            Marker size.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedMarker.m_unicodeFont">
            <summary>
            Font used when draws styled marker
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedMarker.#ctor(System.String,Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfUnorderedMarker"/> class.
            </summary>
            <param name="text">The text of the marker.</param>
            <param name="font">Marker font.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList();           
            list.Marker = new PdfUnorderedMarker("list", font);            
            //Create string format
            PdfStringFormat format = new PdfStringFormat();
            format.LineSpacing = 20f;
            font = new PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold);
            //Apply formattings to list
            list.Font = font;
            list.StringFormat = format;
            //Set list indent
            list.Indent = 10;
            //Add items to the list
            list.Items.Add("List of Essential Studio products");
            list.Items.Add("IO products");
            //Set text indent
            list.TextIndent = 10;
            //Draw list
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("UnOrderList.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList()
            list.Marker = New PdfUnorderedMarker("list", font)
            'Create string format
            Dim format As PdfStringFormat = New PdfStringFormat()
            format.LineSpacing = 20f
            font = New PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold)
            'Apply formattings to list
            list.Font = font
            list.StringFormat = format
            'Set list indent
            list.Indent = 10
            'Add items to the list
            list.Items.Add("List of Essential Studio products")
            list.Items.Add("IO products")
            'Set text indent
            list.TextIndent = 10
            'Draw list
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("UnOrderList.pdf")
            </code>
            </example>   
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfMarker"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfUnorderedList"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedMarker.#ctor(Syncfusion.Pdf.Lists.PdfUnorderedMarkerStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfUnorderedMarker"/> class.
            </summary>
            <param name="style">The style of the marker.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList();    
            list.Markerlist.Marker = new PdfUnorderedMarker(PdfUnorderedMarkerStyle.Asterisk);
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);
            //Create string format
            PdfStringFormat format = new PdfStringFormat();
            format.LineSpacing = 20f;
            font = new PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold);
            //Apply formattings to list
            list.Font = font;
            list.StringFormat = format;
            //Set list indent
            list.Indent = 10;
            //Add items to the list
            list.Items.Add("List of Essential Studio products");
            list.Items.Add("IO products");
            //Set text indent
            list.TextIndent = 10;
            //Draw list
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("UnOrderList.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList()
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            'Create string format
            Dim format As PdfStringFormat = New PdfStringFormat()
            format.LineSpacing = 20f
            font = New PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold)
            'Apply formattings to list
            list.Font = font
            list.StringFormat = format
            'Set list indent
            list.Indent = 10
            'Add items to the list
            list.Items.Add("List of Essential Studio products")
            list.Items.Add("IO products")
            'Set text indent
            list.TextIndent = 10
            'Draw list
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("UnOrderList.pdf")
            </code>
            </example>   
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfMarker"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfUnorderedList"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedMarker.#ctor(Syncfusion.Pdf.Graphics.PdfImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfUnorderedMarker"/> class.
            </summary>
            <param name="image">The image of the marker.</param>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList();                  
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);
            //Create string format
            PdfStringFormat format = new PdfStringFormat();
            format.LineSpacing = 20f;
            font = new PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold);
            //Apply formattings to list
            list.Font = font;
            list.StringFormat = format;
            //Set list indent
            list.Indent = 10;
            //Add items to the list
            list.Items.Add("List of Essential Studio products");
            list.Items.Add("IO products");
            //Set text indent
            list.TextIndent = 10;
            //Draw list
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("UnOrderList.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList()
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            'Create string format
            Dim format As PdfStringFormat = New PdfStringFormat()
            format.LineSpacing = 20f
            font = New PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold)
            'Apply formattings to list
            list.Font = font
            list.StringFormat = format
            'Set list indent
            list.Indent = 10
            'Add items to the list
            list.Items.Add("List of Essential Studio products")
            list.Items.Add("IO products")
            'Set text indent
            list.TextIndent = 10
            'Draw list
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("UnOrderList.pdf")
            </code>
            </example>   
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfMarker"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfUnorderedList"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedMarker.#ctor(Syncfusion.Pdf.Graphics.PdfTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfUnorderedMarker"/> class.
            </summary>
            <param name="template">Template of the marker.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedMarker.Draw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.PointF,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="point">The point.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedMarker.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.PointF,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="point">The point.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedMarker.GetStyledText">
            <summary>
            Gets the styled text.
            </summary>
            <returns>Returns symbol represented of style.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfUnorderedMarker.Template">
            <summary>
            Gets or sets template of the marker.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfUnorderedMarker.Image">
            <summary>
            Gets or sets image of the marker.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList();            
            //Set the list image
            list.Marker.Image = new PdfBitmap("Bullet.jpg");
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);
            //Create string format
            PdfStringFormat format = new PdfStringFormat();
            format.LineSpacing = 20f;
            font = new PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold);
            //Apply formattings to list
            list.Font = font;
            list.StringFormat = format;
            //Set list indent
            list.Indent = 10;
            //Add items to the list
            list.Items.Add("List of Essential Studio products");
            list.Items.Add("IO products");
            //Set text indent
            list.TextIndent = 10;
            //Draw list
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("UnOrderList.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList()
            'Set the list image
            list.Marker.Image = new PdfBitmap("Bullet.jpg")
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            'Create string format
            Dim format As PdfStringFormat = New PdfStringFormat()
            format.LineSpacing = 20f
            font = New PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold)
            'Apply formattings to list
            list.Font = font
            list.StringFormat = format
            'Set list indent
            list.Indent = 10
            'Add items to the list
            list.Items.Add("List of Essential Studio products")
            list.Items.Add("IO products")
            'Set text indent
            list.TextIndent = 10
            'Draw list
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("UnOrderList.pdf")
            </code>
            </example>   
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfMarker"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfBitmap"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfUnorderedMarker.Text">
            <summary>
            Gets or sets marker text.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList();  
            //Set the marker Text
            list.Marker.Text = "List: ";
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);
            //Create string format
            PdfStringFormat format = new PdfStringFormat();
            format.LineSpacing = 20f;
            font = new PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold);
            //Apply formattings to list
            list.Font = font;
            list.StringFormat = format;
            //Set list indent
            list.Indent = 10;
            //Add items to the list
            list.Items.Add("List of Essential Studio products");
            list.Items.Add("IO products");
            //Set text indent
            list.TextIndent = 10;
            //Draw list
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("UnOrderList.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList()
            'Set the marker Text
            list.Marker.Text = "List: "
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            'Create string format
            Dim format As PdfStringFormat = New PdfStringFormat()
            format.LineSpacing = 20f
            font = New PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold)
            'Apply formattings to list
            list.Font = font
            list.StringFormat = format
            'Set list indent
            list.Indent = 10
            'Add items to the list
            list.Items.Add("List of Essential Studio products")
            list.Items.Add("IO products")
            'Set text indent
            list.TextIndent = 10
            'Draw list
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("UnOrderList.pdf")
            </code>
            </example>   
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfMarker"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class         
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfUnorderedMarker.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList();            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);
            //Create string format
            PdfStringFormat format = new PdfStringFormat();
            format.LineSpacing = 20f;
            font = new PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold);
            //Apply formattings to list
            list.Font = font;
            list.StringFormat = format;
            //Set list indent
            list.Indent = 10;
            //Add items to the list
            list.Items.Add("List of Essential Studio products");
            list.Items.Add("IO products");
            //Set text indent
            list.TextIndent = 10;
            //Draw list
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("UnOrderList.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList()
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            'Create string format
            Dim format As PdfStringFormat = New PdfStringFormat()
            format.LineSpacing = 20f
            font = New PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold)
            'Apply formattings to list
            list.Font = font
            list.StringFormat = format
            'Set list indent
            list.Indent = 10
            'Add items to the list
            list.Items.Add("List of Essential Studio products")
            list.Items.Add("IO products")
            'Set text indent
            list.TextIndent = 10
            'Draw list
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("UnOrderList.pdf")
            </code>
            </example>   
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfMarker"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfFont"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfUnorderedList"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfUnorderedMarker.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfUnorderedMarker.UnicodeFont">
            <summary>
            Gets or sets the unicode font.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Lists.PdfUnorderedMarkerStyle">
            <summary>
            Specifies the marker style.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList();            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);
            //Create string format
            PdfStringFormat format = new PdfStringFormat();
            format.LineSpacing = 20f;
            font = new PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold);
            //Apply formattings to list
            list.Font = font;
            list.StringFormat = format;
            //Set list indent
            list.Indent = 10;
            //Add items to the list
            list.Items.Add("List of Essential Studio products");
            list.Items.Add("IO products");
            //Set text indent
            list.TextIndent = 10;
            //Draw list
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("UnOrderList.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList()
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            'Create string format
            Dim format As PdfStringFormat = New PdfStringFormat()
            format.LineSpacing = 20f
            font = New PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold)
            'Apply formattings to list
            list.Font = font
            list.StringFormat = format
            'Set list indent
            list.Indent = 10
            'Add items to the list
            list.Items.Add("List of Essential Studio products")
            list.Items.Add("IO products")
            'Set text indent
            list.TextIndent = 10
            'Draw list
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("UnOrderList.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfMarker"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="!:PdfFont"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfUnorderedList"/> Class 
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedMarkerStyle.None">
            <summary>
            Marker have  no style.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedMarkerStyle.Disk">
            <summary>
            Marker is like a disk.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedMarkerStyle.Square">
            <summary>
            Marker is like a square.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedMarkerStyle.Asterisk">
            <summary>
            Marker is like a Asterisk.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedMarkerStyle.Circle">
            <summary>
            Marker is like a circle.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedMarkerStyle.CustomString">
            <summary>
            Marker is custom string.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedMarkerStyle.CustomImage">
            <summary>
            Marker is custom image.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedMarkerStyle.CustomTemplate">
            <summary>
            Marker is custom template.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Lists.PdfListMarkerAlignment">
            <summary>
            Represents marker alignment.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList();            
            //Set the marker style
            list.Marker.Alignment = PdfListMarkerAlignment.Left
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);
            //Create string format
            PdfStringFormat format = new PdfStringFormat();
            format.LineSpacing = 20f;
            font = new PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold);
            //Apply formattings to list
            list.Font = font;
            list.StringFormat = format;
            //Set list indent
            list.Indent = 10;
            //Add items to the list
            list.Items.Add("List of Essential Studio products");
            list.Items.Add("IO products");
            //Set text indent
            list.TextIndent = 10;
            //Draw list
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("UnOrderList.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList()
            'Set the marker alignment
            list.Marker.Alignment = PdfListMarkerAlignment.Left
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            'Create string format
            Dim format As PdfStringFormat = New PdfStringFormat()
            format.LineSpacing = 20f
            font = New PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold)
            'Apply formattings to list
            list.Font = font
            list.StringFormat = format
            'Set list indent
            list.Indent = 10
            'Add items to the list
            list.Items.Add("List of Essential Studio products")
            list.Items.Add("IO products")
            'Set text indent
            list.TextIndent = 10
            'Draw list
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("UnOrderList.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfMarker"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class   
            <seealso cref="!:PdfFont"/> Class   
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfUnorderedList"/> Class 
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListMarkerAlignment.Left">
            <summary>
            Left alignment for marker.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListMarkerAlignment.Right">
            <summary>
            Right alignment for marker.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Lists.PdfList">
            <summary>
            Represents base class for lists.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfLayoutElement"/> Class    
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfList.c_splitChars">
            <summary>
            The characters for splitting.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfList.CreateItems(System.String)">
            <summary>
            Creates an item collection.
            </summary>
            <param name="text">The text.</param>
            <returns>The item collection initialized properly.</returns>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfList.m_items">
            <summary>
            Holds collection of items.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfList.m_indent">
            <summary>
            Tabulation for items.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfList.m_textIndent">
            <summary>
            Indent between marker and text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfList.m_font">
            <summary>
            List's font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfList.m_pen">
            <summary>
            The pen for the list.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfList.m_brush">
            <summary>
            The brush for the list.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfList.m_format">
            <summary>
            The string format for the list.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfList.#ctor">
            <summary>
            Creates new list.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfList.#ctor(Syncfusion.Pdf.Lists.PdfListItemCollection)">
            <summary>
            Creates new list with items.
            </summary>
            <param name="items">Collection of list items.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfList.#ctor(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfList"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfList.Draw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Single,System.Single)">
            <summary>
            Draws an list on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the list should be printed.</param>
            <param name="x">X co-ordinate of the list.</param>
            <param name="y">Y co-ordinate of the list.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfList.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws list on the Graphics.
            </summary>
            <param name="graphics">Pdf graphics.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfList.Layout(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts list at page.
            </summary>
            <param name="param">Pdf layout parameters.</param>
            <returns>Returns layout results.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfList.OnBeginItemLayout(Syncfusion.Pdf.Lists.BeginItemLayoutEventArgs)">
            <summary>
            Rise the BeginItemLayout event.
            </summary>
            <param name="args">The instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfList.OnEndItemLayout(Syncfusion.Pdf.Lists.EndItemLayoutEventArgs)">
            <summary>
            Rise the EndItemLayout event.
            </summary>
            <param name="args">The instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfList.Items">
            <summary>
            Gets items of the list.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfList.Indent">
            <summary>
            Gets or sets tabulation for the list.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfList.TextIndent">
            <summary>
            Gets or sets the indent from the marker to the list item text.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfList.Font">
            <summary>
            Gets or sets the list font.
            </summary>		
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfList.Brush">
            <summary>
            Gets or sets list brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfList.Pen">
            <summary>
            Gets or sets list pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfList.StringFormat">
            <summary>
            Gets or sets the format of the list.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfList.RiseBeginItemLayout">
            <summary>
            Gets a value indicating whether to raise begin item layout event.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfList.RiseEndItemLayout">
            <summary>
            Gets a value indicating whether to raise end item layout event.
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.Lists.PdfList.BeginItemLayout">
            <summary>
            Event that rises when item begin layout.
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.Lists.PdfList.EndItemLayout">
            <summary>
            Event that rises when item end layout.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Lists.PdfListItem">
            <summary>
            Represents the list item of the list.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection(products);            
             // Creates an item
             PdfListItem item = new PdfListItem("Tools");
             item.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
             // Creates Grid list item
             PdfListItem gridItem = new PdfListItem("Grid");
             gridItem.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
             // Adding items in collection
             listItemCollection.Add(item);
             listItemCollection.Add(gridItem);
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList(listItemCollection);            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;            
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("List.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection(products)
            ' Creates an item
            Dim item As PdfListItem = New PdfListItem("Tools")
            item.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Creates Grid list item
            Dim gridItem As PdfListItem = New PdfListItem("Grid")
            gridItem.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Adding items in collection
            listItemCollection.Add(item)
            listItemCollection.Add(gridItem)
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList(listItemCollection)
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class  
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListItem.m_font">
            <summary>
            Holds item font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListItem.m_text">
            <summary>
            Holds item text.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListItem.m_format">
            <summary>
            Holds text format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListItem.m_pen">
            <summary>
            Holds pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListItem.m_brush">
            <summary>
            Holds brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListItem.m_list">
            <summary>
            Sub list.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListItem.m_textIndent">
            <summary>
            Text indent for current item.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItem.#ctor">
            <summary>
            Creates new empty pdf list item.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItem.#ctor(System.String)">
            <summary>
            Creates new pdf list item with default settings.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItem.#ctor(System.String,Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfListItem"/> class.
            </summary>
            <param name="text">The text of item.</param>
            <param name="font">The font of item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItem.#ctor(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfListItem"/> class.
            </summary>
            <param name="text">The text of item.</param>
            <param name="font">The font of item.</param>
            <param name="format">The string format.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItem.#ctor(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Creates new list item.
            </summary>
            <param name="text">The item text.</param>
            <param name="font">The item font.</param>
            <param name="format">The string format of item.</param>
            <param name="pen">The item pen.</param>
            <param name="brush">The item brush.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfListItem.Font">
            <summary>
            Gets or sets item font.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection(products);            
             // Creates an item
             PdfListItem item = new PdfListItem("Tools");
             item.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
             // Creates Grid list item
             PdfListItem gridItem = new PdfListItem("Grid");
             gridItem.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
             // Adding items in collection
             listItemCollection.Add(item);
             listItemCollection.Add(gridItem);
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList(listItemCollection);            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;            
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("List.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection(products)
            ' Creates an item
            Dim item As PdfListItem = New PdfListItem("Tools")
            item.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Creates Grid list item
            Dim gridItem As PdfListItem = New PdfListItem("Grid")
            gridItem.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Adding items in collection
            listItemCollection.Add(item)
            listItemCollection.Add(gridItem)
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList(listItemCollection)
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfListItem.Text">
            <summary>
            Gets or sets item text.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection(products);            
             // Creates an item
             PdfListItem item = new PdfListItem("Tools");
             item.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
             // Creates Grid list item
             PdfListItem gridItem = new PdfListItem("Grid");
            gridItem.Text = "Grid";
             gridItem.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
             // Adding items in collection
             listItemCollection.Add(item);
             listItemCollection.Add(gridItem);
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList(listItemCollection);            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;            
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("List.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection(products)
            ' Creates an item
            Dim item As PdfListItem = New PdfListItem("Tools")
            item.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Creates Grid list item
            Dim gridItem As PdfListItem = New PdfListItem("Grid")
            gridItem.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            gridItem.Text = "Grid"
            ' Adding items in collection
            listItemCollection.Add(item)
            listItemCollection.Add(gridItem)
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList(listItemCollection)
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class       
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfListItem.StringFormat">
            <summary>
            Gets or sets item string format.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection(products);            
             // Creates an item
             PdfListItem item = new PdfListItem("Tools");
             item.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
             // Creates Grid list item
             PdfListItem gridItem = new PdfListItem("Grid");
            gridItem.StringFormat = new PdfStringFormat(PdfTextAlignment.Left);
             gridItem.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
             // Adding items in collection
             listItemCollection.Add(item);
             listItemCollection.Add(gridItem);
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList(listItemCollection);            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;            
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("List.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection(products)
            ' Creates an item
            Dim item As PdfListItem = New PdfListItem("Tools")
            item.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Creates Grid list item
            Dim gridItem As PdfListItem = New PdfListItem("Grid")
            gridItem.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            gridItem.StringFormat = New PdfStringFormat(PdfTextAlignment.Left)
            ' Adding items in collection
            listItemCollection.Add(item)
            listItemCollection.Add(gridItem)
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList(listItemCollection)
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class        
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfListItem.Pen">
            <summary>
            Gets or sets list item pen.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection(products);            
             // Creates an item
             PdfListItem item = new PdfListItem("Tools");
             item.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
             // Creates Grid list item
             PdfListItem gridItem = new PdfListItem("Grid");
            gridItem.Pen = new PdfPen(PdfBrushes.Blue);
             gridItem.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
             // Adding items in collection
             listItemCollection.Add(item);
             listItemCollection.Add(gridItem);
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList(listItemCollection);            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;            
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("List.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection(products)
            ' Creates an item
            Dim item As PdfListItem = New PdfListItem("Tools")
            item.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Creates Grid list item
            Dim gridItem As PdfListItem = New PdfListItem("Grid")
            gridItem.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            gridItem.Pen = New PdfPen(PdfBrushes.Blue)
            ' Adding items in collection
            listItemCollection.Add(item)
            listItemCollection.Add(gridItem)
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList(listItemCollection)
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class        
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfListItem.Brush">
            <summary>
            Gets or sets list item brush.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection(products);            
             // Creates an item
             PdfListItem item = new PdfListItem("Tools");
             item.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
             // Creates Grid list item
             PdfListItem gridItem = new PdfListItem("Grid");
            gridItem.Brush = PdfBrushes.BlueViolet;
             gridItem.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
             // Adding items in collection
             listItemCollection.Add(item);
             listItemCollection.Add(gridItem);
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList(listItemCollection);            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;            
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("List.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection(products)
            ' Creates an item
            Dim item As PdfListItem = New PdfListItem("Tools")
            item.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Creates Grid list item
            Dim gridItem As PdfListItem = New PdfListItem("Grid")
            gridItem.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            gridItem.Brush = PdfBrushes.BlueViolet
            ' Adding items in collection
            listItemCollection.Add(item)
            listItemCollection.Add(gridItem)
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList(listItemCollection)
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class           
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfListItem.SubList">
            <summary>
            Gets or sets sublist for item. 
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;      
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection();            
            // Creates an item
            PdfListItem item = new PdfListItem("Backoffice");
            item.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);            
            // Creates Grid list item
            PdfListItem gridItem = new PdfListItem("Grid");
            gridItem.Brush = PdfBrushes.BlueViolet;
            gridItem.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);          
            // Adding items in collection
            listItemCollection.Add(item);
            listItemCollection.Add(gridItem);
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList(listItemCollection);            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;
            //Create Ordered list as sublist of parent list
            PdfOrderedList subList = new PdfOrderedList();
            subList.Marker.Brush = PdfBrushes.Black;
            subList.Indent = 20;
            subList.Items.Add("Essential PDF");
            subList.Items.Add("Essential DocIO");
            subList.Items.Add("Essrntial XlsIO");            
            list.Items[0].SubList = subList;
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("List.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection()
            ' Creates an item
            Dim item As PdfListItem = New PdfListItem("Backoffice")
            item.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Creates Grid list item
            Dim gridItem As PdfListItem = New PdfListItem("Grid")
            gridItem.Brush = PdfBrushes.BlueViolet
            gridItem.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Adding items in collection
            listItemCollection.Add(item)
            listItemCollection.Add(gridItem)
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList(listItemCollection)
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            'Create Ordered list as sublist of parent list
            Dim subList As PdfOrderedList = New PdfOrderedList()
            subList.Marker.Brush = PdfBrushes.Black		
            subList.Indent = 20
            subList.Items.Add("Essential PDF")
            subList.Items.Add("Essential DocIO")
            subList.Items.Add("Essrntial XlsIO")
            list.Items(0).SubList = subList
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class         
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfListItem.TextIndent">
            <summary>
            Gets or sets indent for item.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;      
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection();            
            // Creates an item
            PdfListItem item = new PdfListItem("Backoffice");
            item.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);            
            // Creates Grid list item
            PdfListItem gridItem = new PdfListItem("Grid");
            gridItem.TextIndent = 10;
            gridItem.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);          
            // Adding items in collection
            listItemCollection.Add(item);
            listItemCollection.Add(gridItem);
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList(listItemCollection);            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;
            //Create Ordered list as sublist of parent list
            PdfOrderedList subList = new PdfOrderedList();
            subList.Marker.Brush = PdfBrushes.Black;
            subList.Indent = 20;
            subList.Items.Add("Essential PDF");
            subList.Items.Add("Essential DocIO");
            subList.Items.Add("Essrntial XlsIO");            
            list.Items[0].SubList = subList;
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("List.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection()
            ' Creates an item
            Dim item As PdfListItem = New PdfListItem("Backoffice")
            item.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Creates Grid list item
            Dim gridItem As PdfListItem = New PdfListItem("Grid")
            gridItem.TextIndent = 10
            gridItem.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Adding items in collection
            listItemCollection.Add(item)
            listItemCollection.Add(gridItem)
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList(listItemCollection)
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            'Create Ordered list as sublist of parent list
            Dim subList As PdfOrderedList = New PdfOrderedList()
            subList.Marker.Brush = PdfBrushes.Black		
            subList.Indent = 20
            subList.Items.Add("Essential PDF")
            subList.Items.Add("Essential DocIO")
            subList.Items.Add("Essrntial XlsIO")
            list.Items(0).SubList = subList
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class         
        </member>
        <member name="T:Syncfusion.Pdf.Lists.PdfListItemCollection">
            <summary>
            Represents collection of list items.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection(products);            
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList(listItemCollection);            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;            
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("List.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection(products)
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList(listItemCollection)
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class    
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItemCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfListItemCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItemCollection.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:PdfListItemCollection"/> class.
            </summary>
            <param name="items">A string array that contains items separated by the new line character.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItemCollection.Add(Syncfusion.Pdf.Lists.PdfListItem)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The item index in collection.</returns>
            <example>
            <code lang="C#">
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection();     
            // Creates an item
            PdfListItem item = new PdfListItem("Backoffice");
            item.TextIndent = 10;
            item.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);            
            // Creates Grid list item
            PdfListItem gridItem = new PdfListItem("Grid");
            gridItem.Brush = PdfBrushes.BlueViolet;
            gridItem.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);          
            // Adding items in collection
            listItemCollection.Add(item);
            listItemCollection.Add(gridItem);
            </code>
            <code lang="VB">
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection()
            ' Creates an item
            Dim item As PdfListItem = New PdfListItem("Backoffice")
            item.TextIndent = 10
            item.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Creates Grid list item
            Dim gridItem As PdfListItem = New PdfListItem("Grid")
            gridItem.Brush = PdfBrushes.BlueViolet
            gridItem.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Adding items in collection
            listItemCollection.Add(item)
            listItemCollection.Add(gridItem)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItemCollection.Add(Syncfusion.Pdf.Lists.PdfListItem,System.Single)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="itemIndent">The item indent.</param>
            <example>
            <code lang="C#">
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection();     
            // Creates an item
            PdfListItem item = new PdfListItem("Backoffice");
            item.TextIndent = 10;
            item.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);            
            // Creates Grid list item
            PdfListItem gridItem = new PdfListItem("Grid");
            gridItem.Brush = PdfBrushes.BlueViolet;
            gridItem.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);          
            // Adding items in collection
            listItemCollection.Add(item);
            listItemCollection.Add(gridItem);
            </code>
            <code lang="VB">
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection()
            ' Creates an item
            Dim item As PdfListItem = New PdfListItem("Backoffice")
            item.TextIndent = 10
            item.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Creates Grid list item
            Dim gridItem As PdfListItem = New PdfListItem("Grid")
            gridItem.Brush = PdfBrushes.BlueViolet
            gridItem.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Adding items in collection
            listItemCollection.Add(item)
            listItemCollection.Add(gridItem)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItemCollection.Add(System.String)">
            <summary>
            Adds the item with a specified text.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
            <example>
            <code lang="C#">
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection();     
            // Creates an item
            PdfListItem item = new PdfListItem("Backoffice");
            item.TextIndent = 10;
            item.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);            
            // Creates Grid list item
            PdfListItem gridItem = new PdfListItem("Grid");
            gridItem.Brush = PdfBrushes.BlueViolet;
            gridItem.Font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);          
            // Adding items in collection
            listItemCollection.Add(item, 10);
            listItemCollection.Add(gridItem, 8);
            </code>
            <code lang="VB">
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection()
            ' Creates an item
            Dim item As PdfListItem = New PdfListItem("Backoffice")
            item.TextIndent = 10
            item.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Creates Grid list item
            Dim gridItem As PdfListItem = New PdfListItem("Grid")
            gridItem.Brush = PdfBrushes.BlueViolet
            gridItem.Font = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Adding items in collection
            listItemCollection.Add(item, 10)
            listItemCollection.Add(gridItem, 8)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItemCollection.Add(System.String,System.Single)">
            <summary>
            Adds the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="itemIndent">The item indent.</param>
            <returns>List item.</returns>
            <example>
            <code lang="C#">
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection();
            // Adding items in collection
            listItemCollection.Add("Backoffice", 10);
            listItemCollection.Add("Grid", 8);
            </code>
            <code lang="VB">
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection()
            ' Adding items in collection
            listItemCollection.Add("Backoffice", 10)
            listItemCollection.Add("Grid", 8)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItemCollection.Add(System.String,Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Adds the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <returns>The item index in collection.</returns>
            <example>
            <code lang="C#">
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection();
            // Adding items in collection
            listItemCollection.Add("Backoffice", new PdfStandardFont( PdfFontFamily.TimesRoman,10));
            listItemCollection.Add("Grid", new PdfStandardFont(PdfFontFamily.TimesRoman, 11));
            </code>
            <code lang="VB">
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection()
            ' Adding items in collection
            listItemCollection.Add("Backoffice", New PdfStandardFont(PdfFontFamily.TimesRoman,10))
            listItemCollection.Add("Grid", New PdfStandardFont(PdfFontFamily.TimesRoman, 11))
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItemCollection.Add(System.String,Syncfusion.Pdf.Graphics.PdfFont,System.Single)">
            <summary>
            Adds the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="itemIndent">The item indent.</param>
            <returns>List item.</returns>
            <example>
            <code lang="C#">
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection();
            // Adding items in collection
            listItemCollection.Add("Backoffice", new PdfStandardFont( PdfFontFamily.TimesRoman,10), 10);
            listItemCollection.Add("Grid", new PdfStandardFont(PdfFontFamily.TimesRoman, 11), 8);
            </code>
            <code lang="VB">
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection()
            ' Adding items in collection
            listItemCollection.Add("Backoffice", New PdfStandardFont(PdfFontFamily.TimesRoman,10), 10)
            listItemCollection.Add("Grid", New PdfStandardFont(PdfFontFamily.TimesRoman, 11), 8)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItemCollection.Insert(System.Int32,Syncfusion.Pdf.Lists.PdfListItem)">
            <summary>
            Inserts item at the specified index.
            </summary>
            <param name="index">The specified index.</param>
            <param name="item">The item.</param>
            <returns>The item index </returns>
            <example>
            <code lang="C#">
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };                          
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection(products);
            PdfListItem newItem = new PdfListItem("PDF");
            // Insert a new item in the collection
            listItemCollection.Insert(0, newItem);
            </code>
            <code lang="VB">
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection(products)
            Dim newItem As PdfListItem = New PdfListItem("PDF")
            ' Insert a new item in the collection
            listItemCollection.Insert(0, newItem)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItemCollection.Insert(System.Int32,Syncfusion.Pdf.Lists.PdfListItem,System.Single)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <param name="itemIndent">The item indent.</param>
            <example>
            <code lang="C#">
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };                          
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection(products);
            PdfListItem newItem = new PdfListItem("PDF");
            // Insert a new item in the collection
            listItemCollection.Insert(0, newItem, 10);
            </code>
            <code lang="VB">
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection(products)
            Dim newItem As PdfListItem = New PdfListItem("PDF")
            ' Insert a new item in the collection
            listItemCollection.Insert(0, newItem, 10)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItemCollection.Remove(Syncfusion.Pdf.Lists.PdfListItem)">
            <summary>
            Removes the specified item from the list.
            </summary>
            <param name="item">The specified item.</param>
            <example>
            <code lang="C#">
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };                          
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection(products);
            PdfListItem toolsItem = new PdfListItem("Tools");
            // Remove 'Tools' list item
            listItemCollection.Remove(toolsItem);
            </code>
            <code lang="VB">
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection(products)
            Dim toolsItem As PdfListItem = New PdfListItem("Tools")
            ' Remove 'Tools' list item
            listItemCollection.Remove(toolsItem)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the list.
            </summary>
            <param name="index">he specified index.</param>
            <example>
            <code lang="C#">
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };                          
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection(products);         
            // Remove the firse item from the collection
            listItemCollection.RemoveAt(0);
            </code>
            <code lang="VB">
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection(products)
            ' Remove the firse item from the collection
            listItemCollection.RemoveAt(0)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItemCollection.IndexOf(Syncfusion.Pdf.Lists.PdfListItem)">
            <summary>
            Determines the index of a specific item in the list.
            </summary>
            <param name="item">The item to locate in the list. </param>
            <returns>The index of item if found in the list; otherwise, -1. </returns>
            <example>
            <code lang="C#">
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };                          
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection(products);
            // Creates 'Tools' list item 
            PdfListItem toolsItem = new PdfListItem("Tools");
            int indexOf = listItemCollection.IndexOf(toolsItem);
            </code>
            <code lang="VB">
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection(products)
            ' Creates 'Tools' list item 
            Dim toolsItem As PdfListItem = New PdfListItem("Tools")
            Dim indexOf As Integer = listItemCollection.IndexOf(toolsItem)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListItemCollection.Clear">
            <summary>
            Clears collection.
            </summary>
            <example>
            <code lang="C#">
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };                          
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection(products);         
            // Clears the list
            listItemCollection.Clear();
            </code>
            <code lang="VB">
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection(products)
            ' Clears the list
            listItemCollection.Clear()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfListItemCollection.Item(System.Int32)">
            <summary>
            Gets the PdfListItem from collection at the specified index.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };
            // Creates an item collection
            PdfListItemCollection listItemCollection = new PdfListItemCollection(products);            
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList(listItemCollection);            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;            
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("List.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            ' Creates an item collection
            Dim listItemCollection As PdfListItemCollection = New PdfListItemCollection(products)
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList(listItemCollection)
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfListItemCollection"/> Class  
        </member>
        <member name="T:Syncfusion.Pdf.Lists.PdfListLayouter">
            <summary>
            Layouts list.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Graphics.ElementLayouter"/> Class  
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.m_graphics">
            <summary>
            Current graphics for lay outing.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.m_finish">
            <summary>
            Indicates end of lay outing.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.m_curList">
            <summary>
            List that layouts at the moment.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.m_info">
            <summary>
            Stack than contains ListInfo.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.m_index">
            <summary>
            Index of item that lay outing.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.m_indent">
            <summary>
            The indent of current list.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.m_resultHeight">
            <summary>
            Height in which it stop lay outing.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.m_bounds">
            <summary>
            Lay outing bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.currentPage">
            <summary>
            Current page for layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.size">
            <summary>
            Size for item lay outing.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.usePaginateBounds">
            <summary>
            If true it use paginate bounds if it is set.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.currentBrush">
            <summary>
            Current brush for lay outing.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.currentPen">
            <summary>
            Current pen for layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.currentFont">
            <summary>
            Current font for layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.currentFormat">
            <summary>
            Current string format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfListLayouter.markerMaxWidth">
            <summary>
            Marker maximum width.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.#ctor(Syncfusion.Pdf.Lists.PdfList)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfListLayouter"/> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.Layout(Syncfusion.Pdf.Graphics.PdfGraphics,System.Single,System.Single)">
            <summary>
            Layouts on the specified Graphics.
            </summary>
            <param name="graphics">The Graphics.</param>
            <param name="x">The x-coordinate of element.</param>
            <param name="y">The y-coordinate of element.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.Layout(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.PointF)">
            <summary>
            Layouts on the specified Graphics.
            </summary>
            <param name="graphics">The graphics to draw.</param>
            <param name="point">The location point.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.Layout(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.RectangleF)">
            <summary>
            Layouts on the specified Graphics.
            </summary>
            <param name="graphics">The graphics to draw.</param>
            <param name="boundaries">The location boundaries.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.LayoutInternal(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.GetMarkerMaxWidth(Syncfusion.Pdf.Lists.PdfOrderedList,System.Collections.Generic.Stack{Syncfusion.Pdf.Lists.ListInfo})">
            <summary>
            Gets the width of the marker max.
            </summary>
            <param name="list">The list.</param>
            <param name="info">The info.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.SetCurrentParameters(Syncfusion.Pdf.Lists.PdfList)">
            <summary>
            Sets the current parameters.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.SetCurrentParameters(Syncfusion.Pdf.Lists.PdfListItem)">
            <summary>
            Sets the current parameters.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.LayoutOnPage(Syncfusion.Pdf.Lists.PageLayoutResult)">
            <summary>
            Layouts the on the page.
            </summary>
            <param name="pageResult">The page layout result.</param>
            <returns>Returns page layout result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.DrawItem(Syncfusion.Pdf.Lists.PageLayoutResult@,System.Single,Syncfusion.Pdf.Lists.PdfList,System.Int32,System.Single,System.Collections.Generic.Stack{Syncfusion.Pdf.Lists.ListInfo},Syncfusion.Pdf.Lists.PdfListItem,System.Single@,System.Single@)">
            <summary>
            Draws the item.
            </summary>
            <param name="pageResult">The page result.</param>
            <param name="x">The x position.</param>
            <param name="curList">The current list.</param>
            <param name="index">The index of the item.</param>
            <param name="indent">The indent of the list.</param>
            <param name="info">The list info.</param>
            <param name="item">The current item.</param>
            <param name="height">The current height.</param>
            <param name="y">The y position.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether is null or empty the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>
            	<c>true</c> if is null or empty the specified text, otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.AfterItemLayouted(Syncfusion.Pdf.Lists.PdfListItem,Syncfusion.Pdf.PdfPage)">
            <summary>
            Afters the item layouted.
            </summary>
            <param name="item">The item that layout.</param>
            <param name="page">The page at which item layouted.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.BeforeItemLayout(Syncfusion.Pdf.Lists.PdfListItem,Syncfusion.Pdf.PdfPage)">
            <summary>
            Before the item layout.
            </summary>
            <param name="item">The item that layouts.</param>
            <param name="page">The page at which item layout.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.AfterPageLayouted(System.Drawing.RectangleF,Syncfusion.Pdf.PdfPage,Syncfusion.Pdf.Lists.PdfList)">
            <summary>
            After the page layouted.
            </summary>
            <param name="currentBounds">The current bounds.</param>
            <param name="currentPage">The current page.</param>
            <param name="list">The current list.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.BeforePageLayout(System.Drawing.RectangleF,Syncfusion.Pdf.PdfPage,Syncfusion.Pdf.Lists.PdfList)">
            <summary>
            Before the page layout.
            </summary>
            <param name="currentBounds">The current bounds.</param>
            <param name="currentPage">The current page.</param>
            <param name="list">The cuurent list.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.CreateMarkerResult(System.Int32,Syncfusion.Pdf.Lists.PdfList,System.Collections.Generic.Stack{Syncfusion.Pdf.Lists.ListInfo},Syncfusion.Pdf.Lists.PdfListItem)">
            <summary>
            Creates the marker result.
            </summary>
            <param name="index">The index of the item.</param>
            <param name="curList">The current list.</param>
            <param name="info">The list info.</param>
            <param name="item">The current item.</param>
            <returns>Returns marker layout result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.CreateUnorderedMarkerResult(Syncfusion.Pdf.Lists.PdfList,Syncfusion.Pdf.Lists.PdfListItem,System.Drawing.SizeF@)">
            <summary>
            Craetes the unordered marker result.
            </summary>
            <param name="curList">The current list.</param>
            <param name="item">The current item.</param>
            <param name="markerSize">Size of the marker.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.CreateOrderedMarkerResult(Syncfusion.Pdf.Lists.PdfList,Syncfusion.Pdf.Lists.PdfListItem,System.Int32,System.Collections.Generic.Stack{Syncfusion.Pdf.Lists.ListInfo},System.Boolean)">
            <summary>
            Creates the ordered marker result.
            </summary>
            <param name="list">The list.</param>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <param name="info">The info.</param>
            <param name="findMaxWidth">if it is to find max width, set to <c>true</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.SetMarkerStringFormat(Syncfusion.Pdf.Lists.PdfOrderedMarker,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Sets the marker alingment.
            </summary>
            <param name="marker">The marker.</param>
            <param name="markerFormat">The marker format.</param>
            <returns>Markers string format.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.DrawMarker(Syncfusion.Pdf.Lists.PdfList,Syncfusion.Pdf.Lists.PdfListItem,Syncfusion.Pdf.Graphics.PdfStringLayoutResult,System.Single,System.Single)">
            <summary>
            Draws the marker.
            </summary>
            <param name="curList">The current list.</param>
            <param name="item">The current item.</param>
            <param name="markerResult">The current marker result.</param>
            <param name="posY">The current Y position.</param>
            <param name="posX">The current X position.</param>
            <returns>Returns true if marker have been drawn.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.DrawUnorderedMarker(Syncfusion.Pdf.Lists.PdfList,Syncfusion.Pdf.Graphics.PdfStringLayoutResult,Syncfusion.Pdf.Lists.PdfListItem,System.Single,System.Single)">
            <summary>
            Draws the unordered marker.
            </summary>
            <param name="curList">The current list.</param>
            <param name="markerResult">The current marker result.</param>
            <param name="item">The current item.</param>
            <param name="posX">The current X position.</param>
            <param name="posY">The current Y position.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.DrawOrderedMarker(Syncfusion.Pdf.Lists.PdfList,Syncfusion.Pdf.Graphics.PdfStringLayoutResult,Syncfusion.Pdf.Lists.PdfListItem,System.Single,System.Single)">
            <summary>
            Draws the ordered marker.
            </summary>
            <param name="curList">The current list.</param>
            <param name="markerResult">The marker result.</param>
            <param name="item">The current item.</param>
            <param name="posX">The current X position.</param>
            <param name="posY">The current Y position.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.GetMarkerFont(Syncfusion.Pdf.Lists.PdfMarker,Syncfusion.Pdf.Lists.PdfListItem)">
            <summary>
            Gets the markers font.
            </summary>
            <param name="marker">The marker.</param>
            <param name="item">The item.</param>
            <returns>Returns font of the marker</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.GetMarkerFormat(Syncfusion.Pdf.Lists.PdfMarker,Syncfusion.Pdf.Lists.PdfListItem)">
            <summary>
            Gets the marker format.
            </summary>
            <param name="marker">The marker.</param>
            <param name="item">The item.</param>
            <returns>Markers format.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.GetMarkerPen(Syncfusion.Pdf.Lists.PdfMarker,Syncfusion.Pdf.Lists.PdfListItem)">
            <summary>
            Gets the marker pen.
            </summary>
            <param name="marker">The marker.</param>
            <param name="item">The item.</param>
            <returns>Markers pen.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfListLayouter.GetMarkerBrush(Syncfusion.Pdf.Lists.PdfMarker,Syncfusion.Pdf.Lists.PdfListItem)">
            <summary>
            Gets the marker brush.
            </summary>
            <param name="marker">The marker.</param>
            <param name="item">The item.</param>
            <returns>Markers brush.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfListLayouter.Element">
            <summary>
            Gets or sets element.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Lists.ListInfo">
            <summary>
            Represents information about list.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.ListInfo.m_index">
            <summary>
            Index of list.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.ListInfo.m_list">
            <summary>
            Represents list.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.ListInfo.m_number">
            <summary>
            The number of item at specified index.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.ListInfo.m_brush">
            <summary>
            Lists brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.ListInfo.m_pen">
            <summary>
            Lists pen.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.ListInfo.m_font">
            <summary>
            Lists font.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.ListInfo.m_format">
            <summary>
            Lists format.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.ListInfo.MarkerWidth">
            <summary>
            Marker width;
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.ListInfo.#ctor(Syncfusion.Pdf.Lists.PdfList,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.ListInfo"/> class.
            </summary>
            <param name="list">The list.</param>
            <param name="index">The index of the list.</param>
            <param name="number">The number if list is ordered list otherwise null.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.ListInfo.#ctor(Syncfusion.Pdf.Lists.PdfList,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.ListInfo"/> class.
            </summary>
            <param name="list">The list.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.ListInfo.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The indexof the list.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.ListInfo.List">
            <summary>
            Gets or sets the list.
            </summary>
            <value>The list.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.ListInfo.Number">
            <summary>
            Gets or sets the number.
            </summary>
            <value>The number of ordered list.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.ListInfo.Brush">
            <summary>
            Gets or sets the brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.ListInfo.Pen">
            <summary>
            Gets or sets the pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.ListInfo.Font">
            <summary>
            Gets or sets the font.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.ListInfo.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Lists.PageLayoutResult">
            <summary>
            Represents Page Layout result.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PageLayoutResult.Broken">
            <summary>
            If true item finished layout on page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PageLayoutResult.Y">
            <summary>
            Y-ordinate of broken item of marker.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PageLayoutResult.ItemText">
            <summary>
            Text of item that was not draw.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PageLayoutResult.MarkerText">
            <summary>
            Text of marker that was not draw.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PageLayoutResult.MarkerWrote">
            <summary>
            If true marker start draw.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PageLayoutResult.MarkerWidth">
            <summary>
            Width of marker.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PageLayoutResult.MarkerX">
            <summary>
            X-coordinate of marker.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Lists.ListBeginPageLayoutEventArgs" -->
        <member name="F:Syncfusion.Pdf.Lists.ListBeginPageLayoutEventArgs.m_list">
            <summary>
            List that that starts layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.ListBeginPageLayoutEventArgs.#ctor(System.Drawing.RectangleF,Syncfusion.Pdf.PdfPage,Syncfusion.Pdf.Lists.PdfList)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.ListBeginPageLayoutEventArgs"/> class.
            </summary>
            <param name="bounds">The bounds of the list.</param>
            <param name="page">The page in which list layouts.</param>
            <param name="list">The list that starts layout.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.ListBeginPageLayoutEventArgs.List">
            <summary>
            Gets the list that starts layout.
            </summary>
            <value>The list that starts layout.</value>
            <example>
            <code lang="C#">
            // Event handler
            void list_BeginPageLayout(object sender, BeginPageLayoutEventArgs e)
            { 
              PdfUnorderedList list = sender as PdfUnorderedList;
              list.Font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
              // Set the new bounds for the list
              e.Bounds = new RectangleF(0, 0, e.Page.GetClientSize().Width, e.Page.GetClientSize().Height);
             }
            </code>
            <code lang="VB">
            ' Event handler
            Private Sub list_BeginPageLayout(ByVal sender As Object, ByVal e As BeginPageLayoutEventArgs)
             Dim list As PdfUnorderedList = TryCast(sender, PdfUnorderedList)
             list.Font = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
             ' Set the new bounds for the list
             e.Bounds = New RectangleF(0, 0, e.Page.GetClientSize().Width, e.Page.GetClientSize().Height)
            End Sub
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Lists.ListEndPageLayoutEventArgs">
            <summary>
            Represents begin page layout event arguments.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Graphics.EndPageLayoutEventArgs"/> Class    
        </member>
        <member name="F:Syncfusion.Pdf.Lists.ListEndPageLayoutEventArgs.m_list">
            <summary>
            List that ended layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.ListEndPageLayoutEventArgs.#ctor(Syncfusion.Pdf.Graphics.PdfLayoutResult,Syncfusion.Pdf.Lists.PdfList)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.ListEndPageLayoutEventArgs"/> class.
            </summary>
            <param name="layoutResult">The layout result.</param>
            <param name="list">The list that ended layout.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.ListEndPageLayoutEventArgs.List">
            <summary>
            Gets the list that ended layout.
            </summary>
            <value>The list that ended layout.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Lists.PdfOrderedList">
            <summary>
            Represents the ordered list.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfList"/> Class   
            <example>
            <code lang="C#">
             //Create a new PDf document
             PdfDocument document = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = document.Pages.Add();
             PdfGraphics graphics = page.Graphics;
             //Create a font and write title
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14,PdfFontStyle.Bold);            
             //Create a unordered list
             PdfOrderedMarker list = new PdfOrderedMarker(PdfNumberStyle.LowerRoman, font);
             //Create Ordered list as sublist of parent list
             PdfOrderedList subList = new PdfOrderedList();
             subList.Marker = list;
             //Add items to the list
             subList.Items.Add("List of Essential Studio products");
             subList.Items.Add("IO products");
             subList.Items.Add("Grid products");
             subList.Items.Add("Tools products");
             //Draw list
             subList.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
             document.Save("List.pdf");
            </code>
            <code lang="VB">
             'Create a new PDf document
             Dim document As PdfDocument = New PdfDocument()
             'Create a page
             Dim page As PdfPage = document.Pages.Add()
             Dim graphics As PdfGraphics = page.Graphics
             'Create a font and write title
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14,PdfFontStyle.Bold)
             'Create a unordered list
             Dim list As PdfOrderedMarker = New PdfOrderedMarker(PdfNumberStyle.LowerRoman, font)
             'Create Ordered list as sublist of parent list
             Dim subList As PdfOrderedList = New PdfOrderedList()
             subList.Marker = list
             'Add items to the list
             subList.Items.Add("List of Essential Studio products")
             subList.Items.Add("IO products")
             subList.Items.Add("Grid products")
             subList.Items.Add("Tools products")
             'Draw list
             subList.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
             document.Save("List.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfOrderedList.m_marker">
            <summary>
            Marker of the list.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfOrderedList.m_useHierarchy">
            <summary>
            True if user want to use numbering hierarchy, otherwise false.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedList.#ctor">
            <summary>
            Creates ordered list.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedList.#ctor(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfOrderedList"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedList.#ctor(Syncfusion.Pdf.PdfNumberStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfOrderedList"/> class.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedList.#ctor(Syncfusion.Pdf.Lists.PdfListItemCollection)">
            <summary>
            Creates ordered list using items.
            </summary>
            <param name="items">Items for a list.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedList.#ctor(Syncfusion.Pdf.Lists.PdfOrderedMarker)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfOrderedList"/> class.
            </summary>
            <param name="marker">The marker for the list.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedList.#ctor(Syncfusion.Pdf.Lists.PdfListItemCollection,Syncfusion.Pdf.Lists.PdfOrderedMarker)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfOrderedList"/> class.
            </summary>
            <param name="items">The item collection.</param>
            <param name="marker">The marker for the list.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfOrderedList"/> class.
            </summary>
            <param name="text">The formatted text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedList.#ctor(System.String,Syncfusion.Pdf.Lists.PdfOrderedMarker)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfOrderedList"/> class
            from formatted text that is splitted by new lines.
            </summary>
            <param name="text">The formatted text.</param>
            <param name="marker">The marker.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfOrderedList.CreateMarker(Syncfusion.Pdf.PdfNumberStyle)">
            <summary>
            Creates the marker.
            </summary>
            <param name="style">The style of the list marker.</param>
            <returns>Returns marker with specified style.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfOrderedList.Marker">
            <summary>
            Gets or sets marker of the list items.
            </summary>       
            <example>
            <code lang="C#">
             //Create a new PDf document
             PdfDocument document = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = document.Pages.Add();
             PdfGraphics graphics = page.Graphics;
             //Create a font and write title
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14,PdfFontStyle.Bold);            
             //Create a unordered list
             PdfOrderedMarker list = new PdfOrderedMarker(PdfNumberStyle.LowerRoman, font);
             //Create Ordered list as sublist of parent list
             PdfOrderedList subList = new PdfOrderedList();
             subList.Marker = list;
             //Add items to the list
             subList.Items.Add("List of Essential Studio products");
             subList.Items.Add("IO products");
             subList.Items.Add("Grid products");
             subList.Items.Add("Tools products");
             //Draw list
             subList.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
             document.Save("List.pdf");
            </code>
            <code lang="VB">
             'Create a new PDf document
             Dim document As PdfDocument = New PdfDocument()
             'Create a page
             Dim page As PdfPage = document.Pages.Add()
             Dim graphics As PdfGraphics = page.Graphics
             'Create a font and write title
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14,PdfFontStyle.Bold)
             'Create a unordered list
             Dim list As PdfOrderedMarker = New PdfOrderedMarker(PdfNumberStyle.LowerRoman, font)
             'Create Ordered list as sublist of parent list
             Dim subList As PdfOrderedList = New PdfOrderedList()
             subList.Marker = list
             'Add items to the list
             subList.Items.Add("List of Essential Studio products")
             subList.Items.Add("IO products")
             subList.Items.Add("Grid products")
             subList.Items.Add("Tools products")
             'Draw list
             subList.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
             document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfOrderedList"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfOrderedList.MarkerHierarchy">
            <summary>
            True if user want to use numbering hierarchy, otherwise false.
            </summary>
            <example>
            <code lang="C#">
             //Create a new PDf document
             PdfDocument document = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = document.Pages.Add();
             PdfGraphics graphics = page.Graphics;
             //Create a font and write title
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14,PdfFontStyle.Bold);            
             //Create a unordered list
             PdfOrderedMarker list = new PdfOrderedMarker(PdfNumberStyle.LowerRoman, font);
             //Create Ordered list as sublist of parent list
             PdfOrderedList subList = new PdfOrderedList();
             subList.Marker = list;
             subList.MarkerHierarchy = true;
             //Add items to the list
             subList.Items.Add("List of Essential Studio products");
             subList.Items.Add("IO products");
             subList.Items.Add("Grid products");
             subList.Items.Add("Tools products");
             //Draw list
             subList.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
             document.Save("List.pdf");
            </code>
            <code lang="VB">
             'Create a new PDf document
             Dim document As PdfDocument = New PdfDocument()
             'Create a page
             Dim page As PdfPage = document.Pages.Add()
             Dim graphics As PdfGraphics = page.Graphics
             'Create a font and write title
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14,PdfFontStyle.Bold)
             'Create a unordered list
             Dim list As PdfOrderedMarker = New PdfOrderedMarker(PdfNumberStyle.LowerRoman, font)
             'Create Ordered list as sublist of parent list
             Dim subList As PdfOrderedList = New PdfOrderedList()
             subList.Marker = list
             subList.MarkerHierarchy = True
             'Add items to the list
             subList.Items.Add("List of Essential Studio products")
             subList.Items.Add("IO products")
             subList.Items.Add("Grid products")
             subList.Items.Add("Tools products")
             'Draw list
             subList.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
             document.Save("List.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfOrderedList"/> Class      
        </member>
        <member name="T:Syncfusion.Pdf.Lists.PdfUnorderedList">
            <summary>
            Represents unordered list.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList();            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);
            graphics.DrawString("List Features", font, PdfBrushes.DarkBlue, new PointF(225, 10));
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };
            string[] IO = { "XlsIO", "PDF", "DocIO" };
            font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            graphics.DrawString("This sample demonstrates various features of bullets and lists. A list can be ordered and Unordered. Essential PDF provides support for creating and formatting ordered and unordered lists.", font, PdfBrushes.Black, new RectangleF(0, 50, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            //Create string format
            PdfStringFormat format = new PdfStringFormat();
            format.LineSpacing = 20f;
            font = new PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold);
            //Apply formattings to list
            list.Font = font;
            list.StringFormat = format;
            //Set list indent
            list.Indent = 10;
            //Add items to the list
            list.Items.Add("List of Essential Studio products");
            list.Items.Add("IO products");
            //Set text indent
            list.TextIndent = 10;
            //Draw list
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("UnOrderList.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList()
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            graphics.DrawString("List Features", font, PdfBrushes.DarkBlue, New PointF(225, 10))
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            Dim IO() As String = { "XlsIO", "PDF", "DocIO" }
            font = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            graphics.DrawString("This sample demonstrates various features of bullets and lists. A list can be ordered and Unordered. Essential PDF provides support for creating and formatting ordered and unordered lists.", font, PdfBrushes.Black, New RectangleF(0, 50, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            'Create string format
            Dim format As PdfStringFormat = New PdfStringFormat()
            format.LineSpacing = 20f
            font = New PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold)
            'Apply formattings to list
            list.Font = font
            list.StringFormat = format
            'Set list indent
            list.Indent = 10
            'Add items to the list
            list.Items.Add("List of Essential Studio products")
            list.Items.Add("IO products")
            'Set text indent
            list.TextIndent = 10
            'Draw list
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("UnOrderList.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfList"/> Class
        </member>
        <member name="F:Syncfusion.Pdf.Lists.PdfUnorderedList.m_marker">
            <summary>
            Marker for the list.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfUnorderedList"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedList.#ctor(Syncfusion.Pdf.Lists.PdfListItemCollection)">
            <summary>
            Creates unordered list using items.
            </summary>
            <param name="items">Items for a list.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedList.#ctor(Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfUnorderedList"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedList.#ctor(Syncfusion.Pdf.Lists.PdfUnorderedMarker)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfUnorderedList"/> class.
            </summary>
            <param name="marker">The marker for the list.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedList.#ctor(Syncfusion.Pdf.Lists.PdfListItemCollection,Syncfusion.Pdf.Lists.PdfUnorderedMarker)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.PdfUnorderedList"/> class.
            </summary>
            <param name="items">The items collection.</param>
            <param name="marker">The marker for the list.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfUnorderedList"/> class.
            </summary>
            <param name="text">The formatted text.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedList.#ctor(System.String,Syncfusion.Pdf.Lists.PdfUnorderedMarker)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfUnorderedList"/> class
            from formatted text that is splitted by new lines.
            </summary>
            <param name="text">The formatted text.</param>
            <param name="marker">The marker.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.PdfUnorderedList.CreateMarker(Syncfusion.Pdf.Lists.PdfUnorderedMarkerStyle)">
            <summary>
            Creates the marker.
            </summary>
            <param name="style">The style marker of the marker.</param>
            <returns>Returns marker with specified style.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.PdfUnorderedList.Marker">
            <summary>
            Gets or sets the marker.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            PdfGraphics graphics = page.Graphics;
            //Create a unordered list
            PdfUnorderedList list = new PdfUnorderedList();            
            //Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk;
            //Create a font and write title
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);
            graphics.DrawString("List Features", font, PdfBrushes.DarkBlue, new PointF(225, 10));
            string[] products = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" };
            string[] IO = { "XlsIO", "PDF", "DocIO" };
            font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            graphics.DrawString("This sample demonstrates various features of bullets and lists. A list can be ordered and Unordered. Essential PDF provides support for creating and formatting ordered and unordered lists.", font, PdfBrushes.Black, new RectangleF(0, 50, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            //Create string format
            PdfStringFormat format = new PdfStringFormat();
            format.LineSpacing = 20f;
            font = new PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold);
            //Apply formattings to list
            list.Font = font;
            list.StringFormat = format;
            //Set list indent
            list.Indent = 10;
            //Add items to the list
            list.Items.Add("List of Essential Studio products");
            list.Items.Add("IO products");
            //Set text indent
            list.TextIndent = 10;
            //Draw list
            list.Draw(page, new RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height));
            document.Save("UnOrderList.pdf");
            </code>
            <code lang="VB">
            'Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = document.Pages.Add()
            Dim graphics As PdfGraphics = page.Graphics
            'Create a unordered list
            Dim list As PdfUnorderedList = New PdfUnorderedList()
            'Set the marker style
            list.Marker.Style = PdfUnorderedMarkerStyle.Disk
            'Create a font and write title
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            graphics.DrawString("List Features", font, PdfBrushes.DarkBlue, New PointF(225, 10))
            Dim products() As String = { "Tools", "Grid", "Chart", "Edit", "Diagram", "XlsIO", "Grouping", "Calculate", "PDF", "HTMLUI", "DocIO" }
            Dim IO() As String = { "XlsIO", "PDF", "DocIO" }
            font = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            graphics.DrawString("This sample demonstrates various features of bullets and lists. A list can be ordered and Unordered. Essential PDF provides support for creating and formatting ordered and unordered lists.", font, PdfBrushes.Black, New RectangleF(0, 50, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            'Create string format
            Dim format As PdfStringFormat = New PdfStringFormat()
            format.LineSpacing = 20f
            font = New PdfStandardFont(PdfFontFamily.TimesRoman, 10, PdfFontStyle.Bold)
            'Apply formattings to list
            list.Font = font
            list.StringFormat = format
            'Set list indent
            list.Indent = 10
            'Add items to the list
            list.Items.Add("List of Essential Studio products")
            list.Items.Add("IO products")
            'Set text indent
            list.TextIndent = 10
            'Draw list
            list.Draw(page, New RectangleF(0, 130, page.Graphics.ClientSize.Width, page.Graphics.ClientSize.Height))
            document.Save("UnOrderList.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
            <seealso cref="T:Syncfusion.Pdf.Lists.PdfOrderedList"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Lists.BeginItemLayoutEventHandler">
            <summary>
            Delegate for handling BeginItemLayoutEvent.
            </summary>
            <param name="sender">The item that begin layout.</param>
            <param name="args">Begin Item Layout arguments.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Lists.EndItemLayoutEventHandler">
            <summary>
            Delegate for handling EndItemLayoutEvent.
            </summary>
            <param name="sender">The item that end layout.</param>
            <param name="args">End Item Layout arguments.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Lists.BeginItemLayoutEventArgs">
            <summary>
            Represents begin layout event arguments.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.BeginItemLayoutEventArgs.m_item">
            <summary>
            Item that layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.BeginItemLayoutEventArgs.m_page">
            <summary>
            The page in which item start layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.BeginItemLayoutEventArgs.#ctor(Syncfusion.Pdf.Lists.PdfListItem,Syncfusion.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.BeginItemLayoutEventArgs"/> class.
            </summary>
            <param name="item">The item that layout.</param>
            <param name="page">The page in which item start layout.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.BeginItemLayoutEventArgs.Item">
            <summary>
            Gets the item.
            </summary>
            <value>The item that layout.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.BeginItemLayoutEventArgs.Page">
            <summary>
            Gets the page.
            </summary>
            <value>The page in which item start layout.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Lists.EndItemLayoutEventArgs">
            <summary>
            Represents end layout event arguments.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.EndItemLayoutEventArgs.m_item">
            <summary>
            Item that layouted.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Lists.EndItemLayoutEventArgs.m_page">
            <summary>
            The page in which item ended layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Lists.EndItemLayoutEventArgs.#ctor(Syncfusion.Pdf.Lists.PdfListItem,Syncfusion.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Lists.EndItemLayoutEventArgs"/> class.
            </summary>
            <param name="item">The item that layout.</param>
            <param name="page">The page in which item end layout.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.EndItemLayoutEventArgs.Item">
            <summary>
            Gets the item that layout.
            </summary>
            <value>The item that layout.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Lists.EndItemLayoutEventArgs.Page">
            <summary>
            Gets the page in which item ended layout.
            </summary>
            <value>The page in which item ended layout.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.LightTableLayouter">
            <summary>
            Holds the lay outing of tables.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Graphics.ElementLayouter"/> Class    
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.m_row">
            <summary>
            Cell values of a row being shared by pages.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.m_latestTextResults">
            <summary>
            The latest text results.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.m_cellWidths">
            <summary>
            Current cell width.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.m_currentPage">
            <summary>
            Current page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.m_currentPageBounds">
            <summary>
            The chached bounds of the current page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.m_currentGraphics">
            <summary>
            Holds the current graphics and is used when current page
            is not available (e.g. drawing on a graphics).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.m_currentBounds">
            <summary>
            Current bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.m_cellSpacing">
            <summary>
            Stores cell spacing value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.m_spanMap">
            <summary>
            Holds an array of integers that specify column spanning (horizontal mergin)
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.m_dropIndex">
            <summary>
            The index of the row dropped to the next page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.m_startColumn">
            <summary>
            The index of the start column.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.#ctor(Syncfusion.Pdf.Tables.PdfLightTable)">
            <summary>
            Initializes a new instance of the <see cref="T:LightTableLayouter"/> class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.Layout(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.PointF)">
            <summary>
            Layouts the table on the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.Layout(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.RectangleF)">
            <summary>
            Layouts the table on the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="boundaries">The boundaries.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.LayoutInternal(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.GetFormat(Syncfusion.Pdf.Graphics.PdfLayoutFormat)">
            <summary>
            Gets the format.
            </summary>
            <param name="format">The format structure passed through parameters.</param>
            <returns>
            PdfLightTableLayoutFormat class instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.GetLayoutResult(Syncfusion.Pdf.Tables.LightTableLayouter.PageLayoutResult)">
            <summary>
            Gets the layout result.
            </summary>
            <param name="pageResult">The page result.</param>
            <returns>Table layout result.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.LayoutOnPage(System.Int32,Syncfusion.Pdf.Graphics.PdfLayoutParams,System.Boolean)">
            <summary>
            Layouts the table part on a page.
            </summary>
            <param name="startRowIndex">Start row index.</param>
            <param name="param">The lay outing parameters.</param>
            <param name="isPageFirst">if set to <c>true</c> the current page is the first one.</param>
            <returns>Result of the lay outing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.CropRow(System.String[])">
            <summary>
            Crops a row to make it fit the starting and ending columns.
            </summary>
            <param name="row">The row.</param>
            <returns>The cropped row.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.PreserveForBorder(System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.PdfBorderOverlapStyle)">
            <summary>
            Resizes rectangle so that the border will be drawn insize the bounds specified.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="pen">The pen.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.DrawRow(Syncfusion.Pdf.Graphics.PdfLayoutParams,System.Int32@,System.String[],System.Drawing.RectangleF,System.Single@,System.Boolean,System.Boolean@)">
            <summary>
            Draws a row.
            </summary>
            <param name="param">The param.</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="row">The row data.</param>
            <param name="rowBouds">The row bouds.</param>
            <param name="rowHeight">Height of the row.</param>
            <param name="isHeader">if it is header, set to <c>true</c>.</param>
            <param name="stop">if it is stop, set to <c>true</c>.</param>
            <returns>Indicator if the row was drawn partly.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.ValidateSpanMap">
            <summary>
            Validates the span map.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.IsIncomplete(Syncfusion.Pdf.Graphics.PdfStringLayoutResult[])">
            <summary>
            Determines whether the specified row is incomplete.
            </summary>
            <param name="results">The results.</param>
            <returns>
            	<c>true</c> if the specified results is incomplete; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.DetermineRowHeight(Syncfusion.Pdf.Graphics.PdfLayoutParams,System.Int32,System.String[],System.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfStringLayoutResult[]@,Syncfusion.Pdf.Tables.PdfCellStyle)">
            <summary>
            Determines the height of the row.
            </summary>
            <param name="param">The param.</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="row">The row.</param>
            <param name="rowBouds">The row bouds.</param>
            <param name="results">The results.</param>
            <param name="cs">The cell style.</param>
            <returns>The height of the row.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.DropToNextPage(Syncfusion.Pdf.Graphics.PdfStringLayoutResult[],System.Int32,System.String[])">
            <summary>
            Drops lay outing to the next page.
            </summary>
            <param name="results">The results.</param>
            <param name="count">The count.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.GetCellWidth(System.Int32)">
            <summary>
            Returns the width of the cell specified by the index.
            </summary>
            <param name="cellIndex">Index of the cell.</param>
            <returns>The width of the cell.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.ApplyBordersToHeight(System.Single,System.Single,System.Boolean)">
            <summary>
            Reduces the height (or width) according to overlapped and border width value.
            </summary>
            <param name="height">The height.</param>
            <param name="borderWidth">Width of the border.</param>
            <param name="overlapped">if it is overlapped, set to <c>true</c>.</param>
            <returns>The proper height.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.DrawCell(Syncfusion.Pdf.Graphics.PdfStringLayoutResult,System.Drawing.RectangleF,System.Int32,System.Int32,Syncfusion.Pdf.Tables.PdfCellStyle,System.Boolean)">
            <summary>
            Draws a cell.
            </summary>
            <param name="layoutResult">The layout result.</param>
            <param name="bounds">The bounds.</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="cellIndex">Index of the cell.</param>
            <param name="cs">The cell style.</param>
            <returns>The result of the drawing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.GetCellStyle(System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Gets the cell style.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="isHeader">if set to <c>true</c> the cell is in header.</param>
            <returns>The cell style.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.GetWidths(System.Drawing.RectangleF)">
            <summary>
            Gets the widths.
            </summary>
            <param name="bounds">The bounds.</param>
            <returns>An array containing the widhts.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.GetRow(System.Int32,Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Retrieves the next row.
            </summary>
            <param name="startRowIndex">Start index of the row.</param>
            <param name="param">The param.</param>
            <returns>The next row.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.GetAlpha(Syncfusion.Pdf.Graphics.PdfBrush)">
            <summary>
            Gets the alpha channel value.
            </summary>
            <param name="brush">The brush.</param>
            <returns>The alpha channel value.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.RaiseBeforePageLayout(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF@,System.Int32@)">
            <summary>
            Raises BeforePageLayout event.
            </summary>
            <param name="currentPage">The current page.</param>
            <param name="currentBounds">The current bounds.</param>
            <param name="currentRow">The current row.</param>
            <returns>If true, stop lay outing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.RaisePageLayouted(Syncfusion.Pdf.Tables.LightTableLayouter.PageLayoutResult)">
            <summary>
            Raises PageLayout event if needed.
            </summary>
            <param name="pageResult">Page layout result.</param>
            <returns>Event arguments.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.RaiseBeforeRowLayout(System.Int32,Syncfusion.Pdf.Tables.PdfCellStyle)">
            <summary>
            Raises the before row layout.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="cellStyle">The cell style.</param>
            <returns>The arguments modified by the user.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.RaiseAfterRowLayout(System.Int32,System.Boolean,System.Drawing.RectangleF)">
            <summary>
            Raises the after row layout.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="isComplete">if set to <c>true</c> the row was drawn completely.</param>
            <param name="rowBouds">The row bouds.</param>
            <returns>Indicator whether the user stopped lay outing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.RaiseBeforeCellLayout(Syncfusion.Pdf.Graphics.PdfGraphics,System.Int32,System.Int32,System.Drawing.RectangleF,System.String)">
            <summary>
            Raises the before cell layout.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="cellIndex">Index of the cell.</param>
            <param name="bounds">The bounds of the cell.</param>
            <param name="value">The cell value.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableLayouter.RaiseAfterCellLayout(Syncfusion.Pdf.Graphics.PdfGraphics,System.Int32,System.Int32,System.Drawing.RectangleF,System.String)">
            <summary>
            Raises the after cell layout event.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="cellIndex">Index of the cell.</param>
            <param name="bounds">The bounds of the cell.</param>
            <param name="value">The value of the cell.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.LightTableLayouter.Table">
            <summary>
            Gets shape element.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.PageLayoutResult.Page">
            <summary>
            The last page where the text was drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.PageLayoutResult.Bounds">
            <summary>
            The bounds of the element on the last page where it was drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.PageLayoutResult.Finish">
            <summary>
            Indicates whether the lay outing has been finished.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.PageLayoutResult.FirstRowIndex">
            <summary>
            The index of the first row on the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.LightTableLayouter.PageLayoutResult.LastRowIndex">
            <summary>
            The index of the last row on the page.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.PdfLightTableLayoutResult">
            <summary>
            Represents the results of lay outing tables.
            </summary>
            <example>
            <code lang="C#">
             // Creates a new document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
             // Creates a new table
             PdfLightTable table = new PdfLightTable();
             // Set the DataSourceType as Direct
             table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
             // Creating Columns
             table.Columns.Add(new PdfColumn("Roll Number"));
             table.Columns.Add(new PdfColumn("Name"));
             table.Columns.Add(new PdfColumn("Class"));          
             // Adding rows
             PdfRowCollection rowCollection = table.Rows;
             // Gets the first row from the collection.          
             rowCollection.Add(new object[] { "111", "Maxim", "III" });
             // Creates the layout format
             PdfLightTableLayoutFormat format = new PdfLightTableLayoutFormat();
             format.EndColumnIndex = 2;
             format.StartColumnIndex = 1;         
             format.Layout = PdfLayoutType.Paginate;
             format.Break = PdfLayoutBreakType.FitElement;                       
             // Draws the table 
             PdfLightTableLayoutResult result = table.Draw(page, new PointF(0, 0), format);
             // Returns the drawn table boundary value
             Console.WriteLine(result.Bounds.ToString());
             doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
             ' Creates a new document
             Dim doc As PdfDocument = New PdfDocument()
             ' Create a page
             Dim page As PdfPage = doc.Pages.Add()
             ' Creates a new table
             Dim table As PdfLightTable = New PdfLightTable()
             ' Set the DataSourceType as Direct
             table.DataSourceType = PdfLightTableDataSourceType.TableDirect
             ' Creating Columns
             table.Columns.Add(New PdfColumn("Roll Number"))
             table.Columns.Add(New PdfColumn("Name"))
             table.Columns.Add(New PdfColumn("Class"))
             ' Adding rows
             Dim rowCollection As PdfRowCollection = table.Rows
             ' Gets the first row from the collection.          
             rowCollection.Add(New Object() { "111", "Maxim", "III" })
             ' Creates the layout format
             Dim format As PdfLightTableLayoutFormat = New PdfLightTableLayoutFormat()
             format.EndColumnIndex = 2
             format.StartColumnIndex = 1
             format.Layout = PdfLayoutType.Paginate
             format.Break = PdfLayoutBreakType.FitElement
             ' Draws the table 
             Dim result As PdfLightTableLayoutResult = table.Draw(page, New PointF(0, 0), format)
             ' Returns the drawn table boundary value
             Console.WriteLine(result.Bounds.ToString())
             doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfLayoutResult"/> Class 
        </member>
        <member name="F:Syncfusion.Pdf.Tables.PdfLightTableLayoutResult.m_cellResults">
            <summary>
            Holds text layout results for the last row.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.PdfLightTableLayoutResult.m_rowIndex">
            <summary>
            The index of the last row.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTableLayoutResult.#ctor(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF,System.Int32,Syncfusion.Pdf.Graphics.PdfStringLayoutResult[])">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLightTableLayoutResult"/> class.
            </summary>
            <param name="page">The current page.</param>
            <param name="bounds">The current bounds.</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="cellResults">The cell results.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTableLayoutResult.CellResults">
            <summary>
            Gets the <see cref="T:PdfTextLayoutResult"/> at the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTableLayoutResult.LastRowIndex">
            <summary>
            Gets the index of the last row.
            </summary>
            <example>
            <code lang="C#">
            // Draws the table 
            PdfLightTableLayoutResult result = table.Draw(page, new PointF(0, 0), format);
            // Gets the last row index
            int lastRow = result.LastRowIndex;
            </code>
            <code lang="VB">
            ' Draws the table 
            Dim result As PdfLightTableLayoutResult = table.Draw(page, New PointF(0, 0), format)
            ' Gets the last row index
            Dim lastRow As Integer = result.LastRowIndex
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.LightTableBeginPageLayoutEventArgs">
            <summary>
            Arguments of BeginPageLayoutEvent.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Graphics.BeginPageLayoutEventArgs"/> Class    
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableBeginPageLayoutEventArgs.#ctor(System.Drawing.RectangleF,Syncfusion.Pdf.PdfPage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LightTablesBeginPageLayoutEventArgs"/> class.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="page">The page.</param>
            <param name="startRow">The start row.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.LightTableBeginPageLayoutEventArgs.StartRowIndex">
            <summary>
            Gets the start row.
            </summary>
            <value>The start row.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.LightTableEndPageLayoutEventArgs">
            <summary>
            Holds arguments for LightTableEndPageLayout Event.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Graphics.EndPageLayoutEventArgs"/> Class    
        </member>
        <member name="M:Syncfusion.Pdf.Tables.LightTableEndPageLayoutEventArgs.#ctor(Syncfusion.Pdf.Tables.PdfLightTableLayoutResult,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LightTableEndPageLayoutEventArgs"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="startRow">The start row.</param>
            <param name="endRow">The end row.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.LightTableEndPageLayoutEventArgs.StartRowIndex">
            <summary>
            Gets the start row.
            </summary>
            <value>The start row.</value>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.LightTableEndPageLayoutEventArgs.EndRowIndex">
            <summary>
            Gets the end row.
            </summary>
            <value>The end row.</value>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.PdfLightTable">
            <summary>
            Represents fast light table with few features.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            RectangleF rect = new RectangleF(0, 0, 500, 50);
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            PdfPage page = doc.Pages.Add();
            PdfPageTemplateElement top = new PdfPageTemplateElement(rect);
            PdfLightTable table = new PdfLightTable();
            table.DataSource = dataTable;
            table.Style.CellPadding = 16;
            // Draws the table in page
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim rect As RectangleF = New RectangleF(0, 0, 500, 50)
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Table Features Demo", "" }
            dataTable.Rows.Add(values)
            Dim page As PdfPage = doc.Pages.Add()
            Dim top As PdfPageTemplateElement = New PdfPageTemplateElement(rect)
            Dim table As PdfLightTable = New PdfLightTable()
            table.DataSource = dataTable	
            table.Style.CellPadding = 16
            ' Draws the table in page
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPageTemplateElement"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfLayoutElement"/> Class  
        </member>
        <member name="F:Syncfusion.Pdf.Tables.PdfLightTable.m_columns">
            <summary>
            Stores current column collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.PdfLightTable.m_rows">
            <summary>
            Stores current row collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.PdfLightTable.m_dataSourceType">
            <summary>
            Indicates the datasource type.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.PdfLightTable.m_dataMember">
            <summary>
            The table name from the data set.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.PdfLightTable.m_allowRowBreakAcrossPages">
            <summary>
            Specifies whether to break the last row of the table or not when the space is not enough
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.Draw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.PointF,System.Single)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="location">The location of the element.</param>
            <param name="width">The width of the table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.Draw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Single,System.Single,System.Single)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="x">X co-ordinate of the element.</param>
            <param name="y">Y co-ordinate of the element.</param>
            <param name="width">The width of the table.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.Draw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Drawing.RectangleF)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.PointF)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="location">The location.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.PointF,Syncfusion.Pdf.Tables.PdfLightTableLayoutFormat)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="location">The location.</param>
            <param name="format">The format.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="bounds">The bounds.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.Draw(Syncfusion.Pdf.PdfPage,System.Drawing.RectangleF,Syncfusion.Pdf.Tables.PdfLightTableLayoutFormat)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="bounds">The bounds.</param>
            <param name="format">The format.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.Draw(Syncfusion.Pdf.PdfPage,System.Single,System.Single)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.Draw(Syncfusion.Pdf.PdfPage,System.Single,System.Single,Syncfusion.Pdf.Tables.PdfLightTableLayoutFormat)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="format">The format.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.Draw(Syncfusion.Pdf.PdfPage,System.Single,System.Single,System.Single)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">The width.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.Draw(Syncfusion.Pdf.PdfPage,System.Single,System.Single,System.Single,Syncfusion.Pdf.Tables.PdfLightTableLayoutFormat)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">The width.</param>
            <param name="format">The format.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.Draw(Syncfusion.Pdf.Graphics.PdfGraphics,System.Single,System.Single)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="x">X co-ordinate of the element.</param>
            <param name="y">Y co-ordinate of the element.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.Layout(Syncfusion.Pdf.Graphics.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Returns lay outing results.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.DrawInternal(Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.OnBeginRowLayout(Syncfusion.Pdf.Tables.BeginRowLayoutEventArgs)">
            <summary>
            Raises the <see cref="E:BeginRowLayout"/> event.
            </summary>
            <param name="args">The <see cref="T:Syncfusion.Pdf.Tables.StartRowLayoutEventArgs"/>
            instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.OnEndRowLayout(Syncfusion.Pdf.Tables.EndRowLayoutEventArgs)">
            <summary>
            Raises the <see cref="E:EndRowLayout"/> event.
            </summary>
            <param name="args">The <see cref="T:Syncfusion.Pdf.Tables.EndRowLayoutEventArgs"/>
            instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.OnBeginCellLayout(Syncfusion.Pdf.Tables.BeginCellLayoutEventArgs)">
            <summary>
            Raises the <see cref="E:BeginCellLayout"/> event.
            </summary>
            <param name="args">The <see cref="T:Syncfusion.Pdf.Tables.StartCellLayoutEventArgs"/>
            instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.OnEndCellLayout(Syncfusion.Pdf.Tables.EndCellLayoutEventArgs)">
            <summary>
            Raises the <see cref="E:EndCellLayout"/> event.
            </summary>
            <param name="args">The <see cref="T:Syncfusion.Pdf.Tables.EndCellLayoutEventArgs"/>
            instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.GetNextRow(System.Int32@)">
            <summary>
            Gets the next row.
            </summary>
            <param name="index">The index.</param>
            <returns>The array of the strings.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.FillData">
            <summary>
            Initializes the PdfLightTable data source.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.CreateColumns">
            <summary>
            Creates the columns.
            </summary>
            <returns>The filled column collection.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.CreateRows">
            <summary>
            Creates the row.
            </summary>
            <returns>The filled row collection.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.OnGetNextRow(System.Int32)">
            <summary>
            Called when geting next row.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <returns>The row data passed by the user.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.OnGetColumnNumber">
            <summary>
            Called when getting column number.
            </summary>
            <returns>The number provided by the user.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTable.OnGetRowNumber">
            <summary>
            Called when getting row number.
            </summary>
            <returns>The number provided by the user.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTable.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The table column collection</value>
            <example>
            <code lang="C#">
             // Creates a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
             PdfLightTable table = new PdfLightTable();
             // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Gets the columns collection
            PdfColumnCollection tableColumns = table.Columns;           
            // Creating Columns
            tableColumns.Add(new PdfColumn("Roll Number"));
            tableColumns.Add(new PdfColumn("Name"));
            tableColumns.Add(new PdfColumn("Class"));
            // Adding Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Gets the columns collection
            Dim tableColumns As PdfColumnCollection = table.Columns
            ' Creating Columns
            tableColumns.Add(New PdfColumn("Roll Number"))
            tableColumns.Add(New PdfColumn("Name"))
            tableColumns.Add(New PdfColumn("Class"))
            ' Adding Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTable.Rows">
            <summary>
            Gets the rows.
            </summary>
            <example>
            <code lang="C#">
            // Creates a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Gets the columns collection
            PdfColumnCollection tableColumns = table.Columns;           
            // Creating Columns
            tableColumns.Add(new PdfColumn("Roll Number"));
            tableColumns.Add(new PdfColumn("Name"));
            tableColumns.Add(new PdfColumn("Class"));
            // Gets the row collection
            PdfRowCollection rows = table.Rows;
            // Adding Rows
            rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Gets the columns collection
            Dim tableColumns As PdfColumnCollection = table.Columns
            ' Creating Columns
            tableColumns.Add(New PdfColumn("Roll Number"))
            tableColumns.Add(New PdfColumn("Name"))
            tableColumns.Add(New PdfColumn("Class"))
            ' Gets the row collection
            Dim rows As PdfRowCollection = table.Rows
            ' Adding Rows
            rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTable.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            RectangleF rect = new RectangleF(0, 0, 500, 50);
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfLightTable table = new PdfLightTable();
            table.DataSource = dataTable;
            table.Style.CellPadding = 16;
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
             ' Creates a new document
             Dim doc As PdfDocument = New PdfDocument()
             Dim rect As RectangleF = New RectangleF(0, 0, 500, 50)
             'Create DataTable for source
             Dim dataTable As DataTable = New DataTable("myTable")
             dataTable.Columns.Add("ID1")
             dataTable.Columns(0).Caption = "id"
             dataTable.Columns.Add("ID2")
             Dim values() As Object = New Object() { "Table Features Demo", "" }
             dataTable.Rows.Add(values)
             ' Create a page
             Dim page As PdfPage = doc.Pages.Add()
             Dim table As PdfLightTable = New PdfLightTable()
             table.DataSource = dataTable
             table.Style.CellPadding = 16
             table.Draw(page.Graphics)
             doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTable.DataSourceType">
            <summary>
            Gets or sets the datasource type of the PdfLightTable
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
             //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfLightTable table = new PdfLightTable();
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            table.DataSource = dataTable;
            // Draws the table
            table.Draw(page.Graphics);
            doc.Save("Sample.pdf");
            </code>
            <code lang="VB">
             ' Creates a new document
             Dim doc As PdfDocument = New PdfDocument()
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Table Features Demo", "" }
            dataTable.Rows.Add(values)
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            table.DataSource = dataTable
            ' Draws the table
            table.Draw(page.Graphics)
            doc.Save("Sample.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTable.Style">
            <summary>
            Gets or sets the properties.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            RectangleF rect = new RectangleF(0, 0, 500, 50);
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            PdfPage page = doc.Pages.Add();
            PdfPageTemplateElement top = new PdfPageTemplateElement(rect);
            PdfLightTable table = new PdfLightTable();
            PdfFont font = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
            // Alternative cell style
            PdfCellStyle altStyle = new PdfCellStyle(font, PdfBrushes.White, PdfPens.Green);
            altStyle.BackgroundBrush = PdfBrushes.DarkGray;
            // Table header cell style
            PdfCellStyle headerStyle = new PdfCellStyle(font, PdfBrushes.White, PdfPens.Brown);
            headerStyle.BackgroundBrush = PdfBrushes.Red;
            //Set the table style
            table.Style.AlternateStyle = altStyle;
            table.Style.HeaderStyle = headerStyle;
            table.DataSource = dataTable;
            table.Style.CellPadding = 16;
            // Draws the table in page
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim rect As RectangleF = New RectangleF(0, 0, 500, 50)
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Table Features Demo", "" }
            dataTable.Rows.Add(values)
            Dim page As PdfPage = doc.Pages.Add()
            Dim top As PdfPageTemplateElement = New PdfPageTemplateElement(rect)
            Dim table As PdfLightTable = New PdfLightTable()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.TimesRoman, 12)
            ' Alternative cell style
            Dim altStyle As PdfCellStyle = New PdfCellStyle(font, PdfBrushes.White, PdfPens.Green)
            altStyle.BackgroundBrush = PdfBrushes.DarkGray
            ' Table header cell style
            Dim headerStyle As PdfCellStyle = New PdfCellStyle(font, PdfBrushes.White, PdfPens.Brown)
            headerStyle.BackgroundBrush = PdfBrushes.Red
            ' Set the table style
            table.Style.AlternateStyle = altStyle
            table.Style.HeaderStyle = headerStyle
            table.DataSource = dataTable	
            table.Style.CellPadding = 16
            ' Draws the table in page
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPageTemplateElement"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfLayoutElement"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTable.RaiseBeginRowLayout">
            <summary>
            Gets a value indicating whether to raise start row layout event.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTable.RaiseEndRowLayout">
            <summary>
            Gets a value indicating whether to raise end row layout event.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTable.RaiseBeginCellLayout">
            <summary>
            Gets a value indicating whether the start cell layout event should be raised.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTable.RaiseEndCellLayout">
            <summary>
            Gets a value indicating whether the end cell layout event should be raised.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTable.AllowRowBreakAcrossPages">
            <summary>
            Gets a value indicating the row break is to be made or not
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.Tables.PdfLightTable.BeginRowLayout">
            <summary>
            The event raised on starting row lay outing.
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.Tables.PdfLightTable.EndRowLayout">
            <summary>
            The event raised on having finished row lay outing.
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.Tables.PdfLightTable.BeginCellLayout">
            <summary>
            The event raised on starting cell lay outing.
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.Tables.PdfLightTable.EndCellLayout">
            <summary>
            The event raised on having finished cell layout.
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.Tables.PdfLightTable.QueryNextRow">
            <summary>
            The event raised when the next row data is requested.
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.Tables.PdfLightTable.QueryColumnCount">
            <summary>
            The event raised when the column number is requested.
            </summary>
        </member>
        <member name="E:Syncfusion.Pdf.Tables.PdfLightTable.QueryRowCount">
            <summary>
            The event raised when the row number is requested.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.PdfLightTableStyle">
            <summary>
            Represents parameters of PdfLightTable.
            </summary>
            <example>
            <code lang="C#">
            //Create PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            //Create Pdf ben for drawing border
            PdfPen borderPen = new PdfPen(PdfBrushes.DarkBlue);
            borderPen.Width = 0;
            //Create brush
            PdfColor color = new PdfColor(192, 201, 219);
            PdfSolidBrush brush = new PdfSolidBrush(color);
            //Create alternative cell styles
            PdfCellStyle altStyle = new PdfCellStyle();
            altStyle.Font = font;
            altStyle.BackgroundBrush = brush;
            altStyle.BorderPen = borderPen;
            // Creates default cell style
            PdfCellStyle defStyle = new PdfCellStyle();
            defStyle.Font = font;
            defStyle.BackgroundBrush = PdfBrushes.White;
            defStyle.BorderPen = borderPen;
            // Creates header cell style
            PdfCellStyle headerStyle = new PdfCellStyle(font, PdfBrushes.White, PdfPens.DarkBlue);
            brush = new PdfSolidBrush(Color.FromArgb(33, 67, 126));
            headerStyle.BackgroundBrush = brush;
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            PdfLightTable table = new PdfLightTable();
            table.DataSource = dataTable;
            // Set the cell style
            table.Style.AlternateStyle = altStyle;
            table.Style.DefaultStyle = defStyle;
            table.Style.HeaderStyle = headerStyle;
            // Draws the table
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            'Create PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Set font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            'Create Pdf ben for drawing border
            Dim borderPen As PdfPen = New PdfPen(PdfBrushes.DarkBlue)
            borderPen.Width = 0
            'Create brush
            Dim color As PdfColor = New PdfColor(192, 201, 219)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(color)
            'Create alternative cell styles
            Dim altStyle As PdfCellStyle = New PdfCellStyle()
            altStyle.Font = font
            altStyle.BackgroundBrush = brush
            altStyle.BorderPen = borderPen
            ' Creates default cell style
            Dim defStyle As PdfCellStyle = New PdfCellStyle()
            defStyle.Font = font
            defStyle.BackgroundBrush = PdfBrushes.White
            defStyle.BorderPen = borderPen
            ' Creates header cell style
            Dim headerStyle As PdfCellStyle = New PdfCellStyle(font, PdfBrushes.White, PdfPens.DarkBlue)
            brush = New PdfSolidBrush(Color.FromArgb(33, 67, 126))
            headerStyle.BackgroundBrush = brush
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Table Features Demo", "" }
            dataTable.Rows.Add(values)
            Dim table As PdfLightTable = New PdfLightTable()
            table.DataSource = dataTable
            ' Set cell style
            table.Style.AlternateStyle = altStyle
            table.Style.DefaultStyle = defStyle
            table.Style.HeaderStyle = headerStyle
            ' Draws the table
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPageTemplateElement"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class  
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTableStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLightTableStyle"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTableStyle.DefaultStyle">
            <summary>
            Gets or sets the default cell style.
            </summary>
            <example>
            <code lang="C#">
            //Create PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            //Create Pdf ben for drawing border
            PdfPen borderPen = new PdfPen(PdfBrushes.DarkBlue);
            borderPen.Width = 0;
            //Create brush
            PdfColor color = new PdfColor(192, 201, 219);
            PdfSolidBrush brush = new PdfSolidBrush(color);
            //Create alternative cell styles
            PdfCellStyle altStyle = new PdfCellStyle();
            altStyle.Font = font;
            altStyle.BackgroundBrush = brush;
            altStyle.BorderPen = borderPen;
            // Creates default cell style
            PdfCellStyle defStyle = new PdfCellStyle();
            defStyle.Font = font;
            defStyle.BackgroundBrush = PdfBrushes.White;
            defStyle.BorderPen = borderPen;
            // Creates header cell style
            PdfCellStyle headerStyle = new PdfCellStyle(font, PdfBrushes.White, PdfPens.DarkBlue);
            brush = new PdfSolidBrush(Color.FromArgb(33, 67, 126));
            headerStyle.BackgroundBrush = brush;
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            PdfLightTable table = new PdfLightTable();
            table.DataSource = dataTable;
            // Set the cell style
            table.Style.AlternateStyle = altStyle;
            table.Style.DefaultStyle = defStyle;
            table.Style.HeaderStyle = headerStyle;
            // Draws the table
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            'Create PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Set font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            'Create Pdf ben for drawing border
            Dim borderPen As PdfPen = New PdfPen(PdfBrushes.DarkBlue)
            borderPen.Width = 0
            'Create brush
            Dim color As PdfColor = New PdfColor(192, 201, 219)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(color)
            'Create alternative cell styles
            Dim altStyle As PdfCellStyle = New PdfCellStyle()
            altStyle.Font = font
            altStyle.BackgroundBrush = brush
            altStyle.BorderPen = borderPen
            ' Creates default cell style
            Dim defStyle As PdfCellStyle = New PdfCellStyle()
            defStyle.Font = font
            defStyle.BackgroundBrush = PdfBrushes.White
            defStyle.BorderPen = borderPen
            ' Creates header cell style
            Dim headerStyle As PdfCellStyle = New PdfCellStyle(font, PdfBrushes.White, PdfPens.DarkBlue)
            brush = New PdfSolidBrush(Color.FromArgb(33, 67, 126))
            headerStyle.BackgroundBrush = brush
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Table Features Demo", "" }
            dataTable.Rows.Add(values)
            Dim table As PdfLightTable = New PdfLightTable()
            table.DataSource = dataTable
            ' Set cell style
            table.Style.AlternateStyle = altStyle
            table.Style.DefaultStyle = defStyle
            table.Style.HeaderStyle = headerStyle
            ' Draws the table
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPageTemplateElement"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTableStyle.AlternateStyle">
            <summary>
            Gets or sets the alternate style, which is the style of the odd rows.
            </summary>
            <example>
            <code lang="C#">
            //Create PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            //Create Pdf ben for drawing border
            PdfPen borderPen = new PdfPen(PdfBrushes.DarkBlue);
            borderPen.Width = 0;
            //Create brush
            PdfColor color = new PdfColor(192, 201, 219);
            PdfSolidBrush brush = new PdfSolidBrush(color);
            //Create alternative cell styles
            PdfCellStyle altStyle = new PdfCellStyle();
            altStyle.Font = font;
            altStyle.BackgroundBrush = brush;
            altStyle.BorderPen = borderPen;
            // Creates default cell style
            PdfCellStyle defStyle = new PdfCellStyle();
            defStyle.Font = font;
            defStyle.BackgroundBrush = PdfBrushes.White;
            defStyle.BorderPen = borderPen;
            // Creates header cell style
            PdfCellStyle headerStyle = new PdfCellStyle(font, PdfBrushes.White, PdfPens.DarkBlue);
            brush = new PdfSolidBrush(Color.FromArgb(33, 67, 126));
            headerStyle.BackgroundBrush = brush;
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            PdfLightTable table = new PdfLightTable();
            table.DataSource = dataTable;
            // Set the cell style
            table.Style.AlternateStyle = altStyle;
            table.Style.DefaultStyle = defStyle;
            table.Style.HeaderStyle = headerStyle;
            // Draws the table
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            'Create PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Set font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            'Create Pdf ben for drawing border
            Dim borderPen As PdfPen = New PdfPen(PdfBrushes.DarkBlue)
            borderPen.Width = 0
            'Create brush
            Dim color As PdfColor = New PdfColor(192, 201, 219)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(color)
            'Create alternative cell styles
            Dim altStyle As PdfCellStyle = New PdfCellStyle()
            altStyle.Font = font
            altStyle.BackgroundBrush = brush
            altStyle.BorderPen = borderPen
            ' Creates default cell style
            Dim defStyle As PdfCellStyle = New PdfCellStyle()
            defStyle.Font = font
            defStyle.BackgroundBrush = PdfBrushes.White
            defStyle.BorderPen = borderPen
            ' Creates header cell style
            Dim headerStyle As PdfCellStyle = New PdfCellStyle(font, PdfBrushes.White, PdfPens.DarkBlue)
            brush = New PdfSolidBrush(Color.FromArgb(33, 67, 126))
            headerStyle.BackgroundBrush = brush
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Table Features Demo", "" }
            dataTable.Rows.Add(values)
            Dim table As PdfLightTable = New PdfLightTable()
            table.DataSource = dataTable
            ' Set cell style
            table.Style.AlternateStyle = altStyle
            table.Style.DefaultStyle = defStyle
            table.Style.HeaderStyle = headerStyle
            ' Draws the table
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPageTemplateElement"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTableStyle.HeaderSource">
            <summary>
            Gets or sets a value indicating whether
            to use rows or column captions for forming header.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            PdfPage page = doc.Pages.Add();
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Create new Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));
            table.Style.HeaderSource = PdfHeaderSource.ColumnCaptions;
            // Add new Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Setting the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Create new Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            table.Style.HeaderSource = PdfHeaderSource.ColumnCaptions
            ' Add new Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> Class  
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Tables.PdfLightTableStyle.HeaderRowCount" -->
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTableStyle.HeaderStyle">
            <summary>
            Gets or sets the header cell style.
            </summary>
            <example>
            <code lang="C#">
            //Create PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            //Create Pdf ben for drawing border
            PdfPen borderPen = new PdfPen(PdfBrushes.DarkBlue);
            borderPen.Width = 0;
            //Create brush
            PdfColor color = new PdfColor(192, 201, 219);
            PdfSolidBrush brush = new PdfSolidBrush(color);
            //Create alternative cell styles
            PdfCellStyle altStyle = new PdfCellStyle();
            altStyle.Font = font;
            altStyle.BackgroundBrush = brush;
            altStyle.BorderPen = borderPen;
            // Creates default cell style
            PdfCellStyle defStyle = new PdfCellStyle();
            defStyle.Font = font;
            defStyle.BackgroundBrush = PdfBrushes.White;
            defStyle.BorderPen = borderPen;
            // Creates header cell style
            PdfCellStyle headerStyle = new PdfCellStyle(font, PdfBrushes.White, PdfPens.DarkBlue);
            brush = new PdfSolidBrush(Color.FromArgb(33, 67, 126));
            headerStyle.BackgroundBrush = brush;
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            PdfLightTable table = new PdfLightTable();
            table.DataSource = dataTable;
            // Set the cell style
            table.Style.AlternateStyle = altStyle;
            table.Style.DefaultStyle = defStyle;
            table.Style.HeaderStyle = headerStyle;
            // Draws the table
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            'Create PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Set font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            'Create Pdf ben for drawing border
            Dim borderPen As PdfPen = New PdfPen(PdfBrushes.DarkBlue)
            borderPen.Width = 0
            'Create brush
            Dim color As PdfColor = New PdfColor(192, 201, 219)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(color)
            'Create alternative cell styles
            Dim altStyle As PdfCellStyle = New PdfCellStyle()
            altStyle.Font = font
            altStyle.BackgroundBrush = brush
            altStyle.BorderPen = borderPen
            ' Creates default cell style
            Dim defStyle As PdfCellStyle = New PdfCellStyle()
            defStyle.Font = font
            defStyle.BackgroundBrush = PdfBrushes.White
            defStyle.BorderPen = borderPen
            ' Creates header cell style
            Dim headerStyle As PdfCellStyle = New PdfCellStyle(font, PdfBrushes.White, PdfPens.DarkBlue)
            brush = New PdfSolidBrush(Color.FromArgb(33, 67, 126))
            headerStyle.BackgroundBrush = brush
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Table Features Demo", "" }
            dataTable.Rows.Add(values)
            Dim table As PdfLightTable = New PdfLightTable()
            table.DataSource = dataTable
            ' Set cell style
            table.Style.AlternateStyle = altStyle
            table.Style.DefaultStyle = defStyle
            table.Style.HeaderStyle = headerStyle
            ' Draws the table
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.PdfPageTemplateElement"/> Class      
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTableStyle.RepeatHeader">
            <summary>
            Gets or sets a value indicating whether to repeat header on each page.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            PdfPage page = doc.Pages.Add();
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Create new Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));
            table.Style.HeaderSource = PdfHeaderSource.ColumnCaptions;
            table.Style.ShowHeader = true;
            table.Style.HeaderRowCount = 2;
            // Add new Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Setting the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Create new Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            table.Style.HeaderSource = PdfHeaderSource.ColumnCaptions
            table.Style.ShowHeader = True
            table.Style.HeaderRowCount = 2
            ' Add new Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTableStyle.ShowHeader">
            <summary>
            Gets or sets a value indicating whether the header is visible.
            </summary>
            <remarks>If the header is made up with ordinary rows they aren't visible
            while this property is set to false.</remarks>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            PdfPage page = doc.Pages.Add();
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Create new Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));
            table.Style.HeaderSource = PdfHeaderSource.ColumnCaptions;
            table.Style.ShowHeader = true;
            table.Style.HeaderRowCount = 2;
            // Add new Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Setting the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Create new Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            table.Style.HeaderSource = PdfHeaderSource.ColumnCaptions
            table.Style.ShowHeader = True
            table.Style.HeaderRowCount = 2
            ' Add new Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTableStyle.CellSpacing">
            <summary>
            Gets or sets the cell spacing.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            PdfPage page = doc.Pages.Add();
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Create new Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));
            table.Style.HeaderSource = PdfHeaderSource.ColumnCaptions;
             //Set the cell spacing
            table.Style.CellSpacing = 10;
            // Add new Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Setting the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Create new Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            table.Style.HeaderSource = PdfHeaderSource.ColumnCaptions
             'Set the cell spacing
            table.Style.CellSpacing = 10
            ' Add new Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTableStyle.CellPadding">
            <summary>
            Gets or sets the cell padding.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            PdfPage page = doc.Pages.Add();
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Create new Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));
            table.Style.HeaderSource = PdfHeaderSource.ColumnCaptions;
            // Set the cell padding
            table.Style.CellPadding = 8;
            // Add new Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Setting the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Create new Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            table.Style.HeaderSource = PdfHeaderSource.ColumnCaptions
            ' Set the cell padding
            table.Style.CellPadding = 8
            ' Add new Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> Class
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTableStyle.BorderOverlapStyle">
            <summary>
            Gets or sets a value indicating whether the cell borders
            should overlap its neighbour's borders or be drawn in the cell interior.
            </summary>
            <remarks>Please, use this property with caution,
            because it might cause unexpected results if borders
            are not the same width and colour.</remarks>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            PdfPage page = doc.Pages.Add();
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Create new Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));
            table.Style.BorderOverlapStyle = PdfBorderOverlapStyle.Inside;
            // Add new Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Setting the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Create new Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            table.Style.BorderOverlapStyle = PdfBorderOverlapStyle.Inside
            ' Add new Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTableStyle.BorderPen">
            <summary>
            Gets or sets the pen of the table border.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            PdfPage page = doc.Pages.Add();
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Create new Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));
            table.Style.BorderPen = new PdfPen(PdfBrushes.BlueViolet);
            // Add new Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Setting the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Create new Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            ' Set the border pen for table
            table.Style.BorderPen = New PdfPen(PdfBrushes.BlueViolet)
            ' Add new Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> Class 
        </member>
        <member name="T:Syncfusion.Pdf.Tables.PdfCellStyle">
            <summary>
            Represents information about cell style.
            </summary>
            <example>
            <code lang="C#">
            //Create PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            //Create Pdf ben for drawing border
            PdfPen borderPen = new PdfPen(PdfBrushes.DarkBlue);
            borderPen.Width = 0;
            //Create brush
            PdfColor color = new PdfColor(192, 201, 219);
            PdfSolidBrush brush = new PdfSolidBrush(color);           
            // Creates default cell style
            PdfCellStyle defStyle = new PdfCellStyle();
            defStyle.Font = font;
            defStyle.BackgroundBrush = PdfBrushes.White;
            defStyle.BorderPen = borderPen;          
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            // Creates a new table
            PdfLightTable table = new PdfLightTable();
            table.DataSource = dataTable;
            //Set the cell style
            table.Style.DefaultStyle = defStyle;
            // Draws the table
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            'Create PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Set font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            'Create Pdf ben for drawing border
            Dim borderPen As PdfPen = New PdfPen(PdfBrushes.DarkBlue)
            borderPen.Width = 0
            'Create brush
            Dim color As PdfColor = New PdfColor(192, 201, 219)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(color)
            ' Creates default cell style
            Dim defStyle As PdfCellStyle = New PdfCellStyle()
            defStyle.Font = font
            defStyle.BackgroundBrush = PdfBrushes.White
            defStyle.BorderPen = borderPen
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Table Features Demo", "" }
            dataTable.Rows.Add(values)
            ' Creates a new table
            Dim table As PdfLightTable = New PdfLightTable()
            table.DataSource = dataTable
            'Set the cell style
            table.Style.DefaultStyle = defStyle
            ' Draws the table
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfCellStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfCellStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfCellStyle.#ctor(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfCellStyle"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="fontBrush">The font brush.</param>
            <param name="borderPen">The border pen.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfCellStyle.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <example>
            <code lang="C#">
            //Create PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            //Create Pdf ben for drawing border
            PdfPen borderPen = new PdfPen(PdfBrushes.DarkBlue);
            borderPen.Width = 0;
            //Create brush
            PdfColor color = new PdfColor(192, 201, 219);
            PdfSolidBrush brush = new PdfSolidBrush(color);           
            // Creates default cell style
            PdfCellStyle defStyle = new PdfCellStyle();
            defStyle.Font = font;
            defStyle.BackgroundBrush = PdfBrushes.White;
            defStyle.BorderPen = borderPen;          
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            // Creates a new table
            PdfLightTable table = new PdfLightTable();
            table.DataSource = dataTable;
            //Set the cell style
            table.Style.DefaultStyle = defStyle;
            // Draws the table
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            'Create PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Set font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            'Create Pdf ben for drawing border
            Dim borderPen As PdfPen = New PdfPen(PdfBrushes.DarkBlue)
            borderPen.Width = 0
            'Create brush
            Dim color As PdfColor = New PdfColor(192, 201, 219)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(color)
            ' Creates default cell style
            Dim defStyle As PdfCellStyle = New PdfCellStyle()
            defStyle.Font = font
            defStyle.BackgroundBrush = PdfBrushes.White
            defStyle.BorderPen = borderPen
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Table Features Demo", "" }
            dataTable.Rows.Add(values)
            ' Creates a new table
            Dim table As PdfLightTable = New PdfLightTable()
            table.DataSource = dataTable
            'Set the cell style
            table.Style.DefaultStyle = defStyle
            ' Draws the table
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfCellStyle.StringFormat">
            <summary>
            Gets or sets the string format of the cell text.
            </summary>
            <example>
            <code lang="C#">
            //Create PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            //Create Pdf ben for drawing border
            PdfPen borderPen = new PdfPen(PdfBrushes.DarkBlue);
            borderPen.Width = 0;
            //Create brush
            PdfColor color = new PdfColor(192, 201, 219);
            PdfSolidBrush brush = new PdfSolidBrush(color);           
            // Creates default cell style
            PdfCellStyle defStyle = new PdfCellStyle();
            defStyle.Font = font;
            defStyle.BackgroundBrush = PdfBrushes.White;
            defStyle.BorderPen = borderPen;   
            defStyle.StringFormat = new PdfStringFormat(PdfTextAlignment.Justify);
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            // Creates a new table
            PdfLightTable table = new PdfLightTable();
            table.DataSource = dataTable;
            //Set the cell style
            table.Style.DefaultStyle = defStyle;
            // Draws the table
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            'Create PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Set font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            'Create Pdf ben for drawing border
            Dim borderPen As PdfPen = New PdfPen(PdfBrushes.DarkBlue)
            borderPen.Width = 0
            'Create brush
            Dim color As PdfColor = New PdfColor(192, 201, 219)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(color)
            ' Creates default cell style
            Dim defStyle As PdfCellStyle = New PdfCellStyle()
            defStyle.StringFormat = New PdfStringFormat(PdfTextAlignment.Justify)
            defStyle.Font = font
            defStyle.BackgroundBrush = PdfBrushes.White
            defStyle.BorderPen = borderPen
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Table Features Demo", "" }
            dataTable.Rows.Add(values)
            ' Creates a new table
            Dim table As PdfLightTable = New PdfLightTable()
            table.DataSource = dataTable
            'Set the cell style
            table.Style.DefaultStyle = defStyle
            ' Draws the table
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfCellStyle.TextPen">
            <summary>
            Gets or sets the font which will be used to draw text outlines.
            </summary>
            <remarks>It should be null for default text representation.</remarks>
            <example>
            <code lang="C#">
            //Create PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            //Create Pdf ben for drawing border
            PdfPen borderPen = new PdfPen(PdfBrushes.DarkBlue);
            borderPen.Width = 0;
            //Create brush
            PdfColor color = new PdfColor(192, 201, 219);
            PdfSolidBrush brush = new PdfSolidBrush(color);           
            // Creates default cell style
            PdfCellStyle defStyle = new PdfCellStyle();
            defStyle.TextPen = new PdfPen(PdfBrushes.BlueViolet);
            defStyle.BackgroundBrush = PdfBrushes.White;
            defStyle.BorderPen = borderPen;   
            defStyle.StringFormat = new PdfStringFormat(PdfTextAlignment.Justify);
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            // Creates a new table
            PdfLightTable table = new PdfLightTable();
            table.DataSource = dataTable;
            //Set the cell style
            table.Style.DefaultStyle = defStyle;
            // Draws the table
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            'Create PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Set font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            'Create Pdf ben for drawing border
            Dim borderPen As PdfPen = New PdfPen(PdfBrushes.DarkBlue)
            borderPen.Width = 0
            'Create brush
            Dim color As PdfColor = New PdfColor(192, 201, 219)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(color)
            ' Creates default cell style
            Dim defStyle As PdfCellStyle = New PdfCellStyle()
            defStyle.TextPen = New PdfPen(PdfBrushes.BlueViolet)
            defStyle.Font = font
            defStyle.BackgroundBrush = PdfBrushes.White
            defStyle.BorderPen = borderPen
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Table Features Demo", "" }
            dataTable.Rows.Add(values)
            ' Creates a new table
            Dim table As PdfLightTable = New PdfLightTable()
            table.DataSource = dataTable
            'Set the cell style
            table.Style.DefaultStyle = defStyle
            ' Draws the table
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfCellStyle.TextBrush">
            <summary>
            Gets or sets the brush which will be used to draw font.
            </summary>
            <remarks>This brush will be used to fill glyphs interior, which is the default.</remarks>
            <example>
            <code lang="C#">
            //Create PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            //Create Pdf ben for drawing border
            PdfPen borderPen = new PdfPen(PdfBrushes.DarkBlue);
            borderPen.Width = 0;
            //Create brush
            PdfColor color = new PdfColor(192, 201, 219);
            PdfSolidBrush brush = new PdfSolidBrush(color);           
            // Creates default cell style
            PdfCellStyle defStyle = new PdfCellStyle();
            defStyle.Font = font;
            defStyle.BackgroundBrush = PdfBrushes.White;
            defStyle.BorderPen = borderPen;          
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            // Creates a new table
            PdfLightTable table = new PdfLightTable();
            table.DataSource = dataTable;
            //Set the cell style
            table.Style.DefaultStyle = defStyle;
            // Draws the table
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            'Create PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Set font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            'Create Pdf ben for drawing border
            Dim borderPen As PdfPen = New PdfPen(PdfBrushes.DarkBlue)
            borderPen.Width = 0
            'Create brush
            Dim color As PdfColor = New PdfColor(192, 201, 219)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(color)
            ' Creates default cell style
            Dim defStyle As PdfCellStyle = New PdfCellStyle()
            defStyle.Font = font
            defStyle.BackgroundBrush = PdfBrushes.White
            defStyle.TextBrush = PdfBrushes.Brown;
            defStyle.BorderPen = borderPen
            defStyle.TextBrush = PdfBrushes.Brown
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Table Features Demo", "" }
            dataTable.Rows.Add(values)
            ' Creates a new table
            Dim table As PdfLightTable = New PdfLightTable()
            table.DataSource = dataTable
            'Set the cell style
            table.Style.DefaultStyle = defStyle
            ' Draws the table
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfCellStyle.BorderPen">
            <summary>
            Gets or sets the pen with which the border will be drawn.
            </summary>
            <example>
            <code lang="C#">
            //Create PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            //Create Pdf ben for drawing border
            PdfPen borderPen = new PdfPen(PdfBrushes.DarkBlue);
            borderPen.Width = 0;
            //Create brush
            PdfColor color = new PdfColor(192, 201, 219);
            PdfSolidBrush brush = new PdfSolidBrush(color);           
            // Creates default cell style
            PdfCellStyle defStyle = new PdfCellStyle();
            defStyle.Font = font;
            defStyle.BackgroundBrush = PdfBrushes.White;
            defStyle.BorderPen = borderPen;          
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            // Creates a new table
            PdfLightTable table = new PdfLightTable();
            table.DataSource = dataTable;
            //Set the cell style
            table.Style.DefaultStyle = defStyle;
            // Draws the table
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            'Create PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Set font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            'Create Pdf ben for drawing border
            Dim borderPen As PdfPen = New PdfPen(PdfBrushes.DarkBlue)
            borderPen.Width = 0
            'Create brush
            Dim color As PdfColor = New PdfColor(192, 201, 219)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(color)
            ' Creates default cell style
            Dim defStyle As PdfCellStyle = New PdfCellStyle()
            defStyle.Font = font
            defStyle.BackgroundBrush = PdfBrushes.White
            defStyle.BorderPen = borderPen
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Table Features Demo", "" }
            dataTable.Rows.Add(values)
            ' Creates a new table
            Dim table As PdfLightTable = New PdfLightTable()
            table.DataSource = dataTable
            'Set the cell style
            table.Style.DefaultStyle = defStyle
            ' Draws the table
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class 
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfCellStyle.BackgroundBrush">
            <summary>
            Gets or sets the brush with which the background will be drawn.
            </summary>
            <remarks>It's null by default.</remarks>
            <example>
            <code lang="C#">
            //Create PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            //Create Pdf ben for drawing border
            PdfPen borderPen = new PdfPen(PdfBrushes.DarkBlue);
            borderPen.Width = 0;
            //Create brush
            PdfColor color = new PdfColor(192, 201, 219);
            PdfSolidBrush brush = new PdfSolidBrush(color);           
            // Creates default cell style
            PdfCellStyle defStyle = new PdfCellStyle();
            defStyle.Font = font;
            defStyle.BackgroundBrush = PdfBrushes.White;
            defStyle.BorderPen = borderPen;          
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Table Features Demo", "" };
            dataTable.Rows.Add(values);
            // Creates a new table
            PdfLightTable table = new PdfLightTable();
            table.DataSource = dataTable;
            //Set the cell style
            table.Style.DefaultStyle = defStyle;
            // Draws the table
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            'Create PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Set font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            'Create Pdf ben for drawing border
            Dim borderPen As PdfPen = New PdfPen(PdfBrushes.DarkBlue)
            borderPen.Width = 0
            'Create brush
            Dim color As PdfColor = New PdfColor(192, 201, 219)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(color)
            ' Creates default cell style
            Dim defStyle As PdfCellStyle = New PdfCellStyle()
            defStyle.Font = font
            defStyle.BackgroundBrush = PdfBrushes.White
            defStyle.BorderPen = borderPen
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Table Features Demo", "" }
            dataTable.Rows.Add(values)
            ' Creates a new table
            Dim table As PdfLightTable = New PdfLightTable()
            table.DataSource = dataTable
            'Set the cell style
            table.Style.DefaultStyle = defStyle
            ' Draws the table
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class 
        </member>
        <member name="T:Syncfusion.Pdf.Tables.PdfColumnCollection">
            <summary>
            Represents the collection of the columns.
            </summary>
            <example>
            <code lang="C#">
             // Creates a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
             PdfLightTable table = new PdfLightTable();
             // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Gets the columns collection
            PdfColumnCollection tableColumns = table.Columns;           
            // Creating Columns
            tableColumns.Add(new PdfColumn("Roll Number"));
            tableColumns.Add(new PdfColumn("Name"));
            tableColumns.Add(new PdfColumn("Class"));
            // Adding Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Gets the columns collection
            Dim tableColumns As PdfColumnCollection = table.Columns
            ' Creating Columns
            tableColumns.Add(New PdfColumn("Roll Number"))
            tableColumns.Add(New PdfColumn("Name"))
            tableColumns.Add(New PdfColumn("Class"))
            ' Adding Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfColumnCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfColumnCollection"/> class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Tables.PdfColumnCollection.Add(Syncfusion.Pdf.Tables.PdfColumn)" -->
        <member name="M:Syncfusion.Pdf.Tables.PdfColumnCollection.GetWidths(System.Single)">
            <summary>
            Gets the widths of the columns.
            </summary>
            <param name="totalWidth">The total width.</param>
            <returns>An array containing widths.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfColumnCollection.GetWidths(System.Single,System.Int32,System.Int32)">
            <summary>
            Gets the widths of the columns.
            </summary>
            <param name="totalWidth">The total width.</param>
            <param name="startColumn">The start column.</param>
            <param name="endColumn">The end column.</param>
            <returns>An array containing widths.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfColumnCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:PdfColumn"/> at the specified index.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.PdfColumn">
            <summary>
            Represents a single column of the table.
            </summary>
            <example>
            <code lang="C#">
             // Creates a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
             PdfLightTable table = new PdfLightTable();
             // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Gets the columns collection
            PdfColumnCollection tableColumns = table.Columns;           
            // Creating Columns
            tableColumns.Add(new PdfColumn("Roll Number"));
            tableColumns.Add(new PdfColumn("Name"));
            tableColumns.Add(new PdfColumn("Class"));
            // Adding Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Gets the columns collection
            Dim tableColumns As PdfColumnCollection = table.Columns
            ' Creating Columns
            tableColumns.Add(New PdfColumn("Roll Number"))
            tableColumns.Add(New PdfColumn("Name"))
            tableColumns.Add(New PdfColumn("Class"))
            ' Adding Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfColumn.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfColumn"/> class.
            </summary>
            <param name="width">The width.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> class.
            </summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfColumn.StringFormat">
            <summary>
            Gets or sets the string format.
            </summary>
            <value>The string format.</value>
            <example>
            <code lang="C#">
             // Creates a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
             PdfLightTable table = new PdfLightTable();
             // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Gets the columns collection
            PdfColumnCollection tableColumns = table.Columns;           
            // Creating Columns
            tableColumns.Add(new PdfColumn("Name"));
            tableColumns.Add(new PdfColumn("Class"));
             // Creates a new column
            PdfColumn rollNumber = new PdfColumn("Roll Number");
             //Set the string format
            rollNumber.StringFormat = new PdfStringFormat(PdfTextAlignment.Left);
            // Adding Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Gets the columns collection
            Dim tableColumns As PdfColumnCollection = table.Columns
             ' Creates a new column
             Dim rollNumber As PdfColumn = New PdfColumn("Roll Number")
             'Set the string format
             rollNumber.StringFormat = New PdfStringFormat(PdfTextAlignment.Left)
            tableColumns.Add(New PdfColumn("Name"))
            tableColumns.Add(New PdfColumn("Class"))
            ' Adding Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>       
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfColumn.Width">
            <summary>
            Gets or sets the width of the column.
            </summary>
            <example>
            <code lang="C#">
             // Creates a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
             PdfLightTable table = new PdfLightTable();
             // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Gets the columns collection
            PdfColumnCollection tableColumns = table.Columns;           
            // Creating Columns
            tableColumns.Add(new PdfColumn("Name"));
            tableColumns.Add(new PdfColumn("Class"));
             // Creates a new column
            PdfColumn rollNumber = new PdfColumn("Roll Number");
            //Set the string format
            rollNumber.Width = 20f;
            // Adding Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Gets the columns collection
            Dim tableColumns As PdfColumnCollection = table.Columns
             ' Creates a new column
             Dim rollNumber As PdfColumn = New PdfColumn("Roll Number")
            'Set the string format
            rollNumber.Width = 20f
            tableColumns.Add(New PdfColumn("Name"))
            tableColumns.Add(New PdfColumn("Class"))
            ' Adding Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>  
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfColumn.ColumnName">
            <summary>
            Gets or sets the column name.
            </summary>
            <example>
            <code lang="C#">
             // Creates a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
             PdfLightTable table = new PdfLightTable();
             // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Gets the columns collection
            PdfColumnCollection tableColumns = table.Columns;           
            // Creating Columns
            tableColumns.Add(new PdfColumn("Name"));
            tableColumns.Add(new PdfColumn("Class"));
             // Creates a new column
            PdfColumn rollNumber = new PdfColumn("Roll Number");
            //Set the string format
            rollNumber.ColumnName = "Roll Number";
            // Adding Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Gets the columns collection
            Dim tableColumns As PdfColumnCollection = table.Columns
             ' Creates a new column
             Dim rollNumber As PdfColumn = New PdfColumn("Roll Number")
            'Set the string format
            rollNumber.ColumnName = "Roll Number"
            tableColumns.Add(New PdfColumn("Name"))
            tableColumns.Add(New PdfColumn("Class"))
            ' Adding Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>  
        </member>
        <member name="T:Syncfusion.Pdf.Tables.PdfRow">
            <summary>
            Represents a single column of the table.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates a new table
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Creating Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));          
            // Adding Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates a new table
            Dim table As PdfLightTable = New PdfLightTable()
            ' Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Creating Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            ' Adding Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfRow.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:PdfRow"/> class.
            </summary>
            <param name="width">The width.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfRow.Values">
            <summary>
            The array of values that are used to create the new row.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates a new table
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Creating Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));          
            // Adding Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates a new table
            Dim table As PdfLightTable = New PdfLightTable()
            ' Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Creating Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            ' Adding Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.PdfRowCollection">
            <summary>
            Represents the collection of the columns.
            </summary>
            <example>
            <code lang="C#">
             // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates a new table
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Creating Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));          
            // Adding rows
            PdfRowCollection rowCollection = table.Rows;
            rowCollection.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
             ' Creates a new document
             Dim doc As PdfDocument = New PdfDocument()
             ' Create a page
             Dim page As PdfPage = doc.Pages.Add()
             ' Creates a new table
             Dim table As PdfLightTable = New PdfLightTable()
             ' Set the DataSourceType as Direct
             table.DataSourceType = PdfLightTableDataSourceType.TableDirect
             ' Creating Columns
             table.Columns.Add(New PdfColumn("Roll Number"))
             table.Columns.Add(New PdfColumn("Name"))
             table.Columns.Add(New PdfColumn("Class"))
             ' Adding rows
             Dim rowCollection As PdfRowCollection = table.Rows
             rowCollection.Add(New Object() { "111", "Maxim", "III" })
             ' Draws the table 
             table.Draw(page, New PointF(0, 0))
             doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfCollection"/> Class  
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfRowCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfColumnCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfRowCollection.Add(Syncfusion.Pdf.Tables.PdfRow)">
            <summary>
            Adds the specified row.
            </summary>
            <param name="row">The row.</param> 
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfRowCollection.Add(System.Object[])">
            <summary>
            The array of values that are used to create the new row.
            </summary>
            <example>
            <code lang="C#">
             // Adding rows
             PdfRowCollection rowCollection = table.Rows;
             // Gets the first row from the collection.          
             rowCollection.Add(new object[] { "111", "Maxim", "III" });
            </code>
            <code lang="VB">
             ' Adding rows
             Dim rowCollection As PdfRowCollection = table.Rows
             ' Gets the first row from the collection.          
             rowCollection.Add(New Object() { "111", "Maxim", "III" })
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfRowCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:PdfColumn"/> at the specified index.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.PdfLightTableException">
            <summary>
            Represents as a message deliverer from PdfLightTable class to the user.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.PdfException"/> Class 
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLightTableException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.PdfLightTableLayoutFormat">
            <summary>
            Represents the parameters for Light Table layout.
            </summary>  
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates a new table
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Creating Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));          
            // Adding rows
            PdfRowCollection rowCollection = table.Rows;
            // Gets the first row from the collection.          
            rowCollection.Add(new object[] { "111", "Maxim", "III" });
            // Creates the layout format
            PdfLightTableLayoutFormat format = new PdfLightTableLayoutFormat();
            format.Layout = PdfLayoutType.Paginate;
            format.Break = PdfLayoutBreakType.FitElement;
            format.StartColumnIndex = 1;
            format.EndColumnIndex = 2;
            // Draws the table with the layout format
            table.Draw(page, new PointF(0, 0), format);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates a new table
            Dim table As PdfLightTable = New PdfLightTable()
            ' Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Creating Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            ' Adding rows
            Dim rowCollection As PdfRowCollection = table.Rows
            ' Gets the first row from the collection.          
            rowCollection.Add(New Object() { "111", "Maxim", "III" })
            ' Creates the layout format
            Dim format As PdfLightTableLayoutFormat = New PdfLightTableLayoutFormat()
            format.Layout = PdfLayoutType.Paginate
            format.Break = PdfLayoutBreakType.FitElement
            format.StartColumnIndex = 1
            format.EndColumnIndex = 2
            ' Draws the table with the layout format
            table.Draw(page, New PointF(0, 0), format)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfLayoutFormat"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfLayoutBreakType"/> Class  
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTableLayoutFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLightTableLayoutFormat"/> class.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates a new table
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Creating Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));          
            // Adding rows
            PdfRowCollection rowCollection = table.Rows;
            // Gets the first row from the collection.          
            rowCollection.Add(new object[] { "111", "Maxim", "III" });
            // Creates the layout format
            PdfLightTableLayoutFormat format = new PdfLightTableLayoutFormat();
            format.Layout = PdfLayoutType.Paginate;
            format.Break = PdfLayoutBreakType.FitElement;
            format.StartColumnIndex = 1;
            format.EndColumnIndex = 2;
            // Draws the table with the layout format
            table.Draw(page, new PointF(0, 0), format);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates a new table
            Dim table As PdfLightTable = New PdfLightTable()
            ' Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Creating Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            ' Adding rows
            Dim rowCollection As PdfRowCollection = table.Rows
            ' Gets the first row from the collection.          
            rowCollection.Add(New Object() { "111", "Maxim", "III" })
            ' Creates the layout format
            Dim format As PdfLightTableLayoutFormat = New PdfLightTableLayoutFormat()
            format.Layout = PdfLayoutType.Paginate
            format.Break = PdfLayoutBreakType.FitElement
            format.StartColumnIndex = 1
            format.EndColumnIndex = 2
            ' Draws the table with the layout format
            table.Draw(page, New PointF(0, 0), format)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfLayoutFormat"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfLayoutBreakType"/> Class  
        </member>
        <member name="M:Syncfusion.Pdf.Tables.PdfLightTableLayoutFormat.#ctor(Syncfusion.Pdf.Graphics.PdfLayoutFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfLightTableLayoutFormat"/> class.
            </summary>
            <param name="baseFormat">The base format.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTableLayoutFormat.StartColumnIndex">
            <summary>
            Gets or sets the start column index.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates a new table
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Creating Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));          
            // Adding rows
            PdfRowCollection rowCollection = table.Rows;
            // Gets the first row from the collection.          
            rowCollection.Add(new object[] { "111", "Maxim", "III" });
            // Creates the layout format
            PdfLightTableLayoutFormat format = new PdfLightTableLayoutFormat();
            format.Layout = PdfLayoutType.Paginate;
            format.Break = PdfLayoutBreakType.FitElement;
            format.StartColumnIndex = 1;
            format.EndColumnIndex = 2;
            // Draws the table with the layout format
            table.Draw(page, new PointF(0, 0), format);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates a new table
            Dim table As PdfLightTable = New PdfLightTable()
            ' Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Creating Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            ' Adding rows
            Dim rowCollection As PdfRowCollection = table.Rows
            ' Gets the first row from the collection.          
            rowCollection.Add(New Object() { "111", "Maxim", "III" })
            ' Creates the layout format
            Dim format As PdfLightTableLayoutFormat = New PdfLightTableLayoutFormat()
            format.Layout = PdfLayoutType.Paginate
            format.Break = PdfLayoutBreakType.FitElement
            format.StartColumnIndex = 1
            format.EndColumnIndex = 2
            ' Draws the table with the layout format
            table.Draw(page, New PointF(0, 0), format)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfLayoutFormat"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfLayoutBreakType"/> Class  
        </member>
        <member name="P:Syncfusion.Pdf.Tables.PdfLightTableLayoutFormat.EndColumnIndex">
            <summary>
            Gets or sets the end column index.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Creates a new table
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Creating Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));          
            // Adding rows
            PdfRowCollection rowCollection = table.Rows;
            // Gets the first row from the collection.          
            rowCollection.Add(new object[] { "111", "Maxim", "III" });
            // Creates the layout format
            PdfLightTableLayoutFormat format = new PdfLightTableLayoutFormat();
            format.Layout = PdfLayoutType.Paginate;
            format.Break = PdfLayoutBreakType.FitElement;
            format.StartColumnIndex = 1;
            format.EndColumnIndex = 2;
            // Draws the table with the layout format
            table.Draw(page, new PointF(0, 0), format);
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Creates a new table
            Dim table As PdfLightTable = New PdfLightTable()
            ' Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Creating Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            ' Adding rows
            Dim rowCollection As PdfRowCollection = table.Rows
            ' Gets the first row from the collection.          
            rowCollection.Add(New Object() { "111", "Maxim", "III" })
            ' Creates the layout format
            Dim format As PdfLightTableLayoutFormat = New PdfLightTableLayoutFormat()
            format.Layout = PdfLayoutType.Paginate
            format.Break = PdfLayoutBreakType.FitElement
            format.StartColumnIndex = 1
            format.EndColumnIndex = 2
            ' Draws the table with the layout format
            table.Draw(page, New PointF(0, 0), format)
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfLayoutFormat"/> Class    
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class    
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfLayoutBreakType"/> Class  
        </member>
        <member name="T:Syncfusion.Pdf.Tables.BeginRowLayoutEventHandler">
            <summary>
            Delegate for handling StartRowLayoutEvent.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments of the event.</param>
            <remarks>This event is raised when starting a row in a layout.</remarks>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            RectangleF rect = new RectangleF(0, 0, 500, 50);
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Roll Number", "Student Name" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Cris" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Clay" };
            dataTable.Rows.Add(values);
            PdfPage page = doc.Pages.Add();
            PdfPageTemplateElement top = new PdfPageTemplateElement(rect);
            PdfLightTable table = new PdfLightTable();
            // Subscribe the begin row event 
            table.BeginRowLayout +=new BeginRowLayoutEventHandler(table_BeginRowLayout);
            table.DataSource = dataTable;
            table.Style.CellPadding = 16;
            // Draws the table in page
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
                // Begin Row Event Handler 
            void table_BeginRowLayout(object sender, BeginRowLayoutEventArgs args)
            {
              if (args.RowIndex == 1)
              {
                 PdfLightTable table = (PdfLightTable)sender;
                 int count = table.Columns.Count;
                 int[] spanMap = new int[count];
                 // Set just spanned cells. Other values are not important except negatives that are not allowed.
                 spanMap[0] = 2;
                 spanMap[1] = 3;
                 args.ColumnSpanMap = spanMap;
                 //Sets row height.
                 args.MinimalHeight = 30f;
               }
            }
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim rect As RectangleF = New RectangleF(0, 0, 500, 50)
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Roll Number", "Student Name" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Cris" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Clay" }
            dataTable.Rows.Add(values)
            Dim page As PdfPage = doc.Pages.Add()
            Dim top As PdfPageTemplateElement = New PdfPageTemplateElement(rect)
            Dim table As PdfLightTable = New PdfLightTable()
            ' Subscribe the begin row event 
            AddHandler table.BeginRowLayout, AddressOf table_BeginRowLayout
            table.DataSource = dataTable
            table.Style.CellPadding = 16
            ' Draws the table in page
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
             ' Begin Row Event Handler 
            Private Sub table_BeginRowLayout(ByVal sender As Object, ByVal args As BeginRowLayoutEventArgs)
              If args.RowIndex = 1 Then
                Dim table As PdfLightTable = CType(sender, PdfLightTable)
                Dim count As Integer = table.Columns.Count
                Dim spanMap() As Integer = New Integer(count - 1){}
                ' Set just spanned cells. Other values are not important except negatives that are not allowed.
                spanMap(0) = 2
                spanMap(1) = 3
                args.ColumnSpanMap = spanMap
                'Sets row height.
                args.MinimalHeight = 30f
              End If
            End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Tables.EndRowLayoutEventHandler">
            <summary>
            Delegate for handling EndRowLayoutEvent.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments of the event.</param>
            <remarks>This event is raised when you are finished laying out a row on a page.</remarks>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            RectangleF rect = new RectangleF(0, 0, 500, 50);
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Roll Number", "Student Name" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Cris" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Clay" };
            dataTable.Rows.Add(values);
            PdfPage page = doc.Pages.Add();
            PdfPageTemplateElement top = new PdfPageTemplateElement(rect);
            PdfLightTable table = new PdfLightTable();
            // Subscribe the end row event 
            table.EndRowLayout += new EndRowLayoutEventHandler(table_EndRowLayout);
            table.DataSource = dataTable;
            table.Style.CellPadding = 16;
            // Draws the table in page
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
                // End Row Event Handler 
            void table_EndRowLayout(object sender, EndRowLayoutEventArgs args)
            {
               if (args.RowIndex == 1)
               {
                  // Cancel property used to cancel the table rendering operation
                  args.Cancel = true;
               }
            }
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim rect As RectangleF = New RectangleF(0, 0, 500, 50)
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Roll Number", "Student Name" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Cris" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Clay" }
            dataTable.Rows.Add(values)
            Dim page As PdfPage = doc.Pages.Add()
            Dim top As PdfPageTemplateElement = New PdfPageTemplateElement(rect)
            Dim table As PdfLightTable = New PdfLightTable()
            ' Subscribe the end row event 
             AddHandler table.EndRowLayout, AddressOf table_EndRowLayout
            table.DataSource = dataTable
            table.Style.CellPadding = 16
            ' Draws the table in page
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
             ' Eegin Row Event Handler 
            Private Sub table_EndRowLayout(ByVal sender As Object, ByVal args As EndRowLayoutEventArgs)
              If args.RowIndex = 1 Then
                 ' Cancel property used to cancel the table rendering operation
                 args.Cancel = True
               End If
             End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Tables.BeginCellLayoutEventHandler">
            <summary>
            Delegate for handling StartCellLayoutEvent.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments of the event.</param>
            <remarks>This event is raised when laying out a cell on a page.</remarks>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            RectangleF rect = new RectangleF(0, 0, 500, 50);
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Roll Number", "Student Name" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Cris" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Clay" };
            dataTable.Rows.Add(values);
            PdfPage page = doc.Pages.Add();
            PdfPageTemplateElement top = new PdfPageTemplateElement(rect);
            PdfLightTable table = new PdfLightTable();
            // Subscribe the cell layout event 
            table.BeginCellLayout += new BeginCellLayoutEventHandler(table_BeginCellLayout);
            table.DataSource = dataTable;
            table.Style.CellPadding = 16;
            // Draws the table in page
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            // Cell layout event handler
            void table_BeginCellLayout(object sender, BeginCellLayoutEventArgs args)
            {
              if (args.RowIndex == 1)
              {
                args.Graphics.DrawRectangle(new PdfPen(PdfBrushes.Red, 2), PdfBrushes.White,args.Bounds);
              }
            }       
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim rect As RectangleF = New RectangleF(0, 0, 500, 50)
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Roll Number", "Student Name" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Cris" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Clay" }
            dataTable.Rows.Add(values)
            Dim page As PdfPage = doc.Pages.Add()
            Dim top As PdfPageTemplateElement = New PdfPageTemplateElement(rect)
            Dim table As PdfLightTable = New PdfLightTable()
            ' Subscribe the cell layout event 
            AddHandler table.BeginCellLayout, AddressOf table_BeginCellLayout
            table.DataSource = dataTable
            table.Style.CellPadding = 16
            ' Draws the table in page
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            ' Cell layout event handler
            Private Sub table_BeginCellLayout(ByVal sender As Object, ByVal args As BeginCellLayoutEventArgs)
              If args.RowIndex = 1 Then
                 args.Graphics.DrawRectangle(New PdfPen(PdfBrushes.Red, 2), PdfBrushes.White,args.Bounds)
              End If
            End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class
        </member>
        <member name="T:Syncfusion.Pdf.Tables.EndCellLayoutEventHandler">
            <summary>
            Delegate for handling EndCellLayoutEvent.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments of the event.</param>
            <remarks>This event is raised when you have finished laying out a page.</remarks>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            RectangleF rect = new RectangleF(0, 0, 500, 50);
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Roll Number", "Student Name" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Cris" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Clay" };
            dataTable.Rows.Add(values);
            PdfPage page = doc.Pages.Add();
            PdfPageTemplateElement top = new PdfPageTemplateElement(rect);
            PdfLightTable table = new PdfLightTable();
            // Subscribe the cell layout event 
            table.EndCellLayout += new EndCellLayoutEventHandler(table_EndCellLayout);
            table.DataSource = dataTable;
            table.Style.CellPadding = 16;
            // Draws the table in page
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            // Cell layout event handler
            void table_EndCellLayout(object sender, EndCellLayoutEventArgs args)
            {
              if (args.RowIndex == 1)
              {
                args.Graphics.DrawRectangle(new PdfPen(PdfBrushes.Red, 2), PdfBrushes.White, args.Bounds);
              }
            }
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim rect As RectangleF = New RectangleF(0, 0, 500, 50)
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Roll Number", "Student Name" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Cris" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Clay" }
            dataTable.Rows.Add(values)
            Dim page As PdfPage = doc.Pages.Add()
            Dim top As PdfPageTemplateElement = New PdfPageTemplateElement(rect)
            Dim table As PdfLightTable = New PdfLightTable()
            ' Subscribe the cell layout event 
            AddHandler table.EndCellLayout, AddressOf table_EndCellLayout
            table.DataSource = dataTable
            table.Style.CellPadding = 16
            ' Draws the table in page
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            ' Cell layout event handler
            Private Sub table_EndCellLayout(ByVal sender As Object, ByVal args As EndCellLayoutEventArgs)
              If args.RowIndex = 1 Then
                args.Graphics.DrawRectangle(New PdfPen(PdfBrushes.Red, 2), PdfBrushes.White, args.Bounds)
              End If
            End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Tables.QueryNextRowEventHandler" -->
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Tables.QueryColumnCountEventHandler" -->
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Tables.QueryRowCountEventHandler" -->
        <member name="T:Syncfusion.Pdf.Tables.BeginRowLayoutEventArgs">
            <summary>
            Represents StartRowLayout Event arguments.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            RectangleF rect = new RectangleF(0, 0, 500, 50);
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Roll Number", "Student Name" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Cris" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Clay" };
            dataTable.Rows.Add(values);
            PdfPage page = doc.Pages.Add();
            PdfPageTemplateElement top = new PdfPageTemplateElement(rect);
            PdfLightTable table = new PdfLightTable();
            // Subscribe the begin row event 
            table.BeginRowLayout +=new BeginRowLayoutEventHandler(table_BeginRowLayout);
            table.DataSource = dataTable;
            table.Style.CellPadding = 16;
            // Draws the table in page
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
                // Begin Row Event Handler 
            void table_BeginRowLayout(object sender, BeginRowLayoutEventArgs args)
            {
              if (args.RowIndex == 1)
              {
                 PdfLightTable table = (PdfLightTable)sender;
                 int count = table.Columns.Count;
                 int[] spanMap = new int[count];
                 // Set just spanned cells. Other values are not important except negatives that are not allowed.
                 spanMap[0] = 2;
                 spanMap[1] = 3;
                 args.ColumnSpanMap = spanMap;
                 //Sets row height.
                 args.MinimalHeight = 30f;
               }
            }
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim rect As RectangleF = New RectangleF(0, 0, 500, 50)
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Roll Number", "Student Name" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Cris" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Clay" }
            dataTable.Rows.Add(values)
            Dim page As PdfPage = doc.Pages.Add()
            Dim top As PdfPageTemplateElement = New PdfPageTemplateElement(rect)
            Dim table As PdfLightTable = New PdfLightTable()
            ' Subscribe the begin row event 
            AddHandler table.BeginRowLayout, AddressOf table_BeginRowLayout
            table.DataSource = dataTable
            table.Style.CellPadding = 16
            ' Draws the table in page
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
             ' Begin Row Event Handler 
            Private Sub table_BeginRowLayout(ByVal sender As Object, ByVal args As BeginRowLayoutEventArgs)
              If args.RowIndex = 1 Then
                Dim table As PdfLightTable = CType(sender, PdfLightTable)
                Dim count As Integer = table.Columns.Count
                Dim spanMap() As Integer = New Integer(count - 1){}
                ' Set just spanned cells. Other values are not important except negatives that are not allowed.
                spanMap(0) = 2
                spanMap(1) = 3
                args.ColumnSpanMap = spanMap
                'Sets row height.
                args.MinimalHeight = 30f
              End If
            End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Tables.BeginRowLayoutEventArgs.#ctor(System.Int32,Syncfusion.Pdf.Tables.PdfCellStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:StartRowLayoutEventArgs"/> class.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="cellStyle">The cell style.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.BeginRowLayoutEventArgs.RowIndex">
            <summary>
            Gets the index of the row.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.BeginRowLayoutEventArgs.CellStyle">
            <summary>
            Gets or sets the cell style.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.BeginRowLayoutEventArgs.ColumnSpanMap">
            <summary>
            Gets or sets the span map.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.BeginRowLayoutEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether table drawing should stop.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.BeginRowLayoutEventArgs.Skip">
            <summary>
            Gets or sets a value indicating whether this row should be ignored.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.BeginRowLayoutEventArgs.IgnoreColumnFormat">
            <summary>
            Gets or sets a value indicating whether column string format should be ignored.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.BeginRowLayoutEventArgs.MinimalHeight">
            <summary>
            Sets the minimal height of the row.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.EndRowLayoutEventArgs">
            <summary>
            Represents arguments of EndRowLayoutEvent.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            RectangleF rect = new RectangleF(0, 0, 500, 50);
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Roll Number", "Student Name" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Cris" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Clay" };
            dataTable.Rows.Add(values);
            PdfPage page = doc.Pages.Add();
            PdfPageTemplateElement top = new PdfPageTemplateElement(rect);
            PdfLightTable table = new PdfLightTable();
            // Subscribe the end row event 
            table.EndRowLayout += new EndRowLayoutEventHandler(table_EndRowLayout);
            table.DataSource = dataTable;
            table.Style.CellPadding = 16;
            // Draws the table in page
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
                // End Row Event Handler 
            void table_EndRowLayout(object sender, EndRowLayoutEventArgs args)
            {
               if (args.RowIndex == 1)
               {
                  // Cancel property used to cancel the table rendering operation
                  args.Cancel = true;
               }
            }
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim rect As RectangleF = New RectangleF(0, 0, 500, 50)
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Roll Number", "Student Name" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Cris" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Clay" }
            dataTable.Rows.Add(values)
            Dim page As PdfPage = doc.Pages.Add()
            Dim top As PdfPageTemplateElement = New PdfPageTemplateElement(rect)
            Dim table As PdfLightTable = New PdfLightTable()
            ' Subscribe the end row event 
             AddHandler table.EndRowLayout, AddressOf table_EndRowLayout
            table.DataSource = dataTable
            table.Style.CellPadding = 16
            ' Draws the table in page
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
             ' Eegin Row Event Handler 
            Private Sub table_EndRowLayout(ByVal sender As Object, ByVal args As EndRowLayoutEventArgs)
              If args.RowIndex = 1 Then
                 ' Cancel property used to cancel the table rendering operation
                 args.Cancel = True
               End If
             End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Tables.EndRowLayoutEventArgs.#ctor(System.Int32,System.Boolean,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:EndRowLayoutEventArgs"/> class.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="drawnCompletely">if set to <c>true</c> the row was drawn completely.</param>
            <param name="rowBounds">The row bounds.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.EndRowLayoutEventArgs.RowIndex">
            <summary>
            Gets the index of the row.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.EndRowLayoutEventArgs.LayoutCompleted">
            <summary>
            Gets a value indicating whether the row was drawn completely
            (nothing should be printed on the next page).
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.EndRowLayoutEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this row should be the last one printed.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.EndRowLayoutEventArgs.Bounds">
            <summary>
            Gets or sets the row bounds.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.CellLayoutEventArgs">
            <summary>
            The base class for cell layout arguments.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Tables.CellLayoutEventArgs.#ctor(Syncfusion.Pdf.Graphics.PdfGraphics,System.Int32,System.Int32,System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StartCellLayoutEventArgs"/> class.
            </summary>
            <param name="graphics">The graphics, on which the cell should be drawn.</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="cellInder">The cell inder.</param>
            <param name="bounds">The bounds of the cell.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.CellLayoutEventArgs.RowIndex">
            <summary>
            Gets the index of the row.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.CellLayoutEventArgs.CellIndex">
            <summary>
            Gets the index of the cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.CellLayoutEventArgs.Value">
            <summary>
            Gets the value.
            </summary>
            <remarks>The value might be null or an empty string,
            which means that either no text were acquired or all
            text was on the previous page.</remarks>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.CellLayoutEventArgs.Bounds">
            <summary>
            Gets the bounds of the cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.CellLayoutEventArgs.Graphics">
            <summary>
            Gets the graphics, on which the cell should be drawn.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.BeginCellLayoutEventArgs">
            <summary>
            Represents arguments of StartCellLayout Event.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            RectangleF rect = new RectangleF(0, 0, 500, 50);
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Roll Number", "Student Name" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Cris" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Clay" };
            dataTable.Rows.Add(values);
            PdfPage page = doc.Pages.Add();
            PdfPageTemplateElement top = new PdfPageTemplateElement(rect);
            PdfLightTable table = new PdfLightTable();
            // Subscribe the cell layout event 
            table.BeginCellLayout += new BeginCellLayoutEventHandler(table_BeginCellLayout);
            table.DataSource = dataTable;
            table.Style.CellPadding = 16;
            // Draws the table in page
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            // Cell layout event handler
            void table_BeginCellLayout(object sender, BeginCellLayoutEventArgs args)
            {
              if (args.RowIndex == 1)
              {
                args.Graphics.DrawRectangle(new PdfPen(PdfBrushes.Red, 2), PdfBrushes.White,args.Bounds);
              }
            }       
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim rect As RectangleF = New RectangleF(0, 0, 500, 50)
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Roll Number", "Student Name" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Cris" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Clay" }
            dataTable.Rows.Add(values)
            Dim page As PdfPage = doc.Pages.Add()
            Dim top As PdfPageTemplateElement = New PdfPageTemplateElement(rect)
            Dim table As PdfLightTable = New PdfLightTable()
            ' Subscribe the cell layout event 
            AddHandler table.BeginCellLayout, AddressOf table_BeginCellLayout
            table.DataSource = dataTable
            table.Style.CellPadding = 16
            ' Draws the table in page
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            ' Cell layout event handler
            Private Sub table_BeginCellLayout(ByVal sender As Object, ByVal args As BeginCellLayoutEventArgs)
              If args.RowIndex = 1 Then
                 args.Graphics.DrawRectangle(New PdfPen(PdfBrushes.Red, 2), PdfBrushes.White,args.Bounds)
              End If
            End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Tables.BeginCellLayoutEventArgs.#ctor(Syncfusion.Pdf.Graphics.PdfGraphics,System.Int32,System.Int32,System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StartCellLayoutEventArgs"/> class.
            </summary>
            <param name="graphics">The graphics, on which the cell should be drawn.</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="cellInder">The cell inder.</param>
            <param name="bounds">The bounds of the cell.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.BeginCellLayoutEventArgs.Skip">
            <summary>
            Gets or sets a value indicating whether the value of this cell should be skipped.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.EndCellLayoutEventArgs">
            <summary>
            Represents arguments of EndCellLayout Event.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            RectangleF rect = new RectangleF(0, 0, 500, 50);
            //Create DataTable for source
            DataTable dataTable = new DataTable("myTable");
            dataTable.Columns.Add("ID1");
            dataTable.Columns[0].Caption = "id";
            dataTable.Columns.Add("ID2");
            object[] values = new object[] { "Roll Number", "Student Name" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Cris" };
            dataTable.Rows.Add(values);
            values = new object[] { "011", "Clay" };
            dataTable.Rows.Add(values);
            PdfPage page = doc.Pages.Add();
            PdfPageTemplateElement top = new PdfPageTemplateElement(rect);
            PdfLightTable table = new PdfLightTable();
            // Subscribe the cell layout event 
            table.EndCellLayout += new EndCellLayoutEventHandler(table_EndCellLayout);
            table.DataSource = dataTable;
            table.Style.CellPadding = 16;
            // Draws the table in page
            table.Draw(page.Graphics);
            doc.Save("Tables.pdf");
            // Cell layout event handler
            void table_EndCellLayout(object sender, EndCellLayoutEventArgs args)
            {
              if (args.RowIndex == 1)
              {
                args.Graphics.DrawRectangle(new PdfPen(PdfBrushes.Red, 2), PdfBrushes.White, args.Bounds);
              }
            }
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim rect As RectangleF = New RectangleF(0, 0, 500, 50)
            'Create DataTable for source
            Dim dataTable As DataTable = New DataTable("myTable")
            dataTable.Columns.Add("ID1")
            dataTable.Columns(0).Caption = "id"
            dataTable.Columns.Add("ID2")
            Dim values() As Object = New Object() { "Roll Number", "Student Name" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Cris" }
            dataTable.Rows.Add(values)
            values = New Object() { "011", "Clay" }
            dataTable.Rows.Add(values)
            Dim page As PdfPage = doc.Pages.Add()
            Dim top As PdfPageTemplateElement = New PdfPageTemplateElement(rect)
            Dim table As PdfLightTable = New PdfLightTable()
            ' Subscribe the cell layout event 
            AddHandler table.EndCellLayout, AddressOf table_EndCellLayout
            table.DataSource = dataTable
            table.Style.CellPadding = 16
            ' Draws the table in page
            table.Draw(page.Graphics)
            doc.Save("Tables.pdf")
            ' Cell layout event handler
            Private Sub table_EndCellLayout(ByVal sender As Object, ByVal args As EndCellLayoutEventArgs)
              If args.RowIndex = 1 Then
                args.Graphics.DrawRectangle(New PdfPen(PdfBrushes.Red, 2), PdfBrushes.White, args.Bounds)
              End If
            End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfLightTable"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Tables.EndCellLayoutEventArgs.#ctor(Syncfusion.Pdf.Graphics.PdfGraphics,System.Int32,System.Int32,System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EndCellLayoutEventArgs"/> class.
            </summary>
            <param name="graphics">The graphics, on which the cell should be drawn.</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="cellInder">The cell inder.</param>
            <param name="bounds">The bounds of the cell.</param>
            <param name="value">The value.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Tables.QueryNextRowEventArgs" -->
        <member name="M:Syncfusion.Pdf.Tables.QueryNextRowEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NextRowEventArgs"/> class.
            </summary>
            <param name="columnCount">The column count.</param>
            <param name="rowIndex">Index of the row.</param>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.QueryNextRowEventArgs.RowData">
            <summary>
            Gets or sets the row data.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.QueryNextRowEventArgs.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.QueryNextRowEventArgs.RowIndex">
            <summary>
            Gets the index of the row.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Tables.QueryColumnCountEventArgs" -->
        <member name="M:Syncfusion.Pdf.Tables.QueryColumnCountEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GettingColumnNumberEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.QueryColumnCountEventArgs.ColumnCount">
            <summary>
            Gets or sets the column number.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Tables.QueryRowCountEventArgs" -->
        <member name="M:Syncfusion.Pdf.Tables.QueryRowCountEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GettingColumnNumberEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Tables.QueryRowCountEventArgs.RowCount">
            <summary>
            Gets or sets the column number.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.PdfHeaderSource">
            <summary>
            Specifies values specifying where the header should formed from.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            PdfPage page = doc.Pages.Add();
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Create new Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));
            table.Style.HeaderSource = PdfHeaderSource.ColumnCaptions;
            // Add new Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Setting the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Create new Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            table.Style.HeaderSource = PdfHeaderSource.ColumnCaptions
            ' Add new Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> Class  
        </member>
        <member name="F:Syncfusion.Pdf.Tables.PdfHeaderSource.ColumnCaptions">
            <summary>
            The header is formed from column captions' values.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.PdfHeaderSource.Rows">
            <summary>
            The header is formed from rows.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Tables.PdfLightTableDataSourceType">
            <summary>
            Specifies the datasource type.
            </summary>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();
            PdfPage page = doc.Pages.Add();
            PdfLightTable table = new PdfLightTable();
            // Set the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect;
            // Create new Columns
            table.Columns.Add(new PdfColumn("Roll Number"));
            table.Columns.Add(new PdfColumn("Name"));
            table.Columns.Add(new PdfColumn("Class"));
            table.Style.BorderOverlapStyle = PdfBorderOverlapStyle.Inside;
            // Add new Rows
            table.Rows.Add(new object[] { "111", "Maxim", "III" });
            // Draws the table 
            table.Draw(page, new PointF(0, 0));
            doc.Save("Tables.pdf");
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim page As PdfPage = doc.Pages.Add()
            Dim table As PdfLightTable = New PdfLightTable()
            ' Setting the DataSourceType as Direct
            table.DataSourceType = PdfLightTableDataSourceType.TableDirect
            ' Create new Columns
            table.Columns.Add(New PdfColumn("Roll Number"))
            table.Columns.Add(New PdfColumn("Name"))
            table.Columns.Add(New PdfColumn("Class"))
            table.Style.BorderOverlapStyle = PdfBorderOverlapStyle.Inside
            ' Add new Rows
            table.Rows.Add(New Object() { "111", "Maxim", "III" })
            ' Draws the table 
            table.Draw(page, New PointF(0, 0))
            doc.Save("Tables.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.Pdf.Tables.PdfColumn"/> Class  
        </member>
        <member name="F:Syncfusion.Pdf.Tables.PdfLightTableDataSourceType.External">
            <summary>
            Specifies that the PdfLightTable has been binded to an external datasource.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Tables.PdfLightTableDataSourceType.TableDirect">
            <summary>
            Specifies that the values are directly binded to the PdfLightTable.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.PdfBorderOverlapStyle" -->
        <member name="F:Syncfusion.Pdf.PdfBorderOverlapStyle.Overlap">
            <summary>
            Cell borders overlap (are drawn using the same coordinates).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfBorderOverlapStyle.Inside">
            <summary>
            Cell borders are drawns in the cell's interior.
            </summary>
        </member>
        <member name="M:System.Drawing.PointF.#cctor">
            <summary>
            Initializes the <see cref="T:System.Drawing.PointF"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.PointF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.PointF"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:System.Drawing.PointF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:System.Drawing.PointF.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:System.Drawing.PointF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:System.Drawing.PointF.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:System.Drawing.PointF.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>The Y.</value>
        </member>
        <member name="M:System.Drawing.RectangleF.#cctor">
            <summary>
            Initializes the <see cref="T:System.Drawing.RectangleF"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.RectangleF"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:System.Drawing.RectangleF.#ctor(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.RectangleF"/> class.
            </summary>
            <param name="location">The location.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:System.Drawing.RectangleF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:System.Drawing.RectangleF.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:System.Drawing.RectangleF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:System.Drawing.RectangleF.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Froms the LTRB.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <returns></returns>
        </member>
        <member name="P:System.Drawing.RectangleF.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:System.Drawing.RectangleF.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>The Y.</value>
        </member>
        <member name="P:System.Drawing.RectangleF.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:System.Drawing.RectangleF.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:System.Drawing.RectangleF.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:System.Drawing.RectangleF.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:System.Drawing.RectangleF.Left">
            <summary>
            Gets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:System.Drawing.RectangleF.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:System.Drawing.RectangleF.Right">
            <summary>
            Gets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:System.Drawing.RectangleF.Bottom">
            <summary>
            Gets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="M:System.Drawing.SizeF.#cctor">
            <summary>
            Initializes the <see cref="T:System.Drawing.SizeF"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.SizeF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.SizeF"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:System.Drawing.SizeF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:System.Drawing.SizeF.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:System.Drawing.SizeF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:System.Drawing.SizeF.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:System.Drawing.SizeF.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="M:System.Drawing.Point.#cctor">
            <summary>
            Initializes the <see cref="T:System.Drawing.PointF"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.PointF"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:System.Drawing.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:System.Drawing.Point.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:System.Drawing.Point.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:System.Drawing.Point.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:System.Drawing.Point.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>The Y.</value>
        </member>
        <member name="M:System.Drawing.Rectangle.#cctor">
            <summary>
            Initializes the <see cref="T:System.Drawing.RectangleF"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.RectangleF"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:System.Drawing.Rectangle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:System.Drawing.Rectangle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:System.Drawing.Rectangle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:System.Drawing.Rectangle.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Froms the LTRB.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <returns></returns>
        </member>
        <member name="P:System.Drawing.Rectangle.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:System.Drawing.Rectangle.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>The Y.</value>
        </member>
        <member name="P:System.Drawing.Rectangle.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:System.Drawing.Rectangle.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:System.Drawing.Rectangle.Left">
            <summary>
            Gets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:System.Drawing.Rectangle.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:System.Drawing.Rectangle.Right">
            <summary>
            Gets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:System.Drawing.Rectangle.Bottom">
            <summary>
            Gets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="M:System.Drawing.Size.#cctor">
            <summary>
            Initializes the <see cref="T:System.Drawing.SizeF"/> class.
            </summary>
        </member>
        <member name="M:System.Drawing.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.SizeF"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:System.Drawing.Size.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:System.Drawing.Size.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:System.Drawing.Size.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:System.Drawing.Size.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:System.Drawing.Size.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="T:Syncfusion.PdfBaseAssembly">
            <exclude/>
            <summary>
            This class holds the name of the Syncfusion.Pdf.Base assembly and provides a helper
            routine that helps with resolving types when loading a serialization stream and when
            the framework probes for assemblies by reflection.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfBaseAssembly.RootNamespace">
             <property name="flag" value="Finished" />
            
             <summary>
             The root namespace of this assembly. Used internally for
             locating resources within the assembly.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfBaseAssembly.Name">
             <property name="flag" value="Finished" />
            
             <summary>
             The full name of this assembly without version information: "Syncfusion.Pdf.Base".
             </summary>
        </member>
        <member name="F:Syncfusion.PdfBaseAssembly.Assembly">
             <property name="flag" value="Finished"/>
            
             <summary>
             A reference to the <see cref="T:System.Reflection.Assembly"/>
             for the grid assembly.
             </summary>
        </member>
        <member name="T:Syncfusion.Compression.ChecksumCalculator">
            <summary>
            Checksum calculator, based on Adler32 algorithm.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.ChecksumCalculator.DEF_CHECKSUM_BIT_OFFSET">
            <summary>
            Bits offset, used in adler checksum calculation.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.ChecksumCalculator.DEF_CHECKSUM_BASE">
            <summary>
            Lagrest prime, less than 65535
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.ChecksumCalculator.DEF_CHECKSUM_ITERATIONSCOUNT">
            <summary>
            Count of iteration used in calculated of the adler checksumm.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.ChecksumCalculator.ChecksumUpdate(System.Int64@,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates checksum by calculating checksum of the 
            given buffer and adding it to current value.
            </summary>
            <param name="checksum">Current checksum.</param>
            <param name="buffer">Data byte array.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="length">Length of data to be used from the stream.</param>
        </member>
        <member name="M:Syncfusion.Compression.ChecksumCalculator.ChecksumGenerate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Generates checksum by calculating checksum of the 
            given buffer.
            </summary>
            <param name="buffer">Data byte array.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="length">Length of data to be used from the stream.</param>
        </member>
        <member name="T:Syncfusion.Compression.CompressedStreamReader">
            <summary>
            Reader, that reads stream with compressed data
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HEADER_METHOD_MASK">
            <summary>
            Mask for compression method to be decoded from 16-bit header.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HEADER_INFO_MASK">
            <summary>
            Mask for compression info to be decoded from 16-bit header.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HEADER_FLAGS_FCHECK">
            <summary>
            Mask for check bits to be decoded from 16-bit header.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HEADER_FLAGS_FDICT">
            <summary>
            Mask for dictionary presence to be decoded from 16-bit header.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HEADER_FLAGS_FLEVEL">
            <summary>
            Mask for compression level to be decoded from 16-bit header.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_MAX_WINDOW_SIZE">
            <summary>
            Maximum size of the data window.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HUFFMAN_REPEATE_MAX">
            <summary>
            Maximum length of the repeatable block.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HUFFMAN_END_BLOCK">
            <summary>
            End of the block sign.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HUFFMAN_LENGTH_MINIMUM_CODE">
            <summary>
            Minimal length code.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HUFFMAN_LENGTH_MAXIMUM_CODE">
            <summary>
            Maximal length code.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HUFFMAN_DISTANCE_MAXIMUM_CODE">
            <summary>
            Maximal distance code.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HUFFMAN_DYNTREE_REPEAT_MINIMUMS">
            <summary>
            Minimum count of repetions.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HUFFMAN_DYNTREE_REPEAT_BITS">
            <summary>
            Bits, that responds for different repetion modes.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HUFFMAN_REPEAT_LENGTH_BASE">
            <summary>
            Length bases.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HUFFMAN_REPEAT_LENGTH_EXTENSION">
            <summary>
            Length extended bits count.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HUFFMAN_REPEAT_DISTANCE_BASE">
            <summary>
            Distance bases.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.DEF_HUFFMAN_REPEAT_DISTANCE_EXTENSION">
            <summary>
            Distance extanded bits count.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_InputStream">
            <summary>
            Input stream.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_CheckSum">
            <summary>
            Currently calculated checksum, 
            based on Adler32 algorithm.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_Buffer">
            <summary>
            Currently read 4 bytes.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_BufferedBits">
            <summary>
            Count of bits that are in buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_temp_buffer">
            <summary>
            Temporary buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_Block_Buffer">
            <summary>
            32k buffer for unpacked data.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_bNoWrap">
            <summary>
            No wrap mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_WindowSize">
            <summary>
            Window size, can not be larger than 32k.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_CurrentPosition">
            <summary>
            Current position in output stream.
            Current in-block position can be extracted by applying Int16.MaxValue mask.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_DataLength">
            <summary>
            Data length.
            Current in-block position can be extracted by applying Int16.MaxValue mask.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_bReadingUncompressed">
            <summary>
            Sign of uncompressed data reading.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_UncompressedDataLength">
            <summary>
            Size of the block with uncompressed data.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_bCanReadNextBlock">
            <summary>
            Specifies wheather next block can to be read.
            Reading can be denied because the header of the last block have been read.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_bCanReadMoreData">
            <summary>
            Specifies wheather user can read more data from stream.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_CurrentLengthTree">
            <summary>
            Current lengths huffman tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_CurrentDistanceTree">
            <summary>
            Current distances huffman tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamReader.m_bCheckSumRead">
            <summary>
            Specifies wheather checksum has been read.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.#ctor(System.IO.Stream)">
            <summary>
            TODO: place correct comment here
            </summary>
            <param name="stream"/>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Creates new reader for streams with compressed data.
            </summary>
            <param name="stream"></param>
            <param name="bNoWrap"></param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.ChecksumReset">
            <summary>
            Resets current checksum to 1.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.ChecksumUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates checksum by calculating checksum of the 
            given buffer and adding it to current value.
            </summary>
            <param name="buffer">Data byte array.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="length">Length of data to be used from the stream.</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.SkipToBoundary">
            <summary>
            Discards left-most partially used byte.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.ReadPackedBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads array of bytes.
            </summary>
            <param name="buffer">Output buffer.</param>
            <param name="offset">Offset in output buffer.</param>
            <param name="length">Length of the data to be read.</param>
            <returns>Count of bytes actually read to the buffer.</returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.FillBuffer">
            <summary>
            Fill`s empty parts of the buffer.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.PeekBits(System.Int32)">
            <summary>
            Reads specified count of bits without adjusting position.
            </summary>
            <param name="count">Count of bits to be read.</param>
            <returns>Read value.</returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.SkipBits(System.Int32)">
            <summary>
            Skips specified count of bits.
            </summary>
            <param name="count">Count of bits to be skipped.</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.ReadBits(System.Int32)">
            <summary>
            Reads specified count of bits from stream.
            </summary>
            <param name="count">Count of bits to be read.</param>
            <returns>
            TODO: place correct comment here
            </returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.ReadInt16">
            <summary>
            TODO: place correct comment here
            </summary>
            <returns>
            TODO: place correct comment here
            </returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.ReadInt16Inverted">
            <summary>
            TODO: place correct comment here
            </summary>
            <returns>
            TODO: place correct comment here
            </returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.ReadInt32">
            <summary>
            TODO: place correct comment here
            </summary>
            <returns>
            TODO: place correct comment here
            </returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.ReadZLibHeader">
            <summary>
            Reads ZLib header with compression method and flags.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.BitsToString(System.Int32,System.Int32)">
            <summary>
            TODO: place correct comment here
            </summary>
            <returns>
            TODO: place correct comment here
            </returns>
            <param name="bits"/>
            <param name="count"/>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.DecodeDynHeader(Syncfusion.Compression.DecompressorHuffmanTree@,Syncfusion.Compression.DecompressorHuffmanTree@)">
            <summary>
            Reades dynamic huffman codes from block header.
            </summary>
            <param name="lengthTree">Literals/Lengths tree.</param>
            <param name="distanceTree">Distances tree.</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.DecodeBlockHeader">
            <summary>
            Reads and decodes block of data.
            </summary>
            <returns>True if buffer was empty and new data was read, otherwise - False.</returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.ReadHuffman">
            <summary>
            Decodes huffman codes.
            </summary>
            <returns>True if some data was read.</returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data to buffer.
            </summary>
            <param name="buffer">Output buffer for data.</param>
            <param name="offset">Offset in output data.</param>
            <param name="length">Length of the data to be read.</param>
            <returns>Count of bytes actually read.</returns>
        </member>
        <member name="P:Syncfusion.Compression.CompressedStreamReader.AvailableBits">
            <summary>
            GET count of bits available
            </summary>
        </member>
        <member name="P:Syncfusion.Compression.CompressedStreamReader.AvailableBytes">
            <summary>
            Get count of full bytes available.
            </summary>
        </member>
        <member name="T:Syncfusion.Compression.CompressionLevel">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressionLevel.NoCompression">
            <summary>
            Pack without compression
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressionLevel.BestSpeed">
            <summary>
            Use high speed compression, reduce of data size is low
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressionLevel.BelowNormal">
            <summary>
            Something middle between normal and BestSpeed compressions
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressionLevel.Normal">
            <summary>
            Use normal compression, middle between speed and size
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressionLevel.AboveNormal">
            <summary>
            Pack better but require a little more time
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressionLevel.Best">
            <summary>
            Use best compression, slow enough
            </summary>
        </member>
        <member name="T:Syncfusion.Compression.CompressedStreamWriter">
            <summary>
            Represents the compressed stream writer
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.DEF_ZLIB_HEADER_TEMPLATE">
            <summary>
            Start template of the zlib header.
            </summary>                               
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.DEFAULT_MEM_LEVEL">
            <summary>
            Memory usage level.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.DEF_PENDING_BUFFER_SIZE">
            <summary>
            Size of the pending buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.DEF_HUFFMAN_BUFFER_SIZE">
            <summary>
            Size of the buffer for the huffman encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.DEF_HUFFMAN_LITERAL_ALPHABET_LENGTH">
            <summary>
            Length of the literal alphabet(literal+lengths).
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.DEF_HUFFMAN_DISTANCES_ALPHABET_LENGTH">
            <summary>
            Distances alphabet length.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.DEF_HUFFMAN_BITLEN_TREE_LENGTH">
            <summary>
            Length of the code-lengths tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.DEF_HUFFMAN_ENDBLOCK_SYMBOL">
            <summary>
            Code of the symbol, than means the end of the block.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.WSIZE">
            <summary>
            Maximum window size.
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_stream">
            <summary>
            Output stream.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_PendingBuffer">
            <summary>
            Pending buffer for writing.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_PendingBufferLength">
            <summary>
            Length of the unflushed data.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_PendingBufferBitsCache">
            <summary>
            Bits cache for pending buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_PendingBufferBitsInCache">
            <summary>
            Count of bits in pending buffer cache.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_bNoWrap">
            <summary>
            If true, no zlib header will be written to the stream.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_CheckSum">
            <summary>
            Current checksum.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_Level">
            <summary>
            Current compression level.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_treeLiteral">
            <summary>
            Current tree for literals.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_treeDistances">
            <summary>
            Current tree for distances.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_treeCodeLengths">
            <summary>
            Current tree for code lengths.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_iBufferPosition">
            <summary>
            Current position in literals and distances buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_arrLiteralsBuffer">
            <summary>
            Recorded literals buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_arrDistancesBuffer">
            <summary>
            Recorded distances buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_iExtraBits">
            <summary>
            Count of the extra bits.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_arrLiteralCodes">
            <summary>
            Static array of the literal codes.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_arrLiteralLengths">
            <summary>
            Static array of the lengths of the literal codes.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_arrDistanceCodes">
            <summary>
            Static array of the distance codes.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_arrDistanceLengths">
            <summary>
            Static array of the lengths of the distance codes.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_bStreamClosed">
            <summary>
            If true, no futher writings can be performed.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_CurrentHash">
            <summary>
            Current hash.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_HashHead">
            <summary>
            Hash m_HashHead.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_HashPrevious">
            <summary>
            Previous hashes.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_MatchStart">
            <summary>
            Start of the matched part.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_MatchLength">
            <summary>
            Length of the matched part.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_MatchPreviousAvailable">
            <summary>
            Previous match available.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_BlockStart">
            <summary>
            Start of the data window.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_StringStart">
            <summary>
            String start in data window.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_LookAhead">
            <summary>
            Lookahead.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_DataWindow">
            <summary>
            Data window.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_MaximumChainLength">
            <summary>
            Maximum chain length.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_MaximumLazySearch">
            <summary>
            Maximum distance of the search with "lazy" algotithm.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_NiceLength">
            <summary>
            Nice length of the block.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_GoodLength">
            <summary>
            Good length of the block.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_CompressionFunction">
            <summary>
            Current compression function.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_InputBuffer">
            <summary>
            Current block of the data to be compressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_TotalBytesIn">
            <summary>
            Total count of bytes, that were compressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_InputOffset">
            <summary>
            Offset in the input buffer, where input starts.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_InputEnd">
            <summary>
            Offset in the input buffer, where input ends.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.m_bCloseStream">
            <summary>
            If true, stream will be closed after the last block.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.#cctor">
            <summary>
            Initializes statical data for huffman compression.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.#ctor(System.IO.Stream,System.Boolean,Syncfusion.Compression.CompressionLevel,System.Boolean)">
            <summary>
            Initializes compressor and writes ZLib header if needed.
            </summary>
            <param name="outputStream">Output stream.</param>
            <param name="bNoWrap">If true, ZLib header and checksum will not be written.</param>
            <param name="level">Compression level.</param>
            <param name="bCloseStream">If true, output stream will be closed after the last block has been written.</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes compressor and writes ZLib header if needed.
            Compression level is set to normal.
            </summary>
            <param name="outputStream">Output stream.</param>
            <param name="bNoWrap">If true, ZLib header and checksum will not be written.</param>
            <param name="bCloseStream">If true, output stream will be closed after the last block has been written.</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.#ctor(System.IO.Stream,Syncfusion.Compression.CompressionLevel,System.Boolean)">
            <summary>
            Initializes compressor and writes ZLib header.
            </summary>
            <param name="outputStream">Output stream.</param>
            <param name="level">Compression level.</param>
            <param name="bCloseStream">If true, output stream will be closed after the last block has been written.</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes compressor and writes ZLib header.
            </summary>
            <param name="outputStream">Output stream.</param>
            <param name="bCloseStream">If true, output stream will be closed after the last block has been written.</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.Write(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Compresses data and writes it to the stream.
            </summary>
            <param name="data">Data to compress</param>
            <param name="offset">offset in data array</param>
            <param name="length">length of data to compress</param>
            <param name="bCloseAfterWrite">True - write last compress block in stream, 
            otherwise False</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.WriteZLIBHeader">
            <summary>
            Writes ZLib header to stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.SlideWindow">
            <summary>
            Slides current window, and data, associated with it.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.UpdateHash">
            <summary>
            Updates hash.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.InsertString">
            <summary>
            Inserts string to the hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.FindLongestMatch(System.Int32)">
            <summary>
            Searches for the longest match.
            </summary>
            <param name="curMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.SaveStored(System.Boolean,System.Boolean)">
            <summary>
            Store data without compression.
            </summary>
            <param name="flush"></param>
            <param name="finish"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.CompressFast(System.Boolean,System.Boolean)">
            <summary>
            Compress with a maximum speed.
            </summary>
            <param name="flush"></param>
            <param name="finish"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.CompressSlow(System.Boolean,System.Boolean)">
            <summary>
            Compress, using maximum compression level.
            </summary>
            <param name="flush"></param>
            <param name="finish"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.CompressData(System.Boolean)">
            <summary>
            CompressData drives actual compression of data
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.HuffmanReset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.HuffmanLengthCode(System.Int32)">
            <summary>
            Calculates length code from length.
            </summary>
            <param name="len">Length.</param>
            <returns>Length code.</returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.HuffmanDistanceCode(System.Int32)">
            <summary>
            Calculates distance code from distance.
            </summary>
            <param name="distance">Distance.</param>
            <returns>Distance code.</returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.HuffmanSendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>		
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.HuffmanCompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.HuffmanFlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.HuffmanFlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.HuffmanTallyLit(System.Int32)">
            <summary>
            Add literal to buffer.
            </summary>
            <param name="literal"></param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.HuffmanTallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="dist">Distance code</param>
            <param name="len">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.PendingBufferWriteByte(System.Int32)">
            <summary>
            write a byte to buffer
            </summary>
            <param name="b">
            value to write
            </param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.PendingBufferWriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="s">
            value to write
            </param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.PendingBufferWriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.PendingBufferWriteByteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="data">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.PendingBufferAlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.PendingBufferWriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.PendingBufferWriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.PendingBufferFlush">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.PendingBufferFlushBits">
            <summary>
            Flushes fully recorded bytes to buffer array.
            </summary>
            <returns>Count of bytes, added to buffer.</returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressedStreamWriter.PendingBufferToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            converted buffer contents contents
            </returns>
        </member>
        <member name="P:Syncfusion.Compression.CompressedStreamWriter.TotalIn">
            <summary>
            Total data processed.
            </summary>		
        </member>
        <member name="P:Syncfusion.Compression.CompressedStreamWriter.NeedsInput">
            <summary>
            Return true if input is needed
            </summary>		
        </member>
        <member name="P:Syncfusion.Compression.CompressedStreamWriter.HuffmanIsFull">
            <summary>
            Checks, wheather huffman compression buffer is full.
            </summary>
            <returns>True if buffer is full.</returns>
        </member>
        <member name="P:Syncfusion.Compression.CompressedStreamWriter.PendingBufferBitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:Syncfusion.Compression.CompressedStreamWriter.PendingBufferIsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="T:Syncfusion.Compression.CompressedStreamWriter.BlockType">
            <summary>
            Type of the block.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.BlockType.Stored">
            <summary>
            Data simply stored as is
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.BlockType.FixedHuffmanCodes">
            <summary>
            An option to use Fixed Huffman tree codes
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressedStreamWriter.BlockType.DynamicHuffmanCodes">
            <summary>
            An option to use Dynamically built Huffman codes
            </summary>
        </member>
        <member name="T:Syncfusion.Compression.CompressorHuffmanTree">
            <summary>
            Represents the Huffman Tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressorHuffmanTree.m_CodeFrequences">
            <summary>
            Frequences of the codes.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressorHuffmanTree.m_Codes">
            <summary>
            Codes itself.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressorHuffmanTree.m_CodeLengths">
            <summary>
            Bit counts, needed to encode different codes.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressorHuffmanTree.m_LengthCounts">
            <summary>
            Count of codes with some lengths.
            Index - length, value - count.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressorHuffmanTree.m_CodeMinimumCount">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressorHuffmanTree.m_CodeCount">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressorHuffmanTree.m_MaximumLength">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.CompressorHuffmanTree.m_Writer">
            <summary>
            Data compressor.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressorHuffmanTree.#ctor(Syncfusion.Compression.CompressedStreamWriter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new Huffman tree
            </summary>
            <param name="writer"/>
            <param name="iElementsCount"/>
            <param name="iMinimumCodes"/>
            <param name="iMaximumLength"/>
        </member>
        <member name="M:Syncfusion.Compression.CompressorHuffmanTree.Reset">
            <summary>
            Resets all code data in tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressorHuffmanTree.WriteCodeToStream(System.Int32)">
            <summary>
            Writes code to the compressor output stream.
            </summary>
            <param name="code">Code to be written.</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressorHuffmanTree.CheckEmpty">
            <summary>
            Checks wheather tree is empty.
            If tree is not empty, then exception will be raised.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressorHuffmanTree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Specifies new arrays of codes and their lengths.
            </summary>
            <param name="codes">Array of codes.</param>
            <param name="lengths">Array of code lengths.</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressorHuffmanTree.BuildCodes">
            <summary>
            Calculates codes from their frequences.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressorHuffmanTree.BuildLength(System.Int32[])">
            <summary>
            Build tree with lengths.
            </summary>
            <param name="childs"></param>
        </member>
        <member name="M:Syncfusion.Compression.CompressorHuffmanTree.BuildTree">
            <summary>
            Builds tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.CompressorHuffmanTree.GetEncodedLength">
            <summary>
            Calculates length of the compressed data.
            </summary>
            <returns>Count of bits, the data will occupy.</returns>
        </member>
        <member name="M:Syncfusion.Compression.CompressorHuffmanTree.CalcBLFreq(Syncfusion.Compression.CompressorHuffmanTree)">
            <summary>
            Calculates code frequences.
            </summary>
            <param name="blTree">Tree.</param>
        </member>
        <member name="M:Syncfusion.Compression.CompressorHuffmanTree.WriteTree(Syncfusion.Compression.CompressorHuffmanTree)">
            <summary>
            Writes tree to output stream.
            </summary>
            <param name="blTree">Tree to be written.</param>
        </member>
        <member name="P:Syncfusion.Compression.CompressorHuffmanTree.TreeLength">
            <summary>
            Length of the tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Compression.CompressorHuffmanTree.CodeLengths">
            <summary>
            Lengths of codes in tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Compression.CompressorHuffmanTree.CodeFrequences">
            <summary>
            Code frequences.
            </summary>
        </member>
        <member name="T:Syncfusion.Compression.DecompressorHuffmanTree">
            <summary>
            Huffman tree, used for decompression.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.DecompressorHuffmanTree.MAX_BITLEN">
            <summary>
            Maximum count of bits.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.DecompressorHuffmanTree.m_Tree">
            <summary>
            Build huffman tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.DecompressorHuffmanTree.m_LengthTree">
            <summary>
            Huffman tree for encoding and decoding lengths.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.DecompressorHuffmanTree.m_DistanceTree">
            <summary>
            huffman tree for encoding and decoding distances.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.DecompressorHuffmanTree.#cctor">
            <summary>
            Generates fixed huffman trees.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.DecompressorHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Creates huffman tree.
            </summary>
            <param name="codeLengths"></param>
        </member>
        <member name="M:Syncfusion.Compression.DecompressorHuffmanTree.PrepareData(System.Int32[],System.Int32[],System.Byte[],System.Int32@)">
            <summary>
            Prepares data for generating huffman tree.
            </summary>
            <param name="blCount">Array of counts of each code length.</param>
            <param name="nextCode">Numerical values of the smallest code for each code length.</param>
            <param name="lengths">Array of code lengths.</param>
            <param name="treeSize">Calculated tree size.</param>
            <returns>Code.</returns>
        </member>
        <member name="M:Syncfusion.Compression.DecompressorHuffmanTree.TreeFromData(System.Int32[],System.Int32[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Generates huffman tree.
            </summary>
            <param name="blCount">Array of counts of each code length.</param>
            <param name="nextCode">Numerical values of the smallest code for each code length.</param>
            <param name="code">Precalculated code.</param>
            <param name="lengths">Array of code lengths.</param>
            <param name="treeSize">Calculated size of the tree.</param>
            <returns>Generated tree.</returns>
        </member>
        <member name="M:Syncfusion.Compression.DecompressorHuffmanTree.BuildTree(System.Byte[])">
            <summary>
            Builds huffman tree from array of code lengths.
            </summary>
            <param name="lengths">Array of code lengths.</param>
        </member>
        <member name="M:Syncfusion.Compression.DecompressorHuffmanTree.UnpackSymbol(Syncfusion.Compression.CompressedStreamReader)">
            <summary>
            Reads and decompresses one symbol.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Compression.DecompressorHuffmanTree.LengthTree">
            <summary>
            GET huffman tree for encoding and decoding lengths.
            </summary>
        </member>
        <member name="P:Syncfusion.Compression.DecompressorHuffmanTree.DistanceTree">
            <summary>
            GET huffman tree for encoding and decoding distances.
            </summary>
        </member>
        <member name="T:Syncfusion.Compression.Utils">
            <summary>
            Utility Class
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.Utils.DEF_REVERSE_BITS">
            <summary>
            Bit-indexes for reversing.
            </summary>
        </member>
        <member name="F:Syncfusion.Compression.Utils.DEF_HUFFMAN_DYNTREE_CODELENGTHS_ORDER">
            <summary>
            Code lengths for the code length alphabet.
            </summary>
        </member>
        <member name="M:Syncfusion.Compression.Utils.BitReverse(System.Int32)">
            <summary>
            Reverses bit.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
